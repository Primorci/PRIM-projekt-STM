
PRIM-projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800c750  0800c750  0000d750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb48  0800cb48  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb48  0800cb48  0000db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb50  0800cb50  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb50  0800cb50  0000db50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb54  0800cb54  0000db54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800cb58  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  200002c4  0800ce1c  0000e2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002154  0800ce1c  0000f154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e2e  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a38  00000000  00000000  00023122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00026b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5d  00000000  00000000  00027e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a53a  00000000  00000000  00028ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ed0  00000000  00000000  000431df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa88  00000000  00000000  0005d0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecb37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  000ecb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f2b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c738 	.word	0x0800c738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800c738 	.word	0x0800c738

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LIS3DSH_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LIS3DSH_Init() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
//    HAL_SPI_Transmit(&hspi1, config, 2, HAL_MAX_DELAY);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);   // CS high
	uint8_t config[2];

	// CTRL_REG4: Enable all axes, ODR = 100 Hz
	config[0] = 0x20;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	713b      	strb	r3, [r7, #4]
	config[1] = 0x57; // X, Y, Z enabled + ODR = 100 Hz
 8000eb2:	2357      	movs	r3, #87	@ 0x57
 8000eb4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // CS low
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <LIS3DSH_Init+0x38>)
 8000ebc:	f001 f9b0 	bl	8002220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, config, 2, HAL_MAX_DELAY);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <LIS3DSH_Init+0x3c>)
 8000eca:	f004 f858 	bl	8004f7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);   // CS high
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <LIS3DSH_Init+0x38>)
 8000ed4:	f001 f9a4 	bl	8002220 <HAL_GPIO_WritePin>

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	200003c4 	.word	0x200003c4

08000ee8 <LIS3DSH_ReadWhoAmI>:

uint8_t LIS3DSH_ReadWhoAmI() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
    uint8_t reg_addr = 0x0F | 0x80; // WHO_AM_I register with Read flag
 8000eee:	238f      	movs	r3, #143	@ 0x8f
 8000ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t who_am_i;

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // CS low
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <LIS3DSH_ReadWhoAmI+0x44>)
 8000ef8:	f001 f992 	bl	8002220 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY);
 8000efc:	1df9      	adds	r1, r7, #7
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2201      	movs	r2, #1
 8000f04:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <LIS3DSH_ReadWhoAmI+0x48>)
 8000f06:	f004 f83a 	bl	8004f7e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &who_am_i, 1, HAL_MAX_DELAY);
 8000f0a:	1db9      	adds	r1, r7, #6
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	2201      	movs	r2, #1
 8000f12:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <LIS3DSH_ReadWhoAmI+0x48>)
 8000f14:	f004 f977 	bl	8005206 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);   // CS high
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <LIS3DSH_ReadWhoAmI+0x44>)
 8000f1e:	f001 f97f 	bl	8002220 <HAL_GPIO_WritePin>

    return who_am_i;
 8000f22:	79bb      	ldrb	r3, [r7, #6]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	200003c4 	.word	0x200003c4

08000f34 <LIS3DSH_ReadAcceleration>:

void LIS3DSH_ReadAcceleration(int16_t *x, int16_t *y, int16_t *z) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
    uint8_t reg_addr = 0x28 | 0x80 | 0x40; // Start at OUT_X_L, auto-increment
 8000f40:	23e8      	movs	r3, #232	@ 0xe8
 8000f42:	75fb      	strb	r3, [r7, #23]
    uint8_t data[6]; // 6 bytes for X, Y, Z

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // CS low
 8000f44:	2200      	movs	r2, #0
 8000f46:	2108      	movs	r1, #8
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <LIS3DSH_ReadAcceleration+0x84>)
 8000f4a:	f001 f969 	bl	8002220 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY); // Send register address
 8000f4e:	f107 0117 	add.w	r1, r7, #23
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <LIS3DSH_ReadAcceleration+0x88>)
 8000f5a:	f004 f810 	bl	8004f7e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, 6, HAL_MAX_DELAY);      // Receive 6 bytes
 8000f5e:	f107 0110 	add.w	r1, r7, #16
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	2206      	movs	r2, #6
 8000f68:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <LIS3DSH_ReadAcceleration+0x88>)
 8000f6a:	f004 f94c 	bl	8005206 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);    // CS high
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2108      	movs	r1, #8
 8000f72:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <LIS3DSH_ReadAcceleration+0x84>)
 8000f74:	f001 f954 	bl	8002220 <HAL_GPIO_WritePin>

    // Combine MSB and LSB for each axis
    *x = (int16_t)((data[1] << 8) | data[0]); // X-axis
 8000f78:	7c7b      	ldrb	r3, [r7, #17]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7c3b      	ldrb	r3, [r7, #16]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]); // Y-axis
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7cbb      	ldrb	r3, [r7, #18]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]); // Z-axis
 8000f9c:	7d7b      	ldrb	r3, [r7, #21]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7d3b      	ldrb	r3, [r7, #20]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	801a      	strh	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	200003c4 	.word	0x200003c4

08000fc0 <convert_to_g>:

float convert_to_g(int16_t raw_value, int scale) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]
    switch (scale) {
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3b02      	subs	r3, #2
 8000fd0:	2b0e      	cmp	r3, #14
 8000fd2:	d858      	bhi.n	8001086 <convert_to_g+0xc6>
 8000fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <convert_to_g+0x1c>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08001019 	.word	0x08001019
 8000fe0:	08001087 	.word	0x08001087
 8000fe4:	0800102f 	.word	0x0800102f
 8000fe8:	08001087 	.word	0x08001087
 8000fec:	08001045 	.word	0x08001045
 8000ff0:	08001087 	.word	0x08001087
 8000ff4:	0800105b 	.word	0x0800105b
 8000ff8:	08001087 	.word	0x08001087
 8000ffc:	08001087 	.word	0x08001087
 8001000:	08001087 	.word	0x08001087
 8001004:	08001087 	.word	0x08001087
 8001008:	08001087 	.word	0x08001087
 800100c:	08001087 	.word	0x08001087
 8001010:	08001087 	.word	0x08001087
 8001014:	08001071 	.word	0x08001071
        case 2: return raw_value / 16384.0f;
 8001018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001024:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001098 <convert_to_g+0xd8>
 8001028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102c:	e02d      	b.n	800108a <convert_to_g+0xca>
        case 4: return raw_value / 8192.0f;
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800109c <convert_to_g+0xdc>
 800103e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001042:	e022      	b.n	800108a <convert_to_g+0xca>
        case 6: return raw_value / 5461.0f;
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001050:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80010a0 <convert_to_g+0xe0>
 8001054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001058:	e017      	b.n	800108a <convert_to_g+0xca>
        case 8: return raw_value / 4096.0f;
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010a4 <convert_to_g+0xe4>
 800106a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106e:	e00c      	b.n	800108a <convert_to_g+0xca>
        case 16: return raw_value / 2048.0f;
 8001070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80010a8 <convert_to_g+0xe8>
 8001080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001084:	e001      	b.n	800108a <convert_to_g+0xca>
        default: return 0.0f; // Invalid scale
 8001086:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80010ac <convert_to_g+0xec>
    }
}
 800108a:	eeb0 0a67 	vmov.f32	s0, s15
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	46800000 	.word	0x46800000
 800109c:	46000000 	.word	0x46000000
 80010a0:	45aaa800 	.word	0x45aaa800
 80010a4:	45800000 	.word	0x45800000
 80010a8:	45000000 	.word	0x45000000
 80010ac:	00000000 	.word	0x00000000

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	f5ad 6d04 	sub.w	sp, sp, #2112	@ 0x840
 80010b8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f000 fd85 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 f897 	bl	80011f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010c2:	f000 f8fd 	bl	80012c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 f9dd 	bl	8001484 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ca:	f000 f919 	bl	8001300 <MX_I2C1_Init>
  MX_I2S2_Init();
 80010ce:	f000 f945 	bl	800135c <MX_I2S2_Init>
  MX_I2S3_Init();
 80010d2:	f000 f971 	bl	80013b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80010d6:	f000 f99f 	bl	8001418 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80010da:	f007 ffb3 	bl	8009044 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LIS3DSH_Init();
 80010de:	f7ff fee3 	bl	8000ea8 <LIS3DSH_Init>
  uint8_t who_am_i = LIS3DSH_ReadWhoAmI();
 80010e2:	f7ff ff01 	bl	8000ee8 <LIS3DSH_ReadWhoAmI>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t usbBuff[13]; // rezerviran prostor za podatke katere posljemo preko USB
  usbBuff[0] = 'H';
 80010ec:	2348      	movs	r3, #72	@ 0x48
 80010ee:	f887 3808 	strb.w	r3, [r7, #2056]	@ 0x808
  usbBuff[1] = 'e';
 80010f2:	2365      	movs	r3, #101	@ 0x65
 80010f4:	f887 3809 	strb.w	r3, [r7, #2057]	@ 0x809
  usbBuff[2] = 'l';
 80010f8:	236c      	movs	r3, #108	@ 0x6c
 80010fa:	f887 380a 	strb.w	r3, [r7, #2058]	@ 0x80a
  usbBuff[3] = 'l';
 80010fe:	236c      	movs	r3, #108	@ 0x6c
 8001100:	f887 380b 	strb.w	r3, [r7, #2059]	@ 0x80b
  usbBuff[4] = 'o';
 8001104:	236f      	movs	r3, #111	@ 0x6f
 8001106:	f887 380c 	strb.w	r3, [r7, #2060]	@ 0x80c
  usbBuff[5] = ' ';
 800110a:	2320      	movs	r3, #32
 800110c:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d
  usbBuff[6] = 0x77;   // w
 8001110:	2377      	movs	r3, #119	@ 0x77
 8001112:	f887 380e 	strb.w	r3, [r7, #2062]	@ 0x80e
  usbBuff[7] = 0x6f;   // o
 8001116:	236f      	movs	r3, #111	@ 0x6f
 8001118:	f887 380f 	strb.w	r3, [r7, #2063]	@ 0x80f
  usbBuff[8] = 0x72;   // r
 800111c:	2372      	movs	r3, #114	@ 0x72
 800111e:	f887 3810 	strb.w	r3, [r7, #2064]	@ 0x810
  usbBuff[9] = 0x6c;   // l
 8001122:	236c      	movs	r3, #108	@ 0x6c
 8001124:	f887 3811 	strb.w	r3, [r7, #2065]	@ 0x811
  usbBuff[10] = 0x64;  // d
 8001128:	2364      	movs	r3, #100	@ 0x64
 800112a:	f887 3812 	strb.w	r3, [r7, #2066]	@ 0x812
  usbBuff[11] = 0x0a;  // LF
 800112e:	230a      	movs	r3, #10
 8001130:	f887 3813 	strb.w	r3, [r7, #2067]	@ 0x813
  usbBuff[12] = 0x0d;  // CR
 8001134:	230d      	movs	r3, #13
 8001136:	f887 3814 	strb.w	r3, [r7, #2068]	@ 0x814

  while (1)
  {
//	  CDC_Transmit_FS((uint8_t*)&usbBuff, 13);
//	  HAL_Delay(1000);
	  LIS3DSH_ReadAcceleration(&x, &y, &z);
 800113a:	f607 0202 	addw	r2, r7, #2050	@ 0x802
 800113e:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8001142:	f607 0306 	addw	r3, r7, #2054	@ 0x806
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fef4 	bl	8000f34 <LIS3DSH_ReadAcceleration>

	 // Convert raw data to g-units (assuming ±2g scale here)
	 x_g = convert_to_g(x, 2);
 800114c:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff34 	bl	8000fc0 <convert_to_g>
 8001158:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800115c:	ed83 0a00 	vstr	s0, [r3]
	 y_g = convert_to_g(y, 2);
 8001160:	f9b7 3804 	ldrsh.w	r3, [r7, #2052]	@ 0x804
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <convert_to_g>
 800116c:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001170:	ed83 0a00 	vstr	s0, [r3]
	 z_g = convert_to_g(z, 2);
 8001174:	f9b7 3802 	ldrsh.w	r3, [r7, #2050]	@ 0x802
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff20 	bl	8000fc0 <convert_to_g>
 8001180:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8001184:	ed83 0a00 	vstr	s0, [r3]

	 // Use the data (e.g., print or process it)
	 snprintf((char *)UserTxBufferFS,APP_TX_DATA_SIZE,"X: %.2f g, Y: %.2f g, Z: %.2f g\r",x_g, y_g, z_g);
 8001188:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f7ff f9e3 	bl	8000558 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f7ff f9dc 	bl	8000558 <__aeabi_f2d>
 80011a0:	4680      	mov	r8, r0
 80011a2:	4689      	mov	r9, r1
 80011a4:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f7ff f9d5 	bl	8000558 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4638      	mov	r0, r7
 80011b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011bc:	e9cd 4500 	strd	r4, r5, [sp]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <main+0x13c>)
 80011c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c6:	f009 f975 	bl	800a4b4 <sniprintf>
	 CDC_Transmit_FS(UserTxBufferFS, strlen((char *)UserTxBufferFS));
 80011ca:	463b      	mov	r3, r7
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f857 	bl	8000280 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	463b      	mov	r3, r7
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f007 fff0 	bl	80091c0 <CDC_Transmit_FS>

	 HAL_Delay(100); // Delay for readability
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f000 fd63 	bl	8001cac <HAL_Delay>
	  LIS3DSH_ReadAcceleration(&x, &y, &z);
 80011e6:	bf00      	nop
 80011e8:	e7a7      	b.n	800113a <main+0x8a>
 80011ea:	bf00      	nop
 80011ec:	0800c750 	.word	0x0800c750

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	@ 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 f9cf 	bl	800a5a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <SystemClock_Config+0xc8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <SystemClock_Config+0xc8>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	@ 0x40
 8001224:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <SystemClock_Config+0xc8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <SystemClock_Config+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a20      	ldr	r2, [pc, #128]	@ (80012bc <SystemClock_Config+0xcc>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <SystemClock_Config+0xcc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001264:	23a8      	movs	r3, #168	@ 0xa8
 8001266:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001268:	2304      	movs	r3, #4
 800126a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126c:	2307      	movs	r3, #7
 800126e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f823 	bl	80042c0 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001280:	f000 f9da 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2102      	movs	r1, #2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fa85 	bl	80047b0 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012ac:	f000 f9c4 	bl	8001638 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	@ 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012d6:	2301      	movs	r3, #1
 80012d8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80012da:	23c8      	movs	r3, #200	@ 0xc8
 80012dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80012de:	2305      	movs	r3, #5
 80012e0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fc6d 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80012f4:	f000 f9a0 	bl	8001638 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f000 ff89 	bl	8002254 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f976 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002e0 	.word	0x200002e0
 8001354:	40005400 	.word	0x40005400
 8001358:	000186a0 	.word	0x000186a0

0800135c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <MX_I2S2_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_I2S2_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001382:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <MX_I2S2_Init+0x58>)
 8001384:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_I2S2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_I2S2_Init+0x50>)
 8001394:	2201      	movs	r2, #1
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_I2S2_Init+0x50>)
 800139a:	f001 f89f 	bl	80024dc <HAL_I2S_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f948 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000334 	.word	0x20000334
 80013b0:	40003800 	.word	0x40003800
 80013b4:	00017700 	.word	0x00017700

080013b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_I2S3_Init+0x54>)
 80013be:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <MX_I2S3_Init+0x58>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_I2S3_Init+0x54>)
 80013c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_I2S3_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_I2S3_Init+0x54>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <MX_I2S3_Init+0x54>)
 80013d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_I2S3_Init+0x54>)
 80013e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <MX_I2S3_Init+0x5c>)
 80013e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_I2S3_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_I2S3_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_I2S3_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_I2S3_Init+0x54>)
 80013f8:	f001 f870 	bl	80024dc <HAL_I2S_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001402:	f000 f919 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000037c 	.word	0x2000037c
 8001410:	40003c00 	.word	0x40003c00
 8001414:	00017700 	.word	0x00017700

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_SPI1_Init+0x64>)
 800141e:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <MX_SPI1_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_SPI1_Init+0x64>)
 8001424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_SPI1_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_SPI1_Init+0x64>)
 8001438:	2202      	movs	r2, #2
 800143a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_SPI1_Init+0x64>)
 800143e:	2201      	movs	r2, #1
 8001440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_SPI1_Init+0x64>)
 8001444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SPI1_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_SPI1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SPI1_Init+0x64>)
 8001464:	220a      	movs	r2, #10
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_SPI1_Init+0x64>)
 800146a:	f003 fcff 	bl	8004e6c <HAL_SPI_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001474:	f000 f8e0 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200003c4 	.word	0x200003c4
 8001480:	40013000 	.word	0x40013000

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	@ 0x30
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b61      	ldr	r3, [pc, #388]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a60      	ldr	r2, [pc, #384]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a59      	ldr	r2, [pc, #356]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a52      	ldr	r2, [pc, #328]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a44      	ldr	r2, [pc, #272]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a3d      	ldr	r2, [pc, #244]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <MX_GPIO_Init+0x1a0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2108      	movs	r1, #8
 8001546:	4838      	ldr	r0, [pc, #224]	@ (8001628 <MX_GPIO_Init+0x1a4>)
 8001548:	f000 fe6a 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2101      	movs	r1, #1
 8001550:	4836      	ldr	r0, [pc, #216]	@ (800162c <MX_GPIO_Init+0x1a8>)
 8001552:	f000 fe65 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800155c:	4834      	ldr	r0, [pc, #208]	@ (8001630 <MX_GPIO_Init+0x1ac>)
 800155e:	f000 fe5f 	bl	8002220 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001562:	2304      	movs	r3, #4
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	482c      	ldr	r0, [pc, #176]	@ (8001628 <MX_GPIO_Init+0x1a4>)
 8001576:	f000 fccf 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800157a:	2308      	movs	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4825      	ldr	r0, [pc, #148]	@ (8001628 <MX_GPIO_Init+0x1a4>)
 8001592:	f000 fcc1 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001596:	2332      	movs	r3, #50	@ 0x32
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800159a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	481f      	ldr	r0, [pc, #124]	@ (8001628 <MX_GPIO_Init+0x1a4>)
 80015ac:	f000 fcb4 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4819      	ldr	r0, [pc, #100]	@ (800162c <MX_GPIO_Init+0x1a8>)
 80015c8:	f000 fca6 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4814      	ldr	r0, [pc, #80]	@ (8001634 <MX_GPIO_Init+0x1b0>)
 80015e2:	f000 fc99 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015e6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	480c      	ldr	r0, [pc, #48]	@ (8001630 <MX_GPIO_Init+0x1ac>)
 8001600:	f000 fc8a 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001604:	2320      	movs	r3, #32
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	@ (8001630 <MX_GPIO_Init+0x1ac>)
 8001618:	f000 fc7e 	bl	8001f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161c:	bf00      	nop
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40021000 	.word	0x40021000
 800162c:	40020800 	.word	0x40020800
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40020000 	.word	0x40020000

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <Error_Handler+0x8>

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	4a0f      	ldr	r2, [pc, #60]	@ (8001690 <HAL_MspInit+0x4c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001658:	6453      	str	r3, [r2, #68]	@ 0x44
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_MspInit+0x4c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001682:	2007      	movs	r0, #7
 8001684:	f000 fc06 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_I2C_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12c      	bne.n	8001710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_I2C_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_I2C_MspInit+0x88>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_I2C_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d8:	2312      	movs	r3, #18
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <HAL_I2C_MspInit+0x8c>)
 80016f0:	f000 fc12 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_I2C_MspInit+0x88>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_I2C_MspInit+0x88>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_I2C_MspInit+0x88>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40005400 	.word	0x40005400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400

08001724 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	@ 0x38
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a59      	ldr	r2, [pc, #356]	@ (80018a8 <HAL_I2S_MspInit+0x184>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d15c      	bne.n	8001800 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a57      	ldr	r2, [pc, #348]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a50      	ldr	r2, [pc, #320]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a49      	ldr	r2, [pc, #292]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800179a:	2308      	movs	r3, #8
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017aa:	2305      	movs	r3, #5
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	483e      	ldr	r0, [pc, #248]	@ (80018b0 <HAL_I2S_MspInit+0x18c>)
 80017b6:	f000 fbaf 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80017ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017cc:	2305      	movs	r3, #5
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4837      	ldr	r0, [pc, #220]	@ (80018b4 <HAL_I2S_MspInit+0x190>)
 80017d8:	f000 fb9e 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80017ee:	2306      	movs	r3, #6
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	482e      	ldr	r0, [pc, #184]	@ (80018b4 <HAL_I2S_MspInit+0x190>)
 80017fa:	f000 fb8d 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017fe:	e04f      	b.n	80018a0 <HAL_I2S_MspInit+0x17c>
  else if(hi2s->Instance==SPI3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <HAL_I2S_MspInit+0x194>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d14a      	bne.n	80018a0 <HAL_I2S_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a26      	ldr	r2, [pc, #152]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_I2S_MspInit+0x188>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800185e:	2310      	movs	r3, #16
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800186e:	2306      	movs	r3, #6
 8001870:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4810      	ldr	r0, [pc, #64]	@ (80018bc <HAL_I2S_MspInit+0x198>)
 800187a:	f000 fb4d 	bl	8001f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800187e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001890:	2306      	movs	r3, #6
 8001892:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_I2S_MspInit+0x18c>)
 800189c:	f000 fb3c 	bl	8001f18 <HAL_GPIO_Init>
}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	@ 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40003800 	.word	0x40003800
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40003c00 	.word	0x40003c00
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <HAL_SPI_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12b      	bne.n	800193a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 80018ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800191a:	23e0      	movs	r3, #224	@ 0xe0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <HAL_SPI_MspInit+0x8c>)
 8001936:	f000 faef 	bl	8001f18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	@ 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013000 	.word	0x40013000
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 f961 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <OTG_FS_IRQHandler+0x10>)
 80019b6:	f001 fb75 	bl	80030a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001904 	.word	0x20001904

080019c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_kill>:

int _kill(int pid, int sig)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019de:	f008 fe33 	bl	800a648 <__errno>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2216      	movs	r2, #22
 80019e6:	601a      	str	r2, [r3, #0]
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_exit>:

void _exit (int status)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffe7 	bl	80019d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <_exit+0x12>

08001a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e00a      	b.n	8001a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1c:	f3af 8000 	nop.w
 8001a20:	4601      	mov	r1, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	b2ca      	uxtb	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf0      	blt.n	8001a1c <_read+0x12>
  }

  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e009      	b.n	8001a6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	60ba      	str	r2, [r7, #8]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbf1      	blt.n	8001a56 <_write+0x12>
  }
  return len;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_close>:

int _close(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_isatty>:

int _isatty(int file)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f008 fd98 	bl	800a648 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20020000 	.word	0x20020000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	2000041c 	.word	0x2000041c
 8001b4c:	20002158 	.word	0x20002158

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b78:	f7ff ffea 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f008 fd57 	bl	800a654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fa83 	bl	80010b0 <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001bb8:	0800cb58 	.word	0x0800cb58
  ldr r2, =_sbss
 8001bbc:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001bc0:	20002154 	.word	0x20002154

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f94f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fd22 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f967 	bl	8001efe <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f92f 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000420 	.word	0x20000420

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000420 	.word	0x20000420

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e159      	b.n	80021e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8148 	bne.w	80021e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d130      	bne.n	8001fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a2 	beq.w	80021e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b57      	ldr	r3, [pc, #348]	@ (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	4a56      	ldr	r2, [pc, #344]	@ (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_GPIO_Init+0x2e8>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_GPIO_Init+0x2ec>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a49      	ldr	r2, [pc, #292]	@ (8002208 <HAL_GPIO_Init+0x2f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x202>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a48      	ldr	r2, [pc, #288]	@ (800220c <HAL_GPIO_Init+0x2f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x1fe>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_GPIO_Init+0x2f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1fa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <HAL_GPIO_Init+0x2fc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1f6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a45      	ldr	r2, [pc, #276]	@ (8002218 <HAL_GPIO_Init+0x300>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1f2>
 8002106:	2304      	movs	r3, #4
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x204>
 800210a:	2307      	movs	r3, #7
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x204>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x204>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x204>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x204>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212c:	4935      	ldr	r1, [pc, #212]	@ (8002204 <HAL_GPIO_Init+0x2ec>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_GPIO_Init+0x304>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215e:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <HAL_GPIO_Init+0x304>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_GPIO_Init+0x304>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002188:	4a24      	ldr	r2, [pc, #144]	@ (800221c <HAL_GPIO_Init+0x304>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_GPIO_Init+0x304>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b2:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_GPIO_Init+0x304>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021dc:	4a0f      	ldr	r2, [pc, #60]	@ (800221c <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f aea2 	bls.w	8001f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3724      	adds	r7, #36	@ 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40013800 	.word	0x40013800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021000 	.word	0x40021000
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e12b      	b.n	80024be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fa0a 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2224      	movs	r2, #36	@ 0x24
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022b8:	f002 fc72 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 80022bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a81      	ldr	r2, [pc, #516]	@ (80024c8 <HAL_I2C_Init+0x274>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d807      	bhi.n	80022d8 <HAL_I2C_Init+0x84>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a80      	ldr	r2, [pc, #512]	@ (80024cc <HAL_I2C_Init+0x278>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	bf94      	ite	ls
 80022d0:	2301      	movls	r3, #1
 80022d2:	2300      	movhi	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e006      	b.n	80022e6 <HAL_I2C_Init+0x92>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a7d      	ldr	r2, [pc, #500]	@ (80024d0 <HAL_I2C_Init+0x27c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	bf94      	ite	ls
 80022e0:	2301      	movls	r3, #1
 80022e2:	2300      	movhi	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0e7      	b.n	80024be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a78      	ldr	r2, [pc, #480]	@ (80024d4 <HAL_I2C_Init+0x280>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9b      	lsrs	r3, r3, #18
 80022f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a6a      	ldr	r2, [pc, #424]	@ (80024c8 <HAL_I2C_Init+0x274>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d802      	bhi.n	8002328 <HAL_I2C_Init+0xd4>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3301      	adds	r3, #1
 8002326:	e009      	b.n	800233c <HAL_I2C_Init+0xe8>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	4a69      	ldr	r2, [pc, #420]	@ (80024d8 <HAL_I2C_Init+0x284>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	099b      	lsrs	r3, r3, #6
 800233a:	3301      	adds	r3, #1
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	430b      	orrs	r3, r1
 8002342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800234e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	495c      	ldr	r1, [pc, #368]	@ (80024c8 <HAL_I2C_Init+0x274>)
 8002358:	428b      	cmp	r3, r1
 800235a:	d819      	bhi.n	8002390 <HAL_I2C_Init+0x13c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e59      	subs	r1, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fbb1 f3f3 	udiv	r3, r1, r3
 800236a:	1c59      	adds	r1, r3, #1
 800236c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002370:	400b      	ands	r3, r1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_I2C_Init+0x138>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e59      	subs	r1, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fbb1 f3f3 	udiv	r3, r1, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238a:	e051      	b.n	8002430 <HAL_I2C_Init+0x1dc>
 800238c:	2304      	movs	r3, #4
 800238e:	e04f      	b.n	8002430 <HAL_I2C_Init+0x1dc>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d111      	bne.n	80023bc <HAL_I2C_Init+0x168>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	440b      	add	r3, r1
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e012      	b.n	80023e2 <HAL_I2C_Init+0x18e>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e58      	subs	r0, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	0099      	lsls	r1, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Init+0x196>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e022      	b.n	8002430 <HAL_I2C_Init+0x1dc>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10e      	bne.n	8002410 <HAL_I2C_Init+0x1bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e58      	subs	r0, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	440b      	add	r3, r1
 8002400:	fbb0 f3f3 	udiv	r3, r0, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240e:	e00f      	b.n	8002430 <HAL_I2C_Init+0x1dc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	0099      	lsls	r1, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	6809      	ldr	r1, [r1, #0]
 8002434:	4313      	orrs	r3, r2
 8002436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800245e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6911      	ldr	r1, [r2, #16]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	4311      	orrs	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	000186a0 	.word	0x000186a0
 80024cc:	001e847f 	.word	0x001e847f
 80024d0:	003d08ff 	.word	0x003d08ff
 80024d4:	431bde83 	.word	0x431bde83
 80024d8:	10624dd3 	.word	0x10624dd3

080024dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e128      	b.n	8002740 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a90      	ldr	r2, [pc, #576]	@ (8002748 <HAL_I2S_Init+0x26c>)
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff f90b 	bl	8001724 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002524:	f023 030f 	bic.w	r3, r3, #15
 8002528:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d060      	beq.n	80025fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002542:	2310      	movs	r3, #16
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e001      	b.n	800254c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b20      	cmp	r3, #32
 8002552:	d802      	bhi.n	800255a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800255a:	2001      	movs	r0, #1
 800255c:	f002 fc24 	bl	8004da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002560:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800256a:	d125      	bne.n	80025b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	fbb2 f2f3 	udiv	r2, r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	3305      	adds	r3, #5
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e01f      	b.n	80025d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	3305      	adds	r3, #5
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e00e      	b.n	80025d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	3305      	adds	r3, #5
 80025d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4a5c      	ldr	r2, [pc, #368]	@ (800274c <HAL_I2S_Init+0x270>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e003      	b.n	8002604 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025fc:	2302      	movs	r3, #2
 80025fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d902      	bls.n	8002610 <HAL_I2S_Init+0x134>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2bff      	cmp	r3, #255	@ 0xff
 800260e:	d907      	bls.n	8002620 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	f043 0210 	orr.w	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e08f      	b.n	8002740 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	ea42 0103 	orr.w	r1, r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	430a      	orrs	r2, r1
 8002632:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800263e:	f023 030f 	bic.w	r3, r3, #15
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6851      	ldr	r1, [r2, #4]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6892      	ldr	r2, [r2, #8]
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68d2      	ldr	r2, [r2, #12]
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6992      	ldr	r2, [r2, #24]
 8002656:	430a      	orrs	r2, r1
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002662:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d161      	bne.n	8002730 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <HAL_I2S_Init+0x274>)
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a37      	ldr	r2, [pc, #220]	@ (8002754 <HAL_I2S_Init+0x278>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_I2S_Init+0x1a4>
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_I2S_Init+0x27c>)
 800267e:	e001      	b.n	8002684 <HAL_I2S_Init+0x1a8>
 8002680:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	4932      	ldr	r1, [pc, #200]	@ (8002754 <HAL_I2S_Init+0x278>)
 800268c:	428a      	cmp	r2, r1
 800268e:	d101      	bne.n	8002694 <HAL_I2S_Init+0x1b8>
 8002690:	4a31      	ldr	r2, [pc, #196]	@ (8002758 <HAL_I2S_Init+0x27c>)
 8002692:	e001      	b.n	8002698 <HAL_I2S_Init+0x1bc>
 8002694:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002698:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800269c:	f023 030f 	bic.w	r3, r3, #15
 80026a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <HAL_I2S_Init+0x278>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_I2S_Init+0x1d4>
 80026ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <HAL_I2S_Init+0x27c>)
 80026ae:	e001      	b.n	80026b4 <HAL_I2S_Init+0x1d8>
 80026b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026b4:	2202      	movs	r2, #2
 80026b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a25      	ldr	r2, [pc, #148]	@ (8002754 <HAL_I2S_Init+0x278>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_I2S_Init+0x1ea>
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_I2S_Init+0x27c>)
 80026c4:	e001      	b.n	80026ca <HAL_I2S_Init+0x1ee>
 80026c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d6:	d003      	beq.n	80026e0 <HAL_I2S_Init+0x204>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e001      	b.n	80026ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002700:	4313      	orrs	r3, r2
 8002702:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800270a:	4313      	orrs	r3, r2
 800270c:	b29a      	uxth	r2, r3
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	4313      	orrs	r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002718:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_I2S_Init+0x278>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_I2S_Init+0x24c>
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_I2S_Init+0x27c>)
 8002726:	e001      	b.n	800272c <HAL_I2S_Init+0x250>
 8002728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800272c:	897a      	ldrh	r2, [r7, #10]
 800272e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	08002853 	.word	0x08002853
 800274c:	cccccccd 	.word	0xcccccccd
 8002750:	08002969 	.word	0x08002969
 8002754:	40003800 	.word	0x40003800
 8002758:	40003400 	.word	0x40003400

0800275c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	1c9a      	adds	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80027dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffb8 	bl	800275c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	1c9a      	adds	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10e      	bne.n	800284a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800283a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff93 	bl	8002770 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b04      	cmp	r3, #4
 800286c:	d13a      	bne.n	80028e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d109      	bne.n	800288c <I2S_IRQHandler+0x3a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d102      	bne.n	800288c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffb4 	bl	80027f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002892:	2b40      	cmp	r3, #64	@ 0x40
 8002894:	d126      	bne.n	80028e4 <I2S_IRQHandler+0x92>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d11f      	bne.n	80028e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff50 	bl	8002784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d136      	bne.n	800295e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d109      	bne.n	800290e <I2S_IRQHandler+0xbc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002904:	2b80      	cmp	r3, #128	@ 0x80
 8002906:	d102      	bne.n	800290e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff45 	bl	8002798 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b08      	cmp	r3, #8
 8002916:	d122      	bne.n	800295e <I2S_IRQHandler+0x10c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b20      	cmp	r3, #32
 8002924:	d11b      	bne.n	800295e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002934:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff13 	bl	8002784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a92      	ldr	r2, [pc, #584]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002982:	4b92      	ldr	r3, [pc, #584]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002984:	e001      	b.n	800298a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002986:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80029a0:	4b8a      	ldr	r3, [pc, #552]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029a2:	e001      	b.n	80029a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80029a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b4:	d004      	beq.n	80029c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8099 	bne.w	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d107      	bne.n	80029da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f925 	bl	8002c24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9c8 	bl	8002d84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d13a      	bne.n	8002a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d035      	beq.n	8002a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a12:	4b6e      	ldr	r3, [pc, #440]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a14:	e001      	b.n	8002a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4969      	ldr	r1, [pc, #420]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a22:	428b      	cmp	r3, r1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a26:	4b69      	ldr	r3, [pc, #420]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a28:	e001      	b.n	8002a2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fe88 	bl	8002784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	f040 80c3 	bne.w	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80bd 	beq.w	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a49      	ldr	r2, [pc, #292]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002aa6:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aa8:	e001      	b.n	8002aae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002aaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4944      	ldr	r1, [pc, #272]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ab6:	428b      	cmp	r3, r1
 8002ab8:	d101      	bne.n	8002abe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002aba:	4b44      	ldr	r3, [pc, #272]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002abc:	e001      	b.n	8002ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002abe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ac6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe4a 	bl	8002784 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002af0:	e089      	b.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d107      	bne.n	8002b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8be 	bl	8002c88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8fd 	bl	8002d20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2c:	2b40      	cmp	r3, #64	@ 0x40
 8002b2e:	d12f      	bne.n	8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02a      	beq.n	8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b56:	e001      	b.n	8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4919      	ldr	r1, [pc, #100]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d101      	bne.n	8002b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b6a:	e001      	b.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fdfa 	bl	8002784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d136      	bne.n	8002c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d031      	beq.n	8002c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002bb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4902      	ldr	r1, [pc, #8]	@ (8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bbe:	428b      	cmp	r3, r1
 8002bc0:	d106      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002bc2:	4b02      	ldr	r3, [pc, #8]	@ (8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bc4:	e006      	b.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002bc6:	bf00      	nop
 8002bc8:	40003800 	.word	0x40003800
 8002bcc:	40003400 	.word	0x40003400
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bd8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002be8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fdc0 	bl	8002784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c04:	e000      	b.n	8002c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c06:	bf00      	nop
}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	1c99      	adds	r1, r3, #2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ffc9 	bl	8002c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c99      	adds	r1, r3, #2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <I2SEx_TxISR_I2SExt+0x22>
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002ca8:	e001      	b.n	8002cae <I2SEx_TxISR_I2SExt+0x26>
 8002caa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cae:	460a      	mov	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <I2SEx_TxISR_I2SExt+0x50>
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002cd6:	e001      	b.n	8002cdc <I2SEx_TxISR_I2SExt+0x54>
 8002cd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	490d      	ldr	r1, [pc, #52]	@ (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d101      	bne.n	8002cec <I2SEx_TxISR_I2SExt+0x64>
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002cea:	e001      	b.n	8002cf0 <I2SEx_TxISR_I2SExt+0x68>
 8002cec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cf0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff81 	bl	8002c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40003800 	.word	0x40003800
 8002d1c:	40003400 	.word	0x40003400

08002d20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68d8      	ldr	r0, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	1c99      	adds	r1, r3, #2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d38:	b282      	uxth	r2, r0
 8002d3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d113      	bne.n	8002d7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff4a 	bl	8002c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <I2SEx_RxISR_I2SExt+0x16>
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002d98:	e001      	b.n	8002d9e <I2SEx_RxISR_I2SExt+0x1a>
 8002d9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9e:	68d8      	ldr	r0, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	1c99      	adds	r1, r3, #2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002daa:	b282      	uxth	r2, r0
 8002dac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <I2SEx_RxISR_I2SExt+0x50>
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002dd2:	e001      	b.n	8002dd8 <I2SEx_RxISR_I2SExt+0x54>
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	490d      	ldr	r1, [pc, #52]	@ (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d101      	bne.n	8002de8 <I2SEx_RxISR_I2SExt+0x64>
 8002de4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002de6:	e001      	b.n	8002dec <I2SEx_RxISR_I2SExt+0x68>
 8002de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002df0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff03 	bl	8002c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40003800 	.word	0x40003800
 8002e18:	40003400 	.word	0x40003400

08002e1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e101      	b.n	8003032 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f006 fb01 	bl	8009450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5c:	d102      	bne.n	8002e64 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fee8 	bl	8005c3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7c1a      	ldrb	r2, [r3, #16]
 8002e76:	f88d 2000 	strb.w	r2, [sp]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	f002 fdc7 	bl	8005a10 <USB_CoreInit>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0ce      	b.n	8003032 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fee0 	bl	8005c60 <USB_SetCurrentMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0bf      	b.n	8003032 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e04a      	b.n	8002f4e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3314      	adds	r3, #20
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	b298      	uxth	r0, r3
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	332e      	adds	r3, #46	@ 0x2e
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3318      	adds	r3, #24
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	331c      	adds	r3, #28
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3320      	adds	r3, #32
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3324      	adds	r3, #36	@ 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	791b      	ldrb	r3, [r3, #4]
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3af      	bcc.n	8002eb8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e044      	b.n	8002fe8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3b5      	bcc.n	8002f5e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7c1a      	ldrb	r2, [r3, #16]
 8002ffa:	f88d 2000 	strb.w	r2, [sp]
 8002ffe:	3304      	adds	r3, #4
 8003000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003002:	f002 fe79 	bl	8005cf8 <USB_DevInit>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e00c      	b.n	8003032 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f003 fec3 	bl	8006db6 <USB_DevDisconnect>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_PCD_Start+0x1c>
 8003052:	2302      	movs	r3, #2
 8003054:	e022      	b.n	800309c <HAL_PCD_Start+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fdca 	bl	8005c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fe71 	bl	8006d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b08d      	sub	sp, #52	@ 0x34
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 ff2f 	bl	8006f1e <USB_GetMode>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 848c 	bne.w	80039e0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fe93 	bl	8006df8 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8482 	beq.w	80039de <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fe80 	bl	8006df8 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 0202 	and.w	r2, r2, #2
 8003110:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fe6e 	bl	8006df8 <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d161      	bne.n	80031ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	0c5b      	lsrs	r3, r3, #17
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	2b02      	cmp	r3, #2
 8003160:	d124      	bne.n	80031ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d035      	beq.n	80031da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	6a38      	ldr	r0, [r7, #32]
 8003182:	f003 fca5 	bl	8006ad0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003192:	441a      	add	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a4:	441a      	add	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	e016      	b.n	80031da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	2b06      	cmp	r3, #6
 80031b6:	d110      	bne.n	80031da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031be:	2208      	movs	r2, #8
 80031c0:	4619      	mov	r1, r3
 80031c2:	6a38      	ldr	r0, [r7, #32]
 80031c4:	f003 fc84 	bl	8006ad0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d4:	441a      	add	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0210 	orr.w	r2, r2, #16
 80031e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fe02 	bl	8006df8 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031fe:	f040 80a7 	bne.w	8003350 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fe07 	bl	8006e1e <USB_ReadDevAllOutEpInterrupt>
 8003210:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003212:	e099      	b.n	8003348 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 808e 	beq.w	800333c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fe2b 	bl	8006e86 <USB_ReadDevOutEPInterrupt>
 8003230:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800324e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fea3 	bl	8003f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00c      	beq.n	800327a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	2308      	movs	r3, #8
 8003270:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003272:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 ff79 	bl	800416c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	2310      	movs	r3, #16
 8003294:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d030      	beq.n	8003302 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b80      	cmp	r3, #128	@ 0x80
 80032aa:	d109      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	78db      	ldrb	r3, [r3, #3]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f006 f9ba 	bl	8009664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2302      	movs	r3, #2
 8003300:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	2320      	movs	r3, #32
 800331c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800333a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	3301      	adds	r3, #1
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	f47f af62 	bne.w	8003214 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fd4f 	bl	8006df8 <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003360:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003364:	f040 80db 	bne.w	800351e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fd70 	bl	8006e52 <USB_ReadDevAllInEpInterrupt>
 8003372:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003378:	e0cd      	b.n	8003516 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80c2 	beq.w	800350a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fd96 	bl	8006ec2 <USB_ReadDevInEPInterrupt>
 8003396:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d057      	beq.n	8003452 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c2:	4013      	ands	r3, r2
 80033c4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d2:	461a      	mov	r2, r3
 80033d4:	2301      	movs	r3, #1
 80033d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	799b      	ldrb	r3, [r3, #6]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d132      	bne.n	8003446 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3320      	adds	r3, #32
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	331c      	adds	r3, #28
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4419      	add	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	3320      	adds	r3, #32
 8003416:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <HAL_PCD_IRQHandler+0x3a2>
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3324      	adds	r3, #36	@ 0x24
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800343e:	461a      	mov	r2, r3
 8003440:	2101      	movs	r1, #1
 8003442:	f003 fd9d 	bl	8006f80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f006 f88e 	bl	800956e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003468:	461a      	mov	r2, r3
 800346a:	2308      	movs	r3, #8
 800346c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003484:	461a      	mov	r2, r3
 8003486:	2310      	movs	r3, #16
 8003488:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a0:	461a      	mov	r2, r3
 80034a2:	2340      	movs	r3, #64	@ 0x40
 80034a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034b2:	6a38      	ldr	r0, [r7, #32]
 80034b4:	f002 fd84 	bl	8005fc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	3310      	adds	r3, #16
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	78db      	ldrb	r3, [r3, #3]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f006 f8d1 	bl	8009688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f2:	461a      	mov	r2, r3
 80034f4:	2302      	movs	r3, #2
 80034f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fcbd 	bl	8003e84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	f47f af2e 	bne.w	800337a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fc68 	bl	8006df8 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800352e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003532:	d122      	bne.n	800357a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800354e:	2b01      	cmp	r3, #1
 8003550:	d108      	bne.n	8003564 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800355a:	2100      	movs	r1, #0
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fea3 	bl	80042a8 <HAL_PCDEx_LPM_Callback>
 8003562:	e002      	b.n	800356a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f006 f86f 	bl	8009648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fc3a 	bl	8006df8 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358e:	d112      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f006 f82b 	bl	80095fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80035b4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fc1c 	bl	8006df8 <USB_ReadInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ca:	f040 80b7 	bne.w	800373c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2110      	movs	r1, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fce9 	bl	8005fc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f2:	e046      	b.n	8003682 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003600:	461a      	mov	r2, r3
 8003602:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003606:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	440a      	add	r2, r1
 800361e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003626:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800363a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800365a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003676:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800367a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367e:	3301      	adds	r3, #1
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	4293      	cmp	r3, r2
 800368c:	d3b2      	bcc.n	80035f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800369c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80036a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7bdb      	ldrb	r3, [r3, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ba:	f043 030b 	orr.w	r3, r3, #11
 80036be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d0:	f043 030b 	orr.w	r3, r3, #11
 80036d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036d6:	e015      	b.n	8003704 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80036ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036fe:	f043 030b 	orr.w	r3, r3, #11
 8003702:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003712:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003716:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003726:	461a      	mov	r2, r3
 8003728:	f003 fc2a 	bl	8006f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800373a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 fb59 	bl	8006df8 <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003750:	d123      	bne.n	800379a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fbef 	bl	8006f3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fca6 	bl	80060b2 <USB_GetDevSpeed>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	f001 fa09 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8003776:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800377c:	461a      	mov	r2, r3
 800377e:	4620      	mov	r0, r4
 8003780:	f002 f9aa 	bl	8005ad8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f005 ff1a 	bl	80095be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003798:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 fb2a 	bl	8006df8 <USB_ReadInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d10a      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f005 fef7 	bl	80095a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f002 0208 	and.w	r2, r2, #8
 80037c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fb15 	bl	8006df8 <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d4:	2b80      	cmp	r3, #128	@ 0x80
 80037d6:	d123      	bne.n	8003820 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e8:	e014      	b.n	8003814 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d105      	bne.n	800380e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb0a 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	3301      	adds	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	791b      	ldrb	r3, [r3, #4]
 8003818:	461a      	mov	r2, r3
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	4293      	cmp	r3, r2
 800381e:	d3e4      	bcc.n	80037ea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f003 fae7 	bl	8006df8 <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003834:	d13c      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003836:	2301      	movs	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
 800383a:	e02b      	b.n	8003894 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3318      	adds	r3, #24
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d115      	bne.n	800388e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003862:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	da12      	bge.n	800388e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3317      	adds	r3, #23
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 faca 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	3301      	adds	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	791b      	ldrb	r3, [r3, #4]
 8003898:	461a      	mov	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	4293      	cmp	r3, r2
 800389e:	d3cd      	bcc.n	800383c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80038ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 fa9f 	bl	8006df8 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038c4:	d156      	bne.n	8003974 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ca:	e045      	b.n	8003958 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d12e      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da2b      	bge.n	8003952 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003906:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800390a:	429a      	cmp	r2, r3
 800390c:	d121      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800394a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394e:	6053      	str	r3, [r2, #4]
            break;
 8003950:	e008      	b.n	8003964 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	3301      	adds	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	461a      	mov	r2, r3
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	4293      	cmp	r3, r2
 8003962:	d3b3      	bcc.n	80038cc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f003 fa3d 	bl	8006df8 <USB_ReadInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d10a      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f005 fe8e 	bl	80096ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fa27 	bl	8006df8 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d115      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f005 fe7e 	bl	80096c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	e000      	b.n	80039e0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80039de:	bf00      	nop
    }
  }
}
 80039e0:	3734      	adds	r7, #52	@ 0x34
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_PCD_SetAddress+0x1a>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e012      	b.n	8003a26 <HAL_PCD_SetAddress+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 f986 	bl	8006d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	4608      	mov	r0, r1
 8003a38:	4611      	mov	r1, r2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	70fb      	strb	r3, [r7, #3]
 8003a40:	460b      	mov	r3, r1
 8003a42:	803b      	strh	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da0f      	bge.n	8003a74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	3310      	adds	r3, #16
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	705a      	strb	r2, [r3, #1]
 8003a72:	e00f      	b.n	8003a94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003aa0:	883b      	ldrh	r3, [r7, #0]
 8003aa2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	78ba      	ldrb	r2, [r7, #2]
 8003aae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ac2:	78bb      	ldrb	r3, [r7, #2]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d102      	bne.n	8003ace <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_PCD_EP_Open+0xae>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e00e      	b.n	8003afa <HAL_PCD_EP_Open+0xcc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 fb06 	bl	80060fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003af8:	7afb      	ldrb	r3, [r7, #11]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	da0f      	bge.n	8003b36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 020f 	and.w	r2, r3, #15
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	3310      	adds	r3, #16
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	705a      	strb	r2, [r3, #1]
 8003b34:	e00f      	b.n	8003b56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_Close+0x6e>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e00e      	b.n	8003b8e <HAL_PCD_EP_Close+0x8c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f002 fb44 	bl	800620c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f003 020f 	and.w	r2, r3, #15
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	799b      	ldrb	r3, [r3, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	799b      	ldrb	r3, [r3, #6]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6979      	ldr	r1, [r7, #20]
 8003bfe:	f002 fbe1 	bl	80063c4 <USB_EPStartXfer>

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	3310      	adds	r3, #16
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	799b      	ldrb	r3, [r3, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	799b      	ldrb	r3, [r3, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	f002 fb8f 	bl	80063c4 <USB_EPStartXfer>

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	7912      	ldrb	r2, [r2, #4]
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e04f      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da0f      	bge.n	8003cf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3304      	adds	r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	705a      	strb	r2, [r3, #1]
 8003cf4:	e00d      	b.n	8003d12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_PCD_EP_SetStall+0x82>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e01d      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xbe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 ff1d 	bl	8006b80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7999      	ldrb	r1, [r3, #6]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f003 f90e 	bl	8006f80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	7912      	ldrb	r2, [r2, #4]
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e042      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da0f      	bge.n	8003dbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3310      	adds	r3, #16
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e00f      	b.n	8003ddc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_PCD_EP_ClrStall+0x86>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e00e      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 ff26 	bl	8006c5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0c      	bge.n	8003e50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3310      	adds	r3, #16
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e00c      	b.n	8003e6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 fd45 	bl	8006900 <USB_EPStopXfer>
 8003e76:	4603      	mov	r3, r0
 8003e78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d901      	bls.n	8003ebc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e06b      	b.n	8003f94 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee0:	e02a      	b.n	8003f38 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68d9      	ldr	r1, [r3, #12]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4603      	mov	r3, r0
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f002 fd9a 	bl	8006a54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	441a      	add	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d809      	bhi.n	8003f62 <PCD_WriteEmptyTxFifo+0xde>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d203      	bcs.n	8003f62 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1bf      	bne.n	8003ee2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d811      	bhi.n	8003f92 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2201      	movs	r2, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f8e:	4013      	ands	r3, r2
 8003f90:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	333c      	adds	r3, #60	@ 0x3c
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	799b      	ldrb	r3, [r3, #6]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d17b      	bne.n	80040ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4a61      	ldr	r2, [pc, #388]	@ (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f240 80b9 	bls.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80b3 	beq.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	e0a7      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	2320      	movs	r3, #32
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	e098      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8093 	bne.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	4a4b      	ldr	r2, [pc, #300]	@ (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90f      	bls.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	e07e      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	440b      	add	r3, r1
 800407c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040a4:	461a      	mov	r2, r3
 80040a6:	2101      	movs	r1, #1
 80040a8:	f002 ff6a 	bl	8006f80 <USB_EP0_OutStart>
 80040ac:	e006      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f005 fa38 	bl	8009538 <HAL_PCD_DataOutStageCallback>
 80040c8:	e046      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a26      	ldr	r2, [pc, #152]	@ (8004168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d124      	bne.n	800411c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	e032      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004108:	461a      	mov	r2, r3
 800410a:	2320      	movs	r3, #32
 800410c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f005 fa0f 	bl	8009538 <HAL_PCD_DataOutStageCallback>
 800411a:	e01d      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d114      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f002 ff1a 	bl	8006f80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f005 f9f0 	bl	8009538 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	4f54300a 	.word	0x4f54300a
 8004168:	4f54310a 	.word	0x4f54310a

0800416c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	333c      	adds	r3, #60	@ 0x3c
 8004184:	3304      	adds	r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d90e      	bls.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b8:	461a      	mov	r2, r3
 80041ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f005 f9a7 	bl	8009514 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	@ (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d90c      	bls.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	799b      	ldrb	r3, [r3, #6]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	f002 fecc 	bl	8006f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	4f54300a 	.word	0x4f54300a

080041f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
 8004204:	4613      	mov	r3, r2
 8004206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004216:	883b      	ldrh	r3, [r7, #0]
 8004218:	0419      	lsls	r1, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	430a      	orrs	r2, r1
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
 8004224:	e028      	b.n	8004278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e00d      	b.n	8004256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	3340      	adds	r3, #64	@ 0x40
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3301      	adds	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	3b01      	subs	r3, #1
 800425c:	429a      	cmp	r2, r3
 800425e:	d3ec      	bcc.n	800423a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	0418      	lsls	r0, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	3b01      	subs	r3, #1
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4302      	orrs	r2, r0
 8004270:	3340      	adds	r3, #64	@ 0x40
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042de:	4b88      	ldr	r3, [pc, #544]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd fc8c 	bl	8001c94 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd fc88 	bl	8001c94 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd fc78 	bl	8001c94 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fc74 	bl	8001c94 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd fc2d 	bl	8001c94 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd fc29 	bl	8001c94 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fc0c 	bl	8001c94 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd fc08 	bl	8001c94 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd fbec 	bl	8001c94 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fd fbe8 	bl	8001c94 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fd fbd5 	bl	8001c94 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fd fbd1 	bl	8001c94 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	@ 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fd fb91 	bl	8001c94 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd fb8d 	bl	8001c94 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd fb52 	bl	8001c94 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fd fb4e 	bl	8001c94 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fd fb3c 	bl	8001c94 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fd fb38 	bl	8001c94 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fd fb0c 	bl	8001c94 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fd fb08 	bl	8001c94 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd fae1 	bl	8001c94 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fadd 	bl	8001c94 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd faca 	bl	8001c94 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd fac6 	bl	8001c94 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fd f9f8 	bl	8001c94 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd f9f4 	bl	8001c94 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fd f958 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800c7bc 	.word	0x0800c7bc
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b094      	sub	sp, #80	@ 0x50
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b79      	ldr	r3, [pc, #484]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80e1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0db      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049b4:	e0db      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b73      	ldr	r3, [pc, #460]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ba:	e0d8      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	ebb2 0801 	subs.w	r8, r2, r1
 8004a34:	4659      	mov	r1, fp
 8004a36:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4e:	4690      	mov	r8, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb18 0303 	adds.w	r3, r8, r3
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb49 0303 	adc.w	r3, r9, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	024b      	lsls	r3, r1, #9
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a78:	4621      	mov	r1, r4
 8004a7a:	024a      	lsls	r2, r1, #9
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a8c:	f7fc f894 	bl	8000bb8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac6:	0150      	lsls	r0, r2, #5
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4641      	mov	r1, r8
 8004ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aec:	ebb2 040a 	subs.w	r4, r2, sl
 8004af0:	eb63 050b 	sbc.w	r5, r3, fp
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	f7fc f83a 	bl	8000bb8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3750      	adds	r7, #80	@ 0x50
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	@ (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800c7cc 	.word	0x0800c7cc

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d038      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf6:	f7fd f84d 	bl	8001c94 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfe:	f7fd f849 	bl	8001c94 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0bd      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c10:	4b61      	ldr	r3, [pc, #388]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	495a      	ldr	r1, [pc, #360]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c36:	4b57      	ldr	r3, [pc, #348]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3c:	f7fd f82a 	bl	8001c94 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c44:	f7fd f826 	bl	8001c94 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e09a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c56:	4b50      	ldr	r3, [pc, #320]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8083 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	4a47      	ldr	r2, [pc, #284]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c80:	4b45      	ldr	r3, [pc, #276]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c8c:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fffc 	bl	8001c94 <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca0:	f7fc fff8 	bl	8001c94 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e06c      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbe:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d02f      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d028      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cec:	4b2c      	ldr	r3, [pc, #176]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cf2:	4a29      	ldr	r2, [pc, #164]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf8:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d114      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fc ffc6 	bl	8001c94 <HAL_GetTick>
 8004d08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fc ffc2 	bl	8001c94 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e034      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d22:	4b1d      	ldr	r3, [pc, #116]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ee      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004d3c:	4b16      	ldr	r3, [pc, #88]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d50:	4911      	ldr	r1, [pc, #68]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004d58:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d62:	6093      	str	r3, [r2, #8]
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	4909      	ldr	r1, [pc, #36]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7d1a      	ldrb	r2, [r3, #20]
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	42470068 	.word	0x42470068
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	42470e40 	.word	0x42470e40
 8004da4:	424711e0 	.word	0x424711e0

08004da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d141      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ddc:	d131      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dde:	4b20      	ldr	r3, [pc, #128]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004de0:	617b      	str	r3, [r7, #20]
          break;
 8004de2:	e031      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004de4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004df0:	d109      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004df2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dfc:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e06:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e10:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	0f1b      	lsrs	r3, r3, #28
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	617b      	str	r3, [r7, #20]
          break;
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
          break;
 8004e46:	bf00      	nop
        }
      }
      break;
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004e4a:	bf00      	nop
    }
  }
  return frequency;
 8004e4c:	697b      	ldr	r3, [r7, #20]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	00bb8000 	.word	0x00bb8000
 8004e64:	007a1200 	.word	0x007a1200
 8004e68:	00f42400 	.word	0x00f42400

08004e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e07b      	b.n	8004f76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8e:	d009      	beq.n	8004ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	61da      	str	r2, [r3, #28]
 8004e96:	e005      	b.n	8004ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fcfe 	bl	80018c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f28:	ea42 0103 	orr.w	r1, r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0104 	and.w	r1, r3, #4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	f003 0210 	and.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f8e:	f7fc fe81 	bl	8001c94 <HAL_GetTick>
 8004f92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e12a      	b.n	80051fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Transmit+0x36>
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e122      	b.n	80051fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_SPI_Transmit+0x48>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e11b      	b.n	80051fe <HAL_SPI_Transmit+0x280>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005014:	d10f      	bne.n	8005036 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d007      	beq.n	8005054 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800505c:	d152      	bne.n	8005104 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_SPI_Transmit+0xee>
 8005066:	8b7b      	ldrh	r3, [r7, #26]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d145      	bne.n	80050f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	881a      	ldrh	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	1c9a      	adds	r2, r3, #2
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005090:	e032      	b.n	80050f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d112      	bne.n	80050c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050c4:	e018      	b.n	80050f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c6:	f7fc fde5 	bl	8001c94 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d803      	bhi.n	80050de <HAL_SPI_Transmit+0x160>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d102      	bne.n	80050e4 <HAL_SPI_Transmit+0x166>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e082      	b.n	80051fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1c7      	bne.n	8005092 <HAL_SPI_Transmit+0x114>
 8005102:	e053      	b.n	80051ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SPI_Transmit+0x194>
 800510c:	8b7b      	ldrh	r3, [r7, #26]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d147      	bne.n	80051a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	7812      	ldrb	r2, [r2, #0]
 800511e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005138:	e033      	b.n	80051a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d113      	bne.n	8005170 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800516e:	e018      	b.n	80051a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005170:	f7fc fd90 	bl	8001c94 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d803      	bhi.n	8005188 <HAL_SPI_Transmit+0x20a>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d102      	bne.n	800518e <HAL_SPI_Transmit+0x210>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e02d      	b.n	80051fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1c6      	bne.n	800513a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fbd9 	bl	8005968 <SPI_EndRxTxTransaction>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d001      	beq.n	8005226 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
 8005224:	e104      	b.n	8005430 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522e:	d112      	bne.n	8005256 <HAL_SPI_Receive+0x50>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10e      	bne.n	8005256 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2204      	movs	r2, #4
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f8f3 	bl	8005438 <HAL_SPI_TransmitReceive>
 8005252:	4603      	mov	r3, r0
 8005254:	e0ec      	b.n	8005430 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fc fd1d 	bl	8001c94 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Receive+0x62>
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0e1      	b.n	8005430 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_SPI_Receive+0x74>
 8005276:	2302      	movs	r3, #2
 8005278:	e0da      	b.n	8005430 <HAL_SPI_Receive+0x22a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2204      	movs	r2, #4
 8005286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c8:	d10f      	bne.n	80052ea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b40      	cmp	r3, #64	@ 0x40
 80052f6:	d007      	beq.n	8005308 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d170      	bne.n	80053f2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005310:	e035      	b.n	800537e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d115      	bne.n	800534c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f103 020c 	add.w	r2, r3, #12
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800534a:	e018      	b.n	800537e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534c:	f7fc fca2 	bl	8001c94 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d803      	bhi.n	8005364 <HAL_SPI_Receive+0x15e>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d102      	bne.n	800536a <HAL_SPI_Receive+0x164>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e058      	b.n	8005430 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1c4      	bne.n	8005312 <HAL_SPI_Receive+0x10c>
 8005388:	e038      	b.n	80053fc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d113      	bne.n	80053c0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	b292      	uxth	r2, r2
 80053a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053be:	e018      	b.n	80053f2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c0:	f7fc fc68 	bl	8001c94 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d803      	bhi.n	80053d8 <HAL_SPI_Receive+0x1d2>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d102      	bne.n	80053de <HAL_SPI_Receive+0x1d8>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e01e      	b.n	8005430 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1c6      	bne.n	800538a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fa4b 	bl	800589c <SPI_EndRxTransaction>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800542e:	2300      	movs	r3, #0
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	@ 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005446:	2301      	movs	r3, #1
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800544a:	f7fc fc23 	bl	8001c94 <HAL_GetTick>
 800544e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005456:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d00c      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x4a>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546e:	d106      	bne.n	800547e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_SPI_TransmitReceive+0x46>
 8005478:	7ffb      	ldrb	r3, [r7, #31]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d001      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
 8005480:	e17f      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x5c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x5c>
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e174      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x6e>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e16d      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d003      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2205      	movs	r2, #5
 80054be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	887a      	ldrh	r2, [r7, #2]
 80054d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	887a      	ldrh	r2, [r7, #2]
 80054ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d007      	beq.n	8005516 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800551e:	d17e      	bne.n	800561e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_SPI_TransmitReceive+0xf6>
 8005528:	8afb      	ldrh	r3, [r7, #22]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d16c      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005552:	e059      	b.n	8005608 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d11b      	bne.n	800559a <HAL_SPI_TransmitReceive+0x162>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <HAL_SPI_TransmitReceive+0x162>
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	2b01      	cmp	r3, #1
 8005570:	d113      	bne.n	800559a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d119      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1a4>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	b292      	uxth	r2, r2
 80055be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055dc:	f7fc fb5a 	bl	8001c94 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d80d      	bhi.n	8005608 <HAL_SPI_TransmitReceive+0x1d0>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d009      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e0bc      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1a0      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x11c>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d19b      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x11c>
 800561c:	e082      	b.n	8005724 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SPI_TransmitReceive+0x1f4>
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d171      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005652:	e05d      	b.n	8005710 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d11c      	bne.n	800569c <HAL_SPI_TransmitReceive+0x264>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d017      	beq.n	800569c <HAL_SPI_TransmitReceive+0x264>
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2b01      	cmp	r3, #1
 8005670:	d114      	bne.n	800569c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d119      	bne.n	80056de <HAL_SPI_TransmitReceive+0x2a6>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056da:	2301      	movs	r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056de:	f7fc fad9 	bl	8001c94 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d803      	bhi.n	80056f6 <HAL_SPI_TransmitReceive+0x2be>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d102      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x2c4>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e038      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d19c      	bne.n	8005654 <HAL_SPI_TransmitReceive+0x21c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d197      	bne.n	8005654 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f91d 	bl	8005968 <SPI_EndRxTxTransaction>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e01d      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005780:	2300      	movs	r3, #0
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3728      	adds	r7, #40	@ 0x28
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800579c:	f7fc fa7a 	bl	8001c94 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4413      	add	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057ac:	f7fc fa72 	bl	8001c94 <HAL_GetTick>
 80057b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057b2:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	015b      	lsls	r3, r3, #5
 80057b8:	0d1b      	lsrs	r3, r3, #20
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c2:	e054      	b.n	800586e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d050      	beq.n	800586e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057cc:	f7fc fa62 	bl	8001c94 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d902      	bls.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d13d      	bne.n	800585e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057fa:	d111      	bne.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005804:	d004      	beq.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800580e:	d107      	bne.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800581e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005828:	d10f      	bne.n	800584a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e017      	b.n	800588e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3b01      	subs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	429a      	cmp	r2, r3
 800588a:	d19b      	bne.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000000 	.word	0x20000000

0800589c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b0:	d111      	bne.n	80058d6 <SPI_EndRxTransaction+0x3a>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ba:	d004      	beq.n	80058c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c4:	d107      	bne.n	80058d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058de:	d12a      	bne.n	8005936 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e8:	d012      	beq.n	8005910 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	@ 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ff49 	bl	800578c <SPI_WaitFlagStateUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02d      	beq.n	800595c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e026      	b.n	800595e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	2101      	movs	r1, #1
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff ff36 	bl	800578c <SPI_WaitFlagStateUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01a      	beq.n	800595c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e013      	b.n	800595e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	2101      	movs	r1, #1
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff ff23 	bl	800578c <SPI_WaitFlagStateUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e000      	b.n	800595e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2201      	movs	r2, #1
 800597c:	2102      	movs	r1, #2
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff ff04 	bl	800578c <SPI_WaitFlagStateUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e032      	b.n	8005a00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800599a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a08 <SPI_EndRxTxTransaction+0xa0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a0c <SPI_EndRxTxTransaction+0xa4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	0d5b      	lsrs	r3, r3, #21
 80059a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b8:	d112      	bne.n	80059e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2180      	movs	r1, #128	@ 0x80
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff fee1 	bl	800578c <SPI_WaitFlagStateUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d016      	beq.n	80059fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e00f      	b.n	8005a00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f6:	2b80      	cmp	r3, #128	@ 0x80
 80059f8:	d0f2      	beq.n	80059e0 <SPI_EndRxTxTransaction+0x78>
 80059fa:	e000      	b.n	80059fe <SPI_EndRxTxTransaction+0x96>
        break;
 80059fc:	bf00      	nop
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	165e9f81 	.word	0x165e9f81

08005a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a10:	b084      	sub	sp, #16
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	f107 001c 	add.w	r0, r7, #28
 8005a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d123      	bne.n	8005a72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d105      	bne.n	8005a66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fae8 	bl	800703c <USB_CoreReset>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	e01b      	b.n	8005aaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fadc 	bl	800703c <USB_CoreReset>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a9c:	e005      	b.n	8005aaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005aaa:	7fbb      	ldrb	r3, [r7, #30]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10b      	bne.n	8005ac8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f043 0206 	orr.w	r2, r3, #6
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad4:	b004      	add	sp, #16
 8005ad6:	4770      	bx	lr

08005ad8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d165      	bne.n	8005bb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a41      	ldr	r2, [pc, #260]	@ (8005bf4 <USB_SetTurnaroundTime+0x11c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d906      	bls.n	8005b02 <USB_SetTurnaroundTime+0x2a>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a40      	ldr	r2, [pc, #256]	@ (8005bf8 <USB_SetTurnaroundTime+0x120>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d202      	bcs.n	8005b02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005afc:	230f      	movs	r3, #15
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e062      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf8 <USB_SetTurnaroundTime+0x120>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d306      	bcc.n	8005b18 <USB_SetTurnaroundTime+0x40>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8005bfc <USB_SetTurnaroundTime+0x124>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d202      	bcs.n	8005b18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b12:	230e      	movs	r3, #14
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e057      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a38      	ldr	r2, [pc, #224]	@ (8005bfc <USB_SetTurnaroundTime+0x124>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d306      	bcc.n	8005b2e <USB_SetTurnaroundTime+0x56>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <USB_SetTurnaroundTime+0x128>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d202      	bcs.n	8005b2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b28:	230d      	movs	r3, #13
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e04c      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a33      	ldr	r2, [pc, #204]	@ (8005c00 <USB_SetTurnaroundTime+0x128>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d306      	bcc.n	8005b44 <USB_SetTurnaroundTime+0x6c>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4a32      	ldr	r2, [pc, #200]	@ (8005c04 <USB_SetTurnaroundTime+0x12c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d802      	bhi.n	8005b44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b3e:	230c      	movs	r3, #12
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e041      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4a2f      	ldr	r2, [pc, #188]	@ (8005c04 <USB_SetTurnaroundTime+0x12c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d906      	bls.n	8005b5a <USB_SetTurnaroundTime+0x82>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c08 <USB_SetTurnaroundTime+0x130>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d802      	bhi.n	8005b5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b54:	230b      	movs	r3, #11
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e036      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c08 <USB_SetTurnaroundTime+0x130>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d906      	bls.n	8005b70 <USB_SetTurnaroundTime+0x98>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4a29      	ldr	r2, [pc, #164]	@ (8005c0c <USB_SetTurnaroundTime+0x134>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d802      	bhi.n	8005b70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e02b      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a26      	ldr	r2, [pc, #152]	@ (8005c0c <USB_SetTurnaroundTime+0x134>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d906      	bls.n	8005b86 <USB_SetTurnaroundTime+0xae>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4a25      	ldr	r2, [pc, #148]	@ (8005c10 <USB_SetTurnaroundTime+0x138>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d202      	bcs.n	8005b86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b80:	2309      	movs	r3, #9
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e020      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4a21      	ldr	r2, [pc, #132]	@ (8005c10 <USB_SetTurnaroundTime+0x138>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d306      	bcc.n	8005b9c <USB_SetTurnaroundTime+0xc4>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4a20      	ldr	r2, [pc, #128]	@ (8005c14 <USB_SetTurnaroundTime+0x13c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d802      	bhi.n	8005b9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b96:	2308      	movs	r3, #8
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e015      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <USB_SetTurnaroundTime+0x13c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d906      	bls.n	8005bb2 <USB_SetTurnaroundTime+0xda>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <USB_SetTurnaroundTime+0x140>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d202      	bcs.n	8005bb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005bac:	2307      	movs	r3, #7
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e00a      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005bb2:	2306      	movs	r3, #6
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	e007      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bbe:	2309      	movs	r3, #9
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e001      	b.n	8005bc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bc4:	2309      	movs	r3, #9
 8005bc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	00d8acbf 	.word	0x00d8acbf
 8005bf8:	00e4e1c0 	.word	0x00e4e1c0
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	01067380 	.word	0x01067380
 8005c04:	011a499f 	.word	0x011a499f
 8005c08:	01312cff 	.word	0x01312cff
 8005c0c:	014ca43f 	.word	0x014ca43f
 8005c10:	016e3600 	.word	0x016e3600
 8005c14:	01a6ab1f 	.word	0x01a6ab1f
 8005c18:	01e84800 	.word	0x01e84800

08005c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f043 0201 	orr.w	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f023 0201 	bic.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d115      	bne.n	8005cae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c8e:	200a      	movs	r0, #10
 8005c90:	f7fc f80c 	bl	8001cac <HAL_Delay>
      ms += 10U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	330a      	adds	r3, #10
 8005c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f93f 	bl	8006f1e <USB_GetMode>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d01e      	beq.n	8005ce4 <USB_SetCurrentMode+0x84>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2bc7      	cmp	r3, #199	@ 0xc7
 8005caa:	d9f0      	bls.n	8005c8e <USB_SetCurrentMode+0x2e>
 8005cac:	e01a      	b.n	8005ce4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d115      	bne.n	8005ce0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f7fb fff3 	bl	8001cac <HAL_Delay>
      ms += 10U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	330a      	adds	r3, #10
 8005cca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 f926 	bl	8006f1e <USB_GetMode>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <USB_SetCurrentMode+0x84>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cdc:	d9f0      	bls.n	8005cc0 <USB_SetCurrentMode+0x60>
 8005cde:	e001      	b.n	8005ce4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e005      	b.n	8005cf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ce8:	d101      	bne.n	8005cee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	e009      	b.n	8005d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	3340      	adds	r3, #64	@ 0x40
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b0e      	cmp	r3, #14
 8005d30:	d9f2      	bls.n	8005d18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d11c      	bne.n	8005d74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d72:	e00b      	b.n	8005d8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d92:	461a      	mov	r2, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10d      	bne.n	8005dbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f968 	bl	8006080 <USB_SetDevSpeed>
 8005db0:	e008      	b.n	8005dc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005db2:	2101      	movs	r1, #1
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f963 	bl	8006080 <USB_SetDevSpeed>
 8005dba:	e003      	b.n	8005dc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dbc:	2103      	movs	r1, #3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f95e 	bl	8006080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dc4:	2110      	movs	r1, #16
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f8fa 	bl	8005fc0 <USB_FlushTxFifo>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f924 	bl	8006024 <USB_FlushRxFifo>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dec:	461a      	mov	r2, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e043      	b.n	8005e98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e26:	d118      	bne.n	8005e5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e013      	b.n	8005e6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e50:	461a      	mov	r2, r3
 8005e52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e008      	b.n	8005e6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e66:	461a      	mov	r2, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3301      	adds	r3, #1
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d3b5      	bcc.n	8005e10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e043      	b.n	8005f32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec0:	d118      	bne.n	8005ef4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e013      	b.n	8005f06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e008      	b.n	8005f06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	461a      	mov	r2, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	461a      	mov	r2, r3
 8005f14:	2300      	movs	r3, #0
 8005f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f24:	461a      	mov	r2, r3
 8005f26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f36:	461a      	mov	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d3b5      	bcc.n	8005eaa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f043 0210 	orr.w	r2, r3, #16
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <USB_DevInit+0x2c4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f043 0208 	orr.w	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb8:	b004      	add	sp, #16
 8005fba:	4770      	bx	lr
 8005fbc:	803c3800 	.word	0x803c3800

08005fc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fda:	d901      	bls.n	8005fe0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e01b      	b.n	8006018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	daf2      	bge.n	8005fce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	019b      	lsls	r3, r3, #6
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006004:	d901      	bls.n	800600a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e006      	b.n	8006018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b20      	cmp	r3, #32
 8006014:	d0f0      	beq.n	8005ff8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800603c:	d901      	bls.n	8006042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e018      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	daf2      	bge.n	8006030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2210      	movs	r2, #16
 8006052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006060:	d901      	bls.n	8006066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e006      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b10      	cmp	r3, #16
 8006070:	d0f0      	beq.n	8006054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b087      	sub	sp, #28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0306 	and.w	r3, r3, #6
 80060ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]
 80060d6:	e00a      	b.n	80060ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d002      	beq.n	80060e4 <USB_GetDevSpeed+0x32>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d102      	bne.n	80060ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80060e4:	2302      	movs	r3, #2
 80060e6:	75fb      	strb	r3, [r7, #23]
 80060e8:	e001      	b.n	80060ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80060ea:	230f      	movs	r3, #15
 80060ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d13a      	bne.n	800618e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006136:	4313      	orrs	r3, r2
 8006138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d155      	bne.n	80061fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	791b      	ldrb	r3, [r3, #4]
 800616a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800616c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	059b      	lsls	r3, r3, #22
 8006172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006174:	4313      	orrs	r3, r2
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e036      	b.n	80061fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	2101      	movs	r1, #1
 80061a0:	fa01 f303 	lsl.w	r3, r1, r3
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11a      	bne.n	80061fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061e2:	430b      	orrs	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d161      	bne.n	80062ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800623a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623e:	d11f      	bne.n	8006280 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800625e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800627a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800627e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	2101      	movs	r1, #1
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062a0:	4013      	ands	r3, r2
 80062a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	2101      	movs	r1, #1
 80062b6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	43db      	mvns	r3, r3
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062c4:	4013      	ands	r3, r2
 80062c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	0159      	lsls	r1, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	440b      	add	r3, r1
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	4619      	mov	r1, r3
 80062e4:	4b35      	ldr	r3, [pc, #212]	@ (80063bc <USB_DeactivateEndpoint+0x1b0>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
 80062ea:	e060      	b.n	80063ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006302:	d11f      	bne.n	8006344 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006322:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	43db      	mvns	r3, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006364:	4013      	ands	r3, r2
 8006366:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	2101      	movs	r1, #1
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	43db      	mvns	r3, r3
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006388:	4013      	ands	r3, r2
 800638a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	0159      	lsls	r1, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	440b      	add	r3, r1
 80063a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a6:	4619      	mov	r1, r3
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <USB_DeactivateEndpoint+0x1b4>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	ec337800 	.word	0xec337800
 80063c0:	eff37800 	.word	0xeff37800

080063c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	@ 0x28
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f040 817f 	bne.w	80066e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d132      	bne.n	8006454 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006408:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800640c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800642c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800644c:	0cdb      	lsrs	r3, r3, #19
 800644e:	04db      	lsls	r3, r3, #19
 8006450:	6113      	str	r3, [r2, #16]
 8006452:	e097      	b.n	8006584 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646e:	0cdb      	lsrs	r3, r3, #19
 8006470:	04db      	lsls	r3, r3, #19
 8006472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800648e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006492:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006496:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11a      	bne.n	80064d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064d0:	6113      	str	r3, [r2, #16]
 80064d2:	e044      	b.n	800655e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	1e5a      	subs	r2, r3, #1
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	04d9      	lsls	r1, r3, #19
 80064fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006790 <USB_EPStartXfer+0x3cc>)
 80064fe:	400b      	ands	r3, r1
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	0148      	lsls	r0, r1, #5
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	4401      	add	r1, r0
 8006508:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800650c:	4313      	orrs	r3, r2
 800650e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d122      	bne.n	800655e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006532:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006536:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	075b      	lsls	r3, r3, #29
 800654a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	0148      	lsls	r0, r1, #5
 8006552:	69f9      	ldr	r1, [r7, #28]
 8006554:	4401      	add	r1, r0
 8006556:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800655a:	4313      	orrs	r3, r2
 800655c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	0148      	lsls	r0, r1, #5
 8006578:	69f9      	ldr	r1, [r7, #28]
 800657a:	4401      	add	r1, r0
 800657c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006580:	4313      	orrs	r3, r2
 8006582:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d14b      	bne.n	8006622 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	791b      	ldrb	r3, [r3, #4]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d128      	bne.n	8006600 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d110      	bne.n	80065e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00f      	b.n	8006600 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	e166      	b.n	80068f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006640:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	791b      	ldrb	r3, [r3, #4]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d015      	beq.n	8006676 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 814e 	beq.w	80068f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	2101      	movs	r1, #1
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006670:	4313      	orrs	r3, r2
 8006672:	634b      	str	r3, [r1, #52]	@ 0x34
 8006674:	e13c      	b.n	80068f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d110      	bne.n	80066a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e00f      	b.n	80066c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	68d9      	ldr	r1, [r3, #12]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	b298      	uxth	r0, r3
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4603      	mov	r3, r0
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f9b9 	bl	8006a54 <USB_WritePacket>
 80066e2:	e105      	b.n	80068f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066fe:	0cdb      	lsrs	r3, r3, #19
 8006700:	04db      	lsls	r3, r3, #19
 8006702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800671e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006722:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006726:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d132      	bne.n	8006794 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	0148      	lsls	r0, r1, #5
 8006760:	69f9      	ldr	r1, [r7, #28]
 8006762:	4401      	add	r1, r0
 8006764:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006768:	4313      	orrs	r3, r2
 800676a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006786:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800678a:	6113      	str	r3, [r2, #16]
 800678c:	e062      	b.n	8006854 <USB_EPStartXfer+0x490>
 800678e:	bf00      	nop
 8006790:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d123      	bne.n	80067e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	0148      	lsls	r0, r1, #5
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	4401      	add	r1, r0
 80067ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067be:	4313      	orrs	r3, r2
 80067c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
 80067e2:	e037      	b.n	8006854 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	8afa      	ldrh	r2, [r7, #22]
 8006800:	fb03 f202 	mul.w	r2, r3, r2
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	8afb      	ldrh	r3, [r7, #22]
 8006818:	04d9      	lsls	r1, r3, #19
 800681a:	4b38      	ldr	r3, [pc, #224]	@ (80068fc <USB_EPStartXfer+0x538>)
 800681c:	400b      	ands	r3, r1
 800681e:	69b9      	ldr	r1, [r7, #24]
 8006820:	0148      	lsls	r0, r1, #5
 8006822:	69f9      	ldr	r1, [r7, #28]
 8006824:	4401      	add	r1, r0
 8006826:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	0148      	lsls	r0, r1, #5
 8006848:	69f9      	ldr	r1, [r7, #28]
 800684a:	4401      	add	r1, r0
 800684c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006850:	4313      	orrs	r3, r2
 8006852:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d10d      	bne.n	8006876 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68d9      	ldr	r1, [r3, #12]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	460a      	mov	r2, r1
 8006874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d128      	bne.n	80068d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d110      	bne.n	80068b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e00f      	b.n	80068d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	1ff80000 	.word	0x1ff80000

08006900 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d14a      	bne.n	80069b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006932:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006936:	f040 8086 	bne.w	8006a46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800695c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800698e:	4293      	cmp	r3, r2
 8006990:	d902      	bls.n	8006998 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
          break;
 8006996:	e056      	b.n	8006a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b0:	d0e7      	beq.n	8006982 <USB_EPStopXfer+0x82>
 80069b2:	e048      	b.n	8006a46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069cc:	d13b      	bne.n	8006a46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d902      	bls.n	8006a2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2a:	e00c      	b.n	8006a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a44:	d0e7      	beq.n	8006a16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	@ 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	460b      	mov	r3, r1
 8006a64:	71fb      	strb	r3, [r7, #7]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d123      	bne.n	8006ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	3303      	adds	r3, #3
 8006a7e:	089b      	lsrs	r3, r3, #2
 8006a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e018      	b.n	8006aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	031a      	lsls	r2, r3, #12
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a94:	461a      	mov	r2, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d3e2      	bcc.n	8006a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3724      	adds	r7, #36	@ 0x24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	@ 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	089b      	lsrs	r3, r3, #2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	e014      	b.n	8006b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	3301      	adds	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	3301      	adds	r3, #1
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d3e6      	bcc.n	8006afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b2e:	8bfb      	ldrh	r3, [r7, #30]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01e      	beq.n	8006b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f107 0310 	add.w	r3, r7, #16
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	701a      	strb	r2, [r3, #0]
      i++;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	3301      	adds	r3, #1
 8006b64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006b66:	8bfb      	ldrh	r3, [r7, #30]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b6c:	8bfb      	ldrh	r3, [r7, #30]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ea      	bne.n	8006b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	372c      	adds	r7, #44	@ 0x2c
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d12c      	bne.n	8006bf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	db12      	blt.n	8006bd4 <USB_EPSetStall+0x54>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e02b      	b.n	8006c4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	db12      	blt.n	8006c2e <USB_EPSetStall+0xae>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d128      	bne.n	8006cca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d003      	beq.n	8006ca8 <USB_EPClearStall+0x4c>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d138      	bne.n	8006d1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	e027      	b.n	8006d1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ce8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d003      	beq.n	8006cfa <USB_EPClearStall+0x9e>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d10f      	bne.n	8006d1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006d4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006da2:	f023 0302 	bic.w	r3, r3, #2
 8006da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e10:	68fb      	ldr	r3, [r7, #12]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0c1b      	lsrs	r3, r3, #16
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4013      	ands	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	b29b      	uxth	r3, r3
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef2:	01db      	lsls	r3, r3, #7
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f10:	68bb      	ldr	r3, [r7, #8]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	333c      	adds	r3, #60	@ 0x3c
 8006f96:	3304      	adds	r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4a26      	ldr	r2, [pc, #152]	@ (8007038 <USB_EP0_OutStart+0xb8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d90a      	bls.n	8006fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb4:	d101      	bne.n	8006fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e037      	b.n	800702a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fe8:	f043 0318 	orr.w	r3, r3, #24
 8006fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d10f      	bne.n	8007028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007022:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	4f54300a 	.word	0x4f54300a

0800703c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007054:	d901      	bls.n	800705a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e01b      	b.n	8007092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	daf2      	bge.n	8007048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f043 0201 	orr.w	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800707e:	d901      	bls.n	8007084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e006      	b.n	8007092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d0f0      	beq.n	8007072 <USB_CoreReset+0x36>

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80070b0:	f002 fca2 	bl	80099f8 <USBD_static_malloc>
 80070b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	32b0      	adds	r2, #176	@ 0xb0
 80070c6:	2100      	movs	r1, #0
 80070c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e0d4      	b.n	800727a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f003 fa63 	bl	800a5a2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	32b0      	adds	r2, #176	@ 0xb0
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32b0      	adds	r2, #176	@ 0xb0
 80070f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7c1b      	ldrb	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d138      	bne.n	800717a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007108:	4b5e      	ldr	r3, [pc, #376]	@ (8007284 <USBD_CDC_Init+0x1e4>)
 800710a:	7819      	ldrb	r1, [r3, #0]
 800710c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007110:	2202      	movs	r2, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f002 fb4d 	bl	80097b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007118:	4b5a      	ldr	r3, [pc, #360]	@ (8007284 <USBD_CDC_Init+0x1e4>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3324      	adds	r3, #36	@ 0x24
 800712e:	2201      	movs	r2, #1
 8007130:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007132:	4b55      	ldr	r3, [pc, #340]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800713a:	2202      	movs	r2, #2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f002 fb38 	bl	80097b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007142:	4b51      	ldr	r3, [pc, #324]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800715a:	2201      	movs	r2, #1
 800715c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800715e:	4b4b      	ldr	r3, [pc, #300]	@ (800728c <USBD_CDC_Init+0x1ec>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 020f 	and.w	r2, r3, #15
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3326      	adds	r3, #38	@ 0x26
 8007174:	2210      	movs	r2, #16
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e035      	b.n	80071e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800717a:	4b42      	ldr	r3, [pc, #264]	@ (8007284 <USBD_CDC_Init+0x1e4>)
 800717c:	7819      	ldrb	r1, [r3, #0]
 800717e:	2340      	movs	r3, #64	@ 0x40
 8007180:	2202      	movs	r2, #2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 fb15 	bl	80097b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007188:	4b3e      	ldr	r3, [pc, #248]	@ (8007284 <USBD_CDC_Init+0x1e4>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3324      	adds	r3, #36	@ 0x24
 800719e:	2201      	movs	r2, #1
 80071a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071a2:	4b39      	ldr	r3, [pc, #228]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 80071a4:	7819      	ldrb	r1, [r3, #0]
 80071a6:	2340      	movs	r3, #64	@ 0x40
 80071a8:	2202      	movs	r2, #2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f002 fb01 	bl	80097b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071b0:	4b35      	ldr	r3, [pc, #212]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071c8:	2201      	movs	r2, #1
 80071ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071cc:	4b2f      	ldr	r3, [pc, #188]	@ (800728c <USBD_CDC_Init+0x1ec>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	3326      	adds	r3, #38	@ 0x26
 80071e2:	2210      	movs	r2, #16
 80071e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071e6:	4b29      	ldr	r3, [pc, #164]	@ (800728c <USBD_CDC_Init+0x1ec>)
 80071e8:	7819      	ldrb	r1, [r3, #0]
 80071ea:	2308      	movs	r3, #8
 80071ec:	2203      	movs	r2, #3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fadf 	bl	80097b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071f4:	4b25      	ldr	r3, [pc, #148]	@ (800728c <USBD_CDC_Init+0x1ec>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	3324      	adds	r3, #36	@ 0x24
 800720a:	2201      	movs	r2, #1
 800720c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	33b0      	adds	r3, #176	@ 0xb0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007244:	2302      	movs	r3, #2
 8007246:	e018      	b.n	800727a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1b      	ldrb	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007250:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 8007252:	7819      	ldrb	r1, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800725a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f002 fb96 	bl	8009990 <USBD_LL_PrepareReceive>
 8007264:	e008      	b.n	8007278 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007266:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <USBD_CDC_Init+0x1e8>)
 8007268:	7819      	ldrb	r1, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007270:	2340      	movs	r3, #64	@ 0x40
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fb8c 	bl	8009990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000093 	.word	0x20000093
 8007288:	20000094 	.word	0x20000094
 800728c:	20000095 	.word	0x20000095

08007290 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800729c:	4b3a      	ldr	r3, [pc, #232]	@ (8007388 <USBD_CDC_DeInit+0xf8>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 faab 	bl	80097fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072a8:	4b37      	ldr	r3, [pc, #220]	@ (8007388 <USBD_CDC_DeInit+0xf8>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3324      	adds	r3, #36	@ 0x24
 80072be:	2200      	movs	r2, #0
 80072c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072c2:	4b32      	ldr	r3, [pc, #200]	@ (800738c <USBD_CDC_DeInit+0xfc>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 fa98 	bl	80097fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072ce:	4b2f      	ldr	r3, [pc, #188]	@ (800738c <USBD_CDC_DeInit+0xfc>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072ea:	4b29      	ldr	r3, [pc, #164]	@ (8007390 <USBD_CDC_DeInit+0x100>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 fa84 	bl	80097fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80072f6:	4b26      	ldr	r3, [pc, #152]	@ (8007390 <USBD_CDC_DeInit+0x100>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 020f 	and.w	r2, r3, #15
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	3324      	adds	r3, #36	@ 0x24
 800730c:	2200      	movs	r2, #0
 800730e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007310:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <USBD_CDC_DeInit+0x100>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 020f 	and.w	r2, r3, #15
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	3326      	adds	r3, #38	@ 0x26
 8007326:	2200      	movs	r2, #0
 8007328:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32b0      	adds	r2, #176	@ 0xb0
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01f      	beq.n	800737c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	33b0      	adds	r3, #176	@ 0xb0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32b0      	adds	r2, #176	@ 0xb0
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	4618      	mov	r0, r3
 8007360:	f002 fb58 	bl	8009a14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	@ 0xb0
 800736e:	2100      	movs	r1, #0
 8007370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000093 	.word	0x20000093
 800738c:	20000094 	.word	0x20000094
 8007390:	20000095 	.word	0x20000095

08007394 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	32b0      	adds	r2, #176	@ 0xb0
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e0bf      	b.n	8007544 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d050      	beq.n	8007472 <USBD_CDC_Setup+0xde>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	f040 80af 	bne.w	8007534 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d03a      	beq.n	8007454 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da1b      	bge.n	8007420 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	33b0      	adds	r3, #176	@ 0xb0
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80073fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	88d2      	ldrh	r2, [r2, #6]
 8007404:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	88db      	ldrh	r3, [r3, #6]
 800740a:	2b07      	cmp	r3, #7
 800740c:	bf28      	it	cs
 800740e:	2307      	movcs	r3, #7
 8007410:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	89fa      	ldrh	r2, [r7, #14]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fd93 	bl	8008f44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800741e:	e090      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785a      	ldrb	r2, [r3, #1]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007430:	d803      	bhi.n	800743a <USBD_CDC_Setup+0xa6>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	88db      	ldrh	r3, [r3, #6]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	e000      	b.n	800743c <USBD_CDC_Setup+0xa8>
 800743a:	2240      	movs	r2, #64	@ 0x40
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007442:	6939      	ldr	r1, [r7, #16]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800744a:	461a      	mov	r2, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 fda5 	bl	8008f9c <USBD_CtlPrepareRx>
      break;
 8007452:	e076      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	33b0      	adds	r3, #176	@ 0xb0
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	7850      	ldrb	r0, [r2, #1]
 800746a:	2200      	movs	r2, #0
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	4798      	blx	r3
      break;
 8007470:	e067      	b.n	8007542 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b0b      	cmp	r3, #11
 8007478:	d851      	bhi.n	800751e <USBD_CDC_Setup+0x18a>
 800747a:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <USBD_CDC_Setup+0xec>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074b1 	.word	0x080074b1
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800751f 	.word	0x0800751f
 800748c:	0800751f 	.word	0x0800751f
 8007490:	0800751f 	.word	0x0800751f
 8007494:	0800751f 	.word	0x0800751f
 8007498:	0800751f 	.word	0x0800751f
 800749c:	0800751f 	.word	0x0800751f
 80074a0:	0800751f 	.word	0x0800751f
 80074a4:	0800751f 	.word	0x0800751f
 80074a8:	080074db 	.word	0x080074db
 80074ac:	08007505 	.word	0x08007505
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d107      	bne.n	80074cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074bc:	f107 030a 	add.w	r3, r7, #10
 80074c0:	2202      	movs	r2, #2
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fd3d 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ca:	e032      	b.n	8007532 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fcbb 	bl	8008e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	75fb      	strb	r3, [r7, #23]
          break;
 80074d8:	e02b      	b.n	8007532 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d107      	bne.n	80074f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074e6:	f107 030d 	add.w	r3, r7, #13
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fd28 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074f4:	e01d      	b.n	8007532 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fca6 	bl	8008e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80074fe:	2303      	movs	r3, #3
 8007500:	75fb      	strb	r3, [r7, #23]
          break;
 8007502:	e016      	b.n	8007532 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d00f      	beq.n	8007530 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fc99 	bl	8008e4a <USBD_CtlError>
            ret = USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800751c:	e008      	b.n	8007530 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fc92 	bl	8008e4a <USBD_CtlError>
          ret = USBD_FAIL;
 8007526:	2303      	movs	r3, #3
 8007528:	75fb      	strb	r3, [r7, #23]
          break;
 800752a:	e002      	b.n	8007532 <USBD_CDC_Setup+0x19e>
          break;
 800752c:	bf00      	nop
 800752e:	e008      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
          break;
 8007530:	bf00      	nop
      }
      break;
 8007532:	e006      	b.n	8007542 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc87 	bl	8008e4a <USBD_CtlError>
      ret = USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
      break;
 8007540:	bf00      	nop
  }

  return (uint8_t)ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800755e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32b0      	adds	r2, #176	@ 0xb0
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007572:	2303      	movs	r3, #3
 8007574:	e065      	b.n	8007642 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	32b0      	adds	r2, #176	@ 0xb0
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3318      	adds	r3, #24
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02f      	beq.n	8007600 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3318      	adds	r3, #24
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	f003 010f 	and.w	r1, r3, #15
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	460b      	mov	r3, r1
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	440b      	add	r3, r1
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4403      	add	r3, r0
 80075c8:	331c      	adds	r3, #28
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80075d0:	fb01 f303 	mul.w	r3, r1, r3
 80075d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d112      	bne.n	8007600 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 020f 	and.w	r2, r3, #15
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	440b      	add	r3, r1
 80075ec:	3318      	adds	r3, #24
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075f2:	78f9      	ldrb	r1, [r7, #3]
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f9a8 	bl	800994e <USBD_LL_Transmit>
 80075fe:	e01f      	b.n	8007640 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	33b0      	adds	r3, #176	@ 0xb0
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	33b0      	adds	r3, #176	@ 0xb0
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32b0      	adds	r2, #176	@ 0xb0
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	@ 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01a      	b.n	80076b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f002 f9a6 	bl	80099d2 <USBD_LL_GetRxDataSize>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	33b0      	adds	r3, #176	@ 0xb0
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80076ac:	4611      	mov	r1, r2
 80076ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32b0      	adds	r2, #176	@ 0xb0
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e024      	b.n	8007726 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	33b0      	adds	r3, #176	@ 0xb0
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d019      	beq.n	8007724 <USBD_CDC_EP0_RxReady+0x6a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80076f6:	2bff      	cmp	r3, #255	@ 0xff
 80076f8:	d014      	beq.n	8007724 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	33b0      	adds	r3, #176	@ 0xb0
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007712:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800771a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	22ff      	movs	r2, #255	@ 0xff
 8007720:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007738:	2182      	movs	r1, #130	@ 0x82
 800773a:	4818      	ldr	r0, [pc, #96]	@ (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800773c:	f000 fd4f 	bl	80081de <USBD_GetEpDesc>
 8007740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007742:	2101      	movs	r1, #1
 8007744:	4815      	ldr	r0, [pc, #84]	@ (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007746:	f000 fd4a 	bl	80081de <USBD_GetEpDesc>
 800774a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800774c:	2181      	movs	r1, #129	@ 0x81
 800774e:	4813      	ldr	r0, [pc, #76]	@ (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007750:	f000 fd45 	bl	80081de <USBD_GetEpDesc>
 8007754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2210      	movs	r2, #16
 8007760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2200      	movs	r2, #0
 800776c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007770:	711a      	strb	r2, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2243      	movs	r2, #67	@ 0x43
 800778e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	@ (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000050 	.word	0x20000050

080077a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077a8:	2182      	movs	r1, #130	@ 0x82
 80077aa:	4818      	ldr	r0, [pc, #96]	@ (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077ac:	f000 fd17 	bl	80081de <USBD_GetEpDesc>
 80077b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077b2:	2101      	movs	r1, #1
 80077b4:	4815      	ldr	r0, [pc, #84]	@ (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077b6:	f000 fd12 	bl	80081de <USBD_GetEpDesc>
 80077ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077bc:	2181      	movs	r1, #129	@ 0x81
 80077be:	4813      	ldr	r0, [pc, #76]	@ (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077c0:	f000 fd0d 	bl	80081de <USBD_GetEpDesc>
 80077c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2210      	movs	r2, #16
 80077d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2200      	movs	r2, #0
 80077dc:	711a      	strb	r2, [r3, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f042 0202 	orr.w	r2, r2, #2
 80077e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	711a      	strb	r2, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f042 0202 	orr.w	r2, r2, #2
 80077f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2243      	movs	r2, #67	@ 0x43
 80077fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	@ (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000050 	.word	0x20000050

08007810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007818:	2182      	movs	r1, #130	@ 0x82
 800781a:	4818      	ldr	r0, [pc, #96]	@ (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800781c:	f000 fcdf 	bl	80081de <USBD_GetEpDesc>
 8007820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007822:	2101      	movs	r1, #1
 8007824:	4815      	ldr	r0, [pc, #84]	@ (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007826:	f000 fcda 	bl	80081de <USBD_GetEpDesc>
 800782a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800782c:	2181      	movs	r1, #129	@ 0x81
 800782e:	4813      	ldr	r0, [pc, #76]	@ (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007830:	f000 fcd5 	bl	80081de <USBD_GetEpDesc>
 8007834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2210      	movs	r2, #16
 8007840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2200      	movs	r2, #0
 800784c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007850:	711a      	strb	r2, [r3, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007864:	711a      	strb	r2, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2243      	movs	r2, #67	@ 0x43
 800786e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007870:	4b02      	ldr	r3, [pc, #8]	@ (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000050 	.word	0x20000050

08007880 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220a      	movs	r2, #10
 800788c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800788e:	4b03      	ldr	r3, [pc, #12]	@ (800789c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	2000000c 	.word	0x2000000c

080078a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e009      	b.n	80078c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	33b0      	adds	r3, #176	@ 0xb0
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	32b0      	adds	r2, #176	@ 0xb0
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e008      	b.n	800790c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	32b0      	adds	r2, #176	@ 0xb0
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	e004      	b.n	8007946 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32b0      	adds	r2, #176	@ 0xb0
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	e025      	b.n	80079c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11f      	bne.n	80079c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2201      	movs	r2, #1
 8007988:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800798c:	4b10      	ldr	r3, [pc, #64]	@ (80079d0 <USBD_CDC_TransmitPacket+0x7c>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4403      	add	r3, r0
 80079a6:	3318      	adds	r3, #24
 80079a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <USBD_CDC_TransmitPacket+0x7c>)
 80079ac:	7819      	ldrb	r1, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 ffc7 	bl	800994e <USBD_LL_Transmit>

    ret = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000093 	.word	0x20000093

080079d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	32b0      	adds	r2, #176	@ 0xb0
 80079e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32b0      	adds	r2, #176	@ 0xb0
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e018      	b.n	8007a34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7c1b      	ldrb	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a3c <USBD_CDC_ReceivePacket+0x68>)
 8007a0c:	7819      	ldrb	r1, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 ffb9 	bl	8009990 <USBD_LL_PrepareReceive>
 8007a1e:	e008      	b.n	8007a32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a20:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <USBD_CDC_ReceivePacket+0x68>)
 8007a22:	7819      	ldrb	r1, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a2a:	2340      	movs	r3, #64	@ 0x40
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 ffaf 	bl	8009990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000094 	.word	0x20000094

08007a40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e01f      	b.n	8007a98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	79fa      	ldrb	r2, [r7, #7]
 8007a8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 fe29 	bl	80096e4 <USBD_LL_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e025      	b.n	8007b04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	32ae      	adds	r2, #174	@ 0xae
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00f      	beq.n	8007af4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32ae      	adds	r2, #174	@ 0xae
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	f107 020e 	add.w	r2, r7, #14
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fe31 	bl	800977c <USBD_LL_Start>
 8007b1a:	4603      	mov	r3, r0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	78fa      	ldrb	r2, [r7, #3]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f90c 	bl	8008dd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d01a      	beq.n	8007c18 <USBD_LL_SetupStage+0x72>
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d822      	bhi.n	8007c2c <USBD_LL_SetupStage+0x86>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <USBD_LL_SetupStage+0x4a>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d00a      	beq.n	8007c04 <USBD_LL_SetupStage+0x5e>
 8007bee:	e01d      	b.n	8007c2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb63 	bl	80082c4 <USBD_StdDevReq>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
      break;
 8007c02:	e020      	b.n	8007c46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fbcb 	bl	80083a8 <USBD_StdItfReq>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
      break;
 8007c16:	e016      	b.n	8007c46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc2d 	bl	8008480 <USBD_StdEPReq>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2a:	e00c      	b.n	8007c46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fdfe 	bl	800983c <USBD_LL_StallEP>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	bf00      	nop
  }

  return ret;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d16e      	bne.n	8007d46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	f040 8098 	bne.w	8007dac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d913      	bls.n	8007cb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	1ad2      	subs	r2, r2, r3
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	bf28      	it	cs
 8007ca2:	4613      	movcs	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f001 f994 	bl	8008fd6 <USBD_CtlContinueRx>
 8007cae:	e07d      	b.n	8007dac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d014      	beq.n	8007ce8 <USBD_LL_DataOutStage+0x98>
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d81d      	bhi.n	8007cfe <USBD_LL_DataOutStage+0xae>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <USBD_LL_DataOutStage+0x7c>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <USBD_LL_DataOutStage+0x82>
 8007cca:	e018      	b.n	8007cfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75bb      	strb	r3, [r7, #22]
            break;
 8007cd0:	e018      	b.n	8007d04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 fa64 	bl	80081aa <USBD_CoreFindIF>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce6:	e00d      	b.n	8007d04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa66 	bl	80081c4 <USBD_CoreFindEP>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75bb      	strb	r3, [r7, #22]
            break;
 8007cfc:	e002      	b.n	8007d04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75bb      	strb	r3, [r7, #22]
            break;
 8007d02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d119      	bne.n	8007d3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d113      	bne.n	8007d3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d16:	7dba      	ldrb	r2, [r7, #22]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	32ae      	adds	r2, #174	@ 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d26:	7dba      	ldrb	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d2e:	7dba      	ldrb	r2, [r7, #22]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	32ae      	adds	r2, #174	@ 0xae
 8007d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 f95a 	bl	8008ff8 <USBD_CtlSendStatus>
 8007d44:	e032      	b.n	8007dac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fa37 	bl	80081c4 <USBD_CoreFindEP>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d5a:	7dbb      	ldrb	r3, [r7, #22]
 8007d5c:	2bff      	cmp	r3, #255	@ 0xff
 8007d5e:	d025      	beq.n	8007dac <USBD_LL_DataOutStage+0x15c>
 8007d60:	7dbb      	ldrb	r3, [r7, #22]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d122      	bne.n	8007dac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d117      	bne.n	8007da2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d72:	7dba      	ldrb	r2, [r7, #22]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	32ae      	adds	r2, #174	@ 0xae
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00f      	beq.n	8007da2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d82:	7dba      	ldrb	r2, [r7, #22]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d8a:	7dba      	ldrb	r2, [r7, #22]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	32ae      	adds	r2, #174	@ 0xae
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	7afa      	ldrb	r2, [r7, #11]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	e000      	b.n	8007dae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d16f      	bne.n	8007eaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d15a      	bne.n	8007e90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d914      	bls.n	8007e10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f001 f8bc 	bl	8008f7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e02:	2300      	movs	r3, #0
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f001 fdc1 	bl	8009990 <USBD_LL_PrepareReceive>
 8007e0e:	e03f      	b.n	8007e90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d11c      	bne.n	8007e56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d316      	bcc.n	8007e56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d20f      	bcs.n	8007e56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f001 f89d 	bl	8008f7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f001 fd9e 	bl	8009990 <USBD_LL_PrepareReceive>
 8007e54:	e01c      	b.n	8007e90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d10f      	bne.n	8007e82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fcd9 	bl	800983c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f001 f8c7 	bl	800901e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03a      	beq.n	8007f10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fe42 	bl	8007b24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ea8:	e032      	b.n	8007f10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f985 	bl	80081c4 <USBD_CoreFindEP>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2bff      	cmp	r3, #255	@ 0xff
 8007ec2:	d025      	beq.n	8007f10 <USBD_LL_DataInStage+0x15a>
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d122      	bne.n	8007f10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d11c      	bne.n	8007f10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ed6:	7dfa      	ldrb	r2, [r7, #23]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	32ae      	adds	r2, #174	@ 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ee6:	7dfa      	ldrb	r2, [r7, #23]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007eee:	7dfa      	ldrb	r2, [r7, #23]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	32ae      	adds	r2, #174	@ 0xae
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	7afa      	ldrb	r2, [r7, #11]
 8007efc:	4611      	mov	r1, r2
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f06:	7dbb      	ldrb	r3, [r7, #22]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f0c:	7dbb      	ldrb	r3, [r7, #22]
 8007f0e:	e000      	b.n	8007f12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d014      	beq.n	8007f80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00e      	beq.n	8007f80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6852      	ldr	r2, [r2, #4]
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	4611      	mov	r1, r2
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f80:	2340      	movs	r3, #64	@ 0x40
 8007f82:	2200      	movs	r2, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fc13 	bl	80097b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2240      	movs	r2, #64	@ 0x40
 8007f98:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f9c:	2340      	movs	r3, #64	@ 0x40
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2180      	movs	r1, #128	@ 0x80
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fc05 	bl	80097b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2240      	movs	r2, #64	@ 0x40
 8007fb2:	621a      	str	r2, [r3, #32]

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d006      	beq.n	8008000 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2204      	movs	r2, #4
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b04      	cmp	r3, #4
 8008028:	d106      	bne.n	8008038 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008030:	b2da      	uxtb	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d110      	bne.n	800807c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32ae      	adds	r2, #174	@ 0xae
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e01c      	b.n	80080e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d115      	bne.n	80080e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	32ae      	adds	r2, #174	@ 0xae
 80080be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	@ 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	78fa      	ldrb	r2, [r7, #3]
 80080da:	4611      	mov	r1, r2
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32ae      	adds	r2, #174	@ 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	e01c      	b.n	8008146 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b03      	cmp	r3, #3
 8008116:	d115      	bne.n	8008144 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32ae      	adds	r2, #174	@ 0xae
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	@ 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00e      	beq.n	80081a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6852      	ldr	r2, [r2, #4]
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	4611      	mov	r1, r2
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	7812      	ldrb	r2, [r2, #0]
 8008200:	4293      	cmp	r3, r2
 8008202:	d91f      	bls.n	8008244 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800820a:	e013      	b.n	8008234 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800820c:	f107 030a 	add.w	r3, r7, #10
 8008210:	4619      	mov	r1, r3
 8008212:	6978      	ldr	r0, [r7, #20]
 8008214:	f000 f81b 	bl	800824e <USBD_GetNextDesc>
 8008218:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b05      	cmp	r3, #5
 8008220:	d108      	bne.n	8008234 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	78fa      	ldrb	r2, [r7, #3]
 800822c:	429a      	cmp	r2, r3
 800822e:	d008      	beq.n	8008242 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	b29a      	uxth	r2, r3
 800823a:	897b      	ldrh	r3, [r7, #10]
 800823c:	429a      	cmp	r2, r3
 800823e:	d8e5      	bhi.n	800820c <USBD_GetEpDesc+0x2e>
 8008240:	e000      	b.n	8008244 <USBD_GetEpDesc+0x66>
          break;
 8008242:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008244:	693b      	ldr	r3, [r7, #16]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	4413      	add	r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008286:	b480      	push	{r7}
 8008288:	b087      	sub	sp, #28
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	3301      	adds	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082a4:	8a3b      	ldrh	r3, [r7, #16]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	b21a      	sxth	r2, r3
 80082aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b21b      	sxth	r3, r3
 80082b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082b4:	89fb      	ldrh	r3, [r7, #14]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082da:	2b40      	cmp	r3, #64	@ 0x40
 80082dc:	d005      	beq.n	80082ea <USBD_StdDevReq+0x26>
 80082de:	2b40      	cmp	r3, #64	@ 0x40
 80082e0:	d857      	bhi.n	8008392 <USBD_StdDevReq+0xce>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00f      	beq.n	8008306 <USBD_StdDevReq+0x42>
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d153      	bne.n	8008392 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	32ae      	adds	r2, #174	@ 0xae
 80082f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
      break;
 8008304:	e04a      	b.n	800839c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b09      	cmp	r3, #9
 800830c:	d83b      	bhi.n	8008386 <USBD_StdDevReq+0xc2>
 800830e:	a201      	add	r2, pc, #4	@ (adr r2, 8008314 <USBD_StdDevReq+0x50>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	08008369 	.word	0x08008369
 8008318:	0800837d 	.word	0x0800837d
 800831c:	08008387 	.word	0x08008387
 8008320:	08008373 	.word	0x08008373
 8008324:	08008387 	.word	0x08008387
 8008328:	08008347 	.word	0x08008347
 800832c:	0800833d 	.word	0x0800833d
 8008330:	08008387 	.word	0x08008387
 8008334:	0800835f 	.word	0x0800835f
 8008338:	08008351 	.word	0x08008351
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa3c 	bl	80087bc <USBD_GetDescriptor>
          break;
 8008344:	e024      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fba1 	bl	8008a90 <USBD_SetAddress>
          break;
 800834e:	e01f      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fbe0 	bl	8008b18 <USBD_SetConfig>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
          break;
 800835c:	e018      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc83 	bl	8008c6c <USBD_GetConfig>
          break;
 8008366:	e013      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fcb4 	bl	8008cd8 <USBD_GetStatus>
          break;
 8008370:	e00e      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fce3 	bl	8008d40 <USBD_SetFeature>
          break;
 800837a:	e009      	b.n	8008390 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fd07 	bl	8008d92 <USBD_ClrFeature>
          break;
 8008384:	e004      	b.n	8008390 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fd5e 	bl	8008e4a <USBD_CtlError>
          break;
 800838e:	bf00      	nop
      }
      break;
 8008390:	e004      	b.n	800839c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fd58 	bl	8008e4a <USBD_CtlError>
      break;
 800839a:	bf00      	nop
  }

  return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop

080083a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083be:	2b40      	cmp	r3, #64	@ 0x40
 80083c0:	d005      	beq.n	80083ce <USBD_StdItfReq+0x26>
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d852      	bhi.n	800846c <USBD_StdItfReq+0xc4>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <USBD_StdItfReq+0x26>
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d14e      	bne.n	800846c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d840      	bhi.n	800845e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	889b      	ldrh	r3, [r3, #4]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d836      	bhi.n	8008454 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	889b      	ldrh	r3, [r3, #4]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fedb 	bl	80081aa <USBD_CoreFindIF>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2bff      	cmp	r3, #255	@ 0xff
 80083fc:	d01d      	beq.n	800843a <USBD_StdItfReq+0x92>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11a      	bne.n	800843a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008404:	7bba      	ldrb	r2, [r7, #14]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	32ae      	adds	r2, #174	@ 0xae
 800840a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00f      	beq.n	8008434 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008414:	7bba      	ldrb	r2, [r7, #14]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800841c:	7bba      	ldrb	r2, [r7, #14]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32ae      	adds	r2, #174	@ 0xae
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008432:	e004      	b.n	800843e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008434:	2303      	movs	r3, #3
 8008436:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008438:	e001      	b.n	800843e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d110      	bne.n	8008468 <USBD_StdItfReq+0xc0>
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10d      	bne.n	8008468 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fdd3 	bl	8008ff8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008452:	e009      	b.n	8008468 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fcf7 	bl	8008e4a <USBD_CtlError>
          break;
 800845c:	e004      	b.n	8008468 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fcf2 	bl	8008e4a <USBD_CtlError>
          break;
 8008466:	e000      	b.n	800846a <USBD_StdItfReq+0xc2>
          break;
 8008468:	bf00      	nop
      }
      break;
 800846a:	e004      	b.n	8008476 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fceb 	bl	8008e4a <USBD_CtlError>
      break;
 8008474:	bf00      	nop
  }

  return ret;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	889b      	ldrh	r3, [r3, #4]
 8008492:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800849c:	2b40      	cmp	r3, #64	@ 0x40
 800849e:	d007      	beq.n	80084b0 <USBD_StdEPReq+0x30>
 80084a0:	2b40      	cmp	r3, #64	@ 0x40
 80084a2:	f200 817f 	bhi.w	80087a4 <USBD_StdEPReq+0x324>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d02a      	beq.n	8008500 <USBD_StdEPReq+0x80>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	f040 817a 	bne.w	80087a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fe85 	bl	80081c4 <USBD_CoreFindEP>
 80084ba:	4603      	mov	r3, r0
 80084bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084be:	7b7b      	ldrb	r3, [r7, #13]
 80084c0:	2bff      	cmp	r3, #255	@ 0xff
 80084c2:	f000 8174 	beq.w	80087ae <USBD_StdEPReq+0x32e>
 80084c6:	7b7b      	ldrb	r3, [r7, #13]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f040 8170 	bne.w	80087ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084ce:	7b7a      	ldrb	r2, [r7, #13]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084d6:	7b7a      	ldrb	r2, [r7, #13]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	32ae      	adds	r2, #174	@ 0xae
 80084dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8163 	beq.w	80087ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084e8:	7b7a      	ldrb	r2, [r7, #13]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	32ae      	adds	r2, #174	@ 0xae
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	4798      	blx	r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084fe:	e156      	b.n	80087ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d008      	beq.n	800851a <USBD_StdEPReq+0x9a>
 8008508:	2b03      	cmp	r3, #3
 800850a:	f300 8145 	bgt.w	8008798 <USBD_StdEPReq+0x318>
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 809b 	beq.w	800864a <USBD_StdEPReq+0x1ca>
 8008514:	2b01      	cmp	r3, #1
 8008516:	d03c      	beq.n	8008592 <USBD_StdEPReq+0x112>
 8008518:	e13e      	b.n	8008798 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d002      	beq.n	800852c <USBD_StdEPReq+0xac>
 8008526:	2b03      	cmp	r3, #3
 8008528:	d016      	beq.n	8008558 <USBD_StdEPReq+0xd8>
 800852a:	e02c      	b.n	8008586 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00d      	beq.n	800854e <USBD_StdEPReq+0xce>
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b80      	cmp	r3, #128	@ 0x80
 8008536:	d00a      	beq.n	800854e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f97d 	bl	800983c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008542:	2180      	movs	r1, #128	@ 0x80
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f979 	bl	800983c <USBD_LL_StallEP>
 800854a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800854c:	e020      	b.n	8008590 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fc7a 	bl	8008e4a <USBD_CtlError>
              break;
 8008556:	e01b      	b.n	8008590 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10e      	bne.n	800857e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <USBD_StdEPReq+0xfe>
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b80      	cmp	r3, #128	@ 0x80
 800856a:	d008      	beq.n	800857e <USBD_StdEPReq+0xfe>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	88db      	ldrh	r3, [r3, #6]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f95f 	bl	800983c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fd3a 	bl	8008ff8 <USBD_CtlSendStatus>

              break;
 8008584:	e004      	b.n	8008590 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fc5e 	bl	8008e4a <USBD_CtlError>
              break;
 800858e:	bf00      	nop
          }
          break;
 8008590:	e107      	b.n	80087a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d002      	beq.n	80085a4 <USBD_StdEPReq+0x124>
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d016      	beq.n	80085d0 <USBD_StdEPReq+0x150>
 80085a2:	e04b      	b.n	800863c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <USBD_StdEPReq+0x146>
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b80      	cmp	r3, #128	@ 0x80
 80085ae:	d00a      	beq.n	80085c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f941 	bl	800983c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ba:	2180      	movs	r1, #128	@ 0x80
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f93d 	bl	800983c <USBD_LL_StallEP>
 80085c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085c4:	e040      	b.n	8008648 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc3e 	bl	8008e4a <USBD_CtlError>
              break;
 80085ce:	e03b      	b.n	8008648 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d136      	bne.n	8008646 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 f947 	bl	800987a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd03 	bl	8008ff8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff fde4 	bl	80081c4 <USBD_CoreFindEP>
 80085fc:	4603      	mov	r3, r0
 80085fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008600:	7b7b      	ldrb	r3, [r7, #13]
 8008602:	2bff      	cmp	r3, #255	@ 0xff
 8008604:	d01f      	beq.n	8008646 <USBD_StdEPReq+0x1c6>
 8008606:	7b7b      	ldrb	r3, [r7, #13]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d11c      	bne.n	8008646 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800860c:	7b7a      	ldrb	r2, [r7, #13]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008614:	7b7a      	ldrb	r2, [r7, #13]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32ae      	adds	r2, #174	@ 0xae
 800861a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d010      	beq.n	8008646 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008624:	7b7a      	ldrb	r2, [r7, #13]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32ae      	adds	r2, #174	@ 0xae
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800863a:	e004      	b.n	8008646 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fc03 	bl	8008e4a <USBD_CtlError>
              break;
 8008644:	e000      	b.n	8008648 <USBD_StdEPReq+0x1c8>
              break;
 8008646:	bf00      	nop
          }
          break;
 8008648:	e0ab      	b.n	80087a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d002      	beq.n	800865c <USBD_StdEPReq+0x1dc>
 8008656:	2b03      	cmp	r3, #3
 8008658:	d032      	beq.n	80086c0 <USBD_StdEPReq+0x240>
 800865a:	e097      	b.n	800878c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <USBD_StdEPReq+0x1f2>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b80      	cmp	r3, #128	@ 0x80
 8008666:	d004      	beq.n	8008672 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fbed 	bl	8008e4a <USBD_CtlError>
                break;
 8008670:	e091      	b.n	8008796 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	da0b      	bge.n	8008692 <USBD_StdEPReq+0x212>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	3310      	adds	r3, #16
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	3304      	adds	r3, #4
 8008690:	e00b      	b.n	80086aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	3304      	adds	r3, #4
 80086aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2202      	movs	r2, #2
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc43 	bl	8008f44 <USBD_CtlSendData>
              break;
 80086be:	e06a      	b.n	8008796 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da11      	bge.n	80086ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	f003 020f 	and.w	r2, r3, #15
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	3324      	adds	r3, #36	@ 0x24
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d117      	bne.n	8008712 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fbb0 	bl	8008e4a <USBD_CtlError>
                  break;
 80086ea:	e054      	b.n	8008796 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fb9d 	bl	8008e4a <USBD_CtlError>
                  break;
 8008710:	e041      	b.n	8008796 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da0b      	bge.n	8008732 <USBD_StdEPReq+0x2b2>
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	3310      	adds	r3, #16
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	e00b      	b.n	800874a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <USBD_StdEPReq+0x2d8>
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b80      	cmp	r3, #128	@ 0x80
 8008756:	d103      	bne.n	8008760 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e00e      	b.n	800877e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f8a7 	bl	80098b8 <USBD_LL_IsStallEP>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e002      	b.n	800877e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2202      	movs	r2, #2
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbdd 	bl	8008f44 <USBD_CtlSendData>
              break;
 800878a:	e004      	b.n	8008796 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb5b 	bl	8008e4a <USBD_CtlError>
              break;
 8008794:	bf00      	nop
          }
          break;
 8008796:	e004      	b.n	80087a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb55 	bl	8008e4a <USBD_CtlError>
          break;
 80087a0:	bf00      	nop
      }
      break;
 80087a2:	e005      	b.n	80087b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb4f 	bl	8008e4a <USBD_CtlError>
      break;
 80087ac:	e000      	b.n	80087b0 <USBD_StdEPReq+0x330>
      break;
 80087ae:	bf00      	nop
  }

  return ret;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b06      	cmp	r3, #6
 80087de:	f200 8128 	bhi.w	8008a32 <USBD_GetDescriptor+0x276>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <USBD_GetDescriptor+0x2c>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008805 	.word	0x08008805
 80087ec:	0800881d 	.word	0x0800881d
 80087f0:	0800885d 	.word	0x0800885d
 80087f4:	08008a33 	.word	0x08008a33
 80087f8:	08008a33 	.word	0x08008a33
 80087fc:	080089d3 	.word	0x080089d3
 8008800:	080089ff 	.word	0x080089ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
      break;
 800881a:	e112      	b.n	8008a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7c1b      	ldrb	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10d      	bne.n	8008840 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	f107 0208 	add.w	r2, r7, #8
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
 8008834:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	2202      	movs	r2, #2
 800883c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800883e:	e100      	b.n	8008a42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	f107 0208 	add.w	r2, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	2202      	movs	r2, #2
 8008858:	701a      	strb	r2, [r3, #0]
      break;
 800885a:	e0f2      	b.n	8008a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	885b      	ldrh	r3, [r3, #2]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b05      	cmp	r3, #5
 8008864:	f200 80ac 	bhi.w	80089c0 <USBD_GetDescriptor+0x204>
 8008868:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <USBD_GetDescriptor+0xb4>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008889 	.word	0x08008889
 8008874:	080088bd 	.word	0x080088bd
 8008878:	080088f1 	.word	0x080088f1
 800887c:	08008925 	.word	0x08008925
 8008880:	08008959 	.word	0x08008959
 8008884:	0800898d 	.word	0x0800898d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e091      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 facb 	bl	8008e4a <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e089      	b.n	80089d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088de:	e077      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fab1 	bl	8008e4a <USBD_CtlError>
            err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
          break;
 80088ee:	e06f      	b.n	80089d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e05d      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa97 	bl	8008e4a <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e055      	b.n	80089d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e043      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa7d 	bl	8008e4a <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e03b      	b.n	80089d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e029      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa63 	bl	8008e4a <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e021      	b.n	80089d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e00f      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa49 	bl	8008e4a <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e007      	b.n	80089d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa41 	bl	8008e4a <USBD_CtlError>
          err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089ce:	bf00      	nop
      }
      break;
 80089d0:	e037      	b.n	8008a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7c1b      	ldrb	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d109      	bne.n	80089ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e2:	f107 0208 	add.w	r2, r7, #8
 80089e6:	4610      	mov	r0, r2
 80089e8:	4798      	blx	r3
 80089ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ec:	e029      	b.n	8008a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fa2a 	bl	8008e4a <USBD_CtlError>
        err++;
 80089f6:	7afb      	ldrb	r3, [r7, #11]
 80089f8:	3301      	adds	r3, #1
 80089fa:	72fb      	strb	r3, [r7, #11]
      break;
 80089fc:	e021      	b.n	8008a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7c1b      	ldrb	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10d      	bne.n	8008a22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	f107 0208 	add.w	r2, r7, #8
 8008a12:	4610      	mov	r0, r2
 8008a14:	4798      	blx	r3
 8008a16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	2207      	movs	r2, #7
 8008a1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a20:	e00f      	b.n	8008a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fa10 	bl	8008e4a <USBD_CtlError>
        err++;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a30:	e007      	b.n	8008a42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fa08 	bl	8008e4a <USBD_CtlError>
      err++;
 8008a3a:	7afb      	ldrb	r3, [r7, #11]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a40:	bf00      	nop
  }

  if (err != 0U)
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d11e      	bne.n	8008a86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	88db      	ldrh	r3, [r3, #6]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d016      	beq.n	8008a7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a50:	893b      	ldrh	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88da      	ldrh	r2, [r3, #6]
 8008a5a:	893b      	ldrh	r3, [r7, #8]
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	bf28      	it	cs
 8008a60:	4613      	movcs	r3, r2
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a66:	893b      	ldrh	r3, [r7, #8]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68f9      	ldr	r1, [r7, #12]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fa69 	bl	8008f44 <USBD_CtlSendData>
 8008a72:	e009      	b.n	8008a88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f9e7 	bl	8008e4a <USBD_CtlError>
 8008a7c:	e004      	b.n	8008a88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 faba 	bl	8008ff8 <USBD_CtlSendStatus>
 8008a84:	e000      	b.n	8008a88 <USBD_GetDescriptor+0x2cc>
    return;
 8008a86:	bf00      	nop
  }
}
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop

08008a90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d131      	bne.n	8008b06 <USBD_SetAddress+0x76>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d12d      	bne.n	8008b06 <USBD_SetAddress+0x76>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ab0:	d829      	bhi.n	8008b06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d104      	bne.n	8008ad4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9bc 	bl	8008e4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	e01d      	b.n	8008b10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7bfa      	ldrb	r2, [r7, #15]
 8008ad8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 ff15 	bl	8009910 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa86 	bl	8008ff8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2202      	movs	r2, #2
 8008af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	e009      	b.n	8008b10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b04:	e004      	b.n	8008b10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f99e 	bl	8008e4a <USBD_CtlError>
  }
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008b2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b30:	4b4d      	ldr	r3, [pc, #308]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d905      	bls.n	8008b44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f985 	bl	8008e4a <USBD_CtlError>
    return USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e08c      	b.n	8008c5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d002      	beq.n	8008b56 <USBD_SetConfig+0x3e>
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d029      	beq.n	8008ba8 <USBD_SetConfig+0x90>
 8008b54:	e075      	b.n	8008c42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b56:	4b44      	ldr	r3, [pc, #272]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d020      	beq.n	8008ba0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b5e:	4b42      	ldr	r3, [pc, #264]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b68:	4b3f      	ldr	r3, [pc, #252]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fe ffe3 	bl	8007b3a <USBD_SetClassConfig>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f962 	bl	8008e4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b8e:	e065      	b.n	8008c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa31 	bl	8008ff8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2203      	movs	r2, #3
 8008b9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b9e:	e05d      	b.n	8008c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fa29 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008ba6:	e059      	b.n	8008c5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d112      	bne.n	8008bd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bc2:	4b29      	ldr	r3, [pc, #164]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fe ffd2 	bl	8007b72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa12 	bl	8008ff8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bd4:	e042      	b.n	8008c5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bd6:	4b24      	ldr	r3, [pc, #144]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d02a      	beq.n	8008c3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7fe ffc0 	bl	8007b72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7fe ff99 	bl	8007b3a <USBD_SetClassConfig>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00f      	beq.n	8008c32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f918 	bl	8008e4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fe ffa5 	bl	8007b72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c30:	e014      	b.n	8008c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9e0 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008c38:	e010      	b.n	8008c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9dc 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008c40:	e00c      	b.n	8008c5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f900 	bl	8008e4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c4a:	4b07      	ldr	r3, [pc, #28]	@ (8008c68 <USBD_SetConfig+0x150>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7fe ff8e 	bl	8007b72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c56:	2303      	movs	r3, #3
 8008c58:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5a:	bf00      	nop
  }

  return ret;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000424 	.word	0x20000424

08008c6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	88db      	ldrh	r3, [r3, #6]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d004      	beq.n	8008c88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f8e2 	bl	8008e4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c86:	e023      	b.n	8008cd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	dc02      	bgt.n	8008c9a <USBD_GetConfig+0x2e>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc03      	bgt.n	8008ca0 <USBD_GetConfig+0x34>
 8008c98:	e015      	b.n	8008cc6 <USBD_GetConfig+0x5a>
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d00b      	beq.n	8008cb6 <USBD_GetConfig+0x4a>
 8008c9e:	e012      	b.n	8008cc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	2201      	movs	r2, #1
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f948 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008cb4:	e00c      	b.n	8008cd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f940 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008cc4:	e004      	b.n	8008cd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f8be 	bl	8008e4a <USBD_CtlError>
        break;
 8008cce:	bf00      	nop
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d81e      	bhi.n	8008d2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	88db      	ldrh	r3, [r3, #6]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d004      	beq.n	8008d02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8a5 	bl	8008e4a <USBD_CtlError>
        break;
 8008d00:	e01a      	b.n	8008d38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d005      	beq.n	8008d1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f043 0202 	orr.w	r2, r3, #2
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	330c      	adds	r3, #12
 8008d22:	2202      	movs	r2, #2
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f90c 	bl	8008f44 <USBD_CtlSendData>
      break;
 8008d2c:	e004      	b.n	8008d38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f88a 	bl	8008e4a <USBD_CtlError>
      break;
 8008d36:	bf00      	nop
  }
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	885b      	ldrh	r3, [r3, #2]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d107      	bne.n	8008d62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f94c 	bl	8008ff8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d60:	e013      	b.n	8008d8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	885b      	ldrh	r3, [r3, #2]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d10b      	bne.n	8008d82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f93c 	bl	8008ff8 <USBD_CtlSendStatus>
}
 8008d80:	e003      	b.n	8008d8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f860 	bl	8008e4a <USBD_CtlError>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d80b      	bhi.n	8008dc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	885b      	ldrh	r3, [r3, #2]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d10c      	bne.n	8008dcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f91c 	bl	8008ff8 <USBD_CtlSendStatus>
      }
      break;
 8008dc0:	e004      	b.n	8008dcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f840 	bl	8008e4a <USBD_CtlError>
      break;
 8008dca:	e000      	b.n	8008dce <USBD_ClrFeature+0x3c>
      break;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fa40 	bl	8008286 <SWAPBYTE>
 8008e06:	4603      	mov	r3, r0
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff fa33 	bl	8008286 <SWAPBYTE>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3301      	adds	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff fa26 	bl	8008286 <SWAPBYTE>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	80da      	strh	r2, [r3, #6]
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e54:	2180      	movs	r1, #128	@ 0x80
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fcf0 	bl	800983c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fcec 	bl	800983c <USBD_LL_StallEP>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d042      	beq.n	8008f08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e86:	6938      	ldr	r0, [r7, #16]
 8008e88:	f000 f842 	bl	8008f10 <USBD_GetLen>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	3301      	adds	r3, #1
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e96:	d808      	bhi.n	8008eaa <USBD_GetString+0x3e>
 8008e98:	6938      	ldr	r0, [r7, #16]
 8008e9a:	f000 f839 	bl	8008f10 <USBD_GetLen>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	e001      	b.n	8008eae <USBD_GetString+0x42>
 8008eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7812      	ldrb	r2, [r2, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4413      	add	r3, r2
 8008eca:	2203      	movs	r2, #3
 8008ecc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ed4:	e013      	b.n	8008efe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
    idx++;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	3301      	adds	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e7      	bne.n	8008ed6 <USBD_GetString+0x6a>
 8008f06:	e000      	b.n	8008f0a <USBD_GetString+0x9e>
    return;
 8008f08:	bf00      	nop
  }
}
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f20:	e005      	b.n	8008f2e <USBD_GetLen+0x1e>
  {
    len++;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	3301      	adds	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f5      	bne.n	8008f22 <USBD_GetLen+0x12>
  }

  return len;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fcef 	bl	800994e <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fcde 	bl	800994e <USBD_LL_Transmit>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2203      	movs	r2, #3
 8008fac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fce2 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fcd1 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fc9d 	bl	800994e <USBD_LL_Transmit>

  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2205      	movs	r2, #5
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902e:	2300      	movs	r3, #0
 8009030:	2200      	movs	r2, #0
 8009032:	2100      	movs	r1, #0
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fcab 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009048:	2200      	movs	r2, #0
 800904a:	4912      	ldr	r1, [pc, #72]	@ (8009094 <MX_USB_DEVICE_Init+0x50>)
 800904c:	4812      	ldr	r0, [pc, #72]	@ (8009098 <MX_USB_DEVICE_Init+0x54>)
 800904e:	f7fe fcf7 	bl	8007a40 <USBD_Init>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009058:	f7f8 faee 	bl	8001638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800905c:	490f      	ldr	r1, [pc, #60]	@ (800909c <MX_USB_DEVICE_Init+0x58>)
 800905e:	480e      	ldr	r0, [pc, #56]	@ (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009060:	f7fe fd1e 	bl	8007aa0 <USBD_RegisterClass>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800906a:	f7f8 fae5 	bl	8001638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800906e:	490c      	ldr	r1, [pc, #48]	@ (80090a0 <MX_USB_DEVICE_Init+0x5c>)
 8009070:	4809      	ldr	r0, [pc, #36]	@ (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009072:	f7fe fc15 	bl	80078a0 <USBD_CDC_RegisterInterface>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800907c:	f7f8 fadc 	bl	8001638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009080:	4805      	ldr	r0, [pc, #20]	@ (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009082:	f7fe fd43 	bl	8007b0c <USBD_Start>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800908c:	f7f8 fad4 	bl	8001638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009090:	bf00      	nop
 8009092:	bd80      	pop	{r7, pc}
 8009094:	200000ac 	.word	0x200000ac
 8009098:	20000428 	.word	0x20000428
 800909c:	20000018 	.word	0x20000018
 80090a0:	20000098 	.word	0x20000098

080090a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090a8:	2200      	movs	r2, #0
 80090aa:	4905      	ldr	r1, [pc, #20]	@ (80090c0 <CDC_Init_FS+0x1c>)
 80090ac:	4805      	ldr	r0, [pc, #20]	@ (80090c4 <CDC_Init_FS+0x20>)
 80090ae:	f7fe fc11 	bl	80078d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090b2:	4905      	ldr	r1, [pc, #20]	@ (80090c8 <CDC_Init_FS+0x24>)
 80090b4:	4803      	ldr	r0, [pc, #12]	@ (80090c4 <CDC_Init_FS+0x20>)
 80090b6:	f7fe fc2f 	bl	8007918 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090bc:	4618      	mov	r0, r3
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000f04 	.word	0x20000f04
 80090c4:	20000428 	.word	0x20000428
 80090c8:	20000704 	.word	0x20000704

080090cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
 80090e8:	4613      	mov	r3, r2
 80090ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	2b23      	cmp	r3, #35	@ 0x23
 80090f0:	d84a      	bhi.n	8009188 <CDC_Control_FS+0xac>
 80090f2:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <CDC_Control_FS+0x1c>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009189 	.word	0x08009189
 80090fc:	08009189 	.word	0x08009189
 8009100:	08009189 	.word	0x08009189
 8009104:	08009189 	.word	0x08009189
 8009108:	08009189 	.word	0x08009189
 800910c:	08009189 	.word	0x08009189
 8009110:	08009189 	.word	0x08009189
 8009114:	08009189 	.word	0x08009189
 8009118:	08009189 	.word	0x08009189
 800911c:	08009189 	.word	0x08009189
 8009120:	08009189 	.word	0x08009189
 8009124:	08009189 	.word	0x08009189
 8009128:	08009189 	.word	0x08009189
 800912c:	08009189 	.word	0x08009189
 8009130:	08009189 	.word	0x08009189
 8009134:	08009189 	.word	0x08009189
 8009138:	08009189 	.word	0x08009189
 800913c:	08009189 	.word	0x08009189
 8009140:	08009189 	.word	0x08009189
 8009144:	08009189 	.word	0x08009189
 8009148:	08009189 	.word	0x08009189
 800914c:	08009189 	.word	0x08009189
 8009150:	08009189 	.word	0x08009189
 8009154:	08009189 	.word	0x08009189
 8009158:	08009189 	.word	0x08009189
 800915c:	08009189 	.word	0x08009189
 8009160:	08009189 	.word	0x08009189
 8009164:	08009189 	.word	0x08009189
 8009168:	08009189 	.word	0x08009189
 800916c:	08009189 	.word	0x08009189
 8009170:	08009189 	.word	0x08009189
 8009174:	08009189 	.word	0x08009189
 8009178:	08009189 	.word	0x08009189
 800917c:	08009189 	.word	0x08009189
 8009180:	08009189 	.word	0x08009189
 8009184:	08009189 	.word	0x08009189
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009188:	bf00      	nop
  }

  return (USBD_OK);
 800918a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <CDC_Receive_FS+0x24>)
 80091a6:	f7fe fbb7 	bl	8007918 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091aa:	4804      	ldr	r0, [pc, #16]	@ (80091bc <CDC_Receive_FS+0x24>)
 80091ac:	f7fe fc12 	bl	80079d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000428 	.word	0x20000428

080091c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <CDC_Transmit_FS+0x48>)
 80091d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e00b      	b.n	80091fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091e6:	887b      	ldrh	r3, [r7, #2]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4806      	ldr	r0, [pc, #24]	@ (8009208 <CDC_Transmit_FS+0x48>)
 80091ee:	f7fe fb71 	bl	80078d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091f2:	4805      	ldr	r0, [pc, #20]	@ (8009208 <CDC_Transmit_FS+0x48>)
 80091f4:	f7fe fbae 	bl	8007954 <USBD_CDC_TransmitPacket>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000428 	.word	0x20000428

0800920c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800921e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2212      	movs	r2, #18
 8009240:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009242:	4b03      	ldr	r3, [pc, #12]	@ (8009250 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	200000c8 	.word	0x200000c8

08009254 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	6039      	str	r1, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2204      	movs	r2, #4
 8009264:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009266:	4b03      	ldr	r3, [pc, #12]	@ (8009274 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	200000dc 	.word	0x200000dc

08009278 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d105      	bne.n	8009296 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4907      	ldr	r1, [pc, #28]	@ (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
 800928e:	4808      	ldr	r0, [pc, #32]	@ (80092b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009290:	f7ff fdec 	bl	8008e6c <USBD_GetString>
 8009294:	e004      	b.n	80092a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4904      	ldr	r1, [pc, #16]	@ (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
 800929a:	4805      	ldr	r0, [pc, #20]	@ (80092b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800929c:	f7ff fde6 	bl	8008e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a0:	4b02      	ldr	r3, [pc, #8]	@ (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20001704 	.word	0x20001704
 80092b0:	0800c774 	.word	0x0800c774

080092b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	4904      	ldr	r1, [pc, #16]	@ (80092d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092c4:	4804      	ldr	r0, [pc, #16]	@ (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092c6:	f7ff fdd1 	bl	8008e6c <USBD_GetString>
  return USBD_StrDesc;
 80092ca:	4b02      	ldr	r3, [pc, #8]	@ (80092d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20001704 	.word	0x20001704
 80092d8:	0800c78c 	.word	0x0800c78c

080092dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	221a      	movs	r2, #26
 80092ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ee:	f000 f843 	bl	8009378 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092f2:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200000e0 	.word	0x200000e0

08009300 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4907      	ldr	r1, [pc, #28]	@ (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009316:	4808      	ldr	r0, [pc, #32]	@ (8009338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009318:	f7ff fda8 	bl	8008e6c <USBD_GetString>
 800931c:	e004      	b.n	8009328 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4904      	ldr	r1, [pc, #16]	@ (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009322:	4805      	ldr	r0, [pc, #20]	@ (8009338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009324:	f7ff fda2 	bl	8008e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	@ (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20001704 	.word	0x20001704
 8009338:	0800c7a0 	.word	0x0800c7a0

0800933c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4907      	ldr	r1, [pc, #28]	@ (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009352:	4808      	ldr	r0, [pc, #32]	@ (8009374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009354:	f7ff fd8a 	bl	8008e6c <USBD_GetString>
 8009358:	e004      	b.n	8009364 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4904      	ldr	r1, [pc, #16]	@ (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800935e:	4805      	ldr	r0, [pc, #20]	@ (8009374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009360:	f7ff fd84 	bl	8008e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009364:	4b02      	ldr	r3, [pc, #8]	@ (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001704 	.word	0x20001704
 8009374:	0800c7ac 	.word	0x0800c7ac

08009378 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800937e:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <Get_SerialNum+0x44>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009384:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <Get_SerialNum+0x48>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <Get_SerialNum+0x4c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800939e:	2208      	movs	r2, #8
 80093a0:	4909      	ldr	r1, [pc, #36]	@ (80093c8 <Get_SerialNum+0x50>)
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f814 	bl	80093d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093a8:	2204      	movs	r2, #4
 80093aa:	4908      	ldr	r1, [pc, #32]	@ (80093cc <Get_SerialNum+0x54>)
 80093ac:	68b8      	ldr	r0, [r7, #8]
 80093ae:	f000 f80f 	bl	80093d0 <IntToUnicode>
  }
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	1fff7a10 	.word	0x1fff7a10
 80093c0:	1fff7a14 	.word	0x1fff7a14
 80093c4:	1fff7a18 	.word	0x1fff7a18
 80093c8:	200000e2 	.word	0x200000e2
 80093cc:	200000f2 	.word	0x200000f2

080093d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
 80093e6:	e027      	b.n	8009438 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	0f1b      	lsrs	r3, r3, #28
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d80b      	bhi.n	8009408 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	0f1b      	lsrs	r3, r3, #28
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	4619      	mov	r1, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	440b      	add	r3, r1
 8009400:	3230      	adds	r2, #48	@ 0x30
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	e00a      	b.n	800941e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	0f1b      	lsrs	r3, r3, #28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	4619      	mov	r1, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	440b      	add	r3, r1
 8009418:	3237      	adds	r2, #55	@ 0x37
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	3301      	adds	r3, #1
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	4413      	add	r3, r2
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	3301      	adds	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
 8009438:	7dfa      	ldrb	r2, [r7, #23]
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	429a      	cmp	r2, r3
 800943e:	d3d3      	bcc.n	80093e8 <IntToUnicode+0x18>
  }
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
	...

08009450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	@ 0x28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009458:	f107 0314 	add.w	r3, r7, #20
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	605a      	str	r2, [r3, #4]
 8009462:	609a      	str	r2, [r3, #8]
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009470:	d147      	bne.n	8009502 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009472:	2300      	movs	r3, #0
 8009474:	613b      	str	r3, [r7, #16]
 8009476:	4b25      	ldr	r3, [pc, #148]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947a:	4a24      	ldr	r2, [pc, #144]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 800947c:	f043 0301 	orr.w	r3, r3, #1
 8009480:	6313      	str	r3, [r2, #48]	@ 0x30
 8009482:	4b22      	ldr	r3, [pc, #136]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	613b      	str	r3, [r7, #16]
 800948c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800948e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800949c:	f107 0314 	add.w	r3, r7, #20
 80094a0:	4619      	mov	r1, r3
 80094a2:	481b      	ldr	r0, [pc, #108]	@ (8009510 <HAL_PCD_MspInit+0xc0>)
 80094a4:	f7f8 fd38 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80094ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ae:	2302      	movs	r3, #2
 80094b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094b6:	2303      	movs	r3, #3
 80094b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094ba:	230a      	movs	r3, #10
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4619      	mov	r1, r3
 80094c4:	4812      	ldr	r0, [pc, #72]	@ (8009510 <HAL_PCD_MspInit+0xc0>)
 80094c6:	f7f8 fd27 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094ca:	4b10      	ldr	r3, [pc, #64]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 80094cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ce:	4a0f      	ldr	r2, [pc, #60]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 80094d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	4b0c      	ldr	r3, [pc, #48]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 80094dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094de:	4a0b      	ldr	r2, [pc, #44]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 80094e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80094e6:	4b09      	ldr	r3, [pc, #36]	@ (800950c <HAL_PCD_MspInit+0xbc>)
 80094e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	2043      	movs	r0, #67	@ 0x43
 80094f8:	f7f8 fcd7 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094fc:	2043      	movs	r0, #67	@ 0x43
 80094fe:	f7f8 fcf0 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009502:	bf00      	nop
 8009504:	3728      	adds	r7, #40	@ 0x28
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	40023800 	.word	0x40023800
 8009510:	40020000 	.word	0x40020000

08009514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7fe fb3b 	bl	8007ba6 <USBD_LL_SetupStage>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	4619      	mov	r1, r3
 8009562:	f7fe fb75 	bl	8007c50 <USBD_LL_DataOutStage>
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	3320      	adds	r3, #32
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	4619      	mov	r1, r3
 8009596:	f7fe fc0e 	bl	8007db6 <USBD_LL_DataInStage>
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fd48 	bl	8008046 <USBD_LL_SOF>
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095c6:	2301      	movs	r3, #1
 80095c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	79db      	ldrb	r3, [r3, #7]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d001      	beq.n	80095d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095d2:	f7f8 f831 	bl	8001638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095dc:	7bfa      	ldrb	r2, [r7, #15]
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fcec 	bl	8007fbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fc94 	bl	8007f1a <USBD_LL_Reset>
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe fce7 	bl	8007fde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	7adb      	ldrb	r3, [r3, #11]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <HAL_PCD_SuspendCallback+0x48>)
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	4a03      	ldr	r2, [pc, #12]	@ (8009644 <HAL_PCD_SuspendCallback+0x48>)
 8009636:	f043 0306 	orr.w	r3, r3, #6
 800963a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed00 	.word	0xe000ed00

08009648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fcdd 	bl	8008016 <USBD_LL_Resume>
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fd35 	bl	80080ea <USBD_LL_IsoOUTIncomplete>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fcf1 	bl	8008086 <USBD_LL_IsoINIncomplete>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fd47 	bl	800814e <USBD_LL_DevConnected>
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fd44 	bl	8008164 <USBD_LL_DevDisconnected>
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d13c      	bne.n	800976e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096f4:	4a20      	ldr	r2, [pc, #128]	@ (8009778 <USBD_LL_Init+0x94>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009778 <USBD_LL_Init+0x94>)
 8009700:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009704:	4b1c      	ldr	r3, [pc, #112]	@ (8009778 <USBD_LL_Init+0x94>)
 8009706:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800970a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800970c:	4b1a      	ldr	r3, [pc, #104]	@ (8009778 <USBD_LL_Init+0x94>)
 800970e:	2204      	movs	r2, #4
 8009710:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009712:	4b19      	ldr	r3, [pc, #100]	@ (8009778 <USBD_LL_Init+0x94>)
 8009714:	2202      	movs	r2, #2
 8009716:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009718:	4b17      	ldr	r3, [pc, #92]	@ (8009778 <USBD_LL_Init+0x94>)
 800971a:	2200      	movs	r2, #0
 800971c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800971e:	4b16      	ldr	r3, [pc, #88]	@ (8009778 <USBD_LL_Init+0x94>)
 8009720:	2202      	movs	r2, #2
 8009722:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009724:	4b14      	ldr	r3, [pc, #80]	@ (8009778 <USBD_LL_Init+0x94>)
 8009726:	2200      	movs	r2, #0
 8009728:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800972a:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <USBD_LL_Init+0x94>)
 800972c:	2200      	movs	r2, #0
 800972e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009730:	4b11      	ldr	r3, [pc, #68]	@ (8009778 <USBD_LL_Init+0x94>)
 8009732:	2200      	movs	r2, #0
 8009734:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009736:	4b10      	ldr	r3, [pc, #64]	@ (8009778 <USBD_LL_Init+0x94>)
 8009738:	2201      	movs	r2, #1
 800973a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800973c:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <USBD_LL_Init+0x94>)
 800973e:	2200      	movs	r2, #0
 8009740:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009742:	480d      	ldr	r0, [pc, #52]	@ (8009778 <USBD_LL_Init+0x94>)
 8009744:	f7f9 fb6a 	bl	8002e1c <HAL_PCD_Init>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800974e:	f7f7 ff73 	bl	8001638 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009752:	2180      	movs	r1, #128	@ 0x80
 8009754:	4808      	ldr	r0, [pc, #32]	@ (8009778 <USBD_LL_Init+0x94>)
 8009756:	f7fa fd96 	bl	8004286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800975a:	2240      	movs	r2, #64	@ 0x40
 800975c:	2100      	movs	r1, #0
 800975e:	4806      	ldr	r0, [pc, #24]	@ (8009778 <USBD_LL_Init+0x94>)
 8009760:	f7fa fd4a 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009764:	2280      	movs	r2, #128	@ 0x80
 8009766:	2101      	movs	r1, #1
 8009768:	4803      	ldr	r0, [pc, #12]	@ (8009778 <USBD_LL_Init+0x94>)
 800976a:	f7fa fd45 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20001904 	.word	0x20001904

0800977c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009792:	4618      	mov	r0, r3
 8009794:	f7f9 fc51 	bl	800303a <HAL_PCD_Start>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f942 	bl	8009a28 <USBD_Get_USB_Status>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	461a      	mov	r2, r3
 80097c0:	4603      	mov	r3, r0
 80097c2:	70fb      	strb	r3, [r7, #3]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70bb      	strb	r3, [r7, #2]
 80097c8:	4613      	mov	r3, r2
 80097ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097da:	78bb      	ldrb	r3, [r7, #2]
 80097dc:	883a      	ldrh	r2, [r7, #0]
 80097de:	78f9      	ldrb	r1, [r7, #3]
 80097e0:	f7fa f925 	bl	8003a2e <HAL_PCD_EP_Open>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f91c 	bl	8009a28 <USBD_Get_USB_Status>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f7fa f970 	bl	8003b02 <HAL_PCD_EP_Close>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f8fd 	bl	8009a28 <USBD_Get_USB_Status>
 800982e:	4603      	mov	r3, r0
 8009830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009832:	7bbb      	ldrb	r3, [r7, #14]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009856:	78fa      	ldrb	r2, [r7, #3]
 8009858:	4611      	mov	r1, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa fa28 	bl	8003cb0 <HAL_PCD_EP_SetStall>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f8de 	bl	8009a28 <USBD_Get_USB_Status>
 800986c:	4603      	mov	r3, r0
 800986e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7fa fa6c 	bl	8003d76 <HAL_PCD_EP_ClrStall>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 f8bf 	bl	8009a28 <USBD_Get_USB_Status>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	da0b      	bge.n	80098ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	4613      	mov	r3, r2
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	440b      	add	r3, r1
 80098e6:	3316      	adds	r3, #22
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	e00b      	b.n	8009904 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009902:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800992a:	78fa      	ldrb	r2, [r7, #3]
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f7fa f859 	bl	80039e6 <HAL_PCD_SetAddress>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 f874 	bl	8009a28 <USBD_Get_USB_Status>
 8009940:	4603      	mov	r3, r0
 8009942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009944:	7bbb      	ldrb	r3, [r7, #14]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	460b      	mov	r3, r1
 800995c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800996c:	7af9      	ldrb	r1, [r7, #11]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f7fa f963 	bl	8003c3c <HAL_PCD_EP_Transmit>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f853 	bl	8009a28 <USBD_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009986:	7dbb      	ldrb	r3, [r7, #22]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099ae:	7af9      	ldrb	r1, [r7, #11]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	f7fa f8ef 	bl	8003b96 <HAL_PCD_EP_Receive>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f832 	bl	8009a28 <USBD_Get_USB_Status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099e4:	78fa      	ldrb	r2, [r7, #3]
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fa f90f 	bl	8003c0c <HAL_PCD_EP_GetRxCount>
 80099ee:	4603      	mov	r3, r0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a00:	4b03      	ldr	r3, [pc, #12]	@ (8009a10 <USBD_static_malloc+0x18>)
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20001de8 	.word	0x20001de8

08009a14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d817      	bhi.n	8009a6c <USBD_Get_USB_Status+0x44>
 8009a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a44 <USBD_Get_USB_Status+0x1c>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009a55 	.word	0x08009a55
 8009a48:	08009a5b 	.word	0x08009a5b
 8009a4c:	08009a61 	.word	0x08009a61
 8009a50:	08009a67 	.word	0x08009a67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e00b      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5e:	e008      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a60:	2301      	movs	r3, #1
 8009a62:	73fb      	strb	r3, [r7, #15]
    break;
 8009a64:	e005      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a66:	2303      	movs	r3, #3
 8009a68:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6a:	e002      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a70:	bf00      	nop
  }
  return usb_status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <__cvt>:
 8009a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	ec57 6b10 	vmov	r6, r7, d0
 8009a88:	2f00      	cmp	r7, #0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	463b      	mov	r3, r7
 8009a90:	bfbb      	ittet	lt
 8009a92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a96:	461f      	movlt	r7, r3
 8009a98:	2300      	movge	r3, #0
 8009a9a:	232d      	movlt	r3, #45	@ 0x2d
 8009a9c:	700b      	strb	r3, [r1, #0]
 8009a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009aa0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	f023 0820 	bic.w	r8, r3, #32
 8009aaa:	bfbc      	itt	lt
 8009aac:	4632      	movlt	r2, r6
 8009aae:	4616      	movlt	r6, r2
 8009ab0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ab4:	d005      	beq.n	8009ac2 <__cvt+0x42>
 8009ab6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009aba:	d100      	bne.n	8009abe <__cvt+0x3e>
 8009abc:	3401      	adds	r4, #1
 8009abe:	2102      	movs	r1, #2
 8009ac0:	e000      	b.n	8009ac4 <__cvt+0x44>
 8009ac2:	2103      	movs	r1, #3
 8009ac4:	ab03      	add	r3, sp, #12
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	ab02      	add	r3, sp, #8
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	ec47 6b10 	vmov	d0, r6, r7
 8009ad0:	4653      	mov	r3, sl
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	f000 fe70 	bl	800a7b8 <_dtoa_r>
 8009ad8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009adc:	4605      	mov	r5, r0
 8009ade:	d119      	bne.n	8009b14 <__cvt+0x94>
 8009ae0:	f019 0f01 	tst.w	r9, #1
 8009ae4:	d00e      	beq.n	8009b04 <__cvt+0x84>
 8009ae6:	eb00 0904 	add.w	r9, r0, r4
 8009aea:	2200      	movs	r2, #0
 8009aec:	2300      	movs	r3, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009af6:	b108      	cbz	r0, 8009afc <__cvt+0x7c>
 8009af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009afc:	2230      	movs	r2, #48	@ 0x30
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	454b      	cmp	r3, r9
 8009b02:	d31e      	bcc.n	8009b42 <__cvt+0xc2>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b08:	1b5b      	subs	r3, r3, r5
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	b004      	add	sp, #16
 8009b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b18:	eb00 0904 	add.w	r9, r0, r4
 8009b1c:	d1e5      	bne.n	8009aea <__cvt+0x6a>
 8009b1e:	7803      	ldrb	r3, [r0, #0]
 8009b20:	2b30      	cmp	r3, #48	@ 0x30
 8009b22:	d10a      	bne.n	8009b3a <__cvt+0xba>
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b30:	b918      	cbnz	r0, 8009b3a <__cvt+0xba>
 8009b32:	f1c4 0401 	rsb	r4, r4, #1
 8009b36:	f8ca 4000 	str.w	r4, [sl]
 8009b3a:	f8da 3000 	ldr.w	r3, [sl]
 8009b3e:	4499      	add	r9, r3
 8009b40:	e7d3      	b.n	8009aea <__cvt+0x6a>
 8009b42:	1c59      	adds	r1, r3, #1
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	e7d9      	b.n	8009afe <__cvt+0x7e>

08009b4a <__exponent>:
 8009b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	bfba      	itte	lt
 8009b50:	4249      	neglt	r1, r1
 8009b52:	232d      	movlt	r3, #45	@ 0x2d
 8009b54:	232b      	movge	r3, #43	@ 0x2b
 8009b56:	2909      	cmp	r1, #9
 8009b58:	7002      	strb	r2, [r0, #0]
 8009b5a:	7043      	strb	r3, [r0, #1]
 8009b5c:	dd29      	ble.n	8009bb2 <__exponent+0x68>
 8009b5e:	f10d 0307 	add.w	r3, sp, #7
 8009b62:	461d      	mov	r5, r3
 8009b64:	270a      	movs	r7, #10
 8009b66:	461a      	mov	r2, r3
 8009b68:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b6c:	fb07 1416 	mls	r4, r7, r6, r1
 8009b70:	3430      	adds	r4, #48	@ 0x30
 8009b72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b76:	460c      	mov	r4, r1
 8009b78:	2c63      	cmp	r4, #99	@ 0x63
 8009b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b7e:	4631      	mov	r1, r6
 8009b80:	dcf1      	bgt.n	8009b66 <__exponent+0x1c>
 8009b82:	3130      	adds	r1, #48	@ 0x30
 8009b84:	1e94      	subs	r4, r2, #2
 8009b86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b8a:	1c41      	adds	r1, r0, #1
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	42ab      	cmp	r3, r5
 8009b90:	d30a      	bcc.n	8009ba8 <__exponent+0x5e>
 8009b92:	f10d 0309 	add.w	r3, sp, #9
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ac      	cmp	r4, r5
 8009b9a:	bf88      	it	hi
 8009b9c:	2300      	movhi	r3, #0
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	4403      	add	r3, r0
 8009ba2:	1a18      	subs	r0, r3, r0
 8009ba4:	b003      	add	sp, #12
 8009ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009bac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009bb0:	e7ed      	b.n	8009b8e <__exponent+0x44>
 8009bb2:	2330      	movs	r3, #48	@ 0x30
 8009bb4:	3130      	adds	r1, #48	@ 0x30
 8009bb6:	7083      	strb	r3, [r0, #2]
 8009bb8:	70c1      	strb	r1, [r0, #3]
 8009bba:	1d03      	adds	r3, r0, #4
 8009bbc:	e7f1      	b.n	8009ba2 <__exponent+0x58>
	...

08009bc0 <_printf_float>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	b08d      	sub	sp, #52	@ 0x34
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009bcc:	4616      	mov	r6, r2
 8009bce:	461f      	mov	r7, r3
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	f000 fcef 	bl	800a5b4 <_localeconv_r>
 8009bd6:	6803      	ldr	r3, [r0, #0]
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f6 fb50 	bl	8000280 <strlen>
 8009be0:	2300      	movs	r3, #0
 8009be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	9005      	str	r0, [sp, #20]
 8009bea:	3307      	adds	r3, #7
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	f103 0208 	add.w	r2, r3, #8
 8009bf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bf8:	f8d4 b000 	ldr.w	fp, [r4]
 8009bfc:	f8c8 2000 	str.w	r2, [r8]
 8009c00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c16:	4b9c      	ldr	r3, [pc, #624]	@ (8009e88 <_printf_float+0x2c8>)
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1c:	f7f6 ff8e 	bl	8000b3c <__aeabi_dcmpun>
 8009c20:	bb70      	cbnz	r0, 8009c80 <_printf_float+0xc0>
 8009c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c26:	4b98      	ldr	r3, [pc, #608]	@ (8009e88 <_printf_float+0x2c8>)
 8009c28:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2c:	f7f6 ff68 	bl	8000b00 <__aeabi_dcmple>
 8009c30:	bb30      	cbnz	r0, 8009c80 <_printf_float+0xc0>
 8009c32:	2200      	movs	r2, #0
 8009c34:	2300      	movs	r3, #0
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 ff57 	bl	8000aec <__aeabi_dcmplt>
 8009c3e:	b110      	cbz	r0, 8009c46 <_printf_float+0x86>
 8009c40:	232d      	movs	r3, #45	@ 0x2d
 8009c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c46:	4a91      	ldr	r2, [pc, #580]	@ (8009e8c <_printf_float+0x2cc>)
 8009c48:	4b91      	ldr	r3, [pc, #580]	@ (8009e90 <_printf_float+0x2d0>)
 8009c4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c4e:	bf94      	ite	ls
 8009c50:	4690      	movls	r8, r2
 8009c52:	4698      	movhi	r8, r3
 8009c54:	2303      	movs	r3, #3
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	f02b 0304 	bic.w	r3, fp, #4
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	f04f 0900 	mov.w	r9, #0
 8009c62:	9700      	str	r7, [sp, #0]
 8009c64:	4633      	mov	r3, r6
 8009c66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f9d2 	bl	800a014 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	f040 808d 	bne.w	8009d90 <_printf_float+0x1d0>
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	b00d      	add	sp, #52	@ 0x34
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 ff58 	bl	8000b3c <__aeabi_dcmpun>
 8009c8c:	b140      	cbz	r0, 8009ca0 <_printf_float+0xe0>
 8009c8e:	464b      	mov	r3, r9
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfbc      	itt	lt
 8009c94:	232d      	movlt	r3, #45	@ 0x2d
 8009c96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8009e94 <_printf_float+0x2d4>)
 8009c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8009e98 <_printf_float+0x2d8>)
 8009c9e:	e7d4      	b.n	8009c4a <_printf_float+0x8a>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ca6:	9206      	str	r2, [sp, #24]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	d13b      	bne.n	8009d24 <_printf_float+0x164>
 8009cac:	2306      	movs	r3, #6
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6022      	str	r2, [r4, #0]
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009cc0:	ab09      	add	r3, sp, #36	@ 0x24
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	ec49 8b10 	vmov	d0, r8, r9
 8009cca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7ff fed6 	bl	8009a80 <__cvt>
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cd8:	2b47      	cmp	r3, #71	@ 0x47
 8009cda:	4680      	mov	r8, r0
 8009cdc:	d129      	bne.n	8009d32 <_printf_float+0x172>
 8009cde:	1cc8      	adds	r0, r1, #3
 8009ce0:	db02      	blt.n	8009ce8 <_printf_float+0x128>
 8009ce2:	6863      	ldr	r3, [r4, #4]
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	dd41      	ble.n	8009d6c <_printf_float+0x1ac>
 8009ce8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cec:	fa5f fa8a 	uxtb.w	sl, sl
 8009cf0:	3901      	subs	r1, #1
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cf8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cfa:	f7ff ff26 	bl	8009b4a <__exponent>
 8009cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d00:	1813      	adds	r3, r2, r0
 8009d02:	2a01      	cmp	r2, #1
 8009d04:	4681      	mov	r9, r0
 8009d06:	6123      	str	r3, [r4, #16]
 8009d08:	dc02      	bgt.n	8009d10 <_printf_float+0x150>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	07d2      	lsls	r2, r2, #31
 8009d0e:	d501      	bpl.n	8009d14 <_printf_float+0x154>
 8009d10:	3301      	adds	r3, #1
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0a2      	beq.n	8009c62 <_printf_float+0xa2>
 8009d1c:	232d      	movs	r3, #45	@ 0x2d
 8009d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d22:	e79e      	b.n	8009c62 <_printf_float+0xa2>
 8009d24:	9a06      	ldr	r2, [sp, #24]
 8009d26:	2a47      	cmp	r2, #71	@ 0x47
 8009d28:	d1c2      	bne.n	8009cb0 <_printf_float+0xf0>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1c0      	bne.n	8009cb0 <_printf_float+0xf0>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e7bd      	b.n	8009cae <_printf_float+0xee>
 8009d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d36:	d9db      	bls.n	8009cf0 <_printf_float+0x130>
 8009d38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d3c:	d118      	bne.n	8009d70 <_printf_float+0x1b0>
 8009d3e:	2900      	cmp	r1, #0
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	dd0b      	ble.n	8009d5c <_printf_float+0x19c>
 8009d44:	6121      	str	r1, [r4, #16]
 8009d46:	b913      	cbnz	r3, 8009d4e <_printf_float+0x18e>
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	07d0      	lsls	r0, r2, #31
 8009d4c:	d502      	bpl.n	8009d54 <_printf_float+0x194>
 8009d4e:	3301      	adds	r3, #1
 8009d50:	440b      	add	r3, r1
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	e7db      	b.n	8009d14 <_printf_float+0x154>
 8009d5c:	b913      	cbnz	r3, 8009d64 <_printf_float+0x1a4>
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	07d2      	lsls	r2, r2, #31
 8009d62:	d501      	bpl.n	8009d68 <_printf_float+0x1a8>
 8009d64:	3302      	adds	r3, #2
 8009d66:	e7f4      	b.n	8009d52 <_printf_float+0x192>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7f2      	b.n	8009d52 <_printf_float+0x192>
 8009d6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d72:	4299      	cmp	r1, r3
 8009d74:	db05      	blt.n	8009d82 <_printf_float+0x1c2>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	6121      	str	r1, [r4, #16]
 8009d7a:	07d8      	lsls	r0, r3, #31
 8009d7c:	d5ea      	bpl.n	8009d54 <_printf_float+0x194>
 8009d7e:	1c4b      	adds	r3, r1, #1
 8009d80:	e7e7      	b.n	8009d52 <_printf_float+0x192>
 8009d82:	2900      	cmp	r1, #0
 8009d84:	bfd4      	ite	le
 8009d86:	f1c1 0202 	rsble	r2, r1, #2
 8009d8a:	2201      	movgt	r2, #1
 8009d8c:	4413      	add	r3, r2
 8009d8e:	e7e0      	b.n	8009d52 <_printf_float+0x192>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	055a      	lsls	r2, r3, #21
 8009d94:	d407      	bmi.n	8009da6 <_printf_float+0x1e6>
 8009d96:	6923      	ldr	r3, [r4, #16]
 8009d98:	4642      	mov	r2, r8
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	d12b      	bne.n	8009dfc <_printf_float+0x23c>
 8009da4:	e767      	b.n	8009c76 <_printf_float+0xb6>
 8009da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009daa:	f240 80dd 	bls.w	8009f68 <_printf_float+0x3a8>
 8009dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009db2:	2200      	movs	r2, #0
 8009db4:	2300      	movs	r3, #0
 8009db6:	f7f6 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d033      	beq.n	8009e26 <_printf_float+0x266>
 8009dbe:	4a37      	ldr	r2, [pc, #220]	@ (8009e9c <_printf_float+0x2dc>)
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f af54 	beq.w	8009c76 <_printf_float+0xb6>
 8009dce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009dd2:	4543      	cmp	r3, r8
 8009dd4:	db02      	blt.n	8009ddc <_printf_float+0x21c>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	07d8      	lsls	r0, r3, #31
 8009dda:	d50f      	bpl.n	8009dfc <_printf_float+0x23c>
 8009ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de0:	4631      	mov	r1, r6
 8009de2:	4628      	mov	r0, r5
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f af45 	beq.w	8009c76 <_printf_float+0xb6>
 8009dec:	f04f 0900 	mov.w	r9, #0
 8009df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009df4:	f104 0a1a 	add.w	sl, r4, #26
 8009df8:	45c8      	cmp	r8, r9
 8009dfa:	dc09      	bgt.n	8009e10 <_printf_float+0x250>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	079b      	lsls	r3, r3, #30
 8009e00:	f100 8103 	bmi.w	800a00a <_printf_float+0x44a>
 8009e04:	68e0      	ldr	r0, [r4, #12]
 8009e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e08:	4298      	cmp	r0, r3
 8009e0a:	bfb8      	it	lt
 8009e0c:	4618      	movlt	r0, r3
 8009e0e:	e734      	b.n	8009c7a <_printf_float+0xba>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4652      	mov	r2, sl
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f af2b 	beq.w	8009c76 <_printf_float+0xb6>
 8009e20:	f109 0901 	add.w	r9, r9, #1
 8009e24:	e7e8      	b.n	8009df8 <_printf_float+0x238>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc39      	bgt.n	8009ea0 <_printf_float+0x2e0>
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <_printf_float+0x2dc>)
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b8      	blx	r7
 8009e36:	3001      	adds	r0, #1
 8009e38:	f43f af1d 	beq.w	8009c76 <_printf_float+0xb6>
 8009e3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e40:	ea59 0303 	orrs.w	r3, r9, r3
 8009e44:	d102      	bne.n	8009e4c <_printf_float+0x28c>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d5d7      	bpl.n	8009dfc <_printf_float+0x23c>
 8009e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af0d 	beq.w	8009c76 <_printf_float+0xb6>
 8009e5c:	f04f 0a00 	mov.w	sl, #0
 8009e60:	f104 0b1a 	add.w	fp, r4, #26
 8009e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e66:	425b      	negs	r3, r3
 8009e68:	4553      	cmp	r3, sl
 8009e6a:	dc01      	bgt.n	8009e70 <_printf_float+0x2b0>
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	e793      	b.n	8009d98 <_printf_float+0x1d8>
 8009e70:	2301      	movs	r3, #1
 8009e72:	465a      	mov	r2, fp
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f43f aefb 	beq.w	8009c76 <_printf_float+0xb6>
 8009e80:	f10a 0a01 	add.w	sl, sl, #1
 8009e84:	e7ee      	b.n	8009e64 <_printf_float+0x2a4>
 8009e86:	bf00      	nop
 8009e88:	7fefffff 	.word	0x7fefffff
 8009e8c:	0800c7d4 	.word	0x0800c7d4
 8009e90:	0800c7d8 	.word	0x0800c7d8
 8009e94:	0800c7dc 	.word	0x0800c7dc
 8009e98:	0800c7e0 	.word	0x0800c7e0
 8009e9c:	0800c7e4 	.word	0x0800c7e4
 8009ea0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ea2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ea6:	4553      	cmp	r3, sl
 8009ea8:	bfa8      	it	ge
 8009eaa:	4653      	movge	r3, sl
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	4699      	mov	r9, r3
 8009eb0:	dc36      	bgt.n	8009f20 <_printf_float+0x360>
 8009eb2:	f04f 0b00 	mov.w	fp, #0
 8009eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eba:	f104 021a 	add.w	r2, r4, #26
 8009ebe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ec0:	9306      	str	r3, [sp, #24]
 8009ec2:	eba3 0309 	sub.w	r3, r3, r9
 8009ec6:	455b      	cmp	r3, fp
 8009ec8:	dc31      	bgt.n	8009f2e <_printf_float+0x36e>
 8009eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ecc:	459a      	cmp	sl, r3
 8009ece:	dc3a      	bgt.n	8009f46 <_printf_float+0x386>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	07da      	lsls	r2, r3, #31
 8009ed4:	d437      	bmi.n	8009f46 <_printf_float+0x386>
 8009ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed8:	ebaa 0903 	sub.w	r9, sl, r3
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	ebaa 0303 	sub.w	r3, sl, r3
 8009ee2:	4599      	cmp	r9, r3
 8009ee4:	bfa8      	it	ge
 8009ee6:	4699      	movge	r9, r3
 8009ee8:	f1b9 0f00 	cmp.w	r9, #0
 8009eec:	dc33      	bgt.n	8009f56 <_printf_float+0x396>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ef6:	f104 0b1a 	add.w	fp, r4, #26
 8009efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efc:	ebaa 0303 	sub.w	r3, sl, r3
 8009f00:	eba3 0309 	sub.w	r3, r3, r9
 8009f04:	4543      	cmp	r3, r8
 8009f06:	f77f af79 	ble.w	8009dfc <_printf_float+0x23c>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	465a      	mov	r2, fp
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f aeae 	beq.w	8009c76 <_printf_float+0xb6>
 8009f1a:	f108 0801 	add.w	r8, r8, #1
 8009f1e:	e7ec      	b.n	8009efa <_printf_float+0x33a>
 8009f20:	4642      	mov	r2, r8
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d1c2      	bne.n	8009eb2 <_printf_float+0x2f2>
 8009f2c:	e6a3      	b.n	8009c76 <_printf_float+0xb6>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	9206      	str	r2, [sp, #24]
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	f43f ae9c 	beq.w	8009c76 <_printf_float+0xb6>
 8009f3e:	9a06      	ldr	r2, [sp, #24]
 8009f40:	f10b 0b01 	add.w	fp, fp, #1
 8009f44:	e7bb      	b.n	8009ebe <_printf_float+0x2fe>
 8009f46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b8      	blx	r7
 8009f50:	3001      	adds	r0, #1
 8009f52:	d1c0      	bne.n	8009ed6 <_printf_float+0x316>
 8009f54:	e68f      	b.n	8009c76 <_printf_float+0xb6>
 8009f56:	9a06      	ldr	r2, [sp, #24]
 8009f58:	464b      	mov	r3, r9
 8009f5a:	4442      	add	r2, r8
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	d1c3      	bne.n	8009eee <_printf_float+0x32e>
 8009f66:	e686      	b.n	8009c76 <_printf_float+0xb6>
 8009f68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f6c:	f1ba 0f01 	cmp.w	sl, #1
 8009f70:	dc01      	bgt.n	8009f76 <_printf_float+0x3b6>
 8009f72:	07db      	lsls	r3, r3, #31
 8009f74:	d536      	bpl.n	8009fe4 <_printf_float+0x424>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4642      	mov	r2, r8
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b8      	blx	r7
 8009f80:	3001      	adds	r0, #1
 8009f82:	f43f ae78 	beq.w	8009c76 <_printf_float+0xb6>
 8009f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	f43f ae70 	beq.w	8009c76 <_printf_float+0xb6>
 8009f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fa2:	f7f6 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fa6:	b9c0      	cbnz	r0, 8009fda <_printf_float+0x41a>
 8009fa8:	4653      	mov	r3, sl
 8009faa:	f108 0201 	add.w	r2, r8, #1
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b8      	blx	r7
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d10c      	bne.n	8009fd2 <_printf_float+0x412>
 8009fb8:	e65d      	b.n	8009c76 <_printf_float+0xb6>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	465a      	mov	r2, fp
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	47b8      	blx	r7
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f43f ae56 	beq.w	8009c76 <_printf_float+0xb6>
 8009fca:	f108 0801 	add.w	r8, r8, #1
 8009fce:	45d0      	cmp	r8, sl
 8009fd0:	dbf3      	blt.n	8009fba <_printf_float+0x3fa>
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fd8:	e6df      	b.n	8009d9a <_printf_float+0x1da>
 8009fda:	f04f 0800 	mov.w	r8, #0
 8009fde:	f104 0b1a 	add.w	fp, r4, #26
 8009fe2:	e7f4      	b.n	8009fce <_printf_float+0x40e>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	e7e1      	b.n	8009fae <_printf_float+0x3ee>
 8009fea:	2301      	movs	r3, #1
 8009fec:	464a      	mov	r2, r9
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b8      	blx	r7
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	f43f ae3e 	beq.w	8009c76 <_printf_float+0xb6>
 8009ffa:	f108 0801 	add.w	r8, r8, #1
 8009ffe:	68e3      	ldr	r3, [r4, #12]
 800a000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a002:	1a5b      	subs	r3, r3, r1
 800a004:	4543      	cmp	r3, r8
 800a006:	dcf0      	bgt.n	8009fea <_printf_float+0x42a>
 800a008:	e6fc      	b.n	8009e04 <_printf_float+0x244>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	f104 0919 	add.w	r9, r4, #25
 800a012:	e7f4      	b.n	8009ffe <_printf_float+0x43e>

0800a014 <_printf_common>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	4616      	mov	r6, r2
 800a01a:	4698      	mov	r8, r3
 800a01c:	688a      	ldr	r2, [r1, #8]
 800a01e:	690b      	ldr	r3, [r1, #16]
 800a020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a024:	4293      	cmp	r3, r2
 800a026:	bfb8      	it	lt
 800a028:	4613      	movlt	r3, r2
 800a02a:	6033      	str	r3, [r6, #0]
 800a02c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a030:	4607      	mov	r7, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b10a      	cbz	r2, 800a03a <_printf_common+0x26>
 800a036:	3301      	adds	r3, #1
 800a038:	6033      	str	r3, [r6, #0]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	0699      	lsls	r1, r3, #26
 800a03e:	bf42      	ittt	mi
 800a040:	6833      	ldrmi	r3, [r6, #0]
 800a042:	3302      	addmi	r3, #2
 800a044:	6033      	strmi	r3, [r6, #0]
 800a046:	6825      	ldr	r5, [r4, #0]
 800a048:	f015 0506 	ands.w	r5, r5, #6
 800a04c:	d106      	bne.n	800a05c <_printf_common+0x48>
 800a04e:	f104 0a19 	add.w	sl, r4, #25
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	6832      	ldr	r2, [r6, #0]
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dc26      	bgt.n	800a0aa <_printf_common+0x96>
 800a05c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	3b00      	subs	r3, #0
 800a064:	bf18      	it	ne
 800a066:	2301      	movne	r3, #1
 800a068:	0692      	lsls	r2, r2, #26
 800a06a:	d42b      	bmi.n	800a0c4 <_printf_common+0xb0>
 800a06c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a070:	4641      	mov	r1, r8
 800a072:	4638      	mov	r0, r7
 800a074:	47c8      	blx	r9
 800a076:	3001      	adds	r0, #1
 800a078:	d01e      	beq.n	800a0b8 <_printf_common+0xa4>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	6922      	ldr	r2, [r4, #16]
 800a07e:	f003 0306 	and.w	r3, r3, #6
 800a082:	2b04      	cmp	r3, #4
 800a084:	bf02      	ittt	eq
 800a086:	68e5      	ldreq	r5, [r4, #12]
 800a088:	6833      	ldreq	r3, [r6, #0]
 800a08a:	1aed      	subeq	r5, r5, r3
 800a08c:	68a3      	ldr	r3, [r4, #8]
 800a08e:	bf0c      	ite	eq
 800a090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a094:	2500      	movne	r5, #0
 800a096:	4293      	cmp	r3, r2
 800a098:	bfc4      	itt	gt
 800a09a:	1a9b      	subgt	r3, r3, r2
 800a09c:	18ed      	addgt	r5, r5, r3
 800a09e:	2600      	movs	r6, #0
 800a0a0:	341a      	adds	r4, #26
 800a0a2:	42b5      	cmp	r5, r6
 800a0a4:	d11a      	bne.n	800a0dc <_printf_common+0xc8>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e008      	b.n	800a0bc <_printf_common+0xa8>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4641      	mov	r1, r8
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	47c8      	blx	r9
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d103      	bne.n	800a0c0 <_printf_common+0xac>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	e7c6      	b.n	800a052 <_printf_common+0x3e>
 800a0c4:	18e1      	adds	r1, r4, r3
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	2030      	movs	r0, #48	@ 0x30
 800a0ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0ce:	4422      	add	r2, r4
 800a0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0d8:	3302      	adds	r3, #2
 800a0da:	e7c7      	b.n	800a06c <_printf_common+0x58>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4622      	mov	r2, r4
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	47c8      	blx	r9
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d0e6      	beq.n	800a0b8 <_printf_common+0xa4>
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	e7d9      	b.n	800a0a2 <_printf_common+0x8e>
	...

0800a0f0 <_printf_i>:
 800a0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	7e0f      	ldrb	r7, [r1, #24]
 800a0f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0f8:	2f78      	cmp	r7, #120	@ 0x78
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	469a      	mov	sl, r3
 800a102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a106:	d807      	bhi.n	800a118 <_printf_i+0x28>
 800a108:	2f62      	cmp	r7, #98	@ 0x62
 800a10a:	d80a      	bhi.n	800a122 <_printf_i+0x32>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	f000 80d2 	beq.w	800a2b6 <_printf_i+0x1c6>
 800a112:	2f58      	cmp	r7, #88	@ 0x58
 800a114:	f000 80b9 	beq.w	800a28a <_printf_i+0x19a>
 800a118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a11c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a120:	e03a      	b.n	800a198 <_printf_i+0xa8>
 800a122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a126:	2b15      	cmp	r3, #21
 800a128:	d8f6      	bhi.n	800a118 <_printf_i+0x28>
 800a12a:	a101      	add	r1, pc, #4	@ (adr r1, 800a130 <_printf_i+0x40>)
 800a12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a19d 	.word	0x0800a19d
 800a138:	0800a119 	.word	0x0800a119
 800a13c:	0800a119 	.word	0x0800a119
 800a140:	0800a119 	.word	0x0800a119
 800a144:	0800a119 	.word	0x0800a119
 800a148:	0800a19d 	.word	0x0800a19d
 800a14c:	0800a119 	.word	0x0800a119
 800a150:	0800a119 	.word	0x0800a119
 800a154:	0800a119 	.word	0x0800a119
 800a158:	0800a119 	.word	0x0800a119
 800a15c:	0800a29d 	.word	0x0800a29d
 800a160:	0800a1c7 	.word	0x0800a1c7
 800a164:	0800a257 	.word	0x0800a257
 800a168:	0800a119 	.word	0x0800a119
 800a16c:	0800a119 	.word	0x0800a119
 800a170:	0800a2bf 	.word	0x0800a2bf
 800a174:	0800a119 	.word	0x0800a119
 800a178:	0800a1c7 	.word	0x0800a1c7
 800a17c:	0800a119 	.word	0x0800a119
 800a180:	0800a119 	.word	0x0800a119
 800a184:	0800a25f 	.word	0x0800a25f
 800a188:	6833      	ldr	r3, [r6, #0]
 800a18a:	1d1a      	adds	r2, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6032      	str	r2, [r6, #0]
 800a190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a198:	2301      	movs	r3, #1
 800a19a:	e09d      	b.n	800a2d8 <_printf_i+0x1e8>
 800a19c:	6833      	ldr	r3, [r6, #0]
 800a19e:	6820      	ldr	r0, [r4, #0]
 800a1a0:	1d19      	adds	r1, r3, #4
 800a1a2:	6031      	str	r1, [r6, #0]
 800a1a4:	0606      	lsls	r6, r0, #24
 800a1a6:	d501      	bpl.n	800a1ac <_printf_i+0xbc>
 800a1a8:	681d      	ldr	r5, [r3, #0]
 800a1aa:	e003      	b.n	800a1b4 <_printf_i+0xc4>
 800a1ac:	0645      	lsls	r5, r0, #25
 800a1ae:	d5fb      	bpl.n	800a1a8 <_printf_i+0xb8>
 800a1b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	da03      	bge.n	800a1c0 <_printf_i+0xd0>
 800a1b8:	232d      	movs	r3, #45	@ 0x2d
 800a1ba:	426d      	negs	r5, r5
 800a1bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1c0:	4859      	ldr	r0, [pc, #356]	@ (800a328 <_printf_i+0x238>)
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	e011      	b.n	800a1ea <_printf_i+0xfa>
 800a1c6:	6821      	ldr	r1, [r4, #0]
 800a1c8:	6833      	ldr	r3, [r6, #0]
 800a1ca:	0608      	lsls	r0, r1, #24
 800a1cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1d0:	d402      	bmi.n	800a1d8 <_printf_i+0xe8>
 800a1d2:	0649      	lsls	r1, r1, #25
 800a1d4:	bf48      	it	mi
 800a1d6:	b2ad      	uxthmi	r5, r5
 800a1d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1da:	4853      	ldr	r0, [pc, #332]	@ (800a328 <_printf_i+0x238>)
 800a1dc:	6033      	str	r3, [r6, #0]
 800a1de:	bf14      	ite	ne
 800a1e0:	230a      	movne	r3, #10
 800a1e2:	2308      	moveq	r3, #8
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1ea:	6866      	ldr	r6, [r4, #4]
 800a1ec:	60a6      	str	r6, [r4, #8]
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	bfa2      	ittt	ge
 800a1f2:	6821      	ldrge	r1, [r4, #0]
 800a1f4:	f021 0104 	bicge.w	r1, r1, #4
 800a1f8:	6021      	strge	r1, [r4, #0]
 800a1fa:	b90d      	cbnz	r5, 800a200 <_printf_i+0x110>
 800a1fc:	2e00      	cmp	r6, #0
 800a1fe:	d04b      	beq.n	800a298 <_printf_i+0x1a8>
 800a200:	4616      	mov	r6, r2
 800a202:	fbb5 f1f3 	udiv	r1, r5, r3
 800a206:	fb03 5711 	mls	r7, r3, r1, r5
 800a20a:	5dc7      	ldrb	r7, [r0, r7]
 800a20c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a210:	462f      	mov	r7, r5
 800a212:	42bb      	cmp	r3, r7
 800a214:	460d      	mov	r5, r1
 800a216:	d9f4      	bls.n	800a202 <_printf_i+0x112>
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d10b      	bne.n	800a234 <_printf_i+0x144>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	07df      	lsls	r7, r3, #31
 800a220:	d508      	bpl.n	800a234 <_printf_i+0x144>
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	6861      	ldr	r1, [r4, #4]
 800a226:	4299      	cmp	r1, r3
 800a228:	bfde      	ittt	le
 800a22a:	2330      	movle	r3, #48	@ 0x30
 800a22c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a230:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a234:	1b92      	subs	r2, r2, r6
 800a236:	6122      	str	r2, [r4, #16]
 800a238:	f8cd a000 	str.w	sl, [sp]
 800a23c:	464b      	mov	r3, r9
 800a23e:	aa03      	add	r2, sp, #12
 800a240:	4621      	mov	r1, r4
 800a242:	4640      	mov	r0, r8
 800a244:	f7ff fee6 	bl	800a014 <_printf_common>
 800a248:	3001      	adds	r0, #1
 800a24a:	d14a      	bne.n	800a2e2 <_printf_i+0x1f2>
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	b004      	add	sp, #16
 800a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	f043 0320 	orr.w	r3, r3, #32
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	4833      	ldr	r0, [pc, #204]	@ (800a32c <_printf_i+0x23c>)
 800a260:	2778      	movs	r7, #120	@ 0x78
 800a262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	6831      	ldr	r1, [r6, #0]
 800a26a:	061f      	lsls	r7, r3, #24
 800a26c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a270:	d402      	bmi.n	800a278 <_printf_i+0x188>
 800a272:	065f      	lsls	r7, r3, #25
 800a274:	bf48      	it	mi
 800a276:	b2ad      	uxthmi	r5, r5
 800a278:	6031      	str	r1, [r6, #0]
 800a27a:	07d9      	lsls	r1, r3, #31
 800a27c:	bf44      	itt	mi
 800a27e:	f043 0320 	orrmi.w	r3, r3, #32
 800a282:	6023      	strmi	r3, [r4, #0]
 800a284:	b11d      	cbz	r5, 800a28e <_printf_i+0x19e>
 800a286:	2310      	movs	r3, #16
 800a288:	e7ac      	b.n	800a1e4 <_printf_i+0xf4>
 800a28a:	4827      	ldr	r0, [pc, #156]	@ (800a328 <_printf_i+0x238>)
 800a28c:	e7e9      	b.n	800a262 <_printf_i+0x172>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	f023 0320 	bic.w	r3, r3, #32
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	e7f6      	b.n	800a286 <_printf_i+0x196>
 800a298:	4616      	mov	r6, r2
 800a29a:	e7bd      	b.n	800a218 <_printf_i+0x128>
 800a29c:	6833      	ldr	r3, [r6, #0]
 800a29e:	6825      	ldr	r5, [r4, #0]
 800a2a0:	6961      	ldr	r1, [r4, #20]
 800a2a2:	1d18      	adds	r0, r3, #4
 800a2a4:	6030      	str	r0, [r6, #0]
 800a2a6:	062e      	lsls	r6, r5, #24
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	d501      	bpl.n	800a2b0 <_printf_i+0x1c0>
 800a2ac:	6019      	str	r1, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <_printf_i+0x1c6>
 800a2b0:	0668      	lsls	r0, r5, #25
 800a2b2:	d5fb      	bpl.n	800a2ac <_printf_i+0x1bc>
 800a2b4:	8019      	strh	r1, [r3, #0]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6123      	str	r3, [r4, #16]
 800a2ba:	4616      	mov	r6, r2
 800a2bc:	e7bc      	b.n	800a238 <_printf_i+0x148>
 800a2be:	6833      	ldr	r3, [r6, #0]
 800a2c0:	1d1a      	adds	r2, r3, #4
 800a2c2:	6032      	str	r2, [r6, #0]
 800a2c4:	681e      	ldr	r6, [r3, #0]
 800a2c6:	6862      	ldr	r2, [r4, #4]
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7f5 ff88 	bl	80001e0 <memchr>
 800a2d0:	b108      	cbz	r0, 800a2d6 <_printf_i+0x1e6>
 800a2d2:	1b80      	subs	r0, r0, r6
 800a2d4:	6060      	str	r0, [r4, #4]
 800a2d6:	6863      	ldr	r3, [r4, #4]
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e0:	e7aa      	b.n	800a238 <_printf_i+0x148>
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	47d0      	blx	sl
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d0ad      	beq.n	800a24c <_printf_i+0x15c>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	079b      	lsls	r3, r3, #30
 800a2f4:	d413      	bmi.n	800a31e <_printf_i+0x22e>
 800a2f6:	68e0      	ldr	r0, [r4, #12]
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	4298      	cmp	r0, r3
 800a2fc:	bfb8      	it	lt
 800a2fe:	4618      	movlt	r0, r3
 800a300:	e7a6      	b.n	800a250 <_printf_i+0x160>
 800a302:	2301      	movs	r3, #1
 800a304:	4632      	mov	r2, r6
 800a306:	4649      	mov	r1, r9
 800a308:	4640      	mov	r0, r8
 800a30a:	47d0      	blx	sl
 800a30c:	3001      	adds	r0, #1
 800a30e:	d09d      	beq.n	800a24c <_printf_i+0x15c>
 800a310:	3501      	adds	r5, #1
 800a312:	68e3      	ldr	r3, [r4, #12]
 800a314:	9903      	ldr	r1, [sp, #12]
 800a316:	1a5b      	subs	r3, r3, r1
 800a318:	42ab      	cmp	r3, r5
 800a31a:	dcf2      	bgt.n	800a302 <_printf_i+0x212>
 800a31c:	e7eb      	b.n	800a2f6 <_printf_i+0x206>
 800a31e:	2500      	movs	r5, #0
 800a320:	f104 0619 	add.w	r6, r4, #25
 800a324:	e7f5      	b.n	800a312 <_printf_i+0x222>
 800a326:	bf00      	nop
 800a328:	0800c7e6 	.word	0x0800c7e6
 800a32c:	0800c7f7 	.word	0x0800c7f7

0800a330 <std>:
 800a330:	2300      	movs	r3, #0
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	e9c0 3300 	strd	r3, r3, [r0]
 800a33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a33e:	6083      	str	r3, [r0, #8]
 800a340:	8181      	strh	r1, [r0, #12]
 800a342:	6643      	str	r3, [r0, #100]	@ 0x64
 800a344:	81c2      	strh	r2, [r0, #14]
 800a346:	6183      	str	r3, [r0, #24]
 800a348:	4619      	mov	r1, r3
 800a34a:	2208      	movs	r2, #8
 800a34c:	305c      	adds	r0, #92	@ 0x5c
 800a34e:	f000 f928 	bl	800a5a2 <memset>
 800a352:	4b0d      	ldr	r3, [pc, #52]	@ (800a388 <std+0x58>)
 800a354:	6263      	str	r3, [r4, #36]	@ 0x24
 800a356:	4b0d      	ldr	r3, [pc, #52]	@ (800a38c <std+0x5c>)
 800a358:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a35a:	4b0d      	ldr	r3, [pc, #52]	@ (800a390 <std+0x60>)
 800a35c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a35e:	4b0d      	ldr	r3, [pc, #52]	@ (800a394 <std+0x64>)
 800a360:	6323      	str	r3, [r4, #48]	@ 0x30
 800a362:	4b0d      	ldr	r3, [pc, #52]	@ (800a398 <std+0x68>)
 800a364:	6224      	str	r4, [r4, #32]
 800a366:	429c      	cmp	r4, r3
 800a368:	d006      	beq.n	800a378 <std+0x48>
 800a36a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a36e:	4294      	cmp	r4, r2
 800a370:	d002      	beq.n	800a378 <std+0x48>
 800a372:	33d0      	adds	r3, #208	@ 0xd0
 800a374:	429c      	cmp	r4, r3
 800a376:	d105      	bne.n	800a384 <std+0x54>
 800a378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a380:	f000 b98c 	b.w	800a69c <__retarget_lock_init_recursive>
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	0800a51d 	.word	0x0800a51d
 800a38c:	0800a53f 	.word	0x0800a53f
 800a390:	0800a577 	.word	0x0800a577
 800a394:	0800a59b 	.word	0x0800a59b
 800a398:	20002008 	.word	0x20002008

0800a39c <stdio_exit_handler>:
 800a39c:	4a02      	ldr	r2, [pc, #8]	@ (800a3a8 <stdio_exit_handler+0xc>)
 800a39e:	4903      	ldr	r1, [pc, #12]	@ (800a3ac <stdio_exit_handler+0x10>)
 800a3a0:	4803      	ldr	r0, [pc, #12]	@ (800a3b0 <stdio_exit_handler+0x14>)
 800a3a2:	f000 b869 	b.w	800a478 <_fwalk_sglue>
 800a3a6:	bf00      	nop
 800a3a8:	200000fc 	.word	0x200000fc
 800a3ac:	0800bffd 	.word	0x0800bffd
 800a3b0:	2000010c 	.word	0x2000010c

0800a3b4 <cleanup_stdio>:
 800a3b4:	6841      	ldr	r1, [r0, #4]
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <cleanup_stdio+0x34>)
 800a3b8:	4299      	cmp	r1, r3
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	d001      	beq.n	800a3c4 <cleanup_stdio+0x10>
 800a3c0:	f001 fe1c 	bl	800bffc <_fflush_r>
 800a3c4:	68a1      	ldr	r1, [r4, #8]
 800a3c6:	4b09      	ldr	r3, [pc, #36]	@ (800a3ec <cleanup_stdio+0x38>)
 800a3c8:	4299      	cmp	r1, r3
 800a3ca:	d002      	beq.n	800a3d2 <cleanup_stdio+0x1e>
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f001 fe15 	bl	800bffc <_fflush_r>
 800a3d2:	68e1      	ldr	r1, [r4, #12]
 800a3d4:	4b06      	ldr	r3, [pc, #24]	@ (800a3f0 <cleanup_stdio+0x3c>)
 800a3d6:	4299      	cmp	r1, r3
 800a3d8:	d004      	beq.n	800a3e4 <cleanup_stdio+0x30>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e0:	f001 be0c 	b.w	800bffc <_fflush_r>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20002008 	.word	0x20002008
 800a3ec:	20002070 	.word	0x20002070
 800a3f0:	200020d8 	.word	0x200020d8

0800a3f4 <global_stdio_init.part.0>:
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a424 <global_stdio_init.part.0+0x30>)
 800a3f8:	4c0b      	ldr	r4, [pc, #44]	@ (800a428 <global_stdio_init.part.0+0x34>)
 800a3fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a42c <global_stdio_init.part.0+0x38>)
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	4620      	mov	r0, r4
 800a400:	2200      	movs	r2, #0
 800a402:	2104      	movs	r1, #4
 800a404:	f7ff ff94 	bl	800a330 <std>
 800a408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a40c:	2201      	movs	r2, #1
 800a40e:	2109      	movs	r1, #9
 800a410:	f7ff ff8e 	bl	800a330 <std>
 800a414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a418:	2202      	movs	r2, #2
 800a41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41e:	2112      	movs	r1, #18
 800a420:	f7ff bf86 	b.w	800a330 <std>
 800a424:	20002140 	.word	0x20002140
 800a428:	20002008 	.word	0x20002008
 800a42c:	0800a39d 	.word	0x0800a39d

0800a430 <__sfp_lock_acquire>:
 800a430:	4801      	ldr	r0, [pc, #4]	@ (800a438 <__sfp_lock_acquire+0x8>)
 800a432:	f000 b934 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800a436:	bf00      	nop
 800a438:	20002149 	.word	0x20002149

0800a43c <__sfp_lock_release>:
 800a43c:	4801      	ldr	r0, [pc, #4]	@ (800a444 <__sfp_lock_release+0x8>)
 800a43e:	f000 b92f 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800a442:	bf00      	nop
 800a444:	20002149 	.word	0x20002149

0800a448 <__sinit>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	4604      	mov	r4, r0
 800a44c:	f7ff fff0 	bl	800a430 <__sfp_lock_acquire>
 800a450:	6a23      	ldr	r3, [r4, #32]
 800a452:	b11b      	cbz	r3, 800a45c <__sinit+0x14>
 800a454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a458:	f7ff bff0 	b.w	800a43c <__sfp_lock_release>
 800a45c:	4b04      	ldr	r3, [pc, #16]	@ (800a470 <__sinit+0x28>)
 800a45e:	6223      	str	r3, [r4, #32]
 800a460:	4b04      	ldr	r3, [pc, #16]	@ (800a474 <__sinit+0x2c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f5      	bne.n	800a454 <__sinit+0xc>
 800a468:	f7ff ffc4 	bl	800a3f4 <global_stdio_init.part.0>
 800a46c:	e7f2      	b.n	800a454 <__sinit+0xc>
 800a46e:	bf00      	nop
 800a470:	0800a3b5 	.word	0x0800a3b5
 800a474:	20002140 	.word	0x20002140

0800a478 <_fwalk_sglue>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4607      	mov	r7, r0
 800a47e:	4688      	mov	r8, r1
 800a480:	4614      	mov	r4, r2
 800a482:	2600      	movs	r6, #0
 800a484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a488:	f1b9 0901 	subs.w	r9, r9, #1
 800a48c:	d505      	bpl.n	800a49a <_fwalk_sglue+0x22>
 800a48e:	6824      	ldr	r4, [r4, #0]
 800a490:	2c00      	cmp	r4, #0
 800a492:	d1f7      	bne.n	800a484 <_fwalk_sglue+0xc>
 800a494:	4630      	mov	r0, r6
 800a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d907      	bls.n	800a4b0 <_fwalk_sglue+0x38>
 800a4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	d003      	beq.n	800a4b0 <_fwalk_sglue+0x38>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	47c0      	blx	r8
 800a4ae:	4306      	orrs	r6, r0
 800a4b0:	3568      	adds	r5, #104	@ 0x68
 800a4b2:	e7e9      	b.n	800a488 <_fwalk_sglue+0x10>

0800a4b4 <sniprintf>:
 800a4b4:	b40c      	push	{r2, r3}
 800a4b6:	b530      	push	{r4, r5, lr}
 800a4b8:	4b17      	ldr	r3, [pc, #92]	@ (800a518 <sniprintf+0x64>)
 800a4ba:	1e0c      	subs	r4, r1, #0
 800a4bc:	681d      	ldr	r5, [r3, #0]
 800a4be:	b09d      	sub	sp, #116	@ 0x74
 800a4c0:	da08      	bge.n	800a4d4 <sniprintf+0x20>
 800a4c2:	238b      	movs	r3, #139	@ 0x8b
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ca:	b01d      	add	sp, #116	@ 0x74
 800a4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d0:	b002      	add	sp, #8
 800a4d2:	4770      	bx	lr
 800a4d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a4d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4dc:	bf14      	ite	ne
 800a4de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4e2:	4623      	moveq	r3, r4
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4ec:	9002      	str	r0, [sp, #8]
 800a4ee:	9006      	str	r0, [sp, #24]
 800a4f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a4f6:	ab21      	add	r3, sp, #132	@ 0x84
 800a4f8:	a902      	add	r1, sp, #8
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	f001 fbfd 	bl	800bcfc <_svfiprintf_r>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	bfbc      	itt	lt
 800a506:	238b      	movlt	r3, #139	@ 0x8b
 800a508:	602b      	strlt	r3, [r5, #0]
 800a50a:	2c00      	cmp	r4, #0
 800a50c:	d0dd      	beq.n	800a4ca <sniprintf+0x16>
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
 800a514:	e7d9      	b.n	800a4ca <sniprintf+0x16>
 800a516:	bf00      	nop
 800a518:	20000108 	.word	0x20000108

0800a51c <__sread>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	460c      	mov	r4, r1
 800a520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a524:	f000 f86c 	bl	800a600 <_read_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	bfab      	itete	ge
 800a52c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a52e:	89a3      	ldrhlt	r3, [r4, #12]
 800a530:	181b      	addge	r3, r3, r0
 800a532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a536:	bfac      	ite	ge
 800a538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a53a:	81a3      	strhlt	r3, [r4, #12]
 800a53c:	bd10      	pop	{r4, pc}

0800a53e <__swrite>:
 800a53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	461f      	mov	r7, r3
 800a544:	898b      	ldrh	r3, [r1, #12]
 800a546:	05db      	lsls	r3, r3, #23
 800a548:	4605      	mov	r5, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	4616      	mov	r6, r2
 800a54e:	d505      	bpl.n	800a55c <__swrite+0x1e>
 800a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a554:	2302      	movs	r3, #2
 800a556:	2200      	movs	r2, #0
 800a558:	f000 f840 	bl	800a5dc <_lseek_r>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	4632      	mov	r2, r6
 800a56a:	463b      	mov	r3, r7
 800a56c:	4628      	mov	r0, r5
 800a56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a572:	f000 b857 	b.w	800a624 <_write_r>

0800a576 <__sseek>:
 800a576:	b510      	push	{r4, lr}
 800a578:	460c      	mov	r4, r1
 800a57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57e:	f000 f82d 	bl	800a5dc <_lseek_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	bf15      	itete	ne
 800a588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a58a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a58e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a592:	81a3      	strheq	r3, [r4, #12]
 800a594:	bf18      	it	ne
 800a596:	81a3      	strhne	r3, [r4, #12]
 800a598:	bd10      	pop	{r4, pc}

0800a59a <__sclose>:
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 b80d 	b.w	800a5bc <_close_r>

0800a5a2 <memset>:
 800a5a2:	4402      	add	r2, r0
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d100      	bne.n	800a5ac <memset+0xa>
 800a5aa:	4770      	bx	lr
 800a5ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b0:	e7f9      	b.n	800a5a6 <memset+0x4>
	...

0800a5b4 <_localeconv_r>:
 800a5b4:	4800      	ldr	r0, [pc, #0]	@ (800a5b8 <_localeconv_r+0x4>)
 800a5b6:	4770      	bx	lr
 800a5b8:	20000248 	.word	0x20000248

0800a5bc <_close_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4d06      	ldr	r5, [pc, #24]	@ (800a5d8 <_close_r+0x1c>)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	f7f7 fa58 	bl	8001a7c <_close>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_close_r+0x1a>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_close_r+0x1a>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	20002144 	.word	0x20002144

0800a5dc <_lseek_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d07      	ldr	r5, [pc, #28]	@ (800a5fc <_lseek_r+0x20>)
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	4608      	mov	r0, r1
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f7f7 fa6d 	bl	8001aca <_lseek>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_lseek_r+0x1e>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_lseek_r+0x1e>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	20002144 	.word	0x20002144

0800a600 <_read_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4d07      	ldr	r5, [pc, #28]	@ (800a620 <_read_r+0x20>)
 800a604:	4604      	mov	r4, r0
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f7 f9fb 	bl	8001a0a <_read>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_read_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_read_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20002144 	.word	0x20002144

0800a624 <_write_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	@ (800a644 <_write_r+0x20>)
 800a628:	4604      	mov	r4, r0
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	f7f7 fa06 	bl	8001a44 <_write>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_write_r+0x1e>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_write_r+0x1e>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20002144 	.word	0x20002144

0800a648 <__errno>:
 800a648:	4b01      	ldr	r3, [pc, #4]	@ (800a650 <__errno+0x8>)
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000108 	.word	0x20000108

0800a654 <__libc_init_array>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4d0d      	ldr	r5, [pc, #52]	@ (800a68c <__libc_init_array+0x38>)
 800a658:	4c0d      	ldr	r4, [pc, #52]	@ (800a690 <__libc_init_array+0x3c>)
 800a65a:	1b64      	subs	r4, r4, r5
 800a65c:	10a4      	asrs	r4, r4, #2
 800a65e:	2600      	movs	r6, #0
 800a660:	42a6      	cmp	r6, r4
 800a662:	d109      	bne.n	800a678 <__libc_init_array+0x24>
 800a664:	4d0b      	ldr	r5, [pc, #44]	@ (800a694 <__libc_init_array+0x40>)
 800a666:	4c0c      	ldr	r4, [pc, #48]	@ (800a698 <__libc_init_array+0x44>)
 800a668:	f002 f866 	bl	800c738 <_init>
 800a66c:	1b64      	subs	r4, r4, r5
 800a66e:	10a4      	asrs	r4, r4, #2
 800a670:	2600      	movs	r6, #0
 800a672:	42a6      	cmp	r6, r4
 800a674:	d105      	bne.n	800a682 <__libc_init_array+0x2e>
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67c:	4798      	blx	r3
 800a67e:	3601      	adds	r6, #1
 800a680:	e7ee      	b.n	800a660 <__libc_init_array+0xc>
 800a682:	f855 3b04 	ldr.w	r3, [r5], #4
 800a686:	4798      	blx	r3
 800a688:	3601      	adds	r6, #1
 800a68a:	e7f2      	b.n	800a672 <__libc_init_array+0x1e>
 800a68c:	0800cb50 	.word	0x0800cb50
 800a690:	0800cb50 	.word	0x0800cb50
 800a694:	0800cb50 	.word	0x0800cb50
 800a698:	0800cb54 	.word	0x0800cb54

0800a69c <__retarget_lock_init_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <__retarget_lock_acquire_recursive>:
 800a69e:	4770      	bx	lr

0800a6a0 <__retarget_lock_release_recursive>:
 800a6a0:	4770      	bx	lr

0800a6a2 <quorem>:
 800a6a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a6:	6903      	ldr	r3, [r0, #16]
 800a6a8:	690c      	ldr	r4, [r1, #16]
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	db7e      	blt.n	800a7ae <quorem+0x10c>
 800a6b0:	3c01      	subs	r4, #1
 800a6b2:	f101 0814 	add.w	r8, r1, #20
 800a6b6:	00a3      	lsls	r3, r4, #2
 800a6b8:	f100 0514 	add.w	r5, r0, #20
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6d8:	d32e      	bcc.n	800a738 <quorem+0x96>
 800a6da:	f04f 0a00 	mov.w	sl, #0
 800a6de:	46c4      	mov	ip, r8
 800a6e0:	46ae      	mov	lr, r5
 800a6e2:	46d3      	mov	fp, sl
 800a6e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6e8:	b298      	uxth	r0, r3
 800a6ea:	fb06 a000 	mla	r0, r6, r0, sl
 800a6ee:	0c02      	lsrs	r2, r0, #16
 800a6f0:	0c1b      	lsrs	r3, r3, #16
 800a6f2:	fb06 2303 	mla	r3, r6, r3, r2
 800a6f6:	f8de 2000 	ldr.w	r2, [lr]
 800a6fa:	b280      	uxth	r0, r0
 800a6fc:	b292      	uxth	r2, r2
 800a6fe:	1a12      	subs	r2, r2, r0
 800a700:	445a      	add	r2, fp
 800a702:	f8de 0000 	ldr.w	r0, [lr]
 800a706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a710:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a714:	b292      	uxth	r2, r2
 800a716:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a71a:	45e1      	cmp	r9, ip
 800a71c:	f84e 2b04 	str.w	r2, [lr], #4
 800a720:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a724:	d2de      	bcs.n	800a6e4 <quorem+0x42>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	58eb      	ldr	r3, [r5, r3]
 800a72a:	b92b      	cbnz	r3, 800a738 <quorem+0x96>
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	3b04      	subs	r3, #4
 800a730:	429d      	cmp	r5, r3
 800a732:	461a      	mov	r2, r3
 800a734:	d32f      	bcc.n	800a796 <quorem+0xf4>
 800a736:	613c      	str	r4, [r7, #16]
 800a738:	4638      	mov	r0, r7
 800a73a:	f001 f97b 	bl	800ba34 <__mcmp>
 800a73e:	2800      	cmp	r0, #0
 800a740:	db25      	blt.n	800a78e <quorem+0xec>
 800a742:	4629      	mov	r1, r5
 800a744:	2000      	movs	r0, #0
 800a746:	f858 2b04 	ldr.w	r2, [r8], #4
 800a74a:	f8d1 c000 	ldr.w	ip, [r1]
 800a74e:	fa1f fe82 	uxth.w	lr, r2
 800a752:	fa1f f38c 	uxth.w	r3, ip
 800a756:	eba3 030e 	sub.w	r3, r3, lr
 800a75a:	4403      	add	r3, r0
 800a75c:	0c12      	lsrs	r2, r2, #16
 800a75e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a762:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a766:	b29b      	uxth	r3, r3
 800a768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a76c:	45c1      	cmp	r9, r8
 800a76e:	f841 3b04 	str.w	r3, [r1], #4
 800a772:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a776:	d2e6      	bcs.n	800a746 <quorem+0xa4>
 800a778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a77c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a780:	b922      	cbnz	r2, 800a78c <quorem+0xea>
 800a782:	3b04      	subs	r3, #4
 800a784:	429d      	cmp	r5, r3
 800a786:	461a      	mov	r2, r3
 800a788:	d30b      	bcc.n	800a7a2 <quorem+0x100>
 800a78a:	613c      	str	r4, [r7, #16]
 800a78c:	3601      	adds	r6, #1
 800a78e:	4630      	mov	r0, r6
 800a790:	b003      	add	sp, #12
 800a792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	3b04      	subs	r3, #4
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	d1cb      	bne.n	800a736 <quorem+0x94>
 800a79e:	3c01      	subs	r4, #1
 800a7a0:	e7c6      	b.n	800a730 <quorem+0x8e>
 800a7a2:	6812      	ldr	r2, [r2, #0]
 800a7a4:	3b04      	subs	r3, #4
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	d1ef      	bne.n	800a78a <quorem+0xe8>
 800a7aa:	3c01      	subs	r4, #1
 800a7ac:	e7ea      	b.n	800a784 <quorem+0xe2>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e7ee      	b.n	800a790 <quorem+0xee>
 800a7b2:	0000      	movs	r0, r0
 800a7b4:	0000      	movs	r0, r0
	...

0800a7b8 <_dtoa_r>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	69c7      	ldr	r7, [r0, #28]
 800a7be:	b099      	sub	sp, #100	@ 0x64
 800a7c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7c4:	ec55 4b10 	vmov	r4, r5, d0
 800a7c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a7ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7cc:	4683      	mov	fp, r0
 800a7ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7d2:	b97f      	cbnz	r7, 800a7f4 <_dtoa_r+0x3c>
 800a7d4:	2010      	movs	r0, #16
 800a7d6:	f000 fdfd 	bl	800b3d4 <malloc>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a7e0:	b920      	cbnz	r0, 800a7ec <_dtoa_r+0x34>
 800a7e2:	4ba7      	ldr	r3, [pc, #668]	@ (800aa80 <_dtoa_r+0x2c8>)
 800a7e4:	21ef      	movs	r1, #239	@ 0xef
 800a7e6:	48a7      	ldr	r0, [pc, #668]	@ (800aa84 <_dtoa_r+0x2cc>)
 800a7e8:	f001 fc68 	bl	800c0bc <__assert_func>
 800a7ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a7f0:	6007      	str	r7, [r0, #0]
 800a7f2:	60c7      	str	r7, [r0, #12]
 800a7f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	b159      	cbz	r1, 800a814 <_dtoa_r+0x5c>
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	604a      	str	r2, [r1, #4]
 800a800:	2301      	movs	r3, #1
 800a802:	4093      	lsls	r3, r2
 800a804:	608b      	str	r3, [r1, #8]
 800a806:	4658      	mov	r0, fp
 800a808:	f000 feda 	bl	800b5c0 <_Bfree>
 800a80c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	1e2b      	subs	r3, r5, #0
 800a816:	bfb9      	ittee	lt
 800a818:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a81c:	9303      	strlt	r3, [sp, #12]
 800a81e:	2300      	movge	r3, #0
 800a820:	6033      	strge	r3, [r6, #0]
 800a822:	9f03      	ldr	r7, [sp, #12]
 800a824:	4b98      	ldr	r3, [pc, #608]	@ (800aa88 <_dtoa_r+0x2d0>)
 800a826:	bfbc      	itt	lt
 800a828:	2201      	movlt	r2, #1
 800a82a:	6032      	strlt	r2, [r6, #0]
 800a82c:	43bb      	bics	r3, r7
 800a82e:	d112      	bne.n	800a856 <_dtoa_r+0x9e>
 800a830:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a832:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a83c:	4323      	orrs	r3, r4
 800a83e:	f000 854d 	beq.w	800b2dc <_dtoa_r+0xb24>
 800a842:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a844:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aa9c <_dtoa_r+0x2e4>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 854f 	beq.w	800b2ec <_dtoa_r+0xb34>
 800a84e:	f10a 0303 	add.w	r3, sl, #3
 800a852:	f000 bd49 	b.w	800b2e8 <_dtoa_r+0xb30>
 800a856:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a85a:	2200      	movs	r2, #0
 800a85c:	ec51 0b17 	vmov	r0, r1, d7
 800a860:	2300      	movs	r3, #0
 800a862:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a866:	f7f6 f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800a86a:	4680      	mov	r8, r0
 800a86c:	b158      	cbz	r0, 800a886 <_dtoa_r+0xce>
 800a86e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a870:	2301      	movs	r3, #1
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a876:	b113      	cbz	r3, 800a87e <_dtoa_r+0xc6>
 800a878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a87a:	4b84      	ldr	r3, [pc, #528]	@ (800aa8c <_dtoa_r+0x2d4>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aaa0 <_dtoa_r+0x2e8>
 800a882:	f000 bd33 	b.w	800b2ec <_dtoa_r+0xb34>
 800a886:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a88a:	aa16      	add	r2, sp, #88	@ 0x58
 800a88c:	a917      	add	r1, sp, #92	@ 0x5c
 800a88e:	4658      	mov	r0, fp
 800a890:	f001 f980 	bl	800bb94 <__d2b>
 800a894:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a898:	4681      	mov	r9, r0
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	d077      	beq.n	800a98e <_dtoa_r+0x1d6>
 800a89e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a8a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4b74      	ldr	r3, [pc, #464]	@ (800aa90 <_dtoa_r+0x2d8>)
 800a8be:	f7f5 fceb 	bl	8000298 <__aeabi_dsub>
 800a8c2:	a369      	add	r3, pc, #420	@ (adr r3, 800aa68 <_dtoa_r+0x2b0>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fe9e 	bl	8000608 <__aeabi_dmul>
 800a8cc:	a368      	add	r3, pc, #416	@ (adr r3, 800aa70 <_dtoa_r+0x2b8>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fce3 	bl	800029c <__adddf3>
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4630      	mov	r0, r6
 800a8da:	460d      	mov	r5, r1
 800a8dc:	f7f5 fe2a 	bl	8000534 <__aeabi_i2d>
 800a8e0:	a365      	add	r3, pc, #404	@ (adr r3, 800aa78 <_dtoa_r+0x2c0>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fe8f 	bl	8000608 <__aeabi_dmul>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f7f5 fcd3 	bl	800029c <__adddf3>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	f7f6 f935 	bl	8000b68 <__aeabi_d2iz>
 800a8fe:	2200      	movs	r2, #0
 800a900:	4607      	mov	r7, r0
 800a902:	2300      	movs	r3, #0
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f6 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800a90c:	b140      	cbz	r0, 800a920 <_dtoa_r+0x168>
 800a90e:	4638      	mov	r0, r7
 800a910:	f7f5 fe10 	bl	8000534 <__aeabi_i2d>
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	f7f6 f8de 	bl	8000ad8 <__aeabi_dcmpeq>
 800a91c:	b900      	cbnz	r0, 800a920 <_dtoa_r+0x168>
 800a91e:	3f01      	subs	r7, #1
 800a920:	2f16      	cmp	r7, #22
 800a922:	d851      	bhi.n	800a9c8 <_dtoa_r+0x210>
 800a924:	4b5b      	ldr	r3, [pc, #364]	@ (800aa94 <_dtoa_r+0x2dc>)
 800a926:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a932:	f7f6 f8db 	bl	8000aec <__aeabi_dcmplt>
 800a936:	2800      	cmp	r0, #0
 800a938:	d048      	beq.n	800a9cc <_dtoa_r+0x214>
 800a93a:	3f01      	subs	r7, #1
 800a93c:	2300      	movs	r3, #0
 800a93e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a940:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a942:	1b9b      	subs	r3, r3, r6
 800a944:	1e5a      	subs	r2, r3, #1
 800a946:	bf44      	itt	mi
 800a948:	f1c3 0801 	rsbmi	r8, r3, #1
 800a94c:	2300      	movmi	r3, #0
 800a94e:	9208      	str	r2, [sp, #32]
 800a950:	bf54      	ite	pl
 800a952:	f04f 0800 	movpl.w	r8, #0
 800a956:	9308      	strmi	r3, [sp, #32]
 800a958:	2f00      	cmp	r7, #0
 800a95a:	db39      	blt.n	800a9d0 <_dtoa_r+0x218>
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a960:	443b      	add	r3, r7
 800a962:	9308      	str	r3, [sp, #32]
 800a964:	2300      	movs	r3, #0
 800a966:	930a      	str	r3, [sp, #40]	@ 0x28
 800a968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96a:	2b09      	cmp	r3, #9
 800a96c:	d864      	bhi.n	800aa38 <_dtoa_r+0x280>
 800a96e:	2b05      	cmp	r3, #5
 800a970:	bfc4      	itt	gt
 800a972:	3b04      	subgt	r3, #4
 800a974:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a978:	f1a3 0302 	sub.w	r3, r3, #2
 800a97c:	bfcc      	ite	gt
 800a97e:	2400      	movgt	r4, #0
 800a980:	2401      	movle	r4, #1
 800a982:	2b03      	cmp	r3, #3
 800a984:	d863      	bhi.n	800aa4e <_dtoa_r+0x296>
 800a986:	e8df f003 	tbb	[pc, r3]
 800a98a:	372a      	.short	0x372a
 800a98c:	5535      	.short	0x5535
 800a98e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a992:	441e      	add	r6, r3
 800a994:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a998:	2b20      	cmp	r3, #32
 800a99a:	bfc1      	itttt	gt
 800a99c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9a0:	409f      	lslgt	r7, r3
 800a9a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9aa:	bfd6      	itet	le
 800a9ac:	f1c3 0320 	rsble	r3, r3, #32
 800a9b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a9b4:	fa04 f003 	lslle.w	r0, r4, r3
 800a9b8:	f7f5 fdac 	bl	8000514 <__aeabi_ui2d>
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a9c2:	3e01      	subs	r6, #1
 800a9c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a9c6:	e777      	b.n	800a8b8 <_dtoa_r+0x100>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e7b8      	b.n	800a93e <_dtoa_r+0x186>
 800a9cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a9ce:	e7b7      	b.n	800a940 <_dtoa_r+0x188>
 800a9d0:	427b      	negs	r3, r7
 800a9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	eba8 0807 	sub.w	r8, r8, r7
 800a9da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9dc:	e7c4      	b.n	800a968 <_dtoa_r+0x1b0>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dc35      	bgt.n	800aa54 <_dtoa_r+0x29c>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	9307      	str	r3, [sp, #28]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9f2:	e00b      	b.n	800aa0c <_dtoa_r+0x254>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e7f3      	b.n	800a9e0 <_dtoa_r+0x228>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	bfb8      	it	lt
 800aa0a:	2301      	movlt	r3, #1
 800aa0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa10:	2100      	movs	r1, #0
 800aa12:	2204      	movs	r2, #4
 800aa14:	f102 0514 	add.w	r5, r2, #20
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	d91f      	bls.n	800aa5c <_dtoa_r+0x2a4>
 800aa1c:	6041      	str	r1, [r0, #4]
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fd8e 	bl	800b540 <_Balloc>
 800aa24:	4682      	mov	sl, r0
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d13c      	bne.n	800aaa4 <_dtoa_r+0x2ec>
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <_dtoa_r+0x2e0>)
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa32:	e6d8      	b.n	800a7e6 <_dtoa_r+0x2e>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e7e0      	b.n	800a9fa <_dtoa_r+0x242>
 800aa38:	2401      	movs	r4, #1
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2312      	movs	r3, #18
 800aa4c:	e7d0      	b.n	800a9f0 <_dtoa_r+0x238>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa52:	e7f5      	b.n	800aa40 <_dtoa_r+0x288>
 800aa54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	9307      	str	r3, [sp, #28]
 800aa5a:	e7d7      	b.n	800aa0c <_dtoa_r+0x254>
 800aa5c:	3101      	adds	r1, #1
 800aa5e:	0052      	lsls	r2, r2, #1
 800aa60:	e7d8      	b.n	800aa14 <_dtoa_r+0x25c>
 800aa62:	bf00      	nop
 800aa64:	f3af 8000 	nop.w
 800aa68:	636f4361 	.word	0x636f4361
 800aa6c:	3fd287a7 	.word	0x3fd287a7
 800aa70:	8b60c8b3 	.word	0x8b60c8b3
 800aa74:	3fc68a28 	.word	0x3fc68a28
 800aa78:	509f79fb 	.word	0x509f79fb
 800aa7c:	3fd34413 	.word	0x3fd34413
 800aa80:	0800c815 	.word	0x0800c815
 800aa84:	0800c82c 	.word	0x0800c82c
 800aa88:	7ff00000 	.word	0x7ff00000
 800aa8c:	0800c7e5 	.word	0x0800c7e5
 800aa90:	3ff80000 	.word	0x3ff80000
 800aa94:	0800c928 	.word	0x0800c928
 800aa98:	0800c884 	.word	0x0800c884
 800aa9c:	0800c811 	.word	0x0800c811
 800aaa0:	0800c7e4 	.word	0x0800c7e4
 800aaa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aaa8:	6018      	str	r0, [r3, #0]
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	2b0e      	cmp	r3, #14
 800aaae:	f200 80a4 	bhi.w	800abfa <_dtoa_r+0x442>
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	f000 80a1 	beq.w	800abfa <_dtoa_r+0x442>
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	dd33      	ble.n	800ab24 <_dtoa_r+0x36c>
 800aabc:	4bad      	ldr	r3, [pc, #692]	@ (800ad74 <_dtoa_r+0x5bc>)
 800aabe:	f007 020f 	and.w	r2, r7, #15
 800aac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac6:	ed93 7b00 	vldr	d7, [r3]
 800aaca:	05f8      	lsls	r0, r7, #23
 800aacc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aad0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aad4:	d516      	bpl.n	800ab04 <_dtoa_r+0x34c>
 800aad6:	4ba8      	ldr	r3, [pc, #672]	@ (800ad78 <_dtoa_r+0x5c0>)
 800aad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aadc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aae0:	f7f5 febc 	bl	800085c <__aeabi_ddiv>
 800aae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae8:	f004 040f 	and.w	r4, r4, #15
 800aaec:	2603      	movs	r6, #3
 800aaee:	4da2      	ldr	r5, [pc, #648]	@ (800ad78 <_dtoa_r+0x5c0>)
 800aaf0:	b954      	cbnz	r4, 800ab08 <_dtoa_r+0x350>
 800aaf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aafa:	f7f5 feaf 	bl	800085c <__aeabi_ddiv>
 800aafe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab02:	e028      	b.n	800ab56 <_dtoa_r+0x39e>
 800ab04:	2602      	movs	r6, #2
 800ab06:	e7f2      	b.n	800aaee <_dtoa_r+0x336>
 800ab08:	07e1      	lsls	r1, r4, #31
 800ab0a:	d508      	bpl.n	800ab1e <_dtoa_r+0x366>
 800ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab14:	f7f5 fd78 	bl	8000608 <__aeabi_dmul>
 800ab18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	1064      	asrs	r4, r4, #1
 800ab20:	3508      	adds	r5, #8
 800ab22:	e7e5      	b.n	800aaf0 <_dtoa_r+0x338>
 800ab24:	f000 80d2 	beq.w	800accc <_dtoa_r+0x514>
 800ab28:	427c      	negs	r4, r7
 800ab2a:	4b92      	ldr	r3, [pc, #584]	@ (800ad74 <_dtoa_r+0x5bc>)
 800ab2c:	4d92      	ldr	r5, [pc, #584]	@ (800ad78 <_dtoa_r+0x5c0>)
 800ab2e:	f004 020f 	and.w	r2, r4, #15
 800ab32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab46:	1124      	asrs	r4, r4, #4
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2602      	movs	r6, #2
 800ab4c:	2c00      	cmp	r4, #0
 800ab4e:	f040 80b2 	bne.w	800acb6 <_dtoa_r+0x4fe>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1d3      	bne.n	800aafe <_dtoa_r+0x346>
 800ab56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80b7 	beq.w	800acd0 <_dtoa_r+0x518>
 800ab62:	4b86      	ldr	r3, [pc, #536]	@ (800ad7c <_dtoa_r+0x5c4>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f000 80ae 	beq.w	800acd0 <_dtoa_r+0x518>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 80aa 	beq.w	800acd0 <_dtoa_r+0x518>
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dd37      	ble.n	800abf2 <_dtoa_r+0x43a>
 800ab82:	1e7b      	subs	r3, r7, #1
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	4620      	mov	r0, r4
 800ab88:	4b7d      	ldr	r3, [pc, #500]	@ (800ad80 <_dtoa_r+0x5c8>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7f5 fd3b 	bl	8000608 <__aeabi_dmul>
 800ab92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab96:	9c00      	ldr	r4, [sp, #0]
 800ab98:	3601      	adds	r6, #1
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f7f5 fcca 	bl	8000534 <__aeabi_i2d>
 800aba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba4:	f7f5 fd30 	bl	8000608 <__aeabi_dmul>
 800aba8:	4b76      	ldr	r3, [pc, #472]	@ (800ad84 <_dtoa_r+0x5cc>)
 800abaa:	2200      	movs	r2, #0
 800abac:	f7f5 fb76 	bl	800029c <__adddf3>
 800abb0:	4605      	mov	r5, r0
 800abb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	f040 808d 	bne.w	800acd6 <_dtoa_r+0x51e>
 800abbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc0:	4b71      	ldr	r3, [pc, #452]	@ (800ad88 <_dtoa_r+0x5d0>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	f7f5 fb68 	bl	8000298 <__aeabi_dsub>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abd0:	462a      	mov	r2, r5
 800abd2:	4633      	mov	r3, r6
 800abd4:	f7f5 ffa8 	bl	8000b28 <__aeabi_dcmpgt>
 800abd8:	2800      	cmp	r0, #0
 800abda:	f040 828b 	bne.w	800b0f4 <_dtoa_r+0x93c>
 800abde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe2:	462a      	mov	r2, r5
 800abe4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abe8:	f7f5 ff80 	bl	8000aec <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 8128 	bne.w	800ae42 <_dtoa_r+0x68a>
 800abf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800abf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800abfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f2c0 815a 	blt.w	800aeb6 <_dtoa_r+0x6fe>
 800ac02:	2f0e      	cmp	r7, #14
 800ac04:	f300 8157 	bgt.w	800aeb6 <_dtoa_r+0x6fe>
 800ac08:	4b5a      	ldr	r3, [pc, #360]	@ (800ad74 <_dtoa_r+0x5bc>)
 800ac0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac0e:	ed93 7b00 	vldr	d7, [r3]
 800ac12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	ed8d 7b00 	vstr	d7, [sp]
 800ac1a:	da03      	bge.n	800ac24 <_dtoa_r+0x46c>
 800ac1c:	9b07      	ldr	r3, [sp, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f340 8101 	ble.w	800ae26 <_dtoa_r+0x66e>
 800ac24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac28:	4656      	mov	r6, sl
 800ac2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fe13 	bl	800085c <__aeabi_ddiv>
 800ac36:	f7f5 ff97 	bl	8000b68 <__aeabi_d2iz>
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	f7f5 fc7a 	bl	8000534 <__aeabi_i2d>
 800ac40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac44:	f7f5 fce0 	bl	8000608 <__aeabi_dmul>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac54:	f7f5 fb20 	bl	8000298 <__aeabi_dsub>
 800ac58:	f806 4b01 	strb.w	r4, [r6], #1
 800ac5c:	9d07      	ldr	r5, [sp, #28]
 800ac5e:	eba6 040a 	sub.w	r4, r6, sl
 800ac62:	42a5      	cmp	r5, r4
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	f040 8117 	bne.w	800ae9a <_dtoa_r+0x6e2>
 800ac6c:	f7f5 fb16 	bl	800029c <__adddf3>
 800ac70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	f7f5 ff56 	bl	8000b28 <__aeabi_dcmpgt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f040 80f9 	bne.w	800ae74 <_dtoa_r+0x6bc>
 800ac82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f7f5 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac8e:	b118      	cbz	r0, 800ac98 <_dtoa_r+0x4e0>
 800ac90:	f018 0f01 	tst.w	r8, #1
 800ac94:	f040 80ee 	bne.w	800ae74 <_dtoa_r+0x6bc>
 800ac98:	4649      	mov	r1, r9
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 fc90 	bl	800b5c0 <_Bfree>
 800aca0:	2300      	movs	r3, #0
 800aca2:	7033      	strb	r3, [r6, #0]
 800aca4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aca6:	3701      	adds	r7, #1
 800aca8:	601f      	str	r7, [r3, #0]
 800acaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 831d 	beq.w	800b2ec <_dtoa_r+0xb34>
 800acb2:	601e      	str	r6, [r3, #0]
 800acb4:	e31a      	b.n	800b2ec <_dtoa_r+0xb34>
 800acb6:	07e2      	lsls	r2, r4, #31
 800acb8:	d505      	bpl.n	800acc6 <_dtoa_r+0x50e>
 800acba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acbe:	f7f5 fca3 	bl	8000608 <__aeabi_dmul>
 800acc2:	3601      	adds	r6, #1
 800acc4:	2301      	movs	r3, #1
 800acc6:	1064      	asrs	r4, r4, #1
 800acc8:	3508      	adds	r5, #8
 800acca:	e73f      	b.n	800ab4c <_dtoa_r+0x394>
 800accc:	2602      	movs	r6, #2
 800acce:	e742      	b.n	800ab56 <_dtoa_r+0x39e>
 800acd0:	9c07      	ldr	r4, [sp, #28]
 800acd2:	9704      	str	r7, [sp, #16]
 800acd4:	e761      	b.n	800ab9a <_dtoa_r+0x3e2>
 800acd6:	4b27      	ldr	r3, [pc, #156]	@ (800ad74 <_dtoa_r+0x5bc>)
 800acd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ace2:	4454      	add	r4, sl
 800ace4:	2900      	cmp	r1, #0
 800ace6:	d053      	beq.n	800ad90 <_dtoa_r+0x5d8>
 800ace8:	4928      	ldr	r1, [pc, #160]	@ (800ad8c <_dtoa_r+0x5d4>)
 800acea:	2000      	movs	r0, #0
 800acec:	f7f5 fdb6 	bl	800085c <__aeabi_ddiv>
 800acf0:	4633      	mov	r3, r6
 800acf2:	462a      	mov	r2, r5
 800acf4:	f7f5 fad0 	bl	8000298 <__aeabi_dsub>
 800acf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acfc:	4656      	mov	r6, sl
 800acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad02:	f7f5 ff31 	bl	8000b68 <__aeabi_d2iz>
 800ad06:	4605      	mov	r5, r0
 800ad08:	f7f5 fc14 	bl	8000534 <__aeabi_i2d>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad14:	f7f5 fac0 	bl	8000298 <__aeabi_dsub>
 800ad18:	3530      	adds	r5, #48	@ 0x30
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad22:	f806 5b01 	strb.w	r5, [r6], #1
 800ad26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad2a:	f7f5 fedf 	bl	8000aec <__aeabi_dcmplt>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d171      	bne.n	800ae16 <_dtoa_r+0x65e>
 800ad32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad36:	4911      	ldr	r1, [pc, #68]	@ (800ad7c <_dtoa_r+0x5c4>)
 800ad38:	2000      	movs	r0, #0
 800ad3a:	f7f5 faad 	bl	8000298 <__aeabi_dsub>
 800ad3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad42:	f7f5 fed3 	bl	8000aec <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f040 8095 	bne.w	800ae76 <_dtoa_r+0x6be>
 800ad4c:	42a6      	cmp	r6, r4
 800ad4e:	f43f af50 	beq.w	800abf2 <_dtoa_r+0x43a>
 800ad52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad56:	4b0a      	ldr	r3, [pc, #40]	@ (800ad80 <_dtoa_r+0x5c8>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f7f5 fc55 	bl	8000608 <__aeabi_dmul>
 800ad5e:	4b08      	ldr	r3, [pc, #32]	@ (800ad80 <_dtoa_r+0x5c8>)
 800ad60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad64:	2200      	movs	r2, #0
 800ad66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad6a:	f7f5 fc4d 	bl	8000608 <__aeabi_dmul>
 800ad6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad72:	e7c4      	b.n	800acfe <_dtoa_r+0x546>
 800ad74:	0800c928 	.word	0x0800c928
 800ad78:	0800c900 	.word	0x0800c900
 800ad7c:	3ff00000 	.word	0x3ff00000
 800ad80:	40240000 	.word	0x40240000
 800ad84:	401c0000 	.word	0x401c0000
 800ad88:	40140000 	.word	0x40140000
 800ad8c:	3fe00000 	.word	0x3fe00000
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	f7f5 fc38 	bl	8000608 <__aeabi_dmul>
 800ad98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ad9e:	4656      	mov	r6, sl
 800ada0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada4:	f7f5 fee0 	bl	8000b68 <__aeabi_d2iz>
 800ada8:	4605      	mov	r5, r0
 800adaa:	f7f5 fbc3 	bl	8000534 <__aeabi_i2d>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb6:	f7f5 fa6f 	bl	8000298 <__aeabi_dsub>
 800adba:	3530      	adds	r5, #48	@ 0x30
 800adbc:	f806 5b01 	strb.w	r5, [r6], #1
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	42a6      	cmp	r6, r4
 800adc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	d124      	bne.n	800ae1a <_dtoa_r+0x662>
 800add0:	4bac      	ldr	r3, [pc, #688]	@ (800b084 <_dtoa_r+0x8cc>)
 800add2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800add6:	f7f5 fa61 	bl	800029c <__adddf3>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade2:	f7f5 fea1 	bl	8000b28 <__aeabi_dcmpgt>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d145      	bne.n	800ae76 <_dtoa_r+0x6be>
 800adea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adee:	49a5      	ldr	r1, [pc, #660]	@ (800b084 <_dtoa_r+0x8cc>)
 800adf0:	2000      	movs	r0, #0
 800adf2:	f7f5 fa51 	bl	8000298 <__aeabi_dsub>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfe:	f7f5 fe75 	bl	8000aec <__aeabi_dcmplt>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f43f aef5 	beq.w	800abf2 <_dtoa_r+0x43a>
 800ae08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ae0a:	1e73      	subs	r3, r6, #1
 800ae0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae12:	2b30      	cmp	r3, #48	@ 0x30
 800ae14:	d0f8      	beq.n	800ae08 <_dtoa_r+0x650>
 800ae16:	9f04      	ldr	r7, [sp, #16]
 800ae18:	e73e      	b.n	800ac98 <_dtoa_r+0x4e0>
 800ae1a:	4b9b      	ldr	r3, [pc, #620]	@ (800b088 <_dtoa_r+0x8d0>)
 800ae1c:	f7f5 fbf4 	bl	8000608 <__aeabi_dmul>
 800ae20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae24:	e7bc      	b.n	800ada0 <_dtoa_r+0x5e8>
 800ae26:	d10c      	bne.n	800ae42 <_dtoa_r+0x68a>
 800ae28:	4b98      	ldr	r3, [pc, #608]	@ (800b08c <_dtoa_r+0x8d4>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae30:	f7f5 fbea 	bl	8000608 <__aeabi_dmul>
 800ae34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae38:	f7f5 fe6c 	bl	8000b14 <__aeabi_dcmpge>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f000 8157 	beq.w	800b0f0 <_dtoa_r+0x938>
 800ae42:	2400      	movs	r4, #0
 800ae44:	4625      	mov	r5, r4
 800ae46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	4656      	mov	r6, sl
 800ae4e:	2700      	movs	r7, #0
 800ae50:	4621      	mov	r1, r4
 800ae52:	4658      	mov	r0, fp
 800ae54:	f000 fbb4 	bl	800b5c0 <_Bfree>
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	d0dc      	beq.n	800ae16 <_dtoa_r+0x65e>
 800ae5c:	b12f      	cbz	r7, 800ae6a <_dtoa_r+0x6b2>
 800ae5e:	42af      	cmp	r7, r5
 800ae60:	d003      	beq.n	800ae6a <_dtoa_r+0x6b2>
 800ae62:	4639      	mov	r1, r7
 800ae64:	4658      	mov	r0, fp
 800ae66:	f000 fbab 	bl	800b5c0 <_Bfree>
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4658      	mov	r0, fp
 800ae6e:	f000 fba7 	bl	800b5c0 <_Bfree>
 800ae72:	e7d0      	b.n	800ae16 <_dtoa_r+0x65e>
 800ae74:	9704      	str	r7, [sp, #16]
 800ae76:	4633      	mov	r3, r6
 800ae78:	461e      	mov	r6, r3
 800ae7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae7e:	2a39      	cmp	r2, #57	@ 0x39
 800ae80:	d107      	bne.n	800ae92 <_dtoa_r+0x6da>
 800ae82:	459a      	cmp	sl, r3
 800ae84:	d1f8      	bne.n	800ae78 <_dtoa_r+0x6c0>
 800ae86:	9a04      	ldr	r2, [sp, #16]
 800ae88:	3201      	adds	r2, #1
 800ae8a:	9204      	str	r2, [sp, #16]
 800ae8c:	2230      	movs	r2, #48	@ 0x30
 800ae8e:	f88a 2000 	strb.w	r2, [sl]
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	3201      	adds	r2, #1
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	e7bd      	b.n	800ae16 <_dtoa_r+0x65e>
 800ae9a:	4b7b      	ldr	r3, [pc, #492]	@ (800b088 <_dtoa_r+0x8d0>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f7f5 fbb3 	bl	8000608 <__aeabi_dmul>
 800aea2:	2200      	movs	r2, #0
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	f7f5 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f aebb 	beq.w	800ac2a <_dtoa_r+0x472>
 800aeb4:	e6f0      	b.n	800ac98 <_dtoa_r+0x4e0>
 800aeb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	f000 80db 	beq.w	800b074 <_dtoa_r+0x8bc>
 800aebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aec0:	2a01      	cmp	r2, #1
 800aec2:	f300 80bf 	bgt.w	800b044 <_dtoa_r+0x88c>
 800aec6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	f000 80b7 	beq.w	800b03c <_dtoa_r+0x884>
 800aece:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aed2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aed4:	4646      	mov	r6, r8
 800aed6:	9a08      	ldr	r2, [sp, #32]
 800aed8:	2101      	movs	r1, #1
 800aeda:	441a      	add	r2, r3
 800aedc:	4658      	mov	r0, fp
 800aede:	4498      	add	r8, r3
 800aee0:	9208      	str	r2, [sp, #32]
 800aee2:	f000 fc21 	bl	800b728 <__i2b>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b15e      	cbz	r6, 800af02 <_dtoa_r+0x74a>
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dd08      	ble.n	800af02 <_dtoa_r+0x74a>
 800aef0:	42b3      	cmp	r3, r6
 800aef2:	9a08      	ldr	r2, [sp, #32]
 800aef4:	bfa8      	it	ge
 800aef6:	4633      	movge	r3, r6
 800aef8:	eba8 0803 	sub.w	r8, r8, r3
 800aefc:	1af6      	subs	r6, r6, r3
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	9308      	str	r3, [sp, #32]
 800af02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af04:	b1f3      	cbz	r3, 800af44 <_dtoa_r+0x78c>
 800af06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 80b7 	beq.w	800b07c <_dtoa_r+0x8c4>
 800af0e:	b18c      	cbz	r4, 800af34 <_dtoa_r+0x77c>
 800af10:	4629      	mov	r1, r5
 800af12:	4622      	mov	r2, r4
 800af14:	4658      	mov	r0, fp
 800af16:	f000 fcc7 	bl	800b8a8 <__pow5mult>
 800af1a:	464a      	mov	r2, r9
 800af1c:	4601      	mov	r1, r0
 800af1e:	4605      	mov	r5, r0
 800af20:	4658      	mov	r0, fp
 800af22:	f000 fc17 	bl	800b754 <__multiply>
 800af26:	4649      	mov	r1, r9
 800af28:	9004      	str	r0, [sp, #16]
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fb48 	bl	800b5c0 <_Bfree>
 800af30:	9b04      	ldr	r3, [sp, #16]
 800af32:	4699      	mov	r9, r3
 800af34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af36:	1b1a      	subs	r2, r3, r4
 800af38:	d004      	beq.n	800af44 <_dtoa_r+0x78c>
 800af3a:	4649      	mov	r1, r9
 800af3c:	4658      	mov	r0, fp
 800af3e:	f000 fcb3 	bl	800b8a8 <__pow5mult>
 800af42:	4681      	mov	r9, r0
 800af44:	2101      	movs	r1, #1
 800af46:	4658      	mov	r0, fp
 800af48:	f000 fbee 	bl	800b728 <__i2b>
 800af4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af4e:	4604      	mov	r4, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 81cf 	beq.w	800b2f4 <_dtoa_r+0xb3c>
 800af56:	461a      	mov	r2, r3
 800af58:	4601      	mov	r1, r0
 800af5a:	4658      	mov	r0, fp
 800af5c:	f000 fca4 	bl	800b8a8 <__pow5mult>
 800af60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af62:	2b01      	cmp	r3, #1
 800af64:	4604      	mov	r4, r0
 800af66:	f300 8095 	bgt.w	800b094 <_dtoa_r+0x8dc>
 800af6a:	9b02      	ldr	r3, [sp, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 8087 	bne.w	800b080 <_dtoa_r+0x8c8>
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f040 8089 	bne.w	800b090 <_dtoa_r+0x8d8>
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af84:	0d1b      	lsrs	r3, r3, #20
 800af86:	051b      	lsls	r3, r3, #20
 800af88:	b12b      	cbz	r3, 800af96 <_dtoa_r+0x7de>
 800af8a:	9b08      	ldr	r3, [sp, #32]
 800af8c:	3301      	adds	r3, #1
 800af8e:	9308      	str	r3, [sp, #32]
 800af90:	f108 0801 	add.w	r8, r8, #1
 800af94:	2301      	movs	r3, #1
 800af96:	930a      	str	r3, [sp, #40]	@ 0x28
 800af98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 81b0 	beq.w	800b300 <_dtoa_r+0xb48>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afa6:	6918      	ldr	r0, [r3, #16]
 800afa8:	f000 fb72 	bl	800b690 <__hi0bits>
 800afac:	f1c0 0020 	rsb	r0, r0, #32
 800afb0:	9b08      	ldr	r3, [sp, #32]
 800afb2:	4418      	add	r0, r3
 800afb4:	f010 001f 	ands.w	r0, r0, #31
 800afb8:	d077      	beq.n	800b0aa <_dtoa_r+0x8f2>
 800afba:	f1c0 0320 	rsb	r3, r0, #32
 800afbe:	2b04      	cmp	r3, #4
 800afc0:	dd6b      	ble.n	800b09a <_dtoa_r+0x8e2>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	f1c0 001c 	rsb	r0, r0, #28
 800afc8:	4403      	add	r3, r0
 800afca:	4480      	add	r8, r0
 800afcc:	4406      	add	r6, r0
 800afce:	9308      	str	r3, [sp, #32]
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	dd05      	ble.n	800afe2 <_dtoa_r+0x82a>
 800afd6:	4649      	mov	r1, r9
 800afd8:	4642      	mov	r2, r8
 800afda:	4658      	mov	r0, fp
 800afdc:	f000 fcbe 	bl	800b95c <__lshift>
 800afe0:	4681      	mov	r9, r0
 800afe2:	9b08      	ldr	r3, [sp, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dd05      	ble.n	800aff4 <_dtoa_r+0x83c>
 800afe8:	4621      	mov	r1, r4
 800afea:	461a      	mov	r2, r3
 800afec:	4658      	mov	r0, fp
 800afee:	f000 fcb5 	bl	800b95c <__lshift>
 800aff2:	4604      	mov	r4, r0
 800aff4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d059      	beq.n	800b0ae <_dtoa_r+0x8f6>
 800affa:	4621      	mov	r1, r4
 800affc:	4648      	mov	r0, r9
 800affe:	f000 fd19 	bl	800ba34 <__mcmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	da53      	bge.n	800b0ae <_dtoa_r+0x8f6>
 800b006:	1e7b      	subs	r3, r7, #1
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	4649      	mov	r1, r9
 800b00c:	2300      	movs	r3, #0
 800b00e:	220a      	movs	r2, #10
 800b010:	4658      	mov	r0, fp
 800b012:	f000 faf7 	bl	800b604 <__multadd>
 800b016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b018:	4681      	mov	r9, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 8172 	beq.w	800b304 <_dtoa_r+0xb4c>
 800b020:	2300      	movs	r3, #0
 800b022:	4629      	mov	r1, r5
 800b024:	220a      	movs	r2, #10
 800b026:	4658      	mov	r0, fp
 800b028:	f000 faec 	bl	800b604 <__multadd>
 800b02c:	9b00      	ldr	r3, [sp, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	4605      	mov	r5, r0
 800b032:	dc67      	bgt.n	800b104 <_dtoa_r+0x94c>
 800b034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b036:	2b02      	cmp	r3, #2
 800b038:	dc41      	bgt.n	800b0be <_dtoa_r+0x906>
 800b03a:	e063      	b.n	800b104 <_dtoa_r+0x94c>
 800b03c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b03e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b042:	e746      	b.n	800aed2 <_dtoa_r+0x71a>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	1e5c      	subs	r4, r3, #1
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	bfbf      	itttt	lt
 800b04e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b050:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b052:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b054:	1ae3      	sublt	r3, r4, r3
 800b056:	bfb4      	ite	lt
 800b058:	18d2      	addlt	r2, r2, r3
 800b05a:	1b1c      	subge	r4, r3, r4
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	bfbc      	itt	lt
 800b060:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b062:	2400      	movlt	r4, #0
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfb5      	itete	lt
 800b068:	eba8 0603 	sublt.w	r6, r8, r3
 800b06c:	9b07      	ldrge	r3, [sp, #28]
 800b06e:	2300      	movlt	r3, #0
 800b070:	4646      	movge	r6, r8
 800b072:	e730      	b.n	800aed6 <_dtoa_r+0x71e>
 800b074:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b076:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b078:	4646      	mov	r6, r8
 800b07a:	e735      	b.n	800aee8 <_dtoa_r+0x730>
 800b07c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b07e:	e75c      	b.n	800af3a <_dtoa_r+0x782>
 800b080:	2300      	movs	r3, #0
 800b082:	e788      	b.n	800af96 <_dtoa_r+0x7de>
 800b084:	3fe00000 	.word	0x3fe00000
 800b088:	40240000 	.word	0x40240000
 800b08c:	40140000 	.word	0x40140000
 800b090:	9b02      	ldr	r3, [sp, #8]
 800b092:	e780      	b.n	800af96 <_dtoa_r+0x7de>
 800b094:	2300      	movs	r3, #0
 800b096:	930a      	str	r3, [sp, #40]	@ 0x28
 800b098:	e782      	b.n	800afa0 <_dtoa_r+0x7e8>
 800b09a:	d099      	beq.n	800afd0 <_dtoa_r+0x818>
 800b09c:	9a08      	ldr	r2, [sp, #32]
 800b09e:	331c      	adds	r3, #28
 800b0a0:	441a      	add	r2, r3
 800b0a2:	4498      	add	r8, r3
 800b0a4:	441e      	add	r6, r3
 800b0a6:	9208      	str	r2, [sp, #32]
 800b0a8:	e792      	b.n	800afd0 <_dtoa_r+0x818>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	e7f6      	b.n	800b09c <_dtoa_r+0x8e4>
 800b0ae:	9b07      	ldr	r3, [sp, #28]
 800b0b0:	9704      	str	r7, [sp, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dc20      	bgt.n	800b0f8 <_dtoa_r+0x940>
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	dd1e      	ble.n	800b0fc <_dtoa_r+0x944>
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f47f aec0 	bne.w	800ae46 <_dtoa_r+0x68e>
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	2205      	movs	r2, #5
 800b0ca:	4658      	mov	r0, fp
 800b0cc:	f000 fa9a 	bl	800b604 <__multadd>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4648      	mov	r0, r9
 800b0d6:	f000 fcad 	bl	800ba34 <__mcmp>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f77f aeb3 	ble.w	800ae46 <_dtoa_r+0x68e>
 800b0e0:	4656      	mov	r6, sl
 800b0e2:	2331      	movs	r3, #49	@ 0x31
 800b0e4:	f806 3b01 	strb.w	r3, [r6], #1
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	e6ae      	b.n	800ae4e <_dtoa_r+0x696>
 800b0f0:	9c07      	ldr	r4, [sp, #28]
 800b0f2:	9704      	str	r7, [sp, #16]
 800b0f4:	4625      	mov	r5, r4
 800b0f6:	e7f3      	b.n	800b0e0 <_dtoa_r+0x928>
 800b0f8:	9b07      	ldr	r3, [sp, #28]
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8104 	beq.w	800b30c <_dtoa_r+0xb54>
 800b104:	2e00      	cmp	r6, #0
 800b106:	dd05      	ble.n	800b114 <_dtoa_r+0x95c>
 800b108:	4629      	mov	r1, r5
 800b10a:	4632      	mov	r2, r6
 800b10c:	4658      	mov	r0, fp
 800b10e:	f000 fc25 	bl	800b95c <__lshift>
 800b112:	4605      	mov	r5, r0
 800b114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b116:	2b00      	cmp	r3, #0
 800b118:	d05a      	beq.n	800b1d0 <_dtoa_r+0xa18>
 800b11a:	6869      	ldr	r1, [r5, #4]
 800b11c:	4658      	mov	r0, fp
 800b11e:	f000 fa0f 	bl	800b540 <_Balloc>
 800b122:	4606      	mov	r6, r0
 800b124:	b928      	cbnz	r0, 800b132 <_dtoa_r+0x97a>
 800b126:	4b84      	ldr	r3, [pc, #528]	@ (800b338 <_dtoa_r+0xb80>)
 800b128:	4602      	mov	r2, r0
 800b12a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b12e:	f7ff bb5a 	b.w	800a7e6 <_dtoa_r+0x2e>
 800b132:	692a      	ldr	r2, [r5, #16]
 800b134:	3202      	adds	r2, #2
 800b136:	0092      	lsls	r2, r2, #2
 800b138:	f105 010c 	add.w	r1, r5, #12
 800b13c:	300c      	adds	r0, #12
 800b13e:	f000 ffaf 	bl	800c0a0 <memcpy>
 800b142:	2201      	movs	r2, #1
 800b144:	4631      	mov	r1, r6
 800b146:	4658      	mov	r0, fp
 800b148:	f000 fc08 	bl	800b95c <__lshift>
 800b14c:	f10a 0301 	add.w	r3, sl, #1
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	4453      	add	r3, sl
 800b156:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	462f      	mov	r7, r5
 800b160:	930a      	str	r3, [sp, #40]	@ 0x28
 800b162:	4605      	mov	r5, r0
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	4621      	mov	r1, r4
 800b168:	3b01      	subs	r3, #1
 800b16a:	4648      	mov	r0, r9
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	f7ff fa98 	bl	800a6a2 <quorem>
 800b172:	4639      	mov	r1, r7
 800b174:	9002      	str	r0, [sp, #8]
 800b176:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b17a:	4648      	mov	r0, r9
 800b17c:	f000 fc5a 	bl	800ba34 <__mcmp>
 800b180:	462a      	mov	r2, r5
 800b182:	9008      	str	r0, [sp, #32]
 800b184:	4621      	mov	r1, r4
 800b186:	4658      	mov	r0, fp
 800b188:	f000 fc70 	bl	800ba6c <__mdiff>
 800b18c:	68c2      	ldr	r2, [r0, #12]
 800b18e:	4606      	mov	r6, r0
 800b190:	bb02      	cbnz	r2, 800b1d4 <_dtoa_r+0xa1c>
 800b192:	4601      	mov	r1, r0
 800b194:	4648      	mov	r0, r9
 800b196:	f000 fc4d 	bl	800ba34 <__mcmp>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4631      	mov	r1, r6
 800b19e:	4658      	mov	r0, fp
 800b1a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1a2:	f000 fa0d 	bl	800b5c0 <_Bfree>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1aa:	9e07      	ldr	r6, [sp, #28]
 800b1ac:	ea43 0102 	orr.w	r1, r3, r2
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b2:	4319      	orrs	r1, r3
 800b1b4:	d110      	bne.n	800b1d8 <_dtoa_r+0xa20>
 800b1b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1ba:	d029      	beq.n	800b210 <_dtoa_r+0xa58>
 800b1bc:	9b08      	ldr	r3, [sp, #32]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dd02      	ble.n	800b1c8 <_dtoa_r+0xa10>
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	f883 8000 	strb.w	r8, [r3]
 800b1ce:	e63f      	b.n	800ae50 <_dtoa_r+0x698>
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e7bb      	b.n	800b14c <_dtoa_r+0x994>
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	e7e1      	b.n	800b19c <_dtoa_r+0x9e4>
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	db04      	blt.n	800b1e8 <_dtoa_r+0xa30>
 800b1de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1e0:	430b      	orrs	r3, r1
 800b1e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	d120      	bne.n	800b22a <_dtoa_r+0xa72>
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	dded      	ble.n	800b1c8 <_dtoa_r+0xa10>
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4658      	mov	r0, fp
 800b1f2:	f000 fbb3 	bl	800b95c <__lshift>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4681      	mov	r9, r0
 800b1fa:	f000 fc1b 	bl	800ba34 <__mcmp>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	dc03      	bgt.n	800b20a <_dtoa_r+0xa52>
 800b202:	d1e1      	bne.n	800b1c8 <_dtoa_r+0xa10>
 800b204:	f018 0f01 	tst.w	r8, #1
 800b208:	d0de      	beq.n	800b1c8 <_dtoa_r+0xa10>
 800b20a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b20e:	d1d8      	bne.n	800b1c2 <_dtoa_r+0xa0a>
 800b210:	9a00      	ldr	r2, [sp, #0]
 800b212:	2339      	movs	r3, #57	@ 0x39
 800b214:	7013      	strb	r3, [r2, #0]
 800b216:	4633      	mov	r3, r6
 800b218:	461e      	mov	r6, r3
 800b21a:	3b01      	subs	r3, #1
 800b21c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b220:	2a39      	cmp	r2, #57	@ 0x39
 800b222:	d052      	beq.n	800b2ca <_dtoa_r+0xb12>
 800b224:	3201      	adds	r2, #1
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e612      	b.n	800ae50 <_dtoa_r+0x698>
 800b22a:	2a00      	cmp	r2, #0
 800b22c:	dd07      	ble.n	800b23e <_dtoa_r+0xa86>
 800b22e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b232:	d0ed      	beq.n	800b210 <_dtoa_r+0xa58>
 800b234:	9a00      	ldr	r2, [sp, #0]
 800b236:	f108 0301 	add.w	r3, r8, #1
 800b23a:	7013      	strb	r3, [r2, #0]
 800b23c:	e608      	b.n	800ae50 <_dtoa_r+0x698>
 800b23e:	9b07      	ldr	r3, [sp, #28]
 800b240:	9a07      	ldr	r2, [sp, #28]
 800b242:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b248:	4293      	cmp	r3, r2
 800b24a:	d028      	beq.n	800b29e <_dtoa_r+0xae6>
 800b24c:	4649      	mov	r1, r9
 800b24e:	2300      	movs	r3, #0
 800b250:	220a      	movs	r2, #10
 800b252:	4658      	mov	r0, fp
 800b254:	f000 f9d6 	bl	800b604 <__multadd>
 800b258:	42af      	cmp	r7, r5
 800b25a:	4681      	mov	r9, r0
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	f04f 020a 	mov.w	r2, #10
 800b264:	4639      	mov	r1, r7
 800b266:	4658      	mov	r0, fp
 800b268:	d107      	bne.n	800b27a <_dtoa_r+0xac2>
 800b26a:	f000 f9cb 	bl	800b604 <__multadd>
 800b26e:	4607      	mov	r7, r0
 800b270:	4605      	mov	r5, r0
 800b272:	9b07      	ldr	r3, [sp, #28]
 800b274:	3301      	adds	r3, #1
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	e774      	b.n	800b164 <_dtoa_r+0x9ac>
 800b27a:	f000 f9c3 	bl	800b604 <__multadd>
 800b27e:	4629      	mov	r1, r5
 800b280:	4607      	mov	r7, r0
 800b282:	2300      	movs	r3, #0
 800b284:	220a      	movs	r2, #10
 800b286:	4658      	mov	r0, fp
 800b288:	f000 f9bc 	bl	800b604 <__multadd>
 800b28c:	4605      	mov	r5, r0
 800b28e:	e7f0      	b.n	800b272 <_dtoa_r+0xaba>
 800b290:	9b00      	ldr	r3, [sp, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfcc      	ite	gt
 800b296:	461e      	movgt	r6, r3
 800b298:	2601      	movle	r6, #1
 800b29a:	4456      	add	r6, sl
 800b29c:	2700      	movs	r7, #0
 800b29e:	4649      	mov	r1, r9
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	4658      	mov	r0, fp
 800b2a4:	f000 fb5a 	bl	800b95c <__lshift>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4681      	mov	r9, r0
 800b2ac:	f000 fbc2 	bl	800ba34 <__mcmp>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dcb0      	bgt.n	800b216 <_dtoa_r+0xa5e>
 800b2b4:	d102      	bne.n	800b2bc <_dtoa_r+0xb04>
 800b2b6:	f018 0f01 	tst.w	r8, #1
 800b2ba:	d1ac      	bne.n	800b216 <_dtoa_r+0xa5e>
 800b2bc:	4633      	mov	r3, r6
 800b2be:	461e      	mov	r6, r3
 800b2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2c4:	2a30      	cmp	r2, #48	@ 0x30
 800b2c6:	d0fa      	beq.n	800b2be <_dtoa_r+0xb06>
 800b2c8:	e5c2      	b.n	800ae50 <_dtoa_r+0x698>
 800b2ca:	459a      	cmp	sl, r3
 800b2cc:	d1a4      	bne.n	800b218 <_dtoa_r+0xa60>
 800b2ce:	9b04      	ldr	r3, [sp, #16]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	2331      	movs	r3, #49	@ 0x31
 800b2d6:	f88a 3000 	strb.w	r3, [sl]
 800b2da:	e5b9      	b.n	800ae50 <_dtoa_r+0x698>
 800b2dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b33c <_dtoa_r+0xb84>
 800b2e2:	b11b      	cbz	r3, 800b2ec <_dtoa_r+0xb34>
 800b2e4:	f10a 0308 	add.w	r3, sl, #8
 800b2e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	4650      	mov	r0, sl
 800b2ee:	b019      	add	sp, #100	@ 0x64
 800b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	f77f ae37 	ble.w	800af6a <_dtoa_r+0x7b2>
 800b2fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b300:	2001      	movs	r0, #1
 800b302:	e655      	b.n	800afb0 <_dtoa_r+0x7f8>
 800b304:	9b00      	ldr	r3, [sp, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f77f aed6 	ble.w	800b0b8 <_dtoa_r+0x900>
 800b30c:	4656      	mov	r6, sl
 800b30e:	4621      	mov	r1, r4
 800b310:	4648      	mov	r0, r9
 800b312:	f7ff f9c6 	bl	800a6a2 <quorem>
 800b316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b31a:	f806 8b01 	strb.w	r8, [r6], #1
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	eba6 020a 	sub.w	r2, r6, sl
 800b324:	4293      	cmp	r3, r2
 800b326:	ddb3      	ble.n	800b290 <_dtoa_r+0xad8>
 800b328:	4649      	mov	r1, r9
 800b32a:	2300      	movs	r3, #0
 800b32c:	220a      	movs	r2, #10
 800b32e:	4658      	mov	r0, fp
 800b330:	f000 f968 	bl	800b604 <__multadd>
 800b334:	4681      	mov	r9, r0
 800b336:	e7ea      	b.n	800b30e <_dtoa_r+0xb56>
 800b338:	0800c884 	.word	0x0800c884
 800b33c:	0800c808 	.word	0x0800c808

0800b340 <_free_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4605      	mov	r5, r0
 800b344:	2900      	cmp	r1, #0
 800b346:	d041      	beq.n	800b3cc <_free_r+0x8c>
 800b348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34c:	1f0c      	subs	r4, r1, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bfb8      	it	lt
 800b352:	18e4      	addlt	r4, r4, r3
 800b354:	f000 f8e8 	bl	800b528 <__malloc_lock>
 800b358:	4a1d      	ldr	r2, [pc, #116]	@ (800b3d0 <_free_r+0x90>)
 800b35a:	6813      	ldr	r3, [r2, #0]
 800b35c:	b933      	cbnz	r3, 800b36c <_free_r+0x2c>
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	6014      	str	r4, [r2, #0]
 800b362:	4628      	mov	r0, r5
 800b364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b368:	f000 b8e4 	b.w	800b534 <__malloc_unlock>
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d908      	bls.n	800b382 <_free_r+0x42>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	1821      	adds	r1, r4, r0
 800b374:	428b      	cmp	r3, r1
 800b376:	bf01      	itttt	eq
 800b378:	6819      	ldreq	r1, [r3, #0]
 800b37a:	685b      	ldreq	r3, [r3, #4]
 800b37c:	1809      	addeq	r1, r1, r0
 800b37e:	6021      	streq	r1, [r4, #0]
 800b380:	e7ed      	b.n	800b35e <_free_r+0x1e>
 800b382:	461a      	mov	r2, r3
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	b10b      	cbz	r3, 800b38c <_free_r+0x4c>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d9fa      	bls.n	800b382 <_free_r+0x42>
 800b38c:	6811      	ldr	r1, [r2, #0]
 800b38e:	1850      	adds	r0, r2, r1
 800b390:	42a0      	cmp	r0, r4
 800b392:	d10b      	bne.n	800b3ac <_free_r+0x6c>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	4401      	add	r1, r0
 800b398:	1850      	adds	r0, r2, r1
 800b39a:	4283      	cmp	r3, r0
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	d1e0      	bne.n	800b362 <_free_r+0x22>
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	6053      	str	r3, [r2, #4]
 800b3a6:	4408      	add	r0, r1
 800b3a8:	6010      	str	r0, [r2, #0]
 800b3aa:	e7da      	b.n	800b362 <_free_r+0x22>
 800b3ac:	d902      	bls.n	800b3b4 <_free_r+0x74>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	e7d6      	b.n	800b362 <_free_r+0x22>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	1821      	adds	r1, r4, r0
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	bf04      	itt	eq
 800b3bc:	6819      	ldreq	r1, [r3, #0]
 800b3be:	685b      	ldreq	r3, [r3, #4]
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	bf04      	itt	eq
 800b3c4:	1809      	addeq	r1, r1, r0
 800b3c6:	6021      	streq	r1, [r4, #0]
 800b3c8:	6054      	str	r4, [r2, #4]
 800b3ca:	e7ca      	b.n	800b362 <_free_r+0x22>
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20002150 	.word	0x20002150

0800b3d4 <malloc>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	@ (800b3e0 <malloc+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f000 b825 	b.w	800b428 <_malloc_r>
 800b3de:	bf00      	nop
 800b3e0:	20000108 	.word	0x20000108

0800b3e4 <sbrk_aligned>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4e0f      	ldr	r6, [pc, #60]	@ (800b424 <sbrk_aligned+0x40>)
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6831      	ldr	r1, [r6, #0]
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	b911      	cbnz	r1, 800b3f6 <sbrk_aligned+0x12>
 800b3f0:	f000 fe46 	bl	800c080 <_sbrk_r>
 800b3f4:	6030      	str	r0, [r6, #0]
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 fe41 	bl	800c080 <_sbrk_r>
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	d103      	bne.n	800b40a <sbrk_aligned+0x26>
 800b402:	f04f 34ff 	mov.w	r4, #4294967295
 800b406:	4620      	mov	r0, r4
 800b408:	bd70      	pop	{r4, r5, r6, pc}
 800b40a:	1cc4      	adds	r4, r0, #3
 800b40c:	f024 0403 	bic.w	r4, r4, #3
 800b410:	42a0      	cmp	r0, r4
 800b412:	d0f8      	beq.n	800b406 <sbrk_aligned+0x22>
 800b414:	1a21      	subs	r1, r4, r0
 800b416:	4628      	mov	r0, r5
 800b418:	f000 fe32 	bl	800c080 <_sbrk_r>
 800b41c:	3001      	adds	r0, #1
 800b41e:	d1f2      	bne.n	800b406 <sbrk_aligned+0x22>
 800b420:	e7ef      	b.n	800b402 <sbrk_aligned+0x1e>
 800b422:	bf00      	nop
 800b424:	2000214c 	.word	0x2000214c

0800b428 <_malloc_r>:
 800b428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b42c:	1ccd      	adds	r5, r1, #3
 800b42e:	f025 0503 	bic.w	r5, r5, #3
 800b432:	3508      	adds	r5, #8
 800b434:	2d0c      	cmp	r5, #12
 800b436:	bf38      	it	cc
 800b438:	250c      	movcc	r5, #12
 800b43a:	2d00      	cmp	r5, #0
 800b43c:	4606      	mov	r6, r0
 800b43e:	db01      	blt.n	800b444 <_malloc_r+0x1c>
 800b440:	42a9      	cmp	r1, r5
 800b442:	d904      	bls.n	800b44e <_malloc_r+0x26>
 800b444:	230c      	movs	r3, #12
 800b446:	6033      	str	r3, [r6, #0]
 800b448:	2000      	movs	r0, #0
 800b44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b524 <_malloc_r+0xfc>
 800b452:	f000 f869 	bl	800b528 <__malloc_lock>
 800b456:	f8d8 3000 	ldr.w	r3, [r8]
 800b45a:	461c      	mov	r4, r3
 800b45c:	bb44      	cbnz	r4, 800b4b0 <_malloc_r+0x88>
 800b45e:	4629      	mov	r1, r5
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff ffbf 	bl	800b3e4 <sbrk_aligned>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	4604      	mov	r4, r0
 800b46a:	d158      	bne.n	800b51e <_malloc_r+0xf6>
 800b46c:	f8d8 4000 	ldr.w	r4, [r8]
 800b470:	4627      	mov	r7, r4
 800b472:	2f00      	cmp	r7, #0
 800b474:	d143      	bne.n	800b4fe <_malloc_r+0xd6>
 800b476:	2c00      	cmp	r4, #0
 800b478:	d04b      	beq.n	800b512 <_malloc_r+0xea>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	4639      	mov	r1, r7
 800b47e:	4630      	mov	r0, r6
 800b480:	eb04 0903 	add.w	r9, r4, r3
 800b484:	f000 fdfc 	bl	800c080 <_sbrk_r>
 800b488:	4581      	cmp	r9, r0
 800b48a:	d142      	bne.n	800b512 <_malloc_r+0xea>
 800b48c:	6821      	ldr	r1, [r4, #0]
 800b48e:	1a6d      	subs	r5, r5, r1
 800b490:	4629      	mov	r1, r5
 800b492:	4630      	mov	r0, r6
 800b494:	f7ff ffa6 	bl	800b3e4 <sbrk_aligned>
 800b498:	3001      	adds	r0, #1
 800b49a:	d03a      	beq.n	800b512 <_malloc_r+0xea>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	442b      	add	r3, r5
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	bb62      	cbnz	r2, 800b504 <_malloc_r+0xdc>
 800b4aa:	f8c8 7000 	str.w	r7, [r8]
 800b4ae:	e00f      	b.n	800b4d0 <_malloc_r+0xa8>
 800b4b0:	6822      	ldr	r2, [r4, #0]
 800b4b2:	1b52      	subs	r2, r2, r5
 800b4b4:	d420      	bmi.n	800b4f8 <_malloc_r+0xd0>
 800b4b6:	2a0b      	cmp	r2, #11
 800b4b8:	d917      	bls.n	800b4ea <_malloc_r+0xc2>
 800b4ba:	1961      	adds	r1, r4, r5
 800b4bc:	42a3      	cmp	r3, r4
 800b4be:	6025      	str	r5, [r4, #0]
 800b4c0:	bf18      	it	ne
 800b4c2:	6059      	strne	r1, [r3, #4]
 800b4c4:	6863      	ldr	r3, [r4, #4]
 800b4c6:	bf08      	it	eq
 800b4c8:	f8c8 1000 	streq.w	r1, [r8]
 800b4cc:	5162      	str	r2, [r4, r5]
 800b4ce:	604b      	str	r3, [r1, #4]
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f000 f82f 	bl	800b534 <__malloc_unlock>
 800b4d6:	f104 000b 	add.w	r0, r4, #11
 800b4da:	1d23      	adds	r3, r4, #4
 800b4dc:	f020 0007 	bic.w	r0, r0, #7
 800b4e0:	1ac2      	subs	r2, r0, r3
 800b4e2:	bf1c      	itt	ne
 800b4e4:	1a1b      	subne	r3, r3, r0
 800b4e6:	50a3      	strne	r3, [r4, r2]
 800b4e8:	e7af      	b.n	800b44a <_malloc_r+0x22>
 800b4ea:	6862      	ldr	r2, [r4, #4]
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	bf0c      	ite	eq
 800b4f0:	f8c8 2000 	streq.w	r2, [r8]
 800b4f4:	605a      	strne	r2, [r3, #4]
 800b4f6:	e7eb      	b.n	800b4d0 <_malloc_r+0xa8>
 800b4f8:	4623      	mov	r3, r4
 800b4fa:	6864      	ldr	r4, [r4, #4]
 800b4fc:	e7ae      	b.n	800b45c <_malloc_r+0x34>
 800b4fe:	463c      	mov	r4, r7
 800b500:	687f      	ldr	r7, [r7, #4]
 800b502:	e7b6      	b.n	800b472 <_malloc_r+0x4a>
 800b504:	461a      	mov	r2, r3
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d1fb      	bne.n	800b504 <_malloc_r+0xdc>
 800b50c:	2300      	movs	r3, #0
 800b50e:	6053      	str	r3, [r2, #4]
 800b510:	e7de      	b.n	800b4d0 <_malloc_r+0xa8>
 800b512:	230c      	movs	r3, #12
 800b514:	6033      	str	r3, [r6, #0]
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f80c 	bl	800b534 <__malloc_unlock>
 800b51c:	e794      	b.n	800b448 <_malloc_r+0x20>
 800b51e:	6005      	str	r5, [r0, #0]
 800b520:	e7d6      	b.n	800b4d0 <_malloc_r+0xa8>
 800b522:	bf00      	nop
 800b524:	20002150 	.word	0x20002150

0800b528 <__malloc_lock>:
 800b528:	4801      	ldr	r0, [pc, #4]	@ (800b530 <__malloc_lock+0x8>)
 800b52a:	f7ff b8b8 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800b52e:	bf00      	nop
 800b530:	20002148 	.word	0x20002148

0800b534 <__malloc_unlock>:
 800b534:	4801      	ldr	r0, [pc, #4]	@ (800b53c <__malloc_unlock+0x8>)
 800b536:	f7ff b8b3 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800b53a:	bf00      	nop
 800b53c:	20002148 	.word	0x20002148

0800b540 <_Balloc>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	69c6      	ldr	r6, [r0, #28]
 800b544:	4604      	mov	r4, r0
 800b546:	460d      	mov	r5, r1
 800b548:	b976      	cbnz	r6, 800b568 <_Balloc+0x28>
 800b54a:	2010      	movs	r0, #16
 800b54c:	f7ff ff42 	bl	800b3d4 <malloc>
 800b550:	4602      	mov	r2, r0
 800b552:	61e0      	str	r0, [r4, #28]
 800b554:	b920      	cbnz	r0, 800b560 <_Balloc+0x20>
 800b556:	4b18      	ldr	r3, [pc, #96]	@ (800b5b8 <_Balloc+0x78>)
 800b558:	4818      	ldr	r0, [pc, #96]	@ (800b5bc <_Balloc+0x7c>)
 800b55a:	216b      	movs	r1, #107	@ 0x6b
 800b55c:	f000 fdae 	bl	800c0bc <__assert_func>
 800b560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b564:	6006      	str	r6, [r0, #0]
 800b566:	60c6      	str	r6, [r0, #12]
 800b568:	69e6      	ldr	r6, [r4, #28]
 800b56a:	68f3      	ldr	r3, [r6, #12]
 800b56c:	b183      	cbz	r3, 800b590 <_Balloc+0x50>
 800b56e:	69e3      	ldr	r3, [r4, #28]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b576:	b9b8      	cbnz	r0, 800b5a8 <_Balloc+0x68>
 800b578:	2101      	movs	r1, #1
 800b57a:	fa01 f605 	lsl.w	r6, r1, r5
 800b57e:	1d72      	adds	r2, r6, #5
 800b580:	0092      	lsls	r2, r2, #2
 800b582:	4620      	mov	r0, r4
 800b584:	f000 fdb8 	bl	800c0f8 <_calloc_r>
 800b588:	b160      	cbz	r0, 800b5a4 <_Balloc+0x64>
 800b58a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b58e:	e00e      	b.n	800b5ae <_Balloc+0x6e>
 800b590:	2221      	movs	r2, #33	@ 0x21
 800b592:	2104      	movs	r1, #4
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fdaf 	bl	800c0f8 <_calloc_r>
 800b59a:	69e3      	ldr	r3, [r4, #28]
 800b59c:	60f0      	str	r0, [r6, #12]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1e4      	bne.n	800b56e <_Balloc+0x2e>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	6802      	ldr	r2, [r0, #0]
 800b5aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5b4:	e7f7      	b.n	800b5a6 <_Balloc+0x66>
 800b5b6:	bf00      	nop
 800b5b8:	0800c815 	.word	0x0800c815
 800b5bc:	0800c895 	.word	0x0800c895

0800b5c0 <_Bfree>:
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	69c6      	ldr	r6, [r0, #28]
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	b976      	cbnz	r6, 800b5e8 <_Bfree+0x28>
 800b5ca:	2010      	movs	r0, #16
 800b5cc:	f7ff ff02 	bl	800b3d4 <malloc>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	61e8      	str	r0, [r5, #28]
 800b5d4:	b920      	cbnz	r0, 800b5e0 <_Bfree+0x20>
 800b5d6:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <_Bfree+0x3c>)
 800b5d8:	4809      	ldr	r0, [pc, #36]	@ (800b600 <_Bfree+0x40>)
 800b5da:	218f      	movs	r1, #143	@ 0x8f
 800b5dc:	f000 fd6e 	bl	800c0bc <__assert_func>
 800b5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5e4:	6006      	str	r6, [r0, #0]
 800b5e6:	60c6      	str	r6, [r0, #12]
 800b5e8:	b13c      	cbz	r4, 800b5fa <_Bfree+0x3a>
 800b5ea:	69eb      	ldr	r3, [r5, #28]
 800b5ec:	6862      	ldr	r2, [r4, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5f4:	6021      	str	r1, [r4, #0]
 800b5f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	0800c815 	.word	0x0800c815
 800b600:	0800c895 	.word	0x0800c895

0800b604 <__multadd>:
 800b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b608:	690d      	ldr	r5, [r1, #16]
 800b60a:	4607      	mov	r7, r0
 800b60c:	460c      	mov	r4, r1
 800b60e:	461e      	mov	r6, r3
 800b610:	f101 0c14 	add.w	ip, r1, #20
 800b614:	2000      	movs	r0, #0
 800b616:	f8dc 3000 	ldr.w	r3, [ip]
 800b61a:	b299      	uxth	r1, r3
 800b61c:	fb02 6101 	mla	r1, r2, r1, r6
 800b620:	0c1e      	lsrs	r6, r3, #16
 800b622:	0c0b      	lsrs	r3, r1, #16
 800b624:	fb02 3306 	mla	r3, r2, r6, r3
 800b628:	b289      	uxth	r1, r1
 800b62a:	3001      	adds	r0, #1
 800b62c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b630:	4285      	cmp	r5, r0
 800b632:	f84c 1b04 	str.w	r1, [ip], #4
 800b636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b63a:	dcec      	bgt.n	800b616 <__multadd+0x12>
 800b63c:	b30e      	cbz	r6, 800b682 <__multadd+0x7e>
 800b63e:	68a3      	ldr	r3, [r4, #8]
 800b640:	42ab      	cmp	r3, r5
 800b642:	dc19      	bgt.n	800b678 <__multadd+0x74>
 800b644:	6861      	ldr	r1, [r4, #4]
 800b646:	4638      	mov	r0, r7
 800b648:	3101      	adds	r1, #1
 800b64a:	f7ff ff79 	bl	800b540 <_Balloc>
 800b64e:	4680      	mov	r8, r0
 800b650:	b928      	cbnz	r0, 800b65e <__multadd+0x5a>
 800b652:	4602      	mov	r2, r0
 800b654:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <__multadd+0x84>)
 800b656:	480d      	ldr	r0, [pc, #52]	@ (800b68c <__multadd+0x88>)
 800b658:	21ba      	movs	r1, #186	@ 0xba
 800b65a:	f000 fd2f 	bl	800c0bc <__assert_func>
 800b65e:	6922      	ldr	r2, [r4, #16]
 800b660:	3202      	adds	r2, #2
 800b662:	f104 010c 	add.w	r1, r4, #12
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	300c      	adds	r0, #12
 800b66a:	f000 fd19 	bl	800c0a0 <memcpy>
 800b66e:	4621      	mov	r1, r4
 800b670:	4638      	mov	r0, r7
 800b672:	f7ff ffa5 	bl	800b5c0 <_Bfree>
 800b676:	4644      	mov	r4, r8
 800b678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b67c:	3501      	adds	r5, #1
 800b67e:	615e      	str	r6, [r3, #20]
 800b680:	6125      	str	r5, [r4, #16]
 800b682:	4620      	mov	r0, r4
 800b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b688:	0800c884 	.word	0x0800c884
 800b68c:	0800c895 	.word	0x0800c895

0800b690 <__hi0bits>:
 800b690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b694:	4603      	mov	r3, r0
 800b696:	bf36      	itet	cc
 800b698:	0403      	lslcc	r3, r0, #16
 800b69a:	2000      	movcs	r0, #0
 800b69c:	2010      	movcc	r0, #16
 800b69e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6a2:	bf3c      	itt	cc
 800b6a4:	021b      	lslcc	r3, r3, #8
 800b6a6:	3008      	addcc	r0, #8
 800b6a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6ac:	bf3c      	itt	cc
 800b6ae:	011b      	lslcc	r3, r3, #4
 800b6b0:	3004      	addcc	r0, #4
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6b6:	bf3c      	itt	cc
 800b6b8:	009b      	lslcc	r3, r3, #2
 800b6ba:	3002      	addcc	r0, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	db05      	blt.n	800b6cc <__hi0bits+0x3c>
 800b6c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6c4:	f100 0001 	add.w	r0, r0, #1
 800b6c8:	bf08      	it	eq
 800b6ca:	2020      	moveq	r0, #32
 800b6cc:	4770      	bx	lr

0800b6ce <__lo0bits>:
 800b6ce:	6803      	ldr	r3, [r0, #0]
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f013 0007 	ands.w	r0, r3, #7
 800b6d6:	d00b      	beq.n	800b6f0 <__lo0bits+0x22>
 800b6d8:	07d9      	lsls	r1, r3, #31
 800b6da:	d421      	bmi.n	800b720 <__lo0bits+0x52>
 800b6dc:	0798      	lsls	r0, r3, #30
 800b6de:	bf49      	itett	mi
 800b6e0:	085b      	lsrmi	r3, r3, #1
 800b6e2:	089b      	lsrpl	r3, r3, #2
 800b6e4:	2001      	movmi	r0, #1
 800b6e6:	6013      	strmi	r3, [r2, #0]
 800b6e8:	bf5c      	itt	pl
 800b6ea:	6013      	strpl	r3, [r2, #0]
 800b6ec:	2002      	movpl	r0, #2
 800b6ee:	4770      	bx	lr
 800b6f0:	b299      	uxth	r1, r3
 800b6f2:	b909      	cbnz	r1, 800b6f8 <__lo0bits+0x2a>
 800b6f4:	0c1b      	lsrs	r3, r3, #16
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	b2d9      	uxtb	r1, r3
 800b6fa:	b909      	cbnz	r1, 800b700 <__lo0bits+0x32>
 800b6fc:	3008      	adds	r0, #8
 800b6fe:	0a1b      	lsrs	r3, r3, #8
 800b700:	0719      	lsls	r1, r3, #28
 800b702:	bf04      	itt	eq
 800b704:	091b      	lsreq	r3, r3, #4
 800b706:	3004      	addeq	r0, #4
 800b708:	0799      	lsls	r1, r3, #30
 800b70a:	bf04      	itt	eq
 800b70c:	089b      	lsreq	r3, r3, #2
 800b70e:	3002      	addeq	r0, #2
 800b710:	07d9      	lsls	r1, r3, #31
 800b712:	d403      	bmi.n	800b71c <__lo0bits+0x4e>
 800b714:	085b      	lsrs	r3, r3, #1
 800b716:	f100 0001 	add.w	r0, r0, #1
 800b71a:	d003      	beq.n	800b724 <__lo0bits+0x56>
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	4770      	bx	lr
 800b720:	2000      	movs	r0, #0
 800b722:	4770      	bx	lr
 800b724:	2020      	movs	r0, #32
 800b726:	4770      	bx	lr

0800b728 <__i2b>:
 800b728:	b510      	push	{r4, lr}
 800b72a:	460c      	mov	r4, r1
 800b72c:	2101      	movs	r1, #1
 800b72e:	f7ff ff07 	bl	800b540 <_Balloc>
 800b732:	4602      	mov	r2, r0
 800b734:	b928      	cbnz	r0, 800b742 <__i2b+0x1a>
 800b736:	4b05      	ldr	r3, [pc, #20]	@ (800b74c <__i2b+0x24>)
 800b738:	4805      	ldr	r0, [pc, #20]	@ (800b750 <__i2b+0x28>)
 800b73a:	f240 1145 	movw	r1, #325	@ 0x145
 800b73e:	f000 fcbd 	bl	800c0bc <__assert_func>
 800b742:	2301      	movs	r3, #1
 800b744:	6144      	str	r4, [r0, #20]
 800b746:	6103      	str	r3, [r0, #16]
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	bf00      	nop
 800b74c:	0800c884 	.word	0x0800c884
 800b750:	0800c895 	.word	0x0800c895

0800b754 <__multiply>:
 800b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	4614      	mov	r4, r2
 800b75a:	690a      	ldr	r2, [r1, #16]
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	429a      	cmp	r2, r3
 800b760:	bfa8      	it	ge
 800b762:	4623      	movge	r3, r4
 800b764:	460f      	mov	r7, r1
 800b766:	bfa4      	itt	ge
 800b768:	460c      	movge	r4, r1
 800b76a:	461f      	movge	r7, r3
 800b76c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b770:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b774:	68a3      	ldr	r3, [r4, #8]
 800b776:	6861      	ldr	r1, [r4, #4]
 800b778:	eb0a 0609 	add.w	r6, sl, r9
 800b77c:	42b3      	cmp	r3, r6
 800b77e:	b085      	sub	sp, #20
 800b780:	bfb8      	it	lt
 800b782:	3101      	addlt	r1, #1
 800b784:	f7ff fedc 	bl	800b540 <_Balloc>
 800b788:	b930      	cbnz	r0, 800b798 <__multiply+0x44>
 800b78a:	4602      	mov	r2, r0
 800b78c:	4b44      	ldr	r3, [pc, #272]	@ (800b8a0 <__multiply+0x14c>)
 800b78e:	4845      	ldr	r0, [pc, #276]	@ (800b8a4 <__multiply+0x150>)
 800b790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b794:	f000 fc92 	bl	800c0bc <__assert_func>
 800b798:	f100 0514 	add.w	r5, r0, #20
 800b79c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	4543      	cmp	r3, r8
 800b7a6:	d321      	bcc.n	800b7ec <__multiply+0x98>
 800b7a8:	f107 0114 	add.w	r1, r7, #20
 800b7ac:	f104 0214 	add.w	r2, r4, #20
 800b7b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7b8:	9302      	str	r3, [sp, #8]
 800b7ba:	1b13      	subs	r3, r2, r4
 800b7bc:	3b15      	subs	r3, #21
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	f104 0715 	add.w	r7, r4, #21
 800b7c8:	42ba      	cmp	r2, r7
 800b7ca:	bf38      	it	cc
 800b7cc:	2304      	movcc	r3, #4
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	9103      	str	r1, [sp, #12]
 800b7d4:	428b      	cmp	r3, r1
 800b7d6:	d80c      	bhi.n	800b7f2 <__multiply+0x9e>
 800b7d8:	2e00      	cmp	r6, #0
 800b7da:	dd03      	ble.n	800b7e4 <__multiply+0x90>
 800b7dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d05b      	beq.n	800b89c <__multiply+0x148>
 800b7e4:	6106      	str	r6, [r0, #16]
 800b7e6:	b005      	add	sp, #20
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	f843 2b04 	str.w	r2, [r3], #4
 800b7f0:	e7d8      	b.n	800b7a4 <__multiply+0x50>
 800b7f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7f6:	f1ba 0f00 	cmp.w	sl, #0
 800b7fa:	d024      	beq.n	800b846 <__multiply+0xf2>
 800b7fc:	f104 0e14 	add.w	lr, r4, #20
 800b800:	46a9      	mov	r9, r5
 800b802:	f04f 0c00 	mov.w	ip, #0
 800b806:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b80a:	f8d9 3000 	ldr.w	r3, [r9]
 800b80e:	fa1f fb87 	uxth.w	fp, r7
 800b812:	b29b      	uxth	r3, r3
 800b814:	fb0a 330b 	mla	r3, sl, fp, r3
 800b818:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b81c:	f8d9 7000 	ldr.w	r7, [r9]
 800b820:	4463      	add	r3, ip
 800b822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b826:	fb0a c70b 	mla	r7, sl, fp, ip
 800b82a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b82e:	b29b      	uxth	r3, r3
 800b830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b834:	4572      	cmp	r2, lr
 800b836:	f849 3b04 	str.w	r3, [r9], #4
 800b83a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b83e:	d8e2      	bhi.n	800b806 <__multiply+0xb2>
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	f845 c003 	str.w	ip, [r5, r3]
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b84c:	3104      	adds	r1, #4
 800b84e:	f1b9 0f00 	cmp.w	r9, #0
 800b852:	d021      	beq.n	800b898 <__multiply+0x144>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	f104 0c14 	add.w	ip, r4, #20
 800b85a:	46ae      	mov	lr, r5
 800b85c:	f04f 0a00 	mov.w	sl, #0
 800b860:	f8bc b000 	ldrh.w	fp, [ip]
 800b864:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b868:	fb09 770b 	mla	r7, r9, fp, r7
 800b86c:	4457      	add	r7, sl
 800b86e:	b29b      	uxth	r3, r3
 800b870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b874:	f84e 3b04 	str.w	r3, [lr], #4
 800b878:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b87c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b880:	f8be 3000 	ldrh.w	r3, [lr]
 800b884:	fb09 330a 	mla	r3, r9, sl, r3
 800b888:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b88c:	4562      	cmp	r2, ip
 800b88e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b892:	d8e5      	bhi.n	800b860 <__multiply+0x10c>
 800b894:	9f01      	ldr	r7, [sp, #4]
 800b896:	51eb      	str	r3, [r5, r7]
 800b898:	3504      	adds	r5, #4
 800b89a:	e799      	b.n	800b7d0 <__multiply+0x7c>
 800b89c:	3e01      	subs	r6, #1
 800b89e:	e79b      	b.n	800b7d8 <__multiply+0x84>
 800b8a0:	0800c884 	.word	0x0800c884
 800b8a4:	0800c895 	.word	0x0800c895

0800b8a8 <__pow5mult>:
 800b8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	4615      	mov	r5, r2
 800b8ae:	f012 0203 	ands.w	r2, r2, #3
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	460e      	mov	r6, r1
 800b8b6:	d007      	beq.n	800b8c8 <__pow5mult+0x20>
 800b8b8:	4c25      	ldr	r4, [pc, #148]	@ (800b950 <__pow5mult+0xa8>)
 800b8ba:	3a01      	subs	r2, #1
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8c2:	f7ff fe9f 	bl	800b604 <__multadd>
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	10ad      	asrs	r5, r5, #2
 800b8ca:	d03d      	beq.n	800b948 <__pow5mult+0xa0>
 800b8cc:	69fc      	ldr	r4, [r7, #28]
 800b8ce:	b97c      	cbnz	r4, 800b8f0 <__pow5mult+0x48>
 800b8d0:	2010      	movs	r0, #16
 800b8d2:	f7ff fd7f 	bl	800b3d4 <malloc>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	61f8      	str	r0, [r7, #28]
 800b8da:	b928      	cbnz	r0, 800b8e8 <__pow5mult+0x40>
 800b8dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b954 <__pow5mult+0xac>)
 800b8de:	481e      	ldr	r0, [pc, #120]	@ (800b958 <__pow5mult+0xb0>)
 800b8e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b8e4:	f000 fbea 	bl	800c0bc <__assert_func>
 800b8e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8ec:	6004      	str	r4, [r0, #0]
 800b8ee:	60c4      	str	r4, [r0, #12]
 800b8f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8f8:	b94c      	cbnz	r4, 800b90e <__pow5mult+0x66>
 800b8fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b8fe:	4638      	mov	r0, r7
 800b900:	f7ff ff12 	bl	800b728 <__i2b>
 800b904:	2300      	movs	r3, #0
 800b906:	f8c8 0008 	str.w	r0, [r8, #8]
 800b90a:	4604      	mov	r4, r0
 800b90c:	6003      	str	r3, [r0, #0]
 800b90e:	f04f 0900 	mov.w	r9, #0
 800b912:	07eb      	lsls	r3, r5, #31
 800b914:	d50a      	bpl.n	800b92c <__pow5mult+0x84>
 800b916:	4631      	mov	r1, r6
 800b918:	4622      	mov	r2, r4
 800b91a:	4638      	mov	r0, r7
 800b91c:	f7ff ff1a 	bl	800b754 <__multiply>
 800b920:	4631      	mov	r1, r6
 800b922:	4680      	mov	r8, r0
 800b924:	4638      	mov	r0, r7
 800b926:	f7ff fe4b 	bl	800b5c0 <_Bfree>
 800b92a:	4646      	mov	r6, r8
 800b92c:	106d      	asrs	r5, r5, #1
 800b92e:	d00b      	beq.n	800b948 <__pow5mult+0xa0>
 800b930:	6820      	ldr	r0, [r4, #0]
 800b932:	b938      	cbnz	r0, 800b944 <__pow5mult+0x9c>
 800b934:	4622      	mov	r2, r4
 800b936:	4621      	mov	r1, r4
 800b938:	4638      	mov	r0, r7
 800b93a:	f7ff ff0b 	bl	800b754 <__multiply>
 800b93e:	6020      	str	r0, [r4, #0]
 800b940:	f8c0 9000 	str.w	r9, [r0]
 800b944:	4604      	mov	r4, r0
 800b946:	e7e4      	b.n	800b912 <__pow5mult+0x6a>
 800b948:	4630      	mov	r0, r6
 800b94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b94e:	bf00      	nop
 800b950:	0800c8f0 	.word	0x0800c8f0
 800b954:	0800c815 	.word	0x0800c815
 800b958:	0800c895 	.word	0x0800c895

0800b95c <__lshift>:
 800b95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b960:	460c      	mov	r4, r1
 800b962:	6849      	ldr	r1, [r1, #4]
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	4607      	mov	r7, r0
 800b96e:	4691      	mov	r9, r2
 800b970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b974:	f108 0601 	add.w	r6, r8, #1
 800b978:	42b3      	cmp	r3, r6
 800b97a:	db0b      	blt.n	800b994 <__lshift+0x38>
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff fddf 	bl	800b540 <_Balloc>
 800b982:	4605      	mov	r5, r0
 800b984:	b948      	cbnz	r0, 800b99a <__lshift+0x3e>
 800b986:	4602      	mov	r2, r0
 800b988:	4b28      	ldr	r3, [pc, #160]	@ (800ba2c <__lshift+0xd0>)
 800b98a:	4829      	ldr	r0, [pc, #164]	@ (800ba30 <__lshift+0xd4>)
 800b98c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b990:	f000 fb94 	bl	800c0bc <__assert_func>
 800b994:	3101      	adds	r1, #1
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	e7ee      	b.n	800b978 <__lshift+0x1c>
 800b99a:	2300      	movs	r3, #0
 800b99c:	f100 0114 	add.w	r1, r0, #20
 800b9a0:	f100 0210 	add.w	r2, r0, #16
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	4553      	cmp	r3, sl
 800b9a8:	db33      	blt.n	800ba12 <__lshift+0xb6>
 800b9aa:	6920      	ldr	r0, [r4, #16]
 800b9ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9b0:	f104 0314 	add.w	r3, r4, #20
 800b9b4:	f019 091f 	ands.w	r9, r9, #31
 800b9b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9c0:	d02b      	beq.n	800ba1a <__lshift+0xbe>
 800b9c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9c6:	468a      	mov	sl, r1
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b9d0:	4310      	orrs	r0, r2
 800b9d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9da:	459c      	cmp	ip, r3
 800b9dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9e0:	d8f3      	bhi.n	800b9ca <__lshift+0x6e>
 800b9e2:	ebac 0304 	sub.w	r3, ip, r4
 800b9e6:	3b15      	subs	r3, #21
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	f104 0015 	add.w	r0, r4, #21
 800b9f2:	4584      	cmp	ip, r0
 800b9f4:	bf38      	it	cc
 800b9f6:	2304      	movcc	r3, #4
 800b9f8:	50ca      	str	r2, [r1, r3]
 800b9fa:	b10a      	cbz	r2, 800ba00 <__lshift+0xa4>
 800b9fc:	f108 0602 	add.w	r6, r8, #2
 800ba00:	3e01      	subs	r6, #1
 800ba02:	4638      	mov	r0, r7
 800ba04:	612e      	str	r6, [r5, #16]
 800ba06:	4621      	mov	r1, r4
 800ba08:	f7ff fdda 	bl	800b5c0 <_Bfree>
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba12:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba16:	3301      	adds	r3, #1
 800ba18:	e7c5      	b.n	800b9a6 <__lshift+0x4a>
 800ba1a:	3904      	subs	r1, #4
 800ba1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba20:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba24:	459c      	cmp	ip, r3
 800ba26:	d8f9      	bhi.n	800ba1c <__lshift+0xc0>
 800ba28:	e7ea      	b.n	800ba00 <__lshift+0xa4>
 800ba2a:	bf00      	nop
 800ba2c:	0800c884 	.word	0x0800c884
 800ba30:	0800c895 	.word	0x0800c895

0800ba34 <__mcmp>:
 800ba34:	690a      	ldr	r2, [r1, #16]
 800ba36:	4603      	mov	r3, r0
 800ba38:	6900      	ldr	r0, [r0, #16]
 800ba3a:	1a80      	subs	r0, r0, r2
 800ba3c:	b530      	push	{r4, r5, lr}
 800ba3e:	d10e      	bne.n	800ba5e <__mcmp+0x2a>
 800ba40:	3314      	adds	r3, #20
 800ba42:	3114      	adds	r1, #20
 800ba44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba54:	4295      	cmp	r5, r2
 800ba56:	d003      	beq.n	800ba60 <__mcmp+0x2c>
 800ba58:	d205      	bcs.n	800ba66 <__mcmp+0x32>
 800ba5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5e:	bd30      	pop	{r4, r5, pc}
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	d3f3      	bcc.n	800ba4c <__mcmp+0x18>
 800ba64:	e7fb      	b.n	800ba5e <__mcmp+0x2a>
 800ba66:	2001      	movs	r0, #1
 800ba68:	e7f9      	b.n	800ba5e <__mcmp+0x2a>
	...

0800ba6c <__mdiff>:
 800ba6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	4689      	mov	r9, r1
 800ba72:	4606      	mov	r6, r0
 800ba74:	4611      	mov	r1, r2
 800ba76:	4648      	mov	r0, r9
 800ba78:	4614      	mov	r4, r2
 800ba7a:	f7ff ffdb 	bl	800ba34 <__mcmp>
 800ba7e:	1e05      	subs	r5, r0, #0
 800ba80:	d112      	bne.n	800baa8 <__mdiff+0x3c>
 800ba82:	4629      	mov	r1, r5
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff fd5b 	bl	800b540 <_Balloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <__mdiff+0x2e>
 800ba8e:	4b3f      	ldr	r3, [pc, #252]	@ (800bb8c <__mdiff+0x120>)
 800ba90:	f240 2137 	movw	r1, #567	@ 0x237
 800ba94:	483e      	ldr	r0, [pc, #248]	@ (800bb90 <__mdiff+0x124>)
 800ba96:	f000 fb11 	bl	800c0bc <__assert_func>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800baa0:	4610      	mov	r0, r2
 800baa2:	b003      	add	sp, #12
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	bfbc      	itt	lt
 800baaa:	464b      	movlt	r3, r9
 800baac:	46a1      	movlt	r9, r4
 800baae:	4630      	mov	r0, r6
 800bab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bab4:	bfba      	itte	lt
 800bab6:	461c      	movlt	r4, r3
 800bab8:	2501      	movlt	r5, #1
 800baba:	2500      	movge	r5, #0
 800babc:	f7ff fd40 	bl	800b540 <_Balloc>
 800bac0:	4602      	mov	r2, r0
 800bac2:	b918      	cbnz	r0, 800bacc <__mdiff+0x60>
 800bac4:	4b31      	ldr	r3, [pc, #196]	@ (800bb8c <__mdiff+0x120>)
 800bac6:	f240 2145 	movw	r1, #581	@ 0x245
 800baca:	e7e3      	b.n	800ba94 <__mdiff+0x28>
 800bacc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bad0:	6926      	ldr	r6, [r4, #16]
 800bad2:	60c5      	str	r5, [r0, #12]
 800bad4:	f109 0310 	add.w	r3, r9, #16
 800bad8:	f109 0514 	add.w	r5, r9, #20
 800badc:	f104 0e14 	add.w	lr, r4, #20
 800bae0:	f100 0b14 	add.w	fp, r0, #20
 800bae4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bae8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	46d9      	mov	r9, fp
 800baf0:	f04f 0c00 	mov.w	ip, #0
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bafa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	fa1f f38a 	uxth.w	r3, sl
 800bb04:	4619      	mov	r1, r3
 800bb06:	b283      	uxth	r3, r0
 800bb08:	1acb      	subs	r3, r1, r3
 800bb0a:	0c00      	lsrs	r0, r0, #16
 800bb0c:	4463      	add	r3, ip
 800bb0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb1c:	4576      	cmp	r6, lr
 800bb1e:	f849 3b04 	str.w	r3, [r9], #4
 800bb22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb26:	d8e5      	bhi.n	800baf4 <__mdiff+0x88>
 800bb28:	1b33      	subs	r3, r6, r4
 800bb2a:	3b15      	subs	r3, #21
 800bb2c:	f023 0303 	bic.w	r3, r3, #3
 800bb30:	3415      	adds	r4, #21
 800bb32:	3304      	adds	r3, #4
 800bb34:	42a6      	cmp	r6, r4
 800bb36:	bf38      	it	cc
 800bb38:	2304      	movcc	r3, #4
 800bb3a:	441d      	add	r5, r3
 800bb3c:	445b      	add	r3, fp
 800bb3e:	461e      	mov	r6, r3
 800bb40:	462c      	mov	r4, r5
 800bb42:	4544      	cmp	r4, r8
 800bb44:	d30e      	bcc.n	800bb64 <__mdiff+0xf8>
 800bb46:	f108 0103 	add.w	r1, r8, #3
 800bb4a:	1b49      	subs	r1, r1, r5
 800bb4c:	f021 0103 	bic.w	r1, r1, #3
 800bb50:	3d03      	subs	r5, #3
 800bb52:	45a8      	cmp	r8, r5
 800bb54:	bf38      	it	cc
 800bb56:	2100      	movcc	r1, #0
 800bb58:	440b      	add	r3, r1
 800bb5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb5e:	b191      	cbz	r1, 800bb86 <__mdiff+0x11a>
 800bb60:	6117      	str	r7, [r2, #16]
 800bb62:	e79d      	b.n	800baa0 <__mdiff+0x34>
 800bb64:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb68:	46e6      	mov	lr, ip
 800bb6a:	0c08      	lsrs	r0, r1, #16
 800bb6c:	fa1c fc81 	uxtah	ip, ip, r1
 800bb70:	4471      	add	r1, lr
 800bb72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb76:	b289      	uxth	r1, r1
 800bb78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb7c:	f846 1b04 	str.w	r1, [r6], #4
 800bb80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb84:	e7dd      	b.n	800bb42 <__mdiff+0xd6>
 800bb86:	3f01      	subs	r7, #1
 800bb88:	e7e7      	b.n	800bb5a <__mdiff+0xee>
 800bb8a:	bf00      	nop
 800bb8c:	0800c884 	.word	0x0800c884
 800bb90:	0800c895 	.word	0x0800c895

0800bb94 <__d2b>:
 800bb94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb98:	460f      	mov	r7, r1
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	ec59 8b10 	vmov	r8, r9, d0
 800bba0:	4616      	mov	r6, r2
 800bba2:	f7ff fccd 	bl	800b540 <_Balloc>
 800bba6:	4604      	mov	r4, r0
 800bba8:	b930      	cbnz	r0, 800bbb8 <__d2b+0x24>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	4b23      	ldr	r3, [pc, #140]	@ (800bc3c <__d2b+0xa8>)
 800bbae:	4824      	ldr	r0, [pc, #144]	@ (800bc40 <__d2b+0xac>)
 800bbb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bbb4:	f000 fa82 	bl	800c0bc <__assert_func>
 800bbb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbc0:	b10d      	cbz	r5, 800bbc6 <__d2b+0x32>
 800bbc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	f1b8 0300 	subs.w	r3, r8, #0
 800bbcc:	d023      	beq.n	800bc16 <__d2b+0x82>
 800bbce:	4668      	mov	r0, sp
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	f7ff fd7c 	bl	800b6ce <__lo0bits>
 800bbd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbda:	b1d0      	cbz	r0, 800bc12 <__d2b+0x7e>
 800bbdc:	f1c0 0320 	rsb	r3, r0, #32
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	40c2      	lsrs	r2, r0
 800bbe8:	6163      	str	r3, [r4, #20]
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	61a3      	str	r3, [r4, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bf0c      	ite	eq
 800bbf4:	2201      	moveq	r2, #1
 800bbf6:	2202      	movne	r2, #2
 800bbf8:	6122      	str	r2, [r4, #16]
 800bbfa:	b1a5      	cbz	r5, 800bc26 <__d2b+0x92>
 800bbfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc00:	4405      	add	r5, r0
 800bc02:	603d      	str	r5, [r7, #0]
 800bc04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc08:	6030      	str	r0, [r6, #0]
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	b003      	add	sp, #12
 800bc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc12:	6161      	str	r1, [r4, #20]
 800bc14:	e7ea      	b.n	800bbec <__d2b+0x58>
 800bc16:	a801      	add	r0, sp, #4
 800bc18:	f7ff fd59 	bl	800b6ce <__lo0bits>
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	6163      	str	r3, [r4, #20]
 800bc20:	3020      	adds	r0, #32
 800bc22:	2201      	movs	r2, #1
 800bc24:	e7e8      	b.n	800bbf8 <__d2b+0x64>
 800bc26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc2e:	6038      	str	r0, [r7, #0]
 800bc30:	6918      	ldr	r0, [r3, #16]
 800bc32:	f7ff fd2d 	bl	800b690 <__hi0bits>
 800bc36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc3a:	e7e5      	b.n	800bc08 <__d2b+0x74>
 800bc3c:	0800c884 	.word	0x0800c884
 800bc40:	0800c895 	.word	0x0800c895

0800bc44 <__ssputs_r>:
 800bc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc48:	688e      	ldr	r6, [r1, #8]
 800bc4a:	461f      	mov	r7, r3
 800bc4c:	42be      	cmp	r6, r7
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	4682      	mov	sl, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	4690      	mov	r8, r2
 800bc56:	d82d      	bhi.n	800bcb4 <__ssputs_r+0x70>
 800bc58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc60:	d026      	beq.n	800bcb0 <__ssputs_r+0x6c>
 800bc62:	6965      	ldr	r5, [r4, #20]
 800bc64:	6909      	ldr	r1, [r1, #16]
 800bc66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc6a:	eba3 0901 	sub.w	r9, r3, r1
 800bc6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc72:	1c7b      	adds	r3, r7, #1
 800bc74:	444b      	add	r3, r9
 800bc76:	106d      	asrs	r5, r5, #1
 800bc78:	429d      	cmp	r5, r3
 800bc7a:	bf38      	it	cc
 800bc7c:	461d      	movcc	r5, r3
 800bc7e:	0553      	lsls	r3, r2, #21
 800bc80:	d527      	bpl.n	800bcd2 <__ssputs_r+0x8e>
 800bc82:	4629      	mov	r1, r5
 800bc84:	f7ff fbd0 	bl	800b428 <_malloc_r>
 800bc88:	4606      	mov	r6, r0
 800bc8a:	b360      	cbz	r0, 800bce6 <__ssputs_r+0xa2>
 800bc8c:	6921      	ldr	r1, [r4, #16]
 800bc8e:	464a      	mov	r2, r9
 800bc90:	f000 fa06 	bl	800c0a0 <memcpy>
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc9e:	81a3      	strh	r3, [r4, #12]
 800bca0:	6126      	str	r6, [r4, #16]
 800bca2:	6165      	str	r5, [r4, #20]
 800bca4:	444e      	add	r6, r9
 800bca6:	eba5 0509 	sub.w	r5, r5, r9
 800bcaa:	6026      	str	r6, [r4, #0]
 800bcac:	60a5      	str	r5, [r4, #8]
 800bcae:	463e      	mov	r6, r7
 800bcb0:	42be      	cmp	r6, r7
 800bcb2:	d900      	bls.n	800bcb6 <__ssputs_r+0x72>
 800bcb4:	463e      	mov	r6, r7
 800bcb6:	6820      	ldr	r0, [r4, #0]
 800bcb8:	4632      	mov	r2, r6
 800bcba:	4641      	mov	r1, r8
 800bcbc:	f000 f9c6 	bl	800c04c <memmove>
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	1b9b      	subs	r3, r3, r6
 800bcc4:	60a3      	str	r3, [r4, #8]
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	4433      	add	r3, r6
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	2000      	movs	r0, #0
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	f000 fa36 	bl	800c144 <_realloc_r>
 800bcd8:	4606      	mov	r6, r0
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1e0      	bne.n	800bca0 <__ssputs_r+0x5c>
 800bcde:	6921      	ldr	r1, [r4, #16]
 800bce0:	4650      	mov	r0, sl
 800bce2:	f7ff fb2d 	bl	800b340 <_free_r>
 800bce6:	230c      	movs	r3, #12
 800bce8:	f8ca 3000 	str.w	r3, [sl]
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	e7e9      	b.n	800bcce <__ssputs_r+0x8a>
	...

0800bcfc <_svfiprintf_r>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	4698      	mov	r8, r3
 800bd02:	898b      	ldrh	r3, [r1, #12]
 800bd04:	061b      	lsls	r3, r3, #24
 800bd06:	b09d      	sub	sp, #116	@ 0x74
 800bd08:	4607      	mov	r7, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	4614      	mov	r4, r2
 800bd0e:	d510      	bpl.n	800bd32 <_svfiprintf_r+0x36>
 800bd10:	690b      	ldr	r3, [r1, #16]
 800bd12:	b973      	cbnz	r3, 800bd32 <_svfiprintf_r+0x36>
 800bd14:	2140      	movs	r1, #64	@ 0x40
 800bd16:	f7ff fb87 	bl	800b428 <_malloc_r>
 800bd1a:	6028      	str	r0, [r5, #0]
 800bd1c:	6128      	str	r0, [r5, #16]
 800bd1e:	b930      	cbnz	r0, 800bd2e <_svfiprintf_r+0x32>
 800bd20:	230c      	movs	r3, #12
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	b01d      	add	sp, #116	@ 0x74
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	2340      	movs	r3, #64	@ 0x40
 800bd30:	616b      	str	r3, [r5, #20]
 800bd32:	2300      	movs	r3, #0
 800bd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd36:	2320      	movs	r3, #32
 800bd38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd40:	2330      	movs	r3, #48	@ 0x30
 800bd42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bee0 <_svfiprintf_r+0x1e4>
 800bd46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd4a:	f04f 0901 	mov.w	r9, #1
 800bd4e:	4623      	mov	r3, r4
 800bd50:	469a      	mov	sl, r3
 800bd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd56:	b10a      	cbz	r2, 800bd5c <_svfiprintf_r+0x60>
 800bd58:	2a25      	cmp	r2, #37	@ 0x25
 800bd5a:	d1f9      	bne.n	800bd50 <_svfiprintf_r+0x54>
 800bd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd60:	d00b      	beq.n	800bd7a <_svfiprintf_r+0x7e>
 800bd62:	465b      	mov	r3, fp
 800bd64:	4622      	mov	r2, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f7ff ff6b 	bl	800bc44 <__ssputs_r>
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f000 80a7 	beq.w	800bec2 <_svfiprintf_r+0x1c6>
 800bd74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd76:	445a      	add	r2, fp
 800bd78:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 809f 	beq.w	800bec2 <_svfiprintf_r+0x1c6>
 800bd84:	2300      	movs	r3, #0
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd8e:	f10a 0a01 	add.w	sl, sl, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	9307      	str	r3, [sp, #28]
 800bd96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2205      	movs	r2, #5
 800bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda4:	484e      	ldr	r0, [pc, #312]	@ (800bee0 <_svfiprintf_r+0x1e4>)
 800bda6:	f7f4 fa1b 	bl	80001e0 <memchr>
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	b9d8      	cbnz	r0, 800bde6 <_svfiprintf_r+0xea>
 800bdae:	06d0      	lsls	r0, r2, #27
 800bdb0:	bf44      	itt	mi
 800bdb2:	2320      	movmi	r3, #32
 800bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb8:	0711      	lsls	r1, r2, #28
 800bdba:	bf44      	itt	mi
 800bdbc:	232b      	movmi	r3, #43	@ 0x2b
 800bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc8:	d015      	beq.n	800bdf6 <_svfiprintf_r+0xfa>
 800bdca:	9a07      	ldr	r2, [sp, #28]
 800bdcc:	4654      	mov	r4, sl
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f04f 0c0a 	mov.w	ip, #10
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdda:	3b30      	subs	r3, #48	@ 0x30
 800bddc:	2b09      	cmp	r3, #9
 800bdde:	d94b      	bls.n	800be78 <_svfiprintf_r+0x17c>
 800bde0:	b1b0      	cbz	r0, 800be10 <_svfiprintf_r+0x114>
 800bde2:	9207      	str	r2, [sp, #28]
 800bde4:	e014      	b.n	800be10 <_svfiprintf_r+0x114>
 800bde6:	eba0 0308 	sub.w	r3, r0, r8
 800bdea:	fa09 f303 	lsl.w	r3, r9, r3
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	46a2      	mov	sl, r4
 800bdf4:	e7d2      	b.n	800bd9c <_svfiprintf_r+0xa0>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	1d19      	adds	r1, r3, #4
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	9103      	str	r1, [sp, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfbb      	ittet	lt
 800be02:	425b      	neglt	r3, r3
 800be04:	f042 0202 	orrlt.w	r2, r2, #2
 800be08:	9307      	strge	r3, [sp, #28]
 800be0a:	9307      	strlt	r3, [sp, #28]
 800be0c:	bfb8      	it	lt
 800be0e:	9204      	strlt	r2, [sp, #16]
 800be10:	7823      	ldrb	r3, [r4, #0]
 800be12:	2b2e      	cmp	r3, #46	@ 0x2e
 800be14:	d10a      	bne.n	800be2c <_svfiprintf_r+0x130>
 800be16:	7863      	ldrb	r3, [r4, #1]
 800be18:	2b2a      	cmp	r3, #42	@ 0x2a
 800be1a:	d132      	bne.n	800be82 <_svfiprintf_r+0x186>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9203      	str	r2, [sp, #12]
 800be24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be28:	3402      	adds	r4, #2
 800be2a:	9305      	str	r3, [sp, #20]
 800be2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bef0 <_svfiprintf_r+0x1f4>
 800be30:	7821      	ldrb	r1, [r4, #0]
 800be32:	2203      	movs	r2, #3
 800be34:	4650      	mov	r0, sl
 800be36:	f7f4 f9d3 	bl	80001e0 <memchr>
 800be3a:	b138      	cbz	r0, 800be4c <_svfiprintf_r+0x150>
 800be3c:	9b04      	ldr	r3, [sp, #16]
 800be3e:	eba0 000a 	sub.w	r0, r0, sl
 800be42:	2240      	movs	r2, #64	@ 0x40
 800be44:	4082      	lsls	r2, r0
 800be46:	4313      	orrs	r3, r2
 800be48:	3401      	adds	r4, #1
 800be4a:	9304      	str	r3, [sp, #16]
 800be4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be50:	4824      	ldr	r0, [pc, #144]	@ (800bee4 <_svfiprintf_r+0x1e8>)
 800be52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be56:	2206      	movs	r2, #6
 800be58:	f7f4 f9c2 	bl	80001e0 <memchr>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d036      	beq.n	800bece <_svfiprintf_r+0x1d2>
 800be60:	4b21      	ldr	r3, [pc, #132]	@ (800bee8 <_svfiprintf_r+0x1ec>)
 800be62:	bb1b      	cbnz	r3, 800beac <_svfiprintf_r+0x1b0>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	3307      	adds	r3, #7
 800be68:	f023 0307 	bic.w	r3, r3, #7
 800be6c:	3308      	adds	r3, #8
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be72:	4433      	add	r3, r6
 800be74:	9309      	str	r3, [sp, #36]	@ 0x24
 800be76:	e76a      	b.n	800bd4e <_svfiprintf_r+0x52>
 800be78:	fb0c 3202 	mla	r2, ip, r2, r3
 800be7c:	460c      	mov	r4, r1
 800be7e:	2001      	movs	r0, #1
 800be80:	e7a8      	b.n	800bdd4 <_svfiprintf_r+0xd8>
 800be82:	2300      	movs	r3, #0
 800be84:	3401      	adds	r4, #1
 800be86:	9305      	str	r3, [sp, #20]
 800be88:	4619      	mov	r1, r3
 800be8a:	f04f 0c0a 	mov.w	ip, #10
 800be8e:	4620      	mov	r0, r4
 800be90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be94:	3a30      	subs	r2, #48	@ 0x30
 800be96:	2a09      	cmp	r2, #9
 800be98:	d903      	bls.n	800bea2 <_svfiprintf_r+0x1a6>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0c6      	beq.n	800be2c <_svfiprintf_r+0x130>
 800be9e:	9105      	str	r1, [sp, #20]
 800bea0:	e7c4      	b.n	800be2c <_svfiprintf_r+0x130>
 800bea2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea6:	4604      	mov	r4, r0
 800bea8:	2301      	movs	r3, #1
 800beaa:	e7f0      	b.n	800be8e <_svfiprintf_r+0x192>
 800beac:	ab03      	add	r3, sp, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4b0e      	ldr	r3, [pc, #56]	@ (800beec <_svfiprintf_r+0x1f0>)
 800beb4:	a904      	add	r1, sp, #16
 800beb6:	4638      	mov	r0, r7
 800beb8:	f7fd fe82 	bl	8009bc0 <_printf_float>
 800bebc:	1c42      	adds	r2, r0, #1
 800bebe:	4606      	mov	r6, r0
 800bec0:	d1d6      	bne.n	800be70 <_svfiprintf_r+0x174>
 800bec2:	89ab      	ldrh	r3, [r5, #12]
 800bec4:	065b      	lsls	r3, r3, #25
 800bec6:	f53f af2d 	bmi.w	800bd24 <_svfiprintf_r+0x28>
 800beca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800becc:	e72c      	b.n	800bd28 <_svfiprintf_r+0x2c>
 800bece:	ab03      	add	r3, sp, #12
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	462a      	mov	r2, r5
 800bed4:	4b05      	ldr	r3, [pc, #20]	@ (800beec <_svfiprintf_r+0x1f0>)
 800bed6:	a904      	add	r1, sp, #16
 800bed8:	4638      	mov	r0, r7
 800beda:	f7fe f909 	bl	800a0f0 <_printf_i>
 800bede:	e7ed      	b.n	800bebc <_svfiprintf_r+0x1c0>
 800bee0:	0800c9f0 	.word	0x0800c9f0
 800bee4:	0800c9fa 	.word	0x0800c9fa
 800bee8:	08009bc1 	.word	0x08009bc1
 800beec:	0800bc45 	.word	0x0800bc45
 800bef0:	0800c9f6 	.word	0x0800c9f6

0800bef4 <__sflush_r>:
 800bef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befc:	0716      	lsls	r6, r2, #28
 800befe:	4605      	mov	r5, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	d454      	bmi.n	800bfae <__sflush_r+0xba>
 800bf04:	684b      	ldr	r3, [r1, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dc02      	bgt.n	800bf10 <__sflush_r+0x1c>
 800bf0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	dd48      	ble.n	800bfa2 <__sflush_r+0xae>
 800bf10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf12:	2e00      	cmp	r6, #0
 800bf14:	d045      	beq.n	800bfa2 <__sflush_r+0xae>
 800bf16:	2300      	movs	r3, #0
 800bf18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf1c:	682f      	ldr	r7, [r5, #0]
 800bf1e:	6a21      	ldr	r1, [r4, #32]
 800bf20:	602b      	str	r3, [r5, #0]
 800bf22:	d030      	beq.n	800bf86 <__sflush_r+0x92>
 800bf24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	0759      	lsls	r1, r3, #29
 800bf2a:	d505      	bpl.n	800bf38 <__sflush_r+0x44>
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf32:	b10b      	cbz	r3, 800bf38 <__sflush_r+0x44>
 800bf34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	2300      	movs	r3, #0
 800bf3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf3c:	6a21      	ldr	r1, [r4, #32]
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b0      	blx	r6
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	d106      	bne.n	800bf56 <__sflush_r+0x62>
 800bf48:	6829      	ldr	r1, [r5, #0]
 800bf4a:	291d      	cmp	r1, #29
 800bf4c:	d82b      	bhi.n	800bfa6 <__sflush_r+0xb2>
 800bf4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bff8 <__sflush_r+0x104>)
 800bf50:	410a      	asrs	r2, r1
 800bf52:	07d6      	lsls	r6, r2, #31
 800bf54:	d427      	bmi.n	800bfa6 <__sflush_r+0xb2>
 800bf56:	2200      	movs	r2, #0
 800bf58:	6062      	str	r2, [r4, #4]
 800bf5a:	04d9      	lsls	r1, r3, #19
 800bf5c:	6922      	ldr	r2, [r4, #16]
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	d504      	bpl.n	800bf6c <__sflush_r+0x78>
 800bf62:	1c42      	adds	r2, r0, #1
 800bf64:	d101      	bne.n	800bf6a <__sflush_r+0x76>
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	b903      	cbnz	r3, 800bf6c <__sflush_r+0x78>
 800bf6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf6e:	602f      	str	r7, [r5, #0]
 800bf70:	b1b9      	cbz	r1, 800bfa2 <__sflush_r+0xae>
 800bf72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d002      	beq.n	800bf80 <__sflush_r+0x8c>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7ff f9e0 	bl	800b340 <_free_r>
 800bf80:	2300      	movs	r3, #0
 800bf82:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf84:	e00d      	b.n	800bfa2 <__sflush_r+0xae>
 800bf86:	2301      	movs	r3, #1
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b0      	blx	r6
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	1c50      	adds	r0, r2, #1
 800bf90:	d1c9      	bne.n	800bf26 <__sflush_r+0x32>
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0c6      	beq.n	800bf26 <__sflush_r+0x32>
 800bf98:	2b1d      	cmp	r3, #29
 800bf9a:	d001      	beq.n	800bfa0 <__sflush_r+0xac>
 800bf9c:	2b16      	cmp	r3, #22
 800bf9e:	d11e      	bne.n	800bfde <__sflush_r+0xea>
 800bfa0:	602f      	str	r7, [r5, #0]
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	e022      	b.n	800bfec <__sflush_r+0xf8>
 800bfa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfaa:	b21b      	sxth	r3, r3
 800bfac:	e01b      	b.n	800bfe6 <__sflush_r+0xf2>
 800bfae:	690f      	ldr	r7, [r1, #16]
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	d0f6      	beq.n	800bfa2 <__sflush_r+0xae>
 800bfb4:	0793      	lsls	r3, r2, #30
 800bfb6:	680e      	ldr	r6, [r1, #0]
 800bfb8:	bf08      	it	eq
 800bfba:	694b      	ldreq	r3, [r1, #20]
 800bfbc:	600f      	str	r7, [r1, #0]
 800bfbe:	bf18      	it	ne
 800bfc0:	2300      	movne	r3, #0
 800bfc2:	eba6 0807 	sub.w	r8, r6, r7
 800bfc6:	608b      	str	r3, [r1, #8]
 800bfc8:	f1b8 0f00 	cmp.w	r8, #0
 800bfcc:	dde9      	ble.n	800bfa2 <__sflush_r+0xae>
 800bfce:	6a21      	ldr	r1, [r4, #32]
 800bfd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfd2:	4643      	mov	r3, r8
 800bfd4:	463a      	mov	r2, r7
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b0      	blx	r6
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	dc08      	bgt.n	800bff0 <__sflush_r+0xfc>
 800bfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff0:	4407      	add	r7, r0
 800bff2:	eba8 0800 	sub.w	r8, r8, r0
 800bff6:	e7e7      	b.n	800bfc8 <__sflush_r+0xd4>
 800bff8:	dfbffffe 	.word	0xdfbffffe

0800bffc <_fflush_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	690b      	ldr	r3, [r1, #16]
 800c000:	4605      	mov	r5, r0
 800c002:	460c      	mov	r4, r1
 800c004:	b913      	cbnz	r3, 800c00c <_fflush_r+0x10>
 800c006:	2500      	movs	r5, #0
 800c008:	4628      	mov	r0, r5
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	b118      	cbz	r0, 800c016 <_fflush_r+0x1a>
 800c00e:	6a03      	ldr	r3, [r0, #32]
 800c010:	b90b      	cbnz	r3, 800c016 <_fflush_r+0x1a>
 800c012:	f7fe fa19 	bl	800a448 <__sinit>
 800c016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0f3      	beq.n	800c006 <_fflush_r+0xa>
 800c01e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c020:	07d0      	lsls	r0, r2, #31
 800c022:	d404      	bmi.n	800c02e <_fflush_r+0x32>
 800c024:	0599      	lsls	r1, r3, #22
 800c026:	d402      	bmi.n	800c02e <_fflush_r+0x32>
 800c028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c02a:	f7fe fb38 	bl	800a69e <__retarget_lock_acquire_recursive>
 800c02e:	4628      	mov	r0, r5
 800c030:	4621      	mov	r1, r4
 800c032:	f7ff ff5f 	bl	800bef4 <__sflush_r>
 800c036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c038:	07da      	lsls	r2, r3, #31
 800c03a:	4605      	mov	r5, r0
 800c03c:	d4e4      	bmi.n	800c008 <_fflush_r+0xc>
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	059b      	lsls	r3, r3, #22
 800c042:	d4e1      	bmi.n	800c008 <_fflush_r+0xc>
 800c044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c046:	f7fe fb2b 	bl	800a6a0 <__retarget_lock_release_recursive>
 800c04a:	e7dd      	b.n	800c008 <_fflush_r+0xc>

0800c04c <memmove>:
 800c04c:	4288      	cmp	r0, r1
 800c04e:	b510      	push	{r4, lr}
 800c050:	eb01 0402 	add.w	r4, r1, r2
 800c054:	d902      	bls.n	800c05c <memmove+0x10>
 800c056:	4284      	cmp	r4, r0
 800c058:	4623      	mov	r3, r4
 800c05a:	d807      	bhi.n	800c06c <memmove+0x20>
 800c05c:	1e43      	subs	r3, r0, #1
 800c05e:	42a1      	cmp	r1, r4
 800c060:	d008      	beq.n	800c074 <memmove+0x28>
 800c062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c06a:	e7f8      	b.n	800c05e <memmove+0x12>
 800c06c:	4402      	add	r2, r0
 800c06e:	4601      	mov	r1, r0
 800c070:	428a      	cmp	r2, r1
 800c072:	d100      	bne.n	800c076 <memmove+0x2a>
 800c074:	bd10      	pop	{r4, pc}
 800c076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c07e:	e7f7      	b.n	800c070 <memmove+0x24>

0800c080 <_sbrk_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d06      	ldr	r5, [pc, #24]	@ (800c09c <_sbrk_r+0x1c>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	f7f5 fd2a 	bl	8001ae4 <_sbrk>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_sbrk_r+0x1a>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_sbrk_r+0x1a>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	20002144 	.word	0x20002144

0800c0a0 <memcpy>:
 800c0a0:	440a      	add	r2, r1
 800c0a2:	4291      	cmp	r1, r2
 800c0a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0a8:	d100      	bne.n	800c0ac <memcpy+0xc>
 800c0aa:	4770      	bx	lr
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0b6:	4291      	cmp	r1, r2
 800c0b8:	d1f9      	bne.n	800c0ae <memcpy+0xe>
 800c0ba:	bd10      	pop	{r4, pc}

0800c0bc <__assert_func>:
 800c0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0be:	4614      	mov	r4, r2
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	4b09      	ldr	r3, [pc, #36]	@ (800c0e8 <__assert_func+0x2c>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	68d8      	ldr	r0, [r3, #12]
 800c0ca:	b954      	cbnz	r4, 800c0e2 <__assert_func+0x26>
 800c0cc:	4b07      	ldr	r3, [pc, #28]	@ (800c0ec <__assert_func+0x30>)
 800c0ce:	461c      	mov	r4, r3
 800c0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0d4:	9100      	str	r1, [sp, #0]
 800c0d6:	462b      	mov	r3, r5
 800c0d8:	4905      	ldr	r1, [pc, #20]	@ (800c0f0 <__assert_func+0x34>)
 800c0da:	f000 f86f 	bl	800c1bc <fiprintf>
 800c0de:	f000 f87f 	bl	800c1e0 <abort>
 800c0e2:	4b04      	ldr	r3, [pc, #16]	@ (800c0f4 <__assert_func+0x38>)
 800c0e4:	e7f4      	b.n	800c0d0 <__assert_func+0x14>
 800c0e6:	bf00      	nop
 800c0e8:	20000108 	.word	0x20000108
 800c0ec:	0800ca46 	.word	0x0800ca46
 800c0f0:	0800ca18 	.word	0x0800ca18
 800c0f4:	0800ca0b 	.word	0x0800ca0b

0800c0f8 <_calloc_r>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	fba1 5402 	umull	r5, r4, r1, r2
 800c0fe:	b93c      	cbnz	r4, 800c110 <_calloc_r+0x18>
 800c100:	4629      	mov	r1, r5
 800c102:	f7ff f991 	bl	800b428 <_malloc_r>
 800c106:	4606      	mov	r6, r0
 800c108:	b928      	cbnz	r0, 800c116 <_calloc_r+0x1e>
 800c10a:	2600      	movs	r6, #0
 800c10c:	4630      	mov	r0, r6
 800c10e:	bd70      	pop	{r4, r5, r6, pc}
 800c110:	220c      	movs	r2, #12
 800c112:	6002      	str	r2, [r0, #0]
 800c114:	e7f9      	b.n	800c10a <_calloc_r+0x12>
 800c116:	462a      	mov	r2, r5
 800c118:	4621      	mov	r1, r4
 800c11a:	f7fe fa42 	bl	800a5a2 <memset>
 800c11e:	e7f5      	b.n	800c10c <_calloc_r+0x14>

0800c120 <__ascii_mbtowc>:
 800c120:	b082      	sub	sp, #8
 800c122:	b901      	cbnz	r1, 800c126 <__ascii_mbtowc+0x6>
 800c124:	a901      	add	r1, sp, #4
 800c126:	b142      	cbz	r2, 800c13a <__ascii_mbtowc+0x1a>
 800c128:	b14b      	cbz	r3, 800c13e <__ascii_mbtowc+0x1e>
 800c12a:	7813      	ldrb	r3, [r2, #0]
 800c12c:	600b      	str	r3, [r1, #0]
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	1e10      	subs	r0, r2, #0
 800c132:	bf18      	it	ne
 800c134:	2001      	movne	r0, #1
 800c136:	b002      	add	sp, #8
 800c138:	4770      	bx	lr
 800c13a:	4610      	mov	r0, r2
 800c13c:	e7fb      	b.n	800c136 <__ascii_mbtowc+0x16>
 800c13e:	f06f 0001 	mvn.w	r0, #1
 800c142:	e7f8      	b.n	800c136 <__ascii_mbtowc+0x16>

0800c144 <_realloc_r>:
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	4680      	mov	r8, r0
 800c14a:	4615      	mov	r5, r2
 800c14c:	460c      	mov	r4, r1
 800c14e:	b921      	cbnz	r1, 800c15a <_realloc_r+0x16>
 800c150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	4611      	mov	r1, r2
 800c156:	f7ff b967 	b.w	800b428 <_malloc_r>
 800c15a:	b92a      	cbnz	r2, 800c168 <_realloc_r+0x24>
 800c15c:	f7ff f8f0 	bl	800b340 <_free_r>
 800c160:	2400      	movs	r4, #0
 800c162:	4620      	mov	r0, r4
 800c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c168:	f000 f841 	bl	800c1ee <_malloc_usable_size_r>
 800c16c:	4285      	cmp	r5, r0
 800c16e:	4606      	mov	r6, r0
 800c170:	d802      	bhi.n	800c178 <_realloc_r+0x34>
 800c172:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c176:	d8f4      	bhi.n	800c162 <_realloc_r+0x1e>
 800c178:	4629      	mov	r1, r5
 800c17a:	4640      	mov	r0, r8
 800c17c:	f7ff f954 	bl	800b428 <_malloc_r>
 800c180:	4607      	mov	r7, r0
 800c182:	2800      	cmp	r0, #0
 800c184:	d0ec      	beq.n	800c160 <_realloc_r+0x1c>
 800c186:	42b5      	cmp	r5, r6
 800c188:	462a      	mov	r2, r5
 800c18a:	4621      	mov	r1, r4
 800c18c:	bf28      	it	cs
 800c18e:	4632      	movcs	r2, r6
 800c190:	f7ff ff86 	bl	800c0a0 <memcpy>
 800c194:	4621      	mov	r1, r4
 800c196:	4640      	mov	r0, r8
 800c198:	f7ff f8d2 	bl	800b340 <_free_r>
 800c19c:	463c      	mov	r4, r7
 800c19e:	e7e0      	b.n	800c162 <_realloc_r+0x1e>

0800c1a0 <__ascii_wctomb>:
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	b141      	cbz	r1, 800c1b8 <__ascii_wctomb+0x18>
 800c1a6:	2aff      	cmp	r2, #255	@ 0xff
 800c1a8:	d904      	bls.n	800c1b4 <__ascii_wctomb+0x14>
 800c1aa:	228a      	movs	r2, #138	@ 0x8a
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	4770      	bx	lr
 800c1b4:	700a      	strb	r2, [r1, #0]
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	4770      	bx	lr
	...

0800c1bc <fiprintf>:
 800c1bc:	b40e      	push	{r1, r2, r3}
 800c1be:	b503      	push	{r0, r1, lr}
 800c1c0:	4601      	mov	r1, r0
 800c1c2:	ab03      	add	r3, sp, #12
 800c1c4:	4805      	ldr	r0, [pc, #20]	@ (800c1dc <fiprintf+0x20>)
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	f000 f83f 	bl	800c250 <_vfiprintf_r>
 800c1d2:	b002      	add	sp, #8
 800c1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1d8:	b003      	add	sp, #12
 800c1da:	4770      	bx	lr
 800c1dc:	20000108 	.word	0x20000108

0800c1e0 <abort>:
 800c1e0:	b508      	push	{r3, lr}
 800c1e2:	2006      	movs	r0, #6
 800c1e4:	f000 fa08 	bl	800c5f8 <raise>
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	f7f5 fc03 	bl	80019f4 <_exit>

0800c1ee <_malloc_usable_size_r>:
 800c1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1f2:	1f18      	subs	r0, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	bfbc      	itt	lt
 800c1f8:	580b      	ldrlt	r3, [r1, r0]
 800c1fa:	18c0      	addlt	r0, r0, r3
 800c1fc:	4770      	bx	lr

0800c1fe <__sfputc_r>:
 800c1fe:	6893      	ldr	r3, [r2, #8]
 800c200:	3b01      	subs	r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	b410      	push	{r4}
 800c206:	6093      	str	r3, [r2, #8]
 800c208:	da08      	bge.n	800c21c <__sfputc_r+0x1e>
 800c20a:	6994      	ldr	r4, [r2, #24]
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	db01      	blt.n	800c214 <__sfputc_r+0x16>
 800c210:	290a      	cmp	r1, #10
 800c212:	d103      	bne.n	800c21c <__sfputc_r+0x1e>
 800c214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c218:	f000 b932 	b.w	800c480 <__swbuf_r>
 800c21c:	6813      	ldr	r3, [r2, #0]
 800c21e:	1c58      	adds	r0, r3, #1
 800c220:	6010      	str	r0, [r2, #0]
 800c222:	7019      	strb	r1, [r3, #0]
 800c224:	4608      	mov	r0, r1
 800c226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <__sfputs_r>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	4606      	mov	r6, r0
 800c230:	460f      	mov	r7, r1
 800c232:	4614      	mov	r4, r2
 800c234:	18d5      	adds	r5, r2, r3
 800c236:	42ac      	cmp	r4, r5
 800c238:	d101      	bne.n	800c23e <__sfputs_r+0x12>
 800c23a:	2000      	movs	r0, #0
 800c23c:	e007      	b.n	800c24e <__sfputs_r+0x22>
 800c23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c242:	463a      	mov	r2, r7
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff ffda 	bl	800c1fe <__sfputc_r>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	d1f3      	bne.n	800c236 <__sfputs_r+0xa>
 800c24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c250 <_vfiprintf_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	460d      	mov	r5, r1
 800c256:	b09d      	sub	sp, #116	@ 0x74
 800c258:	4614      	mov	r4, r2
 800c25a:	4698      	mov	r8, r3
 800c25c:	4606      	mov	r6, r0
 800c25e:	b118      	cbz	r0, 800c268 <_vfiprintf_r+0x18>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <_vfiprintf_r+0x18>
 800c264:	f7fe f8f0 	bl	800a448 <__sinit>
 800c268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_vfiprintf_r+0x2a>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d402      	bmi.n	800c27a <_vfiprintf_r+0x2a>
 800c274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c276:	f7fe fa12 	bl	800a69e <__retarget_lock_acquire_recursive>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	071b      	lsls	r3, r3, #28
 800c27e:	d501      	bpl.n	800c284 <_vfiprintf_r+0x34>
 800c280:	692b      	ldr	r3, [r5, #16]
 800c282:	b99b      	cbnz	r3, 800c2ac <_vfiprintf_r+0x5c>
 800c284:	4629      	mov	r1, r5
 800c286:	4630      	mov	r0, r6
 800c288:	f000 f938 	bl	800c4fc <__swsetup_r>
 800c28c:	b170      	cbz	r0, 800c2ac <_vfiprintf_r+0x5c>
 800c28e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c290:	07dc      	lsls	r4, r3, #31
 800c292:	d504      	bpl.n	800c29e <_vfiprintf_r+0x4e>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b01d      	add	sp, #116	@ 0x74
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	0598      	lsls	r0, r3, #22
 800c2a2:	d4f7      	bmi.n	800c294 <_vfiprintf_r+0x44>
 800c2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2a6:	f7fe f9fb 	bl	800a6a0 <__retarget_lock_release_recursive>
 800c2aa:	e7f3      	b.n	800c294 <_vfiprintf_r+0x44>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b0:	2320      	movs	r3, #32
 800c2b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ba:	2330      	movs	r3, #48	@ 0x30
 800c2bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c46c <_vfiprintf_r+0x21c>
 800c2c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2c4:	f04f 0901 	mov.w	r9, #1
 800c2c8:	4623      	mov	r3, r4
 800c2ca:	469a      	mov	sl, r3
 800c2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2d0:	b10a      	cbz	r2, 800c2d6 <_vfiprintf_r+0x86>
 800c2d2:	2a25      	cmp	r2, #37	@ 0x25
 800c2d4:	d1f9      	bne.n	800c2ca <_vfiprintf_r+0x7a>
 800c2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2da:	d00b      	beq.n	800c2f4 <_vfiprintf_r+0xa4>
 800c2dc:	465b      	mov	r3, fp
 800c2de:	4622      	mov	r2, r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff ffa2 	bl	800c22c <__sfputs_r>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	f000 80a7 	beq.w	800c43c <_vfiprintf_r+0x1ec>
 800c2ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2f0:	445a      	add	r2, fp
 800c2f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 809f 	beq.w	800c43c <_vfiprintf_r+0x1ec>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f04f 32ff 	mov.w	r2, #4294967295
 800c304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c308:	f10a 0a01 	add.w	sl, sl, #1
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	9307      	str	r3, [sp, #28]
 800c310:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c314:	931a      	str	r3, [sp, #104]	@ 0x68
 800c316:	4654      	mov	r4, sl
 800c318:	2205      	movs	r2, #5
 800c31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31e:	4853      	ldr	r0, [pc, #332]	@ (800c46c <_vfiprintf_r+0x21c>)
 800c320:	f7f3 ff5e 	bl	80001e0 <memchr>
 800c324:	9a04      	ldr	r2, [sp, #16]
 800c326:	b9d8      	cbnz	r0, 800c360 <_vfiprintf_r+0x110>
 800c328:	06d1      	lsls	r1, r2, #27
 800c32a:	bf44      	itt	mi
 800c32c:	2320      	movmi	r3, #32
 800c32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c332:	0713      	lsls	r3, r2, #28
 800c334:	bf44      	itt	mi
 800c336:	232b      	movmi	r3, #43	@ 0x2b
 800c338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c33c:	f89a 3000 	ldrb.w	r3, [sl]
 800c340:	2b2a      	cmp	r3, #42	@ 0x2a
 800c342:	d015      	beq.n	800c370 <_vfiprintf_r+0x120>
 800c344:	9a07      	ldr	r2, [sp, #28]
 800c346:	4654      	mov	r4, sl
 800c348:	2000      	movs	r0, #0
 800c34a:	f04f 0c0a 	mov.w	ip, #10
 800c34e:	4621      	mov	r1, r4
 800c350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c354:	3b30      	subs	r3, #48	@ 0x30
 800c356:	2b09      	cmp	r3, #9
 800c358:	d94b      	bls.n	800c3f2 <_vfiprintf_r+0x1a2>
 800c35a:	b1b0      	cbz	r0, 800c38a <_vfiprintf_r+0x13a>
 800c35c:	9207      	str	r2, [sp, #28]
 800c35e:	e014      	b.n	800c38a <_vfiprintf_r+0x13a>
 800c360:	eba0 0308 	sub.w	r3, r0, r8
 800c364:	fa09 f303 	lsl.w	r3, r9, r3
 800c368:	4313      	orrs	r3, r2
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	46a2      	mov	sl, r4
 800c36e:	e7d2      	b.n	800c316 <_vfiprintf_r+0xc6>
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	1d19      	adds	r1, r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	9103      	str	r1, [sp, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbb      	ittet	lt
 800c37c:	425b      	neglt	r3, r3
 800c37e:	f042 0202 	orrlt.w	r2, r2, #2
 800c382:	9307      	strge	r3, [sp, #28]
 800c384:	9307      	strlt	r3, [sp, #28]
 800c386:	bfb8      	it	lt
 800c388:	9204      	strlt	r2, [sp, #16]
 800c38a:	7823      	ldrb	r3, [r4, #0]
 800c38c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c38e:	d10a      	bne.n	800c3a6 <_vfiprintf_r+0x156>
 800c390:	7863      	ldrb	r3, [r4, #1]
 800c392:	2b2a      	cmp	r3, #42	@ 0x2a
 800c394:	d132      	bne.n	800c3fc <_vfiprintf_r+0x1ac>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d1a      	adds	r2, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9203      	str	r2, [sp, #12]
 800c39e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3a2:	3402      	adds	r4, #2
 800c3a4:	9305      	str	r3, [sp, #20]
 800c3a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c47c <_vfiprintf_r+0x22c>
 800c3aa:	7821      	ldrb	r1, [r4, #0]
 800c3ac:	2203      	movs	r2, #3
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	f7f3 ff16 	bl	80001e0 <memchr>
 800c3b4:	b138      	cbz	r0, 800c3c6 <_vfiprintf_r+0x176>
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	eba0 000a 	sub.w	r0, r0, sl
 800c3bc:	2240      	movs	r2, #64	@ 0x40
 800c3be:	4082      	lsls	r2, r0
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	9304      	str	r3, [sp, #16]
 800c3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ca:	4829      	ldr	r0, [pc, #164]	@ (800c470 <_vfiprintf_r+0x220>)
 800c3cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3d0:	2206      	movs	r2, #6
 800c3d2:	f7f3 ff05 	bl	80001e0 <memchr>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d03f      	beq.n	800c45a <_vfiprintf_r+0x20a>
 800c3da:	4b26      	ldr	r3, [pc, #152]	@ (800c474 <_vfiprintf_r+0x224>)
 800c3dc:	bb1b      	cbnz	r3, 800c426 <_vfiprintf_r+0x1d6>
 800c3de:	9b03      	ldr	r3, [sp, #12]
 800c3e0:	3307      	adds	r3, #7
 800c3e2:	f023 0307 	bic.w	r3, r3, #7
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	9303      	str	r3, [sp, #12]
 800c3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ec:	443b      	add	r3, r7
 800c3ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f0:	e76a      	b.n	800c2c8 <_vfiprintf_r+0x78>
 800c3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	e7a8      	b.n	800c34e <_vfiprintf_r+0xfe>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	3401      	adds	r4, #1
 800c400:	9305      	str	r3, [sp, #20]
 800c402:	4619      	mov	r1, r3
 800c404:	f04f 0c0a 	mov.w	ip, #10
 800c408:	4620      	mov	r0, r4
 800c40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c40e:	3a30      	subs	r2, #48	@ 0x30
 800c410:	2a09      	cmp	r2, #9
 800c412:	d903      	bls.n	800c41c <_vfiprintf_r+0x1cc>
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0c6      	beq.n	800c3a6 <_vfiprintf_r+0x156>
 800c418:	9105      	str	r1, [sp, #20]
 800c41a:	e7c4      	b.n	800c3a6 <_vfiprintf_r+0x156>
 800c41c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c420:	4604      	mov	r4, r0
 800c422:	2301      	movs	r3, #1
 800c424:	e7f0      	b.n	800c408 <_vfiprintf_r+0x1b8>
 800c426:	ab03      	add	r3, sp, #12
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	462a      	mov	r2, r5
 800c42c:	4b12      	ldr	r3, [pc, #72]	@ (800c478 <_vfiprintf_r+0x228>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	4630      	mov	r0, r6
 800c432:	f7fd fbc5 	bl	8009bc0 <_printf_float>
 800c436:	4607      	mov	r7, r0
 800c438:	1c78      	adds	r0, r7, #1
 800c43a:	d1d6      	bne.n	800c3ea <_vfiprintf_r+0x19a>
 800c43c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c43e:	07d9      	lsls	r1, r3, #31
 800c440:	d405      	bmi.n	800c44e <_vfiprintf_r+0x1fe>
 800c442:	89ab      	ldrh	r3, [r5, #12]
 800c444:	059a      	lsls	r2, r3, #22
 800c446:	d402      	bmi.n	800c44e <_vfiprintf_r+0x1fe>
 800c448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c44a:	f7fe f929 	bl	800a6a0 <__retarget_lock_release_recursive>
 800c44e:	89ab      	ldrh	r3, [r5, #12]
 800c450:	065b      	lsls	r3, r3, #25
 800c452:	f53f af1f 	bmi.w	800c294 <_vfiprintf_r+0x44>
 800c456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c458:	e71e      	b.n	800c298 <_vfiprintf_r+0x48>
 800c45a:	ab03      	add	r3, sp, #12
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	462a      	mov	r2, r5
 800c460:	4b05      	ldr	r3, [pc, #20]	@ (800c478 <_vfiprintf_r+0x228>)
 800c462:	a904      	add	r1, sp, #16
 800c464:	4630      	mov	r0, r6
 800c466:	f7fd fe43 	bl	800a0f0 <_printf_i>
 800c46a:	e7e4      	b.n	800c436 <_vfiprintf_r+0x1e6>
 800c46c:	0800c9f0 	.word	0x0800c9f0
 800c470:	0800c9fa 	.word	0x0800c9fa
 800c474:	08009bc1 	.word	0x08009bc1
 800c478:	0800c22d 	.word	0x0800c22d
 800c47c:	0800c9f6 	.word	0x0800c9f6

0800c480 <__swbuf_r>:
 800c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c482:	460e      	mov	r6, r1
 800c484:	4614      	mov	r4, r2
 800c486:	4605      	mov	r5, r0
 800c488:	b118      	cbz	r0, 800c492 <__swbuf_r+0x12>
 800c48a:	6a03      	ldr	r3, [r0, #32]
 800c48c:	b90b      	cbnz	r3, 800c492 <__swbuf_r+0x12>
 800c48e:	f7fd ffdb 	bl	800a448 <__sinit>
 800c492:	69a3      	ldr	r3, [r4, #24]
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	071a      	lsls	r2, r3, #28
 800c49a:	d501      	bpl.n	800c4a0 <__swbuf_r+0x20>
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	b943      	cbnz	r3, 800c4b2 <__swbuf_r+0x32>
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f000 f82a 	bl	800c4fc <__swsetup_r>
 800c4a8:	b118      	cbz	r0, 800c4b2 <__swbuf_r+0x32>
 800c4aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	6922      	ldr	r2, [r4, #16]
 800c4b6:	1a98      	subs	r0, r3, r2
 800c4b8:	6963      	ldr	r3, [r4, #20]
 800c4ba:	b2f6      	uxtb	r6, r6
 800c4bc:	4283      	cmp	r3, r0
 800c4be:	4637      	mov	r7, r6
 800c4c0:	dc05      	bgt.n	800c4ce <__swbuf_r+0x4e>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff fd99 	bl	800bffc <_fflush_r>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d1ed      	bne.n	800c4aa <__swbuf_r+0x2a>
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	60a3      	str	r3, [r4, #8]
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	701e      	strb	r6, [r3, #0]
 800c4dc:	6962      	ldr	r2, [r4, #20]
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d004      	beq.n	800c4ee <__swbuf_r+0x6e>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	07db      	lsls	r3, r3, #31
 800c4e8:	d5e1      	bpl.n	800c4ae <__swbuf_r+0x2e>
 800c4ea:	2e0a      	cmp	r6, #10
 800c4ec:	d1df      	bne.n	800c4ae <__swbuf_r+0x2e>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f7ff fd83 	bl	800bffc <_fflush_r>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0d9      	beq.n	800c4ae <__swbuf_r+0x2e>
 800c4fa:	e7d6      	b.n	800c4aa <__swbuf_r+0x2a>

0800c4fc <__swsetup_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4b29      	ldr	r3, [pc, #164]	@ (800c5a4 <__swsetup_r+0xa8>)
 800c500:	4605      	mov	r5, r0
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	460c      	mov	r4, r1
 800c506:	b118      	cbz	r0, 800c510 <__swsetup_r+0x14>
 800c508:	6a03      	ldr	r3, [r0, #32]
 800c50a:	b90b      	cbnz	r3, 800c510 <__swsetup_r+0x14>
 800c50c:	f7fd ff9c 	bl	800a448 <__sinit>
 800c510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c514:	0719      	lsls	r1, r3, #28
 800c516:	d422      	bmi.n	800c55e <__swsetup_r+0x62>
 800c518:	06da      	lsls	r2, r3, #27
 800c51a:	d407      	bmi.n	800c52c <__swsetup_r+0x30>
 800c51c:	2209      	movs	r2, #9
 800c51e:	602a      	str	r2, [r5, #0]
 800c520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c524:	81a3      	strh	r3, [r4, #12]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	e033      	b.n	800c594 <__swsetup_r+0x98>
 800c52c:	0758      	lsls	r0, r3, #29
 800c52e:	d512      	bpl.n	800c556 <__swsetup_r+0x5a>
 800c530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c532:	b141      	cbz	r1, 800c546 <__swsetup_r+0x4a>
 800c534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c538:	4299      	cmp	r1, r3
 800c53a:	d002      	beq.n	800c542 <__swsetup_r+0x46>
 800c53c:	4628      	mov	r0, r5
 800c53e:	f7fe feff 	bl	800b340 <_free_r>
 800c542:	2300      	movs	r3, #0
 800c544:	6363      	str	r3, [r4, #52]	@ 0x34
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	2300      	movs	r3, #0
 800c550:	6063      	str	r3, [r4, #4]
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	b94b      	cbnz	r3, 800c576 <__swsetup_r+0x7a>
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c56c:	d003      	beq.n	800c576 <__swsetup_r+0x7a>
 800c56e:	4621      	mov	r1, r4
 800c570:	4628      	mov	r0, r5
 800c572:	f000 f883 	bl	800c67c <__smakebuf_r>
 800c576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57a:	f013 0201 	ands.w	r2, r3, #1
 800c57e:	d00a      	beq.n	800c596 <__swsetup_r+0x9a>
 800c580:	2200      	movs	r2, #0
 800c582:	60a2      	str	r2, [r4, #8]
 800c584:	6962      	ldr	r2, [r4, #20]
 800c586:	4252      	negs	r2, r2
 800c588:	61a2      	str	r2, [r4, #24]
 800c58a:	6922      	ldr	r2, [r4, #16]
 800c58c:	b942      	cbnz	r2, 800c5a0 <__swsetup_r+0xa4>
 800c58e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c592:	d1c5      	bne.n	800c520 <__swsetup_r+0x24>
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	0799      	lsls	r1, r3, #30
 800c598:	bf58      	it	pl
 800c59a:	6962      	ldrpl	r2, [r4, #20]
 800c59c:	60a2      	str	r2, [r4, #8]
 800c59e:	e7f4      	b.n	800c58a <__swsetup_r+0x8e>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e7f7      	b.n	800c594 <__swsetup_r+0x98>
 800c5a4:	20000108 	.word	0x20000108

0800c5a8 <_raise_r>:
 800c5a8:	291f      	cmp	r1, #31
 800c5aa:	b538      	push	{r3, r4, r5, lr}
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	d904      	bls.n	800c5bc <_raise_r+0x14>
 800c5b2:	2316      	movs	r3, #22
 800c5b4:	6003      	str	r3, [r0, #0]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5be:	b112      	cbz	r2, 800c5c6 <_raise_r+0x1e>
 800c5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5c4:	b94b      	cbnz	r3, 800c5da <_raise_r+0x32>
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f000 f830 	bl	800c62c <_getpid_r>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5d6:	f000 b817 	b.w	800c608 <_kill_r>
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d00a      	beq.n	800c5f4 <_raise_r+0x4c>
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	d103      	bne.n	800c5ea <_raise_r+0x42>
 800c5e2:	2316      	movs	r3, #22
 800c5e4:	6003      	str	r3, [r0, #0]
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	e7e7      	b.n	800c5ba <_raise_r+0x12>
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	4798      	blx	r3
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7e0      	b.n	800c5ba <_raise_r+0x12>

0800c5f8 <raise>:
 800c5f8:	4b02      	ldr	r3, [pc, #8]	@ (800c604 <raise+0xc>)
 800c5fa:	4601      	mov	r1, r0
 800c5fc:	6818      	ldr	r0, [r3, #0]
 800c5fe:	f7ff bfd3 	b.w	800c5a8 <_raise_r>
 800c602:	bf00      	nop
 800c604:	20000108 	.word	0x20000108

0800c608 <_kill_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	@ (800c628 <_kill_r+0x20>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	f7f5 f9dd 	bl	80019d4 <_kill>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d102      	bne.n	800c624 <_kill_r+0x1c>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b103      	cbz	r3, 800c624 <_kill_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	bf00      	nop
 800c628:	20002144 	.word	0x20002144

0800c62c <_getpid_r>:
 800c62c:	f7f5 b9ca 	b.w	80019c4 <_getpid>

0800c630 <__swhatbuf_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	460c      	mov	r4, r1
 800c634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c638:	2900      	cmp	r1, #0
 800c63a:	b096      	sub	sp, #88	@ 0x58
 800c63c:	4615      	mov	r5, r2
 800c63e:	461e      	mov	r6, r3
 800c640:	da0d      	bge.n	800c65e <__swhatbuf_r+0x2e>
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c648:	f04f 0100 	mov.w	r1, #0
 800c64c:	bf14      	ite	ne
 800c64e:	2340      	movne	r3, #64	@ 0x40
 800c650:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c654:	2000      	movs	r0, #0
 800c656:	6031      	str	r1, [r6, #0]
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	b016      	add	sp, #88	@ 0x58
 800c65c:	bd70      	pop	{r4, r5, r6, pc}
 800c65e:	466a      	mov	r2, sp
 800c660:	f000 f848 	bl	800c6f4 <_fstat_r>
 800c664:	2800      	cmp	r0, #0
 800c666:	dbec      	blt.n	800c642 <__swhatbuf_r+0x12>
 800c668:	9901      	ldr	r1, [sp, #4]
 800c66a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c66e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c672:	4259      	negs	r1, r3
 800c674:	4159      	adcs	r1, r3
 800c676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c67a:	e7eb      	b.n	800c654 <__swhatbuf_r+0x24>

0800c67c <__smakebuf_r>:
 800c67c:	898b      	ldrh	r3, [r1, #12]
 800c67e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c680:	079d      	lsls	r5, r3, #30
 800c682:	4606      	mov	r6, r0
 800c684:	460c      	mov	r4, r1
 800c686:	d507      	bpl.n	800c698 <__smakebuf_r+0x1c>
 800c688:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	2301      	movs	r3, #1
 800c692:	6163      	str	r3, [r4, #20]
 800c694:	b003      	add	sp, #12
 800c696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c698:	ab01      	add	r3, sp, #4
 800c69a:	466a      	mov	r2, sp
 800c69c:	f7ff ffc8 	bl	800c630 <__swhatbuf_r>
 800c6a0:	9f00      	ldr	r7, [sp, #0]
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f7fe febe 	bl	800b428 <_malloc_r>
 800c6ac:	b948      	cbnz	r0, 800c6c2 <__smakebuf_r+0x46>
 800c6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6b2:	059a      	lsls	r2, r3, #22
 800c6b4:	d4ee      	bmi.n	800c694 <__smakebuf_r+0x18>
 800c6b6:	f023 0303 	bic.w	r3, r3, #3
 800c6ba:	f043 0302 	orr.w	r3, r3, #2
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	e7e2      	b.n	800c688 <__smakebuf_r+0xc>
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	6020      	str	r0, [r4, #0]
 800c6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6d2:	b15b      	cbz	r3, 800c6ec <__smakebuf_r+0x70>
 800c6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f81d 	bl	800c718 <_isatty_r>
 800c6de:	b128      	cbz	r0, 800c6ec <__smakebuf_r+0x70>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	431d      	orrs	r5, r3
 800c6f0:	81a5      	strh	r5, [r4, #12]
 800c6f2:	e7cf      	b.n	800c694 <__smakebuf_r+0x18>

0800c6f4 <_fstat_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	@ (800c714 <_fstat_r+0x20>)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4608      	mov	r0, r1
 800c6fe:	4611      	mov	r1, r2
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	f7f5 f9c7 	bl	8001a94 <_fstat>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d102      	bne.n	800c710 <_fstat_r+0x1c>
 800c70a:	682b      	ldr	r3, [r5, #0]
 800c70c:	b103      	cbz	r3, 800c710 <_fstat_r+0x1c>
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	bd38      	pop	{r3, r4, r5, pc}
 800c712:	bf00      	nop
 800c714:	20002144 	.word	0x20002144

0800c718 <_isatty_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d06      	ldr	r5, [pc, #24]	@ (800c734 <_isatty_r+0x1c>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f5 f9c6 	bl	8001ab4 <_isatty>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_isatty_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_isatty_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	20002144 	.word	0x20002144

0800c738 <_init>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	bf00      	nop
 800c73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73e:	bc08      	pop	{r3}
 800c740:	469e      	mov	lr, r3
 800c742:	4770      	bx	lr

0800c744 <_fini>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr
