
PRIM-projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800cd88  0800cd88  0000dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d160  0800d160  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d164  0800d164  0000e164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d168  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  200002c4  0800d42c  0000f2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002154  0800d42c  00010154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea1  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a03  00000000  00000000  00024195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00027b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6d  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a53a  00000000  00000000  00029d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ec8  00000000  00000000  0004423f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fac3  00000000  00000000  0005e107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edbca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e58  00000000  00000000  000edc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f3a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd70 	.word	0x0800cd70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800cd70 	.word	0x0800cd70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <i2c1_pisiRegister>:
void initGyro(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	230a      	movs	r3, #10
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	1d7b      	adds	r3, r7, #5
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <i2c1_pisiRegister+0x40>)
 8000ed8:	f001 fa9a 	bl	8002410 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002e0 	.word	0x200002e0

08000eec <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	603a      	str	r2, [r7, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d906      	bls.n	8000f16 <i2c1_beriRegistre+0x2a>
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b19      	cmp	r3, #25
 8000f0c:	d103      	bne.n	8000f16 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f14:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	b298      	uxth	r0, r3
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	797a      	ldrb	r2, [r7, #5]
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4602      	mov	r2, r0
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <i2c1_beriRegistre+0x58>)
 8000f38:	f001 fb64 	bl	8002604 <HAL_I2C_Mem_Read>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002e0 	.word	0x200002e0

08000f48 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000f4c:	2227      	movs	r2, #39	@ 0x27
 8000f4e:	2120      	movs	r1, #32
 8000f50:	2019      	movs	r0, #25
 8000f52:	f7ff ffa9 	bl	8000ea8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000f56:	2288      	movs	r2, #136	@ 0x88
 8000f58:	2123      	movs	r1, #35	@ 0x23
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f7ff ffa4 	bl	8000ea8 <i2c1_pisiRegister>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f74:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <spi1_beriRegister+0x50>)
 8000f82:	f001 f8cd 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	f107 010e 	add.w	r1, r7, #14
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <spi1_beriRegister+0x54>)
 8000f96:	f004 ffb0 	bl	8005efa <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <spi1_beriRegister+0x50>)
 8000fa0:	f001 f8be 	bl	8002120 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	200003c4 	.word	0x200003c4

08000fbc <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4809      	ldr	r0, [pc, #36]	@ (8001008 <spi1_pisiRegister+0x4c>)
 8000fe4:	f001 f89c 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000fe8:	f107 010e 	add.w	r1, r7, #14
 8000fec:	2302      	movs	r3, #2
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <spi1_pisiRegister+0x50>)
 8000ff2:	f004 fe3e 	bl	8005c72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4803      	ldr	r0, [pc, #12]	@ (8001008 <spi1_pisiRegister+0x4c>)
 8000ffc:	f001 f890 	bl	8002120 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	200003c4 	.word	0x200003c4

08001010 <initGyro>:
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
}

void initGyro() { // ne pozabit klicat te funkcije
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 8001016:	200f      	movs	r0, #15
 8001018:	f7ff ffa4 	bl	8000f64 <spi1_beriRegister>
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2bd4      	cmp	r3, #212	@ 0xd4
 8001024:	d004      	beq.n	8001030 <initGyro+0x20>
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2bd3      	cmp	r3, #211	@ 0xd3
 800102a:	d001      	beq.n	8001030 <initGyro+0x20>
        for (;;);
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 8001030:	210f      	movs	r1, #15
 8001032:	2020      	movs	r0, #32
 8001034:	f7ff ffc2 	bl	8000fbc <spi1_pisiRegister>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fd3f 	bl	8001ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f84f 	bl	80010ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800104e:	f000 f8b5 	bl	80011bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 f997 	bl	8001384 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001056:	f000 f8d1 	bl	80011fc <MX_I2C1_Init>
  MX_I2S2_Init();
 800105a:	f000 f8ff 	bl	800125c <MX_I2S2_Init>
  MX_I2S3_Init();
 800105e:	f000 f92b 	bl	80012b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001062:	f000 f959 	bl	8001318 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001066:	f008 fce7 	bl	8009a38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <main+0x9c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <main+0x9c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001078:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <main+0xa0>)
 8001080:	f001 f84e 	bl	8002120 <HAL_GPIO_WritePin>
  initGyro();
 8001084:	f7ff ffc4 	bl	8001010 <initGyro>

  initOrientation();
 8001088:	f7ff ff5e 	bl	8000f48 <initOrientation>
  __HAL_I2C_ENABLE(&hi2c1);
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <main+0xa4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <main+0xa4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]


  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 800109c:	f64a 23ab 	movw	r3, #43691	@ 0xaaab
 80010a0:	803b      	strh	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(100);
 80010a2:	2064      	movs	r0, #100	@ 0x64
 80010a4:	f000 fd82 	bl	8001bac <HAL_Delay>

	i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 80010a8:	463b      	mov	r3, r7
 80010aa:	1c9a      	adds	r2, r3, #2
 80010ac:	2306      	movs	r3, #6
 80010ae:	2128      	movs	r1, #40	@ 0x28
 80010b0:	2019      	movs	r0, #25
 80010b2:	f7ff ff1b 	bl	8000eec <i2c1_beriRegistre>
	if (CDC_Transmit_FS((uint8_t*)&meritev, 8) != USBD_OK) {
 80010b6:	463b      	mov	r3, r7
 80010b8:	2108      	movs	r1, #8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fd7a 	bl	8009bb4 <CDC_Transmit_FS>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <main+0x90>
	    // Handle transmission error
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // Toggle red LED to indicate an issue
 80010c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <main+0xa8>)
 80010cc:	f001 f841 	bl	8002152 <HAL_GPIO_TogglePin>
	}
//	CDC_Transmit_FS((uint8_t*)&meritev, 8);

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80010d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <main+0xa8>)
 80010d6:	f001 f83c 	bl	8002152 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80010da:	e7e2      	b.n	80010a2 <main+0x62>
 80010dc:	200003c4 	.word	0x200003c4
 80010e0:	40021000 	.word	0x40021000
 80010e4:	200002e0 	.word	0x200002e0
 80010e8:	40020c00 	.word	0x40020c00

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f009 ff17 	bl	800af2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <SystemClock_Config+0xc8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	@ (80011b4 <SystemClock_Config+0xc8>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001160:	23a8      	movs	r3, #168	@ 0xa8
 8001162:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001164:	2304      	movs	r3, #4
 8001166:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001168:	2307      	movs	r3, #7
 800116a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f003 ff1f 	bl	8004fb4 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800117c:	f000 f9dc 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2102      	movs	r1, #2
 800119c:	4618      	mov	r0, r3
 800119e:	f004 f981 	bl	80054a4 <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011a8:	f000 f9c6 	bl	8001538 <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	@ 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011d2:	2301      	movs	r3, #1
 80011d4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80011d6:	23c8      	movs	r3, #200	@ 0xc8
 80011d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80011da:	2305      	movs	r3, #5
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fb69 	bl	80058bc <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80011f0:	f000 f9a2 	bl	8001538 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <MX_I2C1_Init+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <MX_I2C1_Init+0x5c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_I2C1_Init+0x54>)
 800120e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001212:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_I2C1_Init+0x54>)
 800121c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_I2C1_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_I2C1_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_I2C1_Init+0x54>)
 800123c:	f000 ffa4 	bl	8002188 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f977 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002e0 	.word	0x200002e0
 8001254:	40005400 	.word	0x40005400
 8001258:	00061a80 	.word	0x00061a80

0800125c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <MX_I2S2_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_I2S2_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001282:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <MX_I2S2_Init+0x58>)
 8001284:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_I2S2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_I2S2_Init+0x50>)
 8001294:	2201      	movs	r2, #1
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_I2S2_Init+0x50>)
 800129a:	f001 ff99 	bl	80031d0 <HAL_I2S_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f948 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000334 	.word	0x20000334
 80012b0:	40003800 	.word	0x40003800
 80012b4:	00017700 	.word	0x00017700

080012b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_I2S3_Init+0x54>)
 80012be:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <MX_I2S3_Init+0x58>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2S3_Init+0x54>)
 80012c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_I2S3_Init+0x54>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_I2S3_Init+0x54>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <MX_I2S3_Init+0x54>)
 80012d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_I2S3_Init+0x54>)
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <MX_I2S3_Init+0x5c>)
 80012e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_I2S3_Init+0x54>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_I2S3_Init+0x54>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_I2S3_Init+0x54>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_I2S3_Init+0x54>)
 80012f8:	f001 ff6a 	bl	80031d0 <HAL_I2S_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001302:	f000 f919 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000037c 	.word	0x2000037c
 8001310:	40003c00 	.word	0x40003c00
 8001314:	00017700 	.word	0x00017700

08001318 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_SPI1_Init+0x64>)
 800131e:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <MX_SPI1_Init+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_SPI1_Init+0x64>)
 8001324:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001328:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_SPI1_Init+0x64>)
 8001338:	2202      	movs	r2, #2
 800133a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_SPI1_Init+0x64>)
 800133e:	2201      	movs	r2, #1
 8001340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_SPI1_Init+0x64>)
 8001344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001348:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_SPI1_Init+0x64>)
 800134c:	2218      	movs	r2, #24
 800134e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_SPI1_Init+0x64>)
 8001364:	220a      	movs	r2, #10
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_SPI1_Init+0x64>)
 800136a:	f004 fbf9 	bl	8005b60 <HAL_SPI_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001374:	f000 f8e0 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200003c4 	.word	0x200003c4
 8001380:	40013000 	.word	0x40013000

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	@ 0x30
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	4b61      	ldr	r3, [pc, #388]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a59      	ldr	r2, [pc, #356]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b57      	ldr	r3, [pc, #348]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a52      	ldr	r2, [pc, #328]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b50      	ldr	r3, [pc, #320]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b49      	ldr	r3, [pc, #292]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b45      	ldr	r3, [pc, #276]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a44      	ldr	r2, [pc, #272]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b42      	ldr	r3, [pc, #264]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a3d      	ldr	r2, [pc, #244]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <MX_GPIO_Init+0x1a0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2108      	movs	r1, #8
 8001446:	4838      	ldr	r0, [pc, #224]	@ (8001528 <MX_GPIO_Init+0x1a4>)
 8001448:	f000 fe6a 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2101      	movs	r1, #1
 8001450:	4836      	ldr	r0, [pc, #216]	@ (800152c <MX_GPIO_Init+0x1a8>)
 8001452:	f000 fe65 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001456:	2200      	movs	r2, #0
 8001458:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800145c:	4834      	ldr	r0, [pc, #208]	@ (8001530 <MX_GPIO_Init+0x1ac>)
 800145e:	f000 fe5f 	bl	8002120 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001462:	2304      	movs	r3, #4
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	482c      	ldr	r0, [pc, #176]	@ (8001528 <MX_GPIO_Init+0x1a4>)
 8001476:	f000 fccf 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800147a:	2308      	movs	r3, #8
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	@ (8001528 <MX_GPIO_Init+0x1a4>)
 8001492:	f000 fcc1 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001496:	2332      	movs	r3, #50	@ 0x32
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800149a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481f      	ldr	r0, [pc, #124]	@ (8001528 <MX_GPIO_Init+0x1a4>)
 80014ac:	f000 fcb4 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4819      	ldr	r0, [pc, #100]	@ (800152c <MX_GPIO_Init+0x1a8>)
 80014c8:	f000 fca6 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4814      	ldr	r0, [pc, #80]	@ (8001534 <MX_GPIO_Init+0x1b0>)
 80014e2:	f000 fc99 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014e6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_GPIO_Init+0x1ac>)
 8001500:	f000 fc8a 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001504:	2320      	movs	r3, #32
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	@ (8001530 <MX_GPIO_Init+0x1ac>)
 8001518:	f000 fc7e 	bl	8001e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	@ 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40020000 	.word	0x40020000

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001558:	6453      	str	r3, [r2, #68]	@ 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f000 fc06 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_I2C_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_I2C_MspInit+0x88>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_I2C_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	@ (8001620 <HAL_I2C_MspInit+0x8c>)
 80015f0:	f000 fc12 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_I2C_MspInit+0x88>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_I2C_MspInit+0x88>)
 80015fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001602:	6413      	str	r3, [r2, #64]	@ 0x40
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_I2C_MspInit+0x88>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	@ 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40005400 	.word	0x40005400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400

08001624 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a59      	ldr	r2, [pc, #356]	@ (80017a8 <HAL_I2S_MspInit+0x184>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d15c      	bne.n	8001700 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a57      	ldr	r2, [pc, #348]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b55      	ldr	r3, [pc, #340]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a50      	ldr	r2, [pc, #320]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a49      	ldr	r2, [pc, #292]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800169a:	2308      	movs	r3, #8
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016aa:	2305      	movs	r3, #5
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <HAL_I2S_MspInit+0x18c>)
 80016b6:	f000 fbaf 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80016ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016cc:	2305      	movs	r3, #5
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	4837      	ldr	r0, [pc, #220]	@ (80017b4 <HAL_I2S_MspInit+0x190>)
 80016d8:	f000 fb9e 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80016ee:	2306      	movs	r3, #6
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	482e      	ldr	r0, [pc, #184]	@ (80017b4 <HAL_I2S_MspInit+0x190>)
 80016fa:	f000 fb8d 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016fe:	e04f      	b.n	80017a0 <HAL_I2S_MspInit+0x17c>
  else if(hi2s->Instance==SPI3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2c      	ldr	r2, [pc, #176]	@ (80017b8 <HAL_I2S_MspInit+0x194>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d14a      	bne.n	80017a0 <HAL_I2S_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	4a26      	ldr	r2, [pc, #152]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001718:	6413      	str	r3, [r2, #64]	@ 0x40
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_I2S_MspInit+0x188>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800175e:	2310      	movs	r3, #16
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800176e:	2306      	movs	r3, #6
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4810      	ldr	r0, [pc, #64]	@ (80017bc <HAL_I2S_MspInit+0x198>)
 800177a:	f000 fb4d 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800177e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001790:	2306      	movs	r3, #6
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_I2S_MspInit+0x18c>)
 800179c:	f000 fb3c 	bl	8001e18 <HAL_GPIO_Init>
}
 80017a0:	bf00      	nop
 80017a2:	3738      	adds	r7, #56	@ 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40003800 	.word	0x40003800
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40003c00 	.word	0x40003c00
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_SPI_MspInit+0x84>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800181a:	23e0      	movs	r3, #224	@ 0xe0
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <HAL_SPI_MspInit+0x8c>)
 8001836:	f000 faef 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013000 	.word	0x40013000
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 f961 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <OTG_FS_IRQHandler+0x10>)
 80018b6:	f002 fa6f 	bl	8003d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20001904 	.word	0x20001904

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018de:	f009 fb79 	bl	800afd4 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_exit>:

void _exit (int status)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001906:	bf00      	nop
 8001908:	e7fd      	b.n	8001906 <_exit+0x12>

0800190a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e00a      	b.n	8001932 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191c:	f3af 8000 	nop.w
 8001920:	4601      	mov	r1, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf0      	blt.n	800191c <_read+0x12>
  }

  return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e009      	b.n	800196a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	60ba      	str	r2, [r7, #8]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbf1      	blt.n	8001956 <_write+0x12>
  }
  return len;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_close>:

int _close(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a4:	605a      	str	r2, [r3, #4]
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_isatty>:

int _isatty(int file)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f009 fade 	bl	800afd4 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20020000 	.word	0x20020000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	2000041c 	.word	0x2000041c
 8001a4c:	20002158 	.word	0x20002158

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a78:	f7ff ffea 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	@ (8001ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f009 fa9d 	bl	800afe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa6:	f7ff facb 	bl	8001040 <main>
  bx  lr    
 8001aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001ab8:	0800d168 	.word	0x0800d168
  ldr r2, =_sbss
 8001abc:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001ac0:	20002154 	.word	0x20002154

08001ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC_IRQHandler>
	...

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <HAL_Init+0x40>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <HAL_Init+0x40>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	@ (8001b08 <HAL_Init+0x40>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f94f 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff fd22 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f967 	bl	8001dfe <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f92f 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000420 	.word	0x20000420

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000420 	.word	0x20000420

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	@ (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	@ (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff29 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff3e 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff8e 	bl	8001ce8 <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff31 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa2 	bl	8001d50 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e159      	b.n	80020e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8148 	bne.w	80020e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d005      	beq.n	8001e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d130      	bne.n	8001ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d017      	beq.n	8001f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a2 	beq.w	80020e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b57      	ldr	r3, [pc, #348]	@ (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a56      	ldr	r2, [pc, #344]	@ (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b54      	ldr	r3, [pc, #336]	@ (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_GPIO_Init+0x2ec>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a49      	ldr	r2, [pc, #292]	@ (8002108 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x202>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a48      	ldr	r2, [pc, #288]	@ (800210c <HAL_GPIO_Init+0x2f4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x1fe>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a47      	ldr	r2, [pc, #284]	@ (8002110 <HAL_GPIO_Init+0x2f8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x1fa>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <HAL_GPIO_Init+0x2fc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x1f6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a45      	ldr	r2, [pc, #276]	@ (8002118 <HAL_GPIO_Init+0x300>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x1f2>
 8002006:	2304      	movs	r3, #4
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200a:	2307      	movs	r3, #7
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x204>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	@ (8002104 <HAL_GPIO_Init+0x2ec>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b38      	ldr	r3, [pc, #224]	@ (800211c <HAL_GPIO_Init+0x304>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <HAL_GPIO_Init+0x304>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_GPIO_Init+0x304>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a24      	ldr	r2, [pc, #144]	@ (800211c <HAL_GPIO_Init+0x304>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <HAL_GPIO_Init+0x304>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1a      	ldr	r2, [pc, #104]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f aea2 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43d9      	mvns	r1, r3
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e12b      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f9f0 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ec:	f003 fb52 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a81      	ldr	r2, [pc, #516]	@ (80023fc <HAL_I2C_Init+0x274>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d807      	bhi.n	800220c <HAL_I2C_Init+0x84>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a80      	ldr	r2, [pc, #512]	@ (8002400 <HAL_I2C_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e006      	b.n	800221a <HAL_I2C_Init+0x92>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a7d      	ldr	r2, [pc, #500]	@ (8002404 <HAL_I2C_Init+0x27c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0e7      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a78      	ldr	r2, [pc, #480]	@ (8002408 <HAL_I2C_Init+0x280>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9b      	lsrs	r3, r3, #18
 800222c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a6a      	ldr	r2, [pc, #424]	@ (80023fc <HAL_I2C_Init+0x274>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d802      	bhi.n	800225c <HAL_I2C_Init+0xd4>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	e009      	b.n	8002270 <HAL_I2C_Init+0xe8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a69      	ldr	r2, [pc, #420]	@ (800240c <HAL_I2C_Init+0x284>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002282:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	495c      	ldr	r1, [pc, #368]	@ (80023fc <HAL_I2C_Init+0x274>)
 800228c:	428b      	cmp	r3, r1
 800228e:	d819      	bhi.n	80022c4 <HAL_I2C_Init+0x13c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e59      	subs	r1, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fbb1 f3f3 	udiv	r3, r1, r3
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022a4:	400b      	ands	r3, r1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_I2C_Init+0x138>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e59      	subs	r1, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	e051      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c0:	2304      	movs	r3, #4
 80022c2:	e04f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_I2C_Init+0x168>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e012      	b.n	8002316 <HAL_I2C_Init+0x18e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x196>
 800231a:	2301      	movs	r3, #1
 800231c:	e022      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10e      	bne.n	8002344 <HAL_I2C_Init+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e58      	subs	r0, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	440b      	add	r3, r1
 8002334:	fbb0 f3f3 	udiv	r3, r0, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002392:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6911      	ldr	r1, [r2, #16]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	000186a0 	.word	0x000186a0
 8002400:	001e847f 	.word	0x001e847f
 8002404:	003d08ff 	.word	0x003d08ff
 8002408:	431bde83 	.word	0x431bde83
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242a:	f7ff fbb3 	bl	8001b94 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 80d9 	bne.w	80025f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2319      	movs	r3, #25
 8002444:	2201      	movs	r2, #1
 8002446:	496d      	ldr	r1, [pc, #436]	@ (80025fc <HAL_I2C_Mem_Write+0x1ec>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc8b 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e0cc      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Mem_Write+0x56>
 8002462:	2302      	movs	r3, #2
 8002464:	e0c5      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d007      	beq.n	800248c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2221      	movs	r2, #33	@ 0x21
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2240      	movs	r2, #64	@ 0x40
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002600 <HAL_I2C_Mem_Write+0x1f0>)
 80024cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ce:	88f8      	ldrh	r0, [r7, #6]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4603      	mov	r3, r0
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fac2 	bl	8002a68 <I2C_RequestMemoryWrite>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d052      	beq.n	8002590 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e081      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fd50 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b04      	cmp	r3, #4
 8002504:	d107      	bne.n	8002516 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06b      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d11b      	bne.n	8002590 <HAL_I2C_Mem_Write+0x180>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1aa      	bne.n	80024ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fd43 	bl	8003028 <I2C_WaitOnBTFFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d107      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e016      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000

08002604 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	@ 0x30
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800261e:	f7ff fab9 	bl	8001b94 <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b20      	cmp	r3, #32
 800262e:	f040 8214 	bne.w	8002a5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2319      	movs	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	497b      	ldr	r1, [pc, #492]	@ (8002828 <HAL_I2C_Mem_Read+0x224>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fb91 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	e207      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_I2C_Mem_Read+0x56>
 8002656:	2302      	movs	r3, #2
 8002658:	e200      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2222      	movs	r2, #34	@ 0x22
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a5b      	ldr	r2, [pc, #364]	@ (800282c <HAL_I2C_Mem_Read+0x228>)
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c2:	88f8      	ldrh	r0, [r7, #6]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4603      	mov	r3, r0
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa5e 	bl	8002b94 <I2C_RequestMemoryRead>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1bc      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d113      	bne.n	8002712 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e190      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d11b      	bne.n	8002752 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e170      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	2b02      	cmp	r3, #2
 8002758:	d11b      	bne.n	8002792 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002768:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	e150      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a8:	e144      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f200 80f1 	bhi.w	8002996 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d123      	bne.n	8002804 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc79 	bl	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e145      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002802:	e117      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b02      	cmp	r3, #2
 800280a:	d14e      	bne.n	80028aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002812:	2200      	movs	r2, #0
 8002814:	4906      	ldr	r1, [pc, #24]	@ (8002830 <HAL_I2C_Mem_Read+0x22c>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 faa4 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e11a      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000
 8002830:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028a8:	e0c4      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b0:	2200      	movs	r2, #0
 80028b2:	496c      	ldr	r1, [pc, #432]	@ (8002a64 <HAL_I2C_Mem_Read+0x460>)
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa55 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0cb      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	2200      	movs	r2, #0
 800290e:	4955      	ldr	r1, [pc, #340]	@ (8002a64 <HAL_I2C_Mem_Read+0x460>)
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa27 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e09d      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002994:	e04e      	b.n	8002a34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fb8c 	bl	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e058      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d124      	bne.n	8002a34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f aeb6 	bne.w	80027aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	@ 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010004 	.word	0x00010004

08002a68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f960 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab8:	d103      	bne.n	8002ac2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e05f      	b.n	8002b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ad4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	492d      	ldr	r1, [pc, #180]	@ (8002b90 <I2C_RequestMemoryWrite+0x128>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f9bb 	bl	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e04c      	b.n	8002b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b04:	6a39      	ldr	r1, [r7, #32]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa46 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d107      	bne.n	8002b2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e02b      	b.n	8002b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	e021      	b.n	8002b84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa20 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d107      	bne.n	8002b76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e005      	b.n	8002b86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00010002 	.word	0x00010002

08002b94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f8c2 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf4:	d103      	bne.n	8002bfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0aa      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	4952      	ldr	r1, [pc, #328]	@ (8002d60 <I2C_RequestMemoryRead+0x1cc>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f91d 	bl	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e097      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f9a8 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e076      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	611a      	str	r2, [r3, #16]
 8002c7a:	e021      	b.n	8002cc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8c:	6a39      	ldr	r1, [r7, #32]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f982 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d107      	bne.n	8002cb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e050      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb6:	893b      	ldrh	r3, [r7, #8]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f967 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e035      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f82b 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d22:	d103      	bne.n	8002d2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e013      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <I2C_RequestMemoryRead+0x1cc>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f886 	bl	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010002 	.word	0x00010002

08002d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d74:	e048      	b.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d044      	beq.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fe ff09 	bl	8001b94 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d139      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d10d      	bne.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	e00c      	b.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d116      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e023      	b.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10d      	bne.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	e00c      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d093      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e66:	e071      	b.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d123      	bne.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e067      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d041      	beq.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec8:	f7fe fe64 	bl	8001b94 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d136      	bne.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10c      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e00b      	b.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e021      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10c      	bne.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e00b      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f47f af6d 	bne.w	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa4:	e034      	b.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f8e3 	bl	8003172 <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e034      	b.n	8003020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d028      	beq.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fde9 	bl	8001b94 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11d      	bne.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	2b80      	cmp	r3, #128	@ 0x80
 8002fe0:	d016      	beq.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301a:	2b80      	cmp	r3, #128	@ 0x80
 800301c:	d1c3      	bne.n	8002fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f89b 	bl	8003172 <I2C_IsAcknowledgeFailed>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e034      	b.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d028      	beq.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fda1 	bl	8001b94 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11d      	bne.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d016      	beq.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e007      	b.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d1c3      	bne.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c4:	e049      	b.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d119      	bne.n	8003108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0210 	mvn.w	r2, #16
 80030dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e030      	b.n	800316a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7fe fd44 	bl	8001b94 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11d      	bne.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	d016      	beq.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e007      	b.n	800316a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d1ae      	bne.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003188:	d11b      	bne.n	80031c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003192:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e128      	b.n	8003434 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a90      	ldr	r2, [pc, #576]	@ (800343c <HAL_I2S_Init+0x26c>)
 80031fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe fa11 	bl	8001624 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003218:	f023 030f 	bic.w	r3, r3, #15
 800321c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2202      	movs	r2, #2
 8003224:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d060      	beq.n	80032f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003236:	2310      	movs	r3, #16
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b20      	cmp	r3, #32
 8003246:	d802      	bhi.n	800324e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800324e:	2001      	movs	r0, #1
 8003250:	f002 fc24 	bl	8005a9c <HAL_RCCEx_GetPeriphCLKFreq>
 8003254:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325e:	d125      	bne.n	80032ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	3305      	adds	r3, #5
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	e01f      	b.n	80032ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	3305      	adds	r3, #5
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	e00e      	b.n	80032ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	3305      	adds	r3, #5
 80032c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003440 <HAL_I2S_Init+0x270>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d902      	bls.n	8003304 <HAL_I2S_Init+0x134>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2bff      	cmp	r3, #255	@ 0xff
 8003302:	d907      	bls.n	8003314 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e08f      	b.n	8003434 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	ea42 0103 	orr.w	r1, r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	430a      	orrs	r2, r1
 8003326:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6851      	ldr	r1, [r2, #4]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6892      	ldr	r2, [r2, #8]
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68d2      	ldr	r2, [r2, #12]
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6992      	ldr	r2, [r2, #24]
 800334a:	430a      	orrs	r2, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003356:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d161      	bne.n	8003424 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a38      	ldr	r2, [pc, #224]	@ (8003444 <HAL_I2S_Init+0x274>)
 8003364:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a37      	ldr	r2, [pc, #220]	@ (8003448 <HAL_I2S_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x1a4>
 8003370:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x1a8>
 8003374:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	4932      	ldr	r1, [pc, #200]	@ (8003448 <HAL_I2S_Init+0x278>)
 8003380:	428a      	cmp	r2, r1
 8003382:	d101      	bne.n	8003388 <HAL_I2S_Init+0x1b8>
 8003384:	4a31      	ldr	r2, [pc, #196]	@ (800344c <HAL_I2S_Init+0x27c>)
 8003386:	e001      	b.n	800338c <HAL_I2S_Init+0x1bc>
 8003388:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800338c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <HAL_I2S_Init+0x278>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_I2S_Init+0x1d4>
 80033a0:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <HAL_I2S_Init+0x27c>)
 80033a2:	e001      	b.n	80033a8 <HAL_I2S_Init+0x1d8>
 80033a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033a8:	2202      	movs	r2, #2
 80033aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_I2S_Init+0x278>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_I2S_Init+0x1ea>
 80033b6:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_I2S_Init+0x27c>)
 80033b8:	e001      	b.n	80033be <HAL_I2S_Init+0x1ee>
 80033ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ca:	d003      	beq.n	80033d4 <HAL_I2S_Init+0x204>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e001      	b.n	80033e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033fe:	4313      	orrs	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	4313      	orrs	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800340c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <HAL_I2S_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_I2S_Init+0x24c>
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_I2S_Init+0x27c>)
 800341a:	e001      	b.n	8003420 <HAL_I2S_Init+0x250>
 800341c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003420:	897a      	ldrh	r2, [r7, #10]
 8003422:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08003547 	.word	0x08003547
 8003440:	cccccccd 	.word	0xcccccccd
 8003444:	0800365d 	.word	0x0800365d
 8003448:	40003800 	.word	0x40003800
 800344c:	40003400 	.word	0x40003400

08003450 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10e      	bne.n	80034e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffb8 	bl	8003450 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	b292      	uxth	r2, r2
 80034fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10e      	bne.n	800353e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800352e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff93 	bl	8003464 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b04      	cmp	r3, #4
 8003560:	d13a      	bne.n	80035d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d109      	bne.n	8003580 <I2S_IRQHandler+0x3a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003576:	2b40      	cmp	r3, #64	@ 0x40
 8003578:	d102      	bne.n	8003580 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffb4 	bl	80034e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d126      	bne.n	80035d8 <I2S_IRQHandler+0x92>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b20      	cmp	r3, #32
 8003596:	d11f      	bne.n	80035d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff50 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d136      	bne.n	8003652 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d109      	bne.n	8003602 <I2S_IRQHandler+0xbc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f8:	2b80      	cmp	r3, #128	@ 0x80
 80035fa:	d102      	bne.n	8003602 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff45 	bl	800348c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d122      	bne.n	8003652 <I2S_IRQHandler+0x10c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d11b      	bne.n	8003652 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003628:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff13 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a92      	ldr	r2, [pc, #584]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003676:	4b92      	ldr	r3, [pc, #584]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a8b      	ldr	r2, [pc, #556]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003694:	4b8a      	ldr	r3, [pc, #552]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003696:	e001      	b.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003698:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d004      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8099 	bne.w	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d107      	bne.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f925 	bl	8003918 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9c8 	bl	8003a78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d13a      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d035      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6e      	ldr	r2, [pc, #440]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003706:	4b6e      	ldr	r3, [pc, #440]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003708:	e001      	b.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800370a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4969      	ldr	r1, [pc, #420]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003716:	428b      	cmp	r3, r1
 8003718:	d101      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800371a:	4b69      	ldr	r3, [pc, #420]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800371c:	e001      	b.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800371e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003722:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003726:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003736:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fe88 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	f040 80c3 	bne.w	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80bd 	beq.w	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800378e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a49      	ldr	r2, [pc, #292]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800379a:	4b49      	ldr	r3, [pc, #292]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4944      	ldr	r1, [pc, #272]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037ae:	4b44      	ldr	r3, [pc, #272]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fe4a 	bl	8003478 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e4:	e089      	b.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8be 	bl	800397c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8fd 	bl	8003a14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d12f      	bne.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02a      	beq.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800383c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003848:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384a:	e001      	b.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4919      	ldr	r1, [pc, #100]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d101      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800385e:	e001      	b.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003860:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003864:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003868:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fdfa 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b08      	cmp	r3, #8
 800388c:	d136      	bne.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a07      	ldr	r2, [pc, #28]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4902      	ldr	r1, [pc, #8]	@ (80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b2:	428b      	cmp	r3, r1
 80038b4:	d106      	bne.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038b6:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b8:	e006      	b.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038ba:	bf00      	nop
 80038bc:	40003800 	.word	0x40003800
 80038c0:	40003400 	.word	0x40003400
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fdc0 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	e000      	b.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038fa:	bf00      	nop
}
 80038fc:	bf00      	nop
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	1c99      	adds	r1, r3, #2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6251      	str	r1, [r2, #36]	@ 0x24
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003958:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ffc9 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c99      	adds	r1, r3, #2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6251      	str	r1, [r2, #36]	@ 0x24
 800398e:	8819      	ldrh	r1, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <I2SEx_TxISR_I2SExt+0x22>
 800399a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 800399c:	e001      	b.n	80039a2 <I2SEx_TxISR_I2SExt+0x26>
 800399e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039a2:	460a      	mov	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d121      	bne.n	8003a02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a12      	ldr	r2, [pc, #72]	@ (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <I2SEx_TxISR_I2SExt+0x50>
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 80039ca:	e001      	b.n	80039d0 <I2SEx_TxISR_I2SExt+0x54>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	490d      	ldr	r1, [pc, #52]	@ (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d101      	bne.n	80039e0 <I2SEx_TxISR_I2SExt+0x64>
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 80039de:	e001      	b.n	80039e4 <I2SEx_TxISR_I2SExt+0x68>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff81 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40003800 	.word	0x40003800
 8003a10:	40003400 	.word	0x40003400

08003a14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68d8      	ldr	r0, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	1c99      	adds	r1, r3, #2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003a2c:	b282      	uxth	r2, r0
 8003a2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d113      	bne.n	8003a70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff4a 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a20      	ldr	r2, [pc, #128]	@ (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <I2SEx_RxISR_I2SExt+0x16>
 8003a8a:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003a8c:	e001      	b.n	8003a92 <I2SEx_RxISR_I2SExt+0x1a>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a92:	68d8      	ldr	r0, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	1c99      	adds	r1, r3, #2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003a9e:	b282      	uxth	r2, r0
 8003aa0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d121      	bne.n	8003afe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a12      	ldr	r2, [pc, #72]	@ (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <I2SEx_RxISR_I2SExt+0x50>
 8003ac4:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003ac6:	e001      	b.n	8003acc <I2SEx_RxISR_I2SExt+0x54>
 8003ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	490d      	ldr	r1, [pc, #52]	@ (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d101      	bne.n	8003adc <I2SEx_RxISR_I2SExt+0x64>
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003ada:	e001      	b.n	8003ae0 <I2SEx_RxISR_I2SExt+0x68>
 8003adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff03 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40003800 	.word	0x40003800
 8003b0c:	40003400 	.word	0x40003400

08003b10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e101      	b.n	8003d26 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f006 f981 	bl	8009e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2203      	movs	r2, #3
 8003b46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f002 fd68 	bl	8006632 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7c1a      	ldrb	r2, [r3, #16]
 8003b6a:	f88d 2000 	strb.w	r2, [sp]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b72:	f002 fc47 	bl	8006404 <USB_CoreInit>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0ce      	b.n	8003d26 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f002 fd60 	bl	8006654 <USB_SetCurrentMode>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0bf      	b.n	8003d26 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e04a      	b.n	8003c42 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3315      	adds	r3, #21
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3314      	adds	r3, #20
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	b298      	uxth	r0, r3
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	332e      	adds	r3, #46	@ 0x2e
 8003be8:	4602      	mov	r2, r0
 8003bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	331c      	adds	r3, #28
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	3320      	adds	r3, #32
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3324      	adds	r3, #36	@ 0x24
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	791b      	ldrb	r3, [r3, #4]
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3af      	bcc.n	8003bac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e044      	b.n	8003cdc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003caa:	7bfa      	ldrb	r2, [r7, #15]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3b5      	bcc.n	8003c52 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7c1a      	ldrb	r2, [r3, #16]
 8003cee:	f88d 2000 	strb.w	r2, [sp]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf6:	f002 fcf9 	bl	80066ec <USB_DevInit>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e00c      	b.n	8003d26 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 fd43 	bl	80077aa <USB_DevDisconnect>

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_PCD_Start+0x1c>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e022      	b.n	8003d90 <HAL_PCD_Start+0x62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fc4a 	bl	8006610 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 fcf1 	bl	8007768 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b08d      	sub	sp, #52	@ 0x34
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fdaf 	bl	8007912 <USB_GetMode>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 848c 	bne.w	80046d4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 fd13 	bl	80077ec <USB_ReadInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8482 	beq.w	80046d2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fd00 	bl	80077ec <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d107      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 0202 	and.w	r2, r2, #2
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 fcee 	bl	80077ec <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d161      	bne.n	8003ede <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0210 	bic.w	r2, r2, #16
 8003e28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	0c5b      	lsrs	r3, r3, #17
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d124      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d035      	beq.n	8003ece <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6a38      	ldr	r0, [r7, #32]
 8003e76:	f003 fb25 	bl	80074c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e86:	441a      	add	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e98:	441a      	add	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	e016      	b.n	8003ece <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	0c5b      	lsrs	r3, r3, #17
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d110      	bne.n	8003ece <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6a38      	ldr	r0, [r7, #32]
 8003eb8:	f003 fb04 	bl	80074c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec8:	441a      	add	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0210 	orr.w	r2, r2, #16
 8003edc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 fc82 	bl	80077ec <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ef2:	f040 80a7 	bne.w	8004044 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f003 fc87 	bl	8007812 <USB_ReadDevAllOutEpInterrupt>
 8003f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f06:	e099      	b.n	800403c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 808e 	beq.w	8004030 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f003 fcab 	bl	800787a <USB_ReadDevOutEPInterrupt>
 8003f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2301      	movs	r3, #1
 8003f40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fea3 	bl	8004c90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f60:	461a      	mov	r2, r3
 8003f62:	2308      	movs	r3, #8
 8003f64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 ff79 	bl	8004e60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f84:	461a      	mov	r2, r3
 8003f86:	2310      	movs	r3, #16
 8003f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d030      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b80      	cmp	r3, #128	@ 0x80
 8003f9e:	d109      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	78db      	ldrb	r3, [r3, #3]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f006 f83a 	bl	800a058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2320      	movs	r3, #32
 8004010:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004028:	461a      	mov	r2, r3
 800402a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800402e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	3301      	adds	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	f47f af62 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fbcf 	bl	80077ec <USB_ReadInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004058:	f040 80db 	bne.w	8004212 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f003 fbf0 	bl	8007846 <USB_ReadDevAllInEpInterrupt>
 8004066:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800406c:	e0cd      	b.n	800420a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80c2 	beq.w	80041fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f003 fc16 	bl	80078b6 <USB_ReadDevInEPInterrupt>
 800408a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d057      	beq.n	8004146 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	2201      	movs	r2, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69f9      	ldr	r1, [r7, #28]
 80040b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040b6:	4013      	ands	r3, r2
 80040b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c6:	461a      	mov	r2, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	799b      	ldrb	r3, [r3, #6]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d132      	bne.n	800413a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3320      	adds	r3, #32
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4403      	add	r3, r0
 80040f4:	331c      	adds	r3, #28
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4419      	add	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4403      	add	r3, r0
 8004108:	3320      	adds	r3, #32
 800410a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <HAL_PCD_IRQHandler+0x3a2>
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004132:	461a      	mov	r2, r3
 8004134:	2101      	movs	r1, #1
 8004136:	f003 fc1d 	bl	8007974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	b2db      	uxtb	r3, r3
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f005 ff0e 	bl	8009f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415c:	461a      	mov	r2, r3
 800415e:	2308      	movs	r3, #8
 8004160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	2310      	movs	r3, #16
 800417c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004194:	461a      	mov	r2, r3
 8004196:	2340      	movs	r3, #64	@ 0x40
 8004198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d023      	beq.n	80041ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a6:	6a38      	ldr	r0, [r7, #32]
 80041a8:	f002 fc04 	bl	80069b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3310      	adds	r3, #16
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	78db      	ldrb	r3, [r3, #3]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f005 ff51 	bl	800a07c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e6:	461a      	mov	r2, r3
 80041e8:	2302      	movs	r3, #2
 80041ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fcbd 	bl	8004b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	3301      	adds	r3, #1
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f af2e 	bne.w	800406e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f003 fae8 	bl	80077ec <USB_ReadInterrupts>
 800421c:	4603      	mov	r3, r0
 800421e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004226:	d122      	bne.n	800426e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004242:	2b01      	cmp	r3, #1
 8004244:	d108      	bne.n	8004258 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800424e:	2100      	movs	r1, #0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fea3 	bl	8004f9c <HAL_PCDEx_LPM_Callback>
 8004256:	e002      	b.n	800425e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f005 feef 	bl	800a03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800426c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f003 faba 	bl	80077ec <USB_ReadInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004282:	d112      	bne.n	80042aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d102      	bne.n	800429a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f005 feab 	bl	8009ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042a8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fa9c 	bl	80077ec <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042be:	f040 80b7 	bne.w	8004430 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2110      	movs	r1, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f002 fb69 	bl	80069b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e6:	e046      	b.n	8004376 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004316:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800431a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800432e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800434a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800434e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800436a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800436e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	3301      	adds	r3, #1
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	791b      	ldrb	r3, [r3, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	4293      	cmp	r3, r2
 8004380:	d3b2      	bcc.n	80042e8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004390:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004394:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7bdb      	ldrb	r3, [r3, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ae:	f043 030b 	orr.w	r3, r3, #11
 80043b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043c4:	f043 030b 	orr.w	r3, r3, #11
 80043c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043ca:	e015      	b.n	80043f8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043de:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80043e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f2:	f043 030b 	orr.w	r3, r3, #11
 80043f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004406:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800440a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800441a:	461a      	mov	r2, r3
 800441c:	f003 faaa 	bl	8007974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800442e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 f9d9 	bl	80077ec <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004444:	d123      	bne.n	800448e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fa6f 	bl	800792e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f002 fb26 	bl	8006aa6 <USB_GetDevSpeed>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681c      	ldr	r4, [r3, #0]
 8004466:	f001 fa09 	bl	800587c <HAL_RCC_GetHCLKFreq>
 800446a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004470:	461a      	mov	r2, r3
 8004472:	4620      	mov	r0, r4
 8004474:	f002 f82a 	bl	80064cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f005 fd9a 	bl	8009fb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800448c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f003 f9aa 	bl	80077ec <USB_ReadInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d10a      	bne.n	80044b8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f005 fd77 	bl	8009f96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f002 0208 	and.w	r2, r2, #8
 80044b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 f995 	bl	80077ec <USB_ReadInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d123      	bne.n	8004514 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d8:	2301      	movs	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
 80044dc:	e014      	b.n	8004508 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb0a 	bl	8004b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	3301      	adds	r3, #1
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	791b      	ldrb	r3, [r3, #4]
 800450c:	461a      	mov	r2, r3
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	4293      	cmp	r3, r2
 8004512:	d3e4      	bcc.n	80044de <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f003 f967 	bl	80077ec <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004528:	d13c      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	e02b      	b.n	8004588 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3318      	adds	r3, #24
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d115      	bne.n	8004582 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004556:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	da12      	bge.n	8004582 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3317      	adds	r3, #23
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 faca 	bl	8004b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	461a      	mov	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	4293      	cmp	r3, r2
 8004592:	d3cd      	bcc.n	8004530 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 f91f 	bl	80077ec <USB_ReadInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045b8:	d156      	bne.n	8004668 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ba:	2301      	movs	r3, #1
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045be:	e045      	b.n	800464c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d12e      	bne.n	8004646 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da2b      	bge.n	8004646 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80045fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045fe:	429a      	cmp	r2, r3
 8004600:	d121      	bne.n	8004646 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800463e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004642:	6053      	str	r3, [r2, #4]
            break;
 8004644:	e008      	b.n	8004658 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	3301      	adds	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	791b      	ldrb	r3, [r3, #4]
 8004650:	461a      	mov	r2, r3
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	4293      	cmp	r3, r2
 8004656:	d3b3      	bcc.n	80045c0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f003 f8bd 	bl	80077ec <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467c:	d10a      	bne.n	8004694 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f005 fd0e 	bl	800a0a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f003 f8a7 	bl	80077ec <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d115      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f005 fcfe 	bl	800a0bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	e000      	b.n	80046d4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80046d2:	bf00      	nop
    }
  }
}
 80046d4:	3734      	adds	r7, #52	@ 0x34
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}

080046da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_PCD_SetAddress+0x1a>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e012      	b.n	800471a <HAL_PCD_SetAddress+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f003 f806 	bl	800771c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	461a      	mov	r2, r3
 8004730:	4603      	mov	r3, r0
 8004732:	70fb      	strb	r3, [r7, #3]
 8004734:	460b      	mov	r3, r1
 8004736:	803b      	strh	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004744:	2b00      	cmp	r3, #0
 8004746:	da0f      	bge.n	8004768 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	3310      	adds	r3, #16
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	705a      	strb	r2, [r3, #1]
 8004766:	e00f      	b.n	8004788 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	b2da      	uxtb	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004794:	883b      	ldrh	r3, [r7, #0]
 8004796:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	78ba      	ldrb	r2, [r7, #2]
 80047a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047b6:	78bb      	ldrb	r3, [r7, #2]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d102      	bne.n	80047c2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_PCD_EP_Open+0xae>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e00e      	b.n	80047ee <HAL_PCD_EP_Open+0xcc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 f986 	bl	8006af0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80047ec:	7afb      	ldrb	r3, [r7, #11]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	da0f      	bge.n	800482a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3310      	adds	r3, #16
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	3304      	adds	r3, #4
 8004820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	705a      	strb	r2, [r3, #1]
 8004828:	e00f      	b.n	800484a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	3304      	adds	r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_PCD_EP_Close+0x6e>
 8004860:	2302      	movs	r3, #2
 8004862:	e00e      	b.n	8004882 <HAL_PCD_EP_Close+0x8c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	4618      	mov	r0, r3
 8004874:	f002 f9c4 	bl	8006c00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	460b      	mov	r3, r1
 8004898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2200      	movs	r2, #0
 80048c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	799b      	ldrb	r3, [r3, #6]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d102      	bne.n	80048e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	799b      	ldrb	r3, [r3, #6]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	f002 fa61 	bl	8006db8 <USB_EPStartXfer>

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 020f 	and.w	r2, r3, #15
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	460b      	mov	r3, r1
 800493e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004940:	7afb      	ldrb	r3, [r7, #11]
 8004942:	f003 020f 	and.w	r2, r3, #15
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	3310      	adds	r3, #16
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2200      	movs	r2, #0
 8004968:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2201      	movs	r2, #1
 800496e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	b2da      	uxtb	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	799b      	ldrb	r3, [r3, #6]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	799b      	ldrb	r3, [r3, #6]
 8004992:	461a      	mov	r2, r3
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	f002 fa0f 	bl	8006db8 <USB_EPStartXfer>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	7912      	ldrb	r2, [r2, #4]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e04f      	b.n	8004a62 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da0f      	bge.n	80049ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	3310      	adds	r3, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	3304      	adds	r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	705a      	strb	r2, [r3, #1]
 80049e8:	e00d      	b.n	8004a06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	3304      	adds	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_PCD_EP_SetStall+0x82>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e01d      	b.n	8004a62 <HAL_PCD_EP_SetStall+0xbe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fd9d 	bl	8007574 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7999      	ldrb	r1, [r3, #6]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a52:	461a      	mov	r2, r3
 8004a54:	f002 ff8e 	bl	8007974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	7912      	ldrb	r2, [r2, #4]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e042      	b.n	8004b0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da0f      	bge.n	8004ab0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	3310      	adds	r3, #16
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	705a      	strb	r2, [r3, #1]
 8004aae:	e00f      	b.n	8004ad0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_PCD_EP_ClrStall+0x86>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e00e      	b.n	8004b0e <HAL_PCD_EP_ClrStall+0xa4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f002 fda6 	bl	8007650 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da0c      	bge.n	8004b44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	3310      	adds	r3, #16
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e00c      	b.n	8004b5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 fbc5 	bl	80072f4 <USB_EPStopXfer>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	@ 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3310      	adds	r3, #16
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d901      	bls.n	8004bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e06b      	b.n	8004c88 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d902      	bls.n	8004bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bd4:	e02a      	b.n	8004c2c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d902      	bls.n	8004bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3303      	adds	r3, #3
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68d9      	ldr	r1, [r3, #12]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f002 fc1a 	bl	8007448 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	441a      	add	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	441a      	add	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d809      	bhi.n	8004c56 <PCD_WriteEmptyTxFifo+0xde>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d203      	bcs.n	8004c56 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1bf      	bne.n	8004bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d811      	bhi.n	8004c86 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	2201      	movs	r2, #1
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	6939      	ldr	r1, [r7, #16]
 8004c7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c82:	4013      	ands	r3, r2
 8004c84:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	333c      	adds	r3, #60	@ 0x3c
 8004ca8:	3304      	adds	r3, #4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	799b      	ldrb	r3, [r3, #6]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d17b      	bne.n	8004dbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4a61      	ldr	r2, [pc, #388]	@ (8004e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	f240 80b9 	bls.w	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80b3 	beq.w	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf8:	6093      	str	r3, [r2, #8]
 8004cfa:	e0a7      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2320      	movs	r3, #32
 8004d16:	6093      	str	r3, [r2, #8]
 8004d18:	e098      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 8093 	bne.w	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4a4b      	ldr	r2, [pc, #300]	@ (8004e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d90f      	bls.n	8004d4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4a:	6093      	str	r3, [r2, #8]
 8004d4c:	e07e      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4413      	add	r3, r2
 8004d60:	3304      	adds	r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d114      	bne.n	8004db0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	f002 fdea 	bl	8007974 <USB_EP0_OutStart>
 8004da0:	e006      	b.n	8004db0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	441a      	add	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f005 f8b8 	bl	8009f2c <HAL_PCD_DataOutStageCallback>
 8004dbc:	e046      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d124      	bne.n	8004e10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de2:	6093      	str	r3, [r2, #8]
 8004de4:	e032      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2320      	movs	r3, #32
 8004e00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f005 f88f 	bl	8009f2c <HAL_PCD_DataOutStageCallback>
 8004e0e:	e01d      	b.n	8004e4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d114      	bne.n	8004e40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d108      	bne.n	8004e40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	f002 fd9a 	bl	8007974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f005 f870 	bl	8009f2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	4f54300a 	.word	0x4f54300a
 8004e5c:	4f54310a 	.word	0x4f54310a

08004e60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	333c      	adds	r3, #60	@ 0x3c
 8004e78:	3304      	adds	r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d90e      	bls.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f005 f827 	bl	8009f08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d90c      	bls.n	8004edc <PCD_EP_OutSetupPacket_int+0x7c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	799b      	ldrb	r3, [r3, #6]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d108      	bne.n	8004edc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	f002 fd4c 	bl	8007974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	4f54300a 	.word	0x4f54300a

08004eec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f0a:	883b      	ldrh	r3, [r7, #0]
 8004f0c:	0419      	lsls	r1, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f18:	e028      	b.n	8004f6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	e00d      	b.n	8004f4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3340      	adds	r3, #64	@ 0x40
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	3301      	adds	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3ec      	bcc.n	8004f2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f54:	883b      	ldrh	r3, [r7, #0]
 8004f56:	0418      	lsls	r0, r3, #16
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	4302      	orrs	r2, r0
 8004f64:	3340      	adds	r3, #64	@ 0x40
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e267      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d075      	beq.n	80050be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fd2:	4b88      	ldr	r3, [pc, #544]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fde:	4b85      	ldr	r3, [pc, #532]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d112      	bne.n	8005010 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fea:	4b82      	ldr	r3, [pc, #520]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05b      	beq.n	80050bc <HAL_RCC_OscConfig+0x108>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d157      	bne.n	80050bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e242      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x74>
 800501a:	4b76      	ldr	r3, [pc, #472]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a75      	ldr	r2, [pc, #468]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x98>
 8005032:	4b70      	ldr	r3, [pc, #448]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a6f      	ldr	r2, [pc, #444]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b6d      	ldr	r3, [pc, #436]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6c      	ldr	r2, [pc, #432]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 800504c:	4b69      	ldr	r3, [pc, #420]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a68      	ldr	r2, [pc, #416]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a65      	ldr	r2, [pc, #404]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fc fd92 	bl	8001b94 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fc fd8e 	bl	8001b94 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e207      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b5b      	ldr	r3, [pc, #364]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xc0>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fc fd7e 	bl	8001b94 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509c:	f7fc fd7a 	bl	8001b94 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1f3      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0xe8>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d063      	beq.n	8005192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ca:	4b4a      	ldr	r3, [pc, #296]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d11c      	bne.n	800511c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e2:	4b44      	ldr	r3, [pc, #272]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d116      	bne.n	800511c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	4b41      	ldr	r3, [pc, #260]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_RCC_OscConfig+0x152>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e1c7      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005106:	4b3b      	ldr	r3, [pc, #236]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4937      	ldr	r1, [pc, #220]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	e03a      	b.n	8005192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d020      	beq.n	8005166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005124:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <HAL_RCC_OscConfig+0x244>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512a:	f7fc fd33 	bl	8001b94 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005132:	f7fc fd2f 	bl	8001b94 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1a8      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	4b2b      	ldr	r3, [pc, #172]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005150:	4b28      	ldr	r3, [pc, #160]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4925      	ldr	r1, [pc, #148]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]
 8005164:	e015      	b.n	8005192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005166:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <HAL_RCC_OscConfig+0x244>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fc fd12 	bl	8001b94 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005174:	f7fc fd0e 	bl	8001b94 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e187      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	4b1b      	ldr	r3, [pc, #108]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d036      	beq.n	800520c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <HAL_RCC_OscConfig+0x248>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc fcf2 	bl	8001b94 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fc fcee 	bl	8001b94 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e167      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <HAL_RCC_OscConfig+0x240>)
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x200>
 80051d2:	e01b      	b.n	800520c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d4:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <HAL_RCC_OscConfig+0x248>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051da:	f7fc fcdb 	bl	8001b94 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	e00e      	b.n	8005200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e2:	f7fc fcd7 	bl	8001b94 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d907      	bls.n	8005200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e150      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470000 	.word	0x42470000
 80051fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005200:	4b88      	ldr	r3, [pc, #544]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ea      	bne.n	80051e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8097 	beq.w	8005348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521e:	4b81      	ldr	r3, [pc, #516]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	4b7d      	ldr	r3, [pc, #500]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	4a7c      	ldr	r2, [pc, #496]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005238:	6413      	str	r3, [r2, #64]	@ 0x40
 800523a:	4b7a      	ldr	r3, [pc, #488]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	4b77      	ldr	r3, [pc, #476]	@ (8005428 <HAL_RCC_OscConfig+0x474>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d118      	bne.n	8005288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005256:	4b74      	ldr	r3, [pc, #464]	@ (8005428 <HAL_RCC_OscConfig+0x474>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a73      	ldr	r2, [pc, #460]	@ (8005428 <HAL_RCC_OscConfig+0x474>)
 800525c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005262:	f7fc fc97 	bl	8001b94 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800526a:	f7fc fc93 	bl	8001b94 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e10c      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <HAL_RCC_OscConfig+0x474>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d106      	bne.n	800529e <HAL_RCC_OscConfig+0x2ea>
 8005290:	4b64      	ldr	r3, [pc, #400]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a63      	ldr	r2, [pc, #396]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
 800529c:	e01c      	b.n	80052d8 <HAL_RCC_OscConfig+0x324>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x30c>
 80052a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052ac:	f043 0304 	orr.w	r3, r3, #4
 80052b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052be:	e00b      	b.n	80052d8 <HAL_RCC_OscConfig+0x324>
 80052c0:	4b58      	ldr	r3, [pc, #352]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c4:	4a57      	ldr	r2, [pc, #348]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80052cc:	4b55      	ldr	r3, [pc, #340]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d0:	4a54      	ldr	r2, [pc, #336]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f023 0304 	bic.w	r3, r3, #4
 80052d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d015      	beq.n	800530c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fc fc58 	bl	8001b94 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fc fc54 	bl	8001b94 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0cb      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	4b49      	ldr	r3, [pc, #292]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ee      	beq.n	80052e8 <HAL_RCC_OscConfig+0x334>
 800530a:	e014      	b.n	8005336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530c:	f7fc fc42 	bl	8001b94 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fc fc3e 	bl	8001b94 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e0b5      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532a:	4b3e      	ldr	r3, [pc, #248]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ee      	bne.n	8005314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533c:	4b39      	ldr	r3, [pc, #228]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	4a38      	ldr	r2, [pc, #224]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80a1 	beq.w	8005494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005352:	4b34      	ldr	r3, [pc, #208]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b08      	cmp	r3, #8
 800535c:	d05c      	beq.n	8005418 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d141      	bne.n	80053ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005366:	4b31      	ldr	r3, [pc, #196]	@ (800542c <HAL_RCC_OscConfig+0x478>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fc fc12 	bl	8001b94 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005374:	f7fc fc0e 	bl	8001b94 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e087      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005386:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	019b      	lsls	r3, r3, #6
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	3b01      	subs	r3, #1
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	491b      	ldr	r1, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053bc:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <HAL_RCC_OscConfig+0x478>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fc fbe7 	bl	8001b94 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ca:	f7fc fbe3 	bl	8001b94 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e05c      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053dc:	4b11      	ldr	r3, [pc, #68]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x416>
 80053e8:	e054      	b.n	8005494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ea:	4b10      	ldr	r3, [pc, #64]	@ (800542c <HAL_RCC_OscConfig+0x478>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc fbd0 	bl	8001b94 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f8:	f7fc fbcc 	bl	8001b94 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e045      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_OscConfig+0x470>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x444>
 8005416:	e03d      	b.n	8005494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d107      	bne.n	8005430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e038      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
 8005424:	40023800 	.word	0x40023800
 8005428:	40007000 	.word	0x40007000
 800542c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005430:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCC_OscConfig+0x4ec>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d028      	beq.n	8005490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d121      	bne.n	8005490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d11a      	bne.n	8005490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005468:	4293      	cmp	r3, r2
 800546a:	d111      	bne.n	8005490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	3b01      	subs	r3, #1
 800547a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d107      	bne.n	8005490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800

080054a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0cc      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054b8:	4b68      	ldr	r3, [pc, #416]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d90c      	bls.n	80054e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b65      	ldr	r3, [pc, #404]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b63      	ldr	r3, [pc, #396]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0b8      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f8:	4b59      	ldr	r3, [pc, #356]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4a58      	ldr	r2, [pc, #352]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005510:	4b53      	ldr	r3, [pc, #332]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a52      	ldr	r2, [pc, #328]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800551a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551c:	4b50      	ldr	r3, [pc, #320]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	494d      	ldr	r1, [pc, #308]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d044      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	4b47      	ldr	r3, [pc, #284]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d119      	bne.n	8005582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e07f      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d003      	beq.n	8005562 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800555e:	2b03      	cmp	r3, #3
 8005560:	d107      	bne.n	8005572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005562:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e06f      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005572:	4b3b      	ldr	r3, [pc, #236]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e067      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005582:	4b37      	ldr	r3, [pc, #220]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 0203 	bic.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4934      	ldr	r1, [pc, #208]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	4313      	orrs	r3, r2
 8005592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005594:	f7fc fafe 	bl	8001b94 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559c:	f7fc fafa 	bl	8001b94 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e04f      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 020c 	and.w	r2, r3, #12
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d1eb      	bne.n	800559c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055c4:	4b25      	ldr	r3, [pc, #148]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d20c      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d2:	4b22      	ldr	r3, [pc, #136]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e032      	b.n	8005652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f8:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4916      	ldr	r1, [pc, #88]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005616:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	490e      	ldr	r1, [pc, #56]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800562a:	f000 f821 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800562e:	4602      	mov	r2, r0
 8005630:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	490a      	ldr	r1, [pc, #40]	@ (8005664 <HAL_RCC_ClockConfig+0x1c0>)
 800563c:	5ccb      	ldrb	r3, [r1, r3]
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005646:	4b09      	ldr	r3, [pc, #36]	@ (800566c <HAL_RCC_ClockConfig+0x1c8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fa5e 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023c00 	.word	0x40023c00
 8005660:	40023800 	.word	0x40023800
 8005664:	0800cdd0 	.word	0x0800cdd0
 8005668:	20000000 	.word	0x20000000
 800566c:	20000004 	.word	0x20000004

08005670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005674:	b094      	sub	sp, #80	@ 0x50
 8005676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005688:	4b79      	ldr	r3, [pc, #484]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d00d      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005694:	2b08      	cmp	r3, #8
 8005696:	f200 80e1 	bhi.w	800585c <HAL_RCC_GetSysClockFreq+0x1ec>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x34>
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d003      	beq.n	80056aa <HAL_RCC_GetSysClockFreq+0x3a>
 80056a2:	e0db      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056a4:	4b73      	ldr	r3, [pc, #460]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x204>)
 80056a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056a8:	e0db      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056aa:	4b73      	ldr	r3, [pc, #460]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x208>)
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ae:	e0d8      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d063      	beq.n	800578e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	099b      	lsrs	r3, r3, #6
 80056cc:	2200      	movs	r2, #0
 80056ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f04f 0000 	mov.w	r0, #0
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	0159      	lsls	r1, r3, #5
 80056f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f4:	0150      	lsls	r0, r2, #5
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4621      	mov	r1, r4
 80056fc:	1a51      	subs	r1, r2, r1
 80056fe:	6139      	str	r1, [r7, #16]
 8005700:	4629      	mov	r1, r5
 8005702:	eb63 0301 	sbc.w	r3, r3, r1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005714:	4659      	mov	r1, fp
 8005716:	018b      	lsls	r3, r1, #6
 8005718:	4651      	mov	r1, sl
 800571a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800571e:	4651      	mov	r1, sl
 8005720:	018a      	lsls	r2, r1, #6
 8005722:	4651      	mov	r1, sl
 8005724:	ebb2 0801 	subs.w	r8, r2, r1
 8005728:	4659      	mov	r1, fp
 800572a:	eb63 0901 	sbc.w	r9, r3, r1
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800573a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800573e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005742:	4690      	mov	r8, r2
 8005744:	4699      	mov	r9, r3
 8005746:	4623      	mov	r3, r4
 8005748:	eb18 0303 	adds.w	r3, r8, r3
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	462b      	mov	r3, r5
 8005750:	eb49 0303 	adc.w	r3, r9, r3
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005762:	4629      	mov	r1, r5
 8005764:	024b      	lsls	r3, r1, #9
 8005766:	4621      	mov	r1, r4
 8005768:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800576c:	4621      	mov	r1, r4
 800576e:	024a      	lsls	r2, r1, #9
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005776:	2200      	movs	r2, #0
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800577a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005780:	f7fb fa1a 	bl	8000bb8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	e058      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578e:	4b38      	ldr	r3, [pc, #224]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	099b      	lsrs	r3, r3, #6
 8005794:	2200      	movs	r2, #0
 8005796:	4618      	mov	r0, r3
 8005798:	4611      	mov	r1, r2
 800579a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	2300      	movs	r3, #0
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	f04f 0000 	mov.w	r0, #0
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	0159      	lsls	r1, r3, #5
 80057b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ba:	0150      	lsls	r0, r2, #5
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4641      	mov	r1, r8
 80057c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057c6:	4649      	mov	r1, r9
 80057c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057e0:	ebb2 040a 	subs.w	r4, r2, sl
 80057e4:	eb63 050b 	sbc.w	r5, r3, fp
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	00eb      	lsls	r3, r5, #3
 80057f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057f6:	00e2      	lsls	r2, r4, #3
 80057f8:	4614      	mov	r4, r2
 80057fa:	461d      	mov	r5, r3
 80057fc:	4643      	mov	r3, r8
 80057fe:	18e3      	adds	r3, r4, r3
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	464b      	mov	r3, r9
 8005804:	eb45 0303 	adc.w	r3, r5, r3
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005816:	4629      	mov	r1, r5
 8005818:	028b      	lsls	r3, r1, #10
 800581a:	4621      	mov	r1, r4
 800581c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005820:	4621      	mov	r1, r4
 8005822:	028a      	lsls	r2, r1, #10
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582a:	2200      	movs	r2, #0
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005834:	f7fb f9c0 	bl	8000bb8 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4613      	mov	r3, r2
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x200>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	3301      	adds	r3, #1
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800585a:	e002      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800585c:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x204>)
 800585e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005864:	4618      	mov	r0, r3
 8005866:	3750      	adds	r7, #80	@ 0x50
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586e:	bf00      	nop
 8005870:	40023800 	.word	0x40023800
 8005874:	00f42400 	.word	0x00f42400
 8005878:	007a1200 	.word	0x007a1200

0800587c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005880:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <HAL_RCC_GetHCLKFreq+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000000 	.word	0x20000000

08005894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005898:	f7ff fff0 	bl	800587c <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0a9b      	lsrs	r3, r3, #10
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4903      	ldr	r1, [pc, #12]	@ (80058b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800
 80058b8:	0800cde0 	.word	0x0800cde0

080058bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d038      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058e4:	4b68      	ldr	r3, [pc, #416]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ea:	f7fc f953 	bl	8001b94 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058f2:	f7fc f94f 	bl	8001b94 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e0bd      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005904:	4b61      	ldr	r3, [pc, #388]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	495a      	ldr	r1, [pc, #360]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800592a:	4b57      	ldr	r3, [pc, #348]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005930:	f7fc f930 	bl	8001b94 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005938:	f7fc f92c 	bl	8001b94 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e09a      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594a:	4b50      	ldr	r3, [pc, #320]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8083 	beq.w	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	4b48      	ldr	r3, [pc, #288]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	4a47      	ldr	r2, [pc, #284]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005972:	6413      	str	r3, [r2, #64]	@ 0x40
 8005974:	4b45      	ldr	r3, [pc, #276]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005980:	4b43      	ldr	r3, [pc, #268]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a42      	ldr	r2, [pc, #264]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800598c:	f7fc f902 	bl	8001b94 <HAL_GetTick>
 8005990:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005994:	f7fc f8fe 	bl	8001b94 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e06c      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059b2:	4b36      	ldr	r3, [pc, #216]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ba:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d02f      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d028      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059d0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059da:	4b2e      	ldr	r3, [pc, #184]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059e6:	4a29      	ldr	r2, [pc, #164]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ec:	4b27      	ldr	r3, [pc, #156]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d114      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fc f8cc 	bl	8001b94 <HAL_GetTick>
 80059fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	e00a      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f7fc f8c8 	bl	8001b94 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e034      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ee      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2e:	d10d      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005a30:	4b16      	ldr	r3, [pc, #88]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a44:	4911      	ldr	r1, [pc, #68]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	608b      	str	r3, [r1, #8]
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4a0e      	ldr	r2, [pc, #56]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a56:	6093      	str	r3, [r2, #8]
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a64:	4909      	ldr	r1, [pc, #36]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7d1a      	ldrb	r2, [r3, #20]
 8005a7a:	4b07      	ldr	r3, [pc, #28]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005a7c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	42470068 	.word	0x42470068
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40007000 	.word	0x40007000
 8005a94:	42470e40 	.word	0x42470e40
 8005a98:	424711e0 	.word	0x424711e0

08005a9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d141      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005aba:	4b25      	ldr	r3, [pc, #148]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ad0:	d131      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ad2:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ad4:	617b      	str	r3, [r7, #20]
          break;
 8005ad6:	e031      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ae4:	d109      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	e008      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b04:	4a15      	ldr	r2, [pc, #84]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b26:	0f1b      	lsrs	r3, r3, #28
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
          break;
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
          break;
 8005b3a:	bf00      	nop
        }
      }
      break;
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005b3e:	bf00      	nop
    }
  }
  return frequency;
 8005b40:	697b      	ldr	r3, [r7, #20]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	00bb8000 	.word	0x00bb8000
 8005b58:	007a1200 	.word	0x007a1200
 8005b5c:	00f42400 	.word	0x00f42400

08005b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e07b      	b.n	8005c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b82:	d009      	beq.n	8005b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	61da      	str	r2, [r3, #28]
 8005b8a:	e005      	b.n	8005b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fb fe04 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	ea42 0103 	orr.w	r1, r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0104 	and.w	r1, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	f003 0210 	and.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b088      	sub	sp, #32
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c82:	f7fb ff87 	bl	8001b94 <HAL_GetTick>
 8005c86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d001      	beq.n	8005c9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e12a      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0x36>
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e122      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_SPI_Transmit+0x48>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e11b      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d08:	d10f      	bne.n	8005d2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d007      	beq.n	8005d48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d50:	d152      	bne.n	8005df8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Transmit+0xee>
 8005d5a:	8b7b      	ldrh	r3, [r7, #26]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d145      	bne.n	8005dec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d84:	e032      	b.n	8005dec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d112      	bne.n	8005dba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d98:	881a      	ldrh	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005db8:	e018      	b.n	8005dec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dba:	f7fb feeb 	bl	8001b94 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d803      	bhi.n	8005dd2 <HAL_SPI_Transmit+0x160>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd0:	d102      	bne.n	8005dd8 <HAL_SPI_Transmit+0x166>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e082      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1c7      	bne.n	8005d86 <HAL_SPI_Transmit+0x114>
 8005df6:	e053      	b.n	8005ea0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_Transmit+0x194>
 8005e00:	8b7b      	ldrh	r3, [r7, #26]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d147      	bne.n	8005e96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e2c:	e033      	b.n	8005e96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d113      	bne.n	8005e64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e62:	e018      	b.n	8005e96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e64:	f7fb fe96 	bl	8001b94 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d803      	bhi.n	8005e7c <HAL_SPI_Transmit+0x20a>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d102      	bne.n	8005e82 <HAL_SPI_Transmit+0x210>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e02d      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1c6      	bne.n	8005e2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fa59 	bl	800635c <SPI_EndRxTxTransaction>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b08a      	sub	sp, #40	@ 0x28
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
 8005f06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f0c:	f7fb fe42 	bl	8001b94 <HAL_GetTick>
 8005f10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f24:	7ffb      	ldrb	r3, [r7, #31]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d00c      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x4a>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f30:	d106      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x46>
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d001      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
 8005f42:	e17f      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x5c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x5c>
 8005f50:	887b      	ldrh	r3, [r7, #2]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e174      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x6e>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e16d      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d003      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2205      	movs	r2, #5
 8005f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	887a      	ldrh	r2, [r7, #2]
 8005f94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	887a      	ldrh	r2, [r7, #2]
 8005fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	887a      	ldrh	r2, [r7, #2]
 8005fac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d007      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe0:	d17e      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0xf6>
 8005fea:	8afb      	ldrh	r3, [r7, #22]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d16c      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006014:	e059      	b.n	80060ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	d11b      	bne.n	800605c <HAL_SPI_TransmitReceive+0x162>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <HAL_SPI_TransmitReceive+0x162>
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	2b01      	cmp	r3, #1
 8006032:	d113      	bne.n	800605c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	881a      	ldrh	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d119      	bne.n	800609e <HAL_SPI_TransmitReceive+0x1a4>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d014      	beq.n	800609e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607e:	b292      	uxth	r2, r2
 8006080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800609a:	2301      	movs	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800609e:	f7fb fd79 	bl	8001b94 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d80d      	bhi.n	80060ca <HAL_SPI_TransmitReceive+0x1d0>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d009      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e0bc      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1a0      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x11c>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d19b      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x11c>
 80060de:	e082      	b.n	80061e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x1f4>
 80060e8:	8afb      	ldrh	r3, [r7, #22]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d171      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006114:	e05d      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d11c      	bne.n	800615e <HAL_SPI_TransmitReceive+0x264>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d017      	beq.n	800615e <HAL_SPI_TransmitReceive+0x264>
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	2b01      	cmp	r3, #1
 8006132:	d114      	bne.n	800615e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	7812      	ldrb	r2, [r2, #0]
 8006140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	d119      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x2a6>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d014      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800619c:	2301      	movs	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061a0:	f7fb fcf8 	bl	8001b94 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d803      	bhi.n	80061b8 <HAL_SPI_TransmitReceive+0x2be>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d102      	bne.n	80061be <HAL_SPI_TransmitReceive+0x2c4>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e038      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d19c      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x21c>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d197      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f8b6 	bl	800635c <SPI_EndRxTxTransaction>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e01d      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006242:	2300      	movs	r3, #0
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3728      	adds	r7, #40	@ 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800625c:	f7fb fc9a 	bl	8001b94 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4413      	add	r3, r2
 800626a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800626c:	f7fb fc92 	bl	8001b94 <HAL_GetTick>
 8006270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	015b      	lsls	r3, r3, #5
 8006278:	0d1b      	lsrs	r3, r3, #20
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006282:	e054      	b.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d050      	beq.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800628c:	f7fb fc82 	bl	8001b94 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	429a      	cmp	r2, r3
 800629a:	d902      	bls.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d13d      	bne.n	800631e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ba:	d111      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c4:	d004      	beq.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ce:	d107      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e8:	d10f      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e017      	b.n	800634e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3b01      	subs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d19b      	bne.n	8006284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000000 	.word	0x20000000

0800635c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2201      	movs	r2, #1
 8006370:	2102      	movs	r1, #2
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff6a 	bl	800624c <SPI_WaitFlagStateUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e032      	b.n	80063f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <SPI_EndRxTxTransaction+0xa0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <SPI_EndRxTxTransaction+0xa4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	0d5b      	lsrs	r3, r3, #21
 800639a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ac:	d112      	bne.n	80063d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	@ 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff47 	bl	800624c <SPI_WaitFlagStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3b01      	subs	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b80      	cmp	r3, #128	@ 0x80
 80063ec:	d0f2      	beq.n	80063d4 <SPI_EndRxTxTransaction+0x78>
 80063ee:	e000      	b.n	80063f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80063f0:	bf00      	nop
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000000 	.word	0x20000000
 8006400:	165e9f81 	.word	0x165e9f81

08006404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006404:	b084      	sub	sp, #16
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	f107 001c 	add.w	r0, r7, #28
 8006412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006416:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800641a:	2b01      	cmp	r3, #1
 800641c:	d123      	bne.n	8006466 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fae8 	bl	8007a30 <USB_CoreReset>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e01b      	b.n	800649e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fadc 	bl	8007a30 <USB_CoreReset>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800647c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006490:	e005      	b.n	800649e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800649e:	7fbb      	ldrb	r3, [r7, #30]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10b      	bne.n	80064bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f043 0206 	orr.w	r2, r3, #6
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c8:	b004      	add	sp, #16
 80064ca:	4770      	bx	lr

080064cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d165      	bne.n	80065ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a41      	ldr	r2, [pc, #260]	@ (80065e8 <USB_SetTurnaroundTime+0x11c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d906      	bls.n	80064f6 <USB_SetTurnaroundTime+0x2a>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a40      	ldr	r2, [pc, #256]	@ (80065ec <USB_SetTurnaroundTime+0x120>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d202      	bcs.n	80064f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064f0:	230f      	movs	r3, #15
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e062      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a3c      	ldr	r2, [pc, #240]	@ (80065ec <USB_SetTurnaroundTime+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d306      	bcc.n	800650c <USB_SetTurnaroundTime+0x40>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a3b      	ldr	r2, [pc, #236]	@ (80065f0 <USB_SetTurnaroundTime+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d202      	bcs.n	800650c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006506:	230e      	movs	r3, #14
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e057      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a38      	ldr	r2, [pc, #224]	@ (80065f0 <USB_SetTurnaroundTime+0x124>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d306      	bcc.n	8006522 <USB_SetTurnaroundTime+0x56>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a37      	ldr	r2, [pc, #220]	@ (80065f4 <USB_SetTurnaroundTime+0x128>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d202      	bcs.n	8006522 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800651c:	230d      	movs	r3, #13
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e04c      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a33      	ldr	r2, [pc, #204]	@ (80065f4 <USB_SetTurnaroundTime+0x128>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d306      	bcc.n	8006538 <USB_SetTurnaroundTime+0x6c>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a32      	ldr	r2, [pc, #200]	@ (80065f8 <USB_SetTurnaroundTime+0x12c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d802      	bhi.n	8006538 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006532:	230c      	movs	r3, #12
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e041      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a2f      	ldr	r2, [pc, #188]	@ (80065f8 <USB_SetTurnaroundTime+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d906      	bls.n	800654e <USB_SetTurnaroundTime+0x82>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a2e      	ldr	r2, [pc, #184]	@ (80065fc <USB_SetTurnaroundTime+0x130>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d802      	bhi.n	800654e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006548:	230b      	movs	r3, #11
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e036      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <USB_SetTurnaroundTime+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d906      	bls.n	8006564 <USB_SetTurnaroundTime+0x98>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <USB_SetTurnaroundTime+0x134>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d802      	bhi.n	8006564 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800655e:	230a      	movs	r3, #10
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e02b      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a26      	ldr	r2, [pc, #152]	@ (8006600 <USB_SetTurnaroundTime+0x134>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d906      	bls.n	800657a <USB_SetTurnaroundTime+0xae>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a25      	ldr	r2, [pc, #148]	@ (8006604 <USB_SetTurnaroundTime+0x138>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d202      	bcs.n	800657a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006574:	2309      	movs	r3, #9
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e020      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <USB_SetTurnaroundTime+0x138>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d306      	bcc.n	8006590 <USB_SetTurnaroundTime+0xc4>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a20      	ldr	r2, [pc, #128]	@ (8006608 <USB_SetTurnaroundTime+0x13c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d802      	bhi.n	8006590 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800658a:	2308      	movs	r3, #8
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e015      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <USB_SetTurnaroundTime+0x13c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d906      	bls.n	80065a6 <USB_SetTurnaroundTime+0xda>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <USB_SetTurnaroundTime+0x140>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d202      	bcs.n	80065a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065a0:	2307      	movs	r3, #7
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e00a      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065a6:	2306      	movs	r3, #6
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e007      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065b2:	2309      	movs	r3, #9
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e001      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065b8:	2309      	movs	r3, #9
 80065ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	00d8acbf 	.word	0x00d8acbf
 80065ec:	00e4e1c0 	.word	0x00e4e1c0
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	01067380 	.word	0x01067380
 80065f8:	011a499f 	.word	0x011a499f
 80065fc:	01312cff 	.word	0x01312cff
 8006600:	014ca43f 	.word	0x014ca43f
 8006604:	016e3600 	.word	0x016e3600
 8006608:	01a6ab1f 	.word	0x01a6ab1f
 800660c:	01e84800 	.word	0x01e84800

08006610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d115      	bne.n	80066a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006682:	200a      	movs	r0, #10
 8006684:	f7fb fa92 	bl	8001bac <HAL_Delay>
      ms += 10U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	330a      	adds	r3, #10
 800668c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f93f 	bl	8007912 <USB_GetMode>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d01e      	beq.n	80066d8 <USB_SetCurrentMode+0x84>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2bc7      	cmp	r3, #199	@ 0xc7
 800669e:	d9f0      	bls.n	8006682 <USB_SetCurrentMode+0x2e>
 80066a0:	e01a      	b.n	80066d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d115      	bne.n	80066d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066b4:	200a      	movs	r0, #10
 80066b6:	f7fb fa79 	bl	8001bac <HAL_Delay>
      ms += 10U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	330a      	adds	r3, #10
 80066be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f926 	bl	8007912 <USB_GetMode>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USB_SetCurrentMode+0x84>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80066d0:	d9f0      	bls.n	80066b4 <USB_SetCurrentMode+0x60>
 80066d2:	e001      	b.n	80066d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e005      	b.n	80066e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2bc8      	cmp	r3, #200	@ 0xc8
 80066dc:	d101      	bne.n	80066e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066ec:	b084      	sub	sp, #16
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e009      	b.n	8006720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3340      	adds	r3, #64	@ 0x40
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b0e      	cmp	r3, #14
 8006724:	d9f2      	bls.n	800670c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006726:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11c      	bne.n	8006768 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800673c:	f043 0302 	orr.w	r3, r3, #2
 8006740:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38
 8006766:	e00b      	b.n	8006780 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006786:	461a      	mov	r2, r3
 8006788:	2300      	movs	r3, #0
 800678a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800678c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10d      	bne.n	80067b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f968 	bl	8006a74 <USB_SetDevSpeed>
 80067a4:	e008      	b.n	80067b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067a6:	2101      	movs	r1, #1
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f963 	bl	8006a74 <USB_SetDevSpeed>
 80067ae:	e003      	b.n	80067b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067b0:	2103      	movs	r1, #3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f95e 	bl	8006a74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067b8:	2110      	movs	r1, #16
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8fa 	bl	80069b4 <USB_FlushTxFifo>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f924 	bl	8006a18 <USB_FlushRxFifo>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	461a      	mov	r2, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f8:	461a      	mov	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e043      	b.n	800688c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800681a:	d118      	bne.n	800684e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e013      	b.n	8006860 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e008      	b.n	8006860 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685a:	461a      	mov	r2, r3
 800685c:	2300      	movs	r3, #0
 800685e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	461a      	mov	r2, r3
 8006880:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006890:	461a      	mov	r2, r3
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4293      	cmp	r3, r2
 8006896:	d3b5      	bcc.n	8006804 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	e043      	b.n	8006926 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b4:	d118      	bne.n	80068e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	e013      	b.n	80068fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068de:	461a      	mov	r2, r3
 80068e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	e008      	b.n	80068fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	2300      	movs	r3, #0
 800690a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006918:	461a      	mov	r2, r3
 800691a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800691e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3301      	adds	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800692a:	461a      	mov	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4293      	cmp	r3, r2
 8006930:	d3b5      	bcc.n	800689e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006944:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006952:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f043 0210 	orr.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <USB_DevInit+0x2c4>)
 800696e:	4313      	orrs	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006974:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f043 0208 	orr.w	r2, r3, #8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006988:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800698c:	2b01      	cmp	r3, #1
 800698e:	d107      	bne.n	80069a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ac:	b004      	add	sp, #16
 80069ae:	4770      	bx	lr
 80069b0:	803c3800 	.word	0x803c3800

080069b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3301      	adds	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ce:	d901      	bls.n	80069d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e01b      	b.n	8006a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	daf2      	bge.n	80069c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	019b      	lsls	r3, r3, #6
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f8:	d901      	bls.n	80069fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e006      	b.n	8006a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d0f0      	beq.n	80069ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a30:	d901      	bls.n	8006a36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e018      	b.n	8006a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	daf2      	bge.n	8006a24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2210      	movs	r2, #16
 8006a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a54:	d901      	bls.n	8006a5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e006      	b.n	8006a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b10      	cmp	r3, #16
 8006a64:	d0f0      	beq.n	8006a48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0306 	and.w	r3, r3, #6
 8006abe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]
 8006aca:	e00a      	b.n	8006ae2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d002      	beq.n	8006ad8 <USB_GetDevSpeed+0x32>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d102      	bne.n	8006ade <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	75fb      	strb	r3, [r7, #23]
 8006adc:	e001      	b.n	8006ae2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ade:	230f      	movs	r3, #15
 8006ae0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d13a      	bne.n	8006b82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d155      	bne.n	8006bf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	791b      	ldrb	r3, [r3, #4]
 8006b5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	059b      	lsls	r3, r3, #22
 8006b66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	e036      	b.n	8006bf0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	2101      	movs	r1, #1
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11a      	bne.n	8006bf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	791b      	ldrb	r3, [r3, #4]
 8006bd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d161      	bne.n	8006ce0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c32:	d11f      	bne.n	8006c74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	2101      	movs	r1, #1
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c94:	4013      	ands	r3, r2
 8006c96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	0159      	lsls	r1, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	440b      	add	r3, r1
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4b35      	ldr	r3, [pc, #212]	@ (8006db0 <USB_DeactivateEndpoint+0x1b0>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]
 8006cde:	e060      	b.n	8006da2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf6:	d11f      	bne.n	8006d38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	43db      	mvns	r3, r3
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d58:	4013      	ands	r3, r2
 8006d5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	43db      	mvns	r3, r3
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	0159      	lsls	r1, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	440b      	add	r3, r1
 8006d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <USB_DeactivateEndpoint+0x1b4>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	ec337800 	.word	0xec337800
 8006db4:	eff37800 	.word	0xeff37800

08006db8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	@ 0x28
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 817f 	bne.w	80070d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d132      	bne.n	8006e48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e00:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e40:	0cdb      	lsrs	r3, r3, #19
 8006e42:	04db      	lsls	r3, r3, #19
 8006e44:	6113      	str	r3, [r2, #16]
 8006e46:	e097      	b.n	8006f78 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e62:	0cdb      	lsrs	r3, r3, #19
 8006e64:	04db      	lsls	r3, r3, #19
 8006e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e8a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d11a      	bne.n	8006ec8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d903      	bls.n	8006ea6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ec4:	6113      	str	r3, [r2, #16]
 8006ec6:	e044      	b.n	8006f52 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	1e5a      	subs	r2, r3, #1
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	8afb      	ldrh	r3, [r7, #22]
 8006eee:	04d9      	lsls	r1, r3, #19
 8006ef0:	4ba4      	ldr	r3, [pc, #656]	@ (8007184 <USB_EPStartXfer+0x3cc>)
 8006ef2:	400b      	ands	r3, r1
 8006ef4:	69b9      	ldr	r1, [r7, #24]
 8006ef6:	0148      	lsls	r0, r1, #5
 8006ef8:	69f9      	ldr	r1, [r7, #28]
 8006efa:	4401      	add	r1, r0
 8006efc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f00:	4313      	orrs	r3, r2
 8006f02:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d122      	bne.n	8006f52 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f26:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f2a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	8afb      	ldrh	r3, [r7, #22]
 8006f3c:	075b      	lsls	r3, r3, #29
 8006f3e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f42:	69b9      	ldr	r1, [r7, #24]
 8006f44:	0148      	lsls	r0, r1, #5
 8006f46:	69f9      	ldr	r1, [r7, #28]
 8006f48:	4401      	add	r1, r0
 8006f4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f68:	69b9      	ldr	r1, [r7, #24]
 8006f6a:	0148      	lsls	r0, r1, #5
 8006f6c:	69f9      	ldr	r1, [r7, #28]
 8006f6e:	4401      	add	r1, r0
 8006f70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f74:	4313      	orrs	r3, r2
 8006f76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d14b      	bne.n	8007016 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f92:	461a      	mov	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	791b      	ldrb	r3, [r3, #4]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d128      	bne.n	8006ff4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d110      	bne.n	8006fd4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e00f      	b.n	8006ff4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ff2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800700e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	e166      	b.n	80072e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007030:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007034:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d015      	beq.n	800706a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 814e 	beq.w	80072e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	2101      	movs	r1, #1
 800705a:	fa01 f303 	lsl.w	r3, r1, r3
 800705e:	69f9      	ldr	r1, [r7, #28]
 8007060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007064:	4313      	orrs	r3, r2
 8007066:	634b      	str	r3, [r1, #52]	@ 0x34
 8007068:	e13c      	b.n	80072e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d110      	bne.n	800709c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007094:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e00f      	b.n	80070bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	68d9      	ldr	r1, [r3, #12]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	b298      	uxth	r0, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4603      	mov	r3, r0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f9b9 	bl	8007448 <USB_WritePacket>
 80070d6:	e105      	b.n	80072e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f2:	0cdb      	lsrs	r3, r3, #19
 80070f4:	04db      	lsls	r3, r3, #19
 80070f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007112:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007116:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800711a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d132      	bne.n	8007188 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007150:	69b9      	ldr	r1, [r7, #24]
 8007152:	0148      	lsls	r0, r1, #5
 8007154:	69f9      	ldr	r1, [r7, #28]
 8007156:	4401      	add	r1, r0
 8007158:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800715c:	4313      	orrs	r3, r2
 800715e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800717a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800717e:	6113      	str	r3, [r2, #16]
 8007180:	e062      	b.n	8007248 <USB_EPStartXfer+0x490>
 8007182:	bf00      	nop
 8007184:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d123      	bne.n	80071d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	0148      	lsls	r0, r1, #5
 80071aa:	69f9      	ldr	r1, [r7, #28]
 80071ac:	4401      	add	r1, r0
 80071ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071b2:	4313      	orrs	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071d4:	6113      	str	r3, [r2, #16]
 80071d6:	e037      	b.n	8007248 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4413      	add	r3, r2
 80071e2:	1e5a      	subs	r2, r3, #1
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	8afa      	ldrh	r2, [r7, #22]
 80071f4:	fb03 f202 	mul.w	r2, r3, r2
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	8afb      	ldrh	r3, [r7, #22]
 800720c:	04d9      	lsls	r1, r3, #19
 800720e:	4b38      	ldr	r3, [pc, #224]	@ (80072f0 <USB_EPStartXfer+0x538>)
 8007210:	400b      	ands	r3, r1
 8007212:	69b9      	ldr	r1, [r7, #24]
 8007214:	0148      	lsls	r0, r1, #5
 8007216:	69f9      	ldr	r1, [r7, #28]
 8007218:	4401      	add	r1, r0
 800721a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800721e:	4313      	orrs	r3, r2
 8007220:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007238:	69b9      	ldr	r1, [r7, #24]
 800723a:	0148      	lsls	r0, r1, #5
 800723c:	69f9      	ldr	r1, [r7, #28]
 800723e:	4401      	add	r1, r0
 8007240:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007244:	4313      	orrs	r3, r2
 8007246:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d10d      	bne.n	800726a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68d9      	ldr	r1, [r3, #12]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	460a      	mov	r2, r1
 8007268:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d128      	bne.n	80072c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d110      	bne.n	80072a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800729c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e00f      	b.n	80072c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	1ff80000 	.word	0x1ff80000

080072f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d14a      	bne.n	80073a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800732a:	f040 8086 	bne.w	800743a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007350:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007382:	4293      	cmp	r3, r2
 8007384:	d902      	bls.n	800738c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
          break;
 800738a:	e056      	b.n	800743a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073a4:	d0e7      	beq.n	8007376 <USB_EPStopXfer+0x82>
 80073a6:	e048      	b.n	800743a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073c0:	d13b      	bne.n	800743a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007416:	4293      	cmp	r3, r2
 8007418:	d902      	bls.n	8007420 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
          break;
 800741e:	e00c      	b.n	800743a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007438:	d0e7      	beq.n	800740a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007448:	b480      	push	{r7}
 800744a:	b089      	sub	sp, #36	@ 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4611      	mov	r1, r2
 8007454:	461a      	mov	r2, r3
 8007456:	460b      	mov	r3, r1
 8007458:	71fb      	strb	r3, [r7, #7]
 800745a:	4613      	mov	r3, r2
 800745c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d123      	bne.n	80074b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800746e:	88bb      	ldrh	r3, [r7, #4]
 8007470:	3303      	adds	r3, #3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	e018      	b.n	80074ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	031a      	lsls	r2, r3, #12
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007488:	461a      	mov	r2, r3
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	3301      	adds	r3, #1
 800749a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	3301      	adds	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	3301      	adds	r3, #1
 80074a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	3301      	adds	r3, #1
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d3e2      	bcc.n	800747c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3724      	adds	r7, #36	@ 0x24
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b08b      	sub	sp, #44	@ 0x2c
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	089b      	lsrs	r3, r3, #2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
 80074ee:	e014      	b.n	800751a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	3301      	adds	r3, #1
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	3301      	adds	r3, #1
 8007506:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	3301      	adds	r3, #1
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	3301      	adds	r3, #1
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	3301      	adds	r3, #1
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	6a3a      	ldr	r2, [r7, #32]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	429a      	cmp	r2, r3
 8007520:	d3e6      	bcc.n	80074f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007522:	8bfb      	ldrh	r3, [r7, #30]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01e      	beq.n	8007566 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007532:	461a      	mov	r2, r3
 8007534:	f107 0310 	add.w	r3, r7, #16
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
 8007548:	b2da      	uxtb	r2, r3
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	701a      	strb	r2, [r3, #0]
      i++;
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	3301      	adds	r3, #1
 8007552:	623b      	str	r3, [r7, #32]
      pDest++;
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	3301      	adds	r3, #1
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800755a:	8bfb      	ldrh	r3, [r7, #30]
 800755c:	3b01      	subs	r3, #1
 800755e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007560:	8bfb      	ldrh	r3, [r7, #30]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1ea      	bne.n	800753c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007568:	4618      	mov	r0, r3
 800756a:	372c      	adds	r7, #44	@ 0x2c
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d12c      	bne.n	80075ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	db12      	blt.n	80075c8 <USB_EPSetStall+0x54>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00f      	beq.n	80075c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e02b      	b.n	8007642 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db12      	blt.n	8007622 <USB_EPSetStall+0xae>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00f      	beq.n	8007622 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800761c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007620:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800763c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007640:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d128      	bne.n	80076be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	440a      	add	r2, r1
 8007682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007686:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800768a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d003      	beq.n	800769c <USB_EPClearStall+0x4c>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d138      	bne.n	800770e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	e027      	b.n	800770e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d003      	beq.n	80076ee <USB_EPClearStall+0x9e>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d10f      	bne.n	800770e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800773a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800773e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007750:	68f9      	ldr	r1, [r7, #12]
 8007752:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007756:	4313      	orrs	r3, r2
 8007758:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007796:	f023 0302 	bic.w	r3, r3, #2
 800779a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4013      	ands	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007804:	68fb      	ldr	r3, [r7, #12]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	4013      	ands	r3, r2
 8007834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	0c1b      	lsrs	r3, r3, #16
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4013      	ands	r3, r2
 8007868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	b29b      	uxth	r3, r3
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4013      	ands	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078a8:	68bb      	ldr	r3, [r7, #8]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b087      	sub	sp, #28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4013      	ands	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007904:	68bb      	ldr	r3, [r7, #8]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f003 0301 	and.w	r3, r3, #1
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007948:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	460b      	mov	r3, r1
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	333c      	adds	r3, #60	@ 0x3c
 800798a:	3304      	adds	r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4a26      	ldr	r2, [pc, #152]	@ (8007a2c <USB_EP0_OutStart+0xb8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d90a      	bls.n	80079ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a8:	d101      	bne.n	80079ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e037      	b.n	8007a1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b4:	461a      	mov	r2, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079dc:	f043 0318 	orr.w	r3, r3, #24
 80079e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80079f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10f      	bne.n	8007a1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	4f54300a 	.word	0x4f54300a

08007a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a48:	d901      	bls.n	8007a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e01b      	b.n	8007a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	daf2      	bge.n	8007a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f043 0201 	orr.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a72:	d901      	bls.n	8007a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d0f0      	beq.n	8007a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007aa0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007aa4:	f002 fca2 	bl	800a3ec <USBD_static_malloc>
 8007aa8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	32b0      	adds	r2, #176	@ 0xb0
 8007aba:	2100      	movs	r1, #0
 8007abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e0d4      	b.n	8007c6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ac4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f003 fa2f 	bl	800af2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32b0      	adds	r2, #176	@ 0xb0
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32b0      	adds	r2, #176	@ 0xb0
 8007aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7c1b      	ldrb	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d138      	bne.n	8007b6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007afc:	4b5e      	ldr	r3, [pc, #376]	@ (8007c78 <USBD_CDC_Init+0x1e4>)
 8007afe:	7819      	ldrb	r1, [r3, #0]
 8007b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b04:	2202      	movs	r2, #2
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f002 fb4d 	bl	800a1a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8007c78 <USBD_CDC_Init+0x1e4>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f003 020f 	and.w	r2, r3, #15
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	3324      	adds	r3, #36	@ 0x24
 8007b22:	2201      	movs	r2, #1
 8007b24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b26:	4b55      	ldr	r3, [pc, #340]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007b28:	7819      	ldrb	r1, [r3, #0]
 8007b2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b2e:	2202      	movs	r2, #2
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f002 fb38 	bl	800a1a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b36:	4b51      	ldr	r3, [pc, #324]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 020f 	and.w	r2, r3, #15
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b4e:	2201      	movs	r2, #1
 8007b50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b52:	4b4b      	ldr	r3, [pc, #300]	@ (8007c80 <USBD_CDC_Init+0x1ec>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f003 020f 	and.w	r2, r3, #15
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	3326      	adds	r3, #38	@ 0x26
 8007b68:	2210      	movs	r2, #16
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e035      	b.n	8007bda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b6e:	4b42      	ldr	r3, [pc, #264]	@ (8007c78 <USBD_CDC_Init+0x1e4>)
 8007b70:	7819      	ldrb	r1, [r3, #0]
 8007b72:	2340      	movs	r3, #64	@ 0x40
 8007b74:	2202      	movs	r2, #2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f002 fb15 	bl	800a1a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c78 <USBD_CDC_Init+0x1e4>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 020f 	and.w	r2, r3, #15
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	3324      	adds	r3, #36	@ 0x24
 8007b92:	2201      	movs	r2, #1
 8007b94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b96:	4b39      	ldr	r3, [pc, #228]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007b98:	7819      	ldrb	r1, [r3, #0]
 8007b9a:	2340      	movs	r3, #64	@ 0x40
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f002 fb01 	bl	800a1a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ba4:	4b35      	ldr	r3, [pc, #212]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8007c80 <USBD_CDC_Init+0x1ec>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3326      	adds	r3, #38	@ 0x26
 8007bd6:	2210      	movs	r2, #16
 8007bd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bda:	4b29      	ldr	r3, [pc, #164]	@ (8007c80 <USBD_CDC_Init+0x1ec>)
 8007bdc:	7819      	ldrb	r1, [r3, #0]
 8007bde:	2308      	movs	r3, #8
 8007be0:	2203      	movs	r2, #3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 fadf 	bl	800a1a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007be8:	4b25      	ldr	r3, [pc, #148]	@ (8007c80 <USBD_CDC_Init+0x1ec>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3324      	adds	r3, #36	@ 0x24
 8007bfe:	2201      	movs	r2, #1
 8007c00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	33b0      	adds	r3, #176	@ 0xb0
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e018      	b.n	8007c6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7c1b      	ldrb	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c44:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007c46:	7819      	ldrb	r1, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f002 fb96 	bl	800a384 <USBD_LL_PrepareReceive>
 8007c58:	e008      	b.n	8007c6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c5a:	4b08      	ldr	r3, [pc, #32]	@ (8007c7c <USBD_CDC_Init+0x1e8>)
 8007c5c:	7819      	ldrb	r1, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c64:	2340      	movs	r3, #64	@ 0x40
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f002 fb8c 	bl	800a384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000093 	.word	0x20000093
 8007c7c:	20000094 	.word	0x20000094
 8007c80:	20000095 	.word	0x20000095

08007c84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c90:	4b3a      	ldr	r3, [pc, #232]	@ (8007d7c <USBD_CDC_DeInit+0xf8>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f002 faab 	bl	800a1f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c9c:	4b37      	ldr	r3, [pc, #220]	@ (8007d7c <USBD_CDC_DeInit+0xf8>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	3324      	adds	r3, #36	@ 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cb6:	4b32      	ldr	r3, [pc, #200]	@ (8007d80 <USBD_CDC_DeInit+0xfc>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f002 fa98 	bl	800a1f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d80 <USBD_CDC_DeInit+0xfc>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f003 020f 	and.w	r2, r3, #15
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cda:	2200      	movs	r2, #0
 8007cdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cde:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <USBD_CDC_DeInit+0x100>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f002 fa84 	bl	800a1f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cea:	4b26      	ldr	r3, [pc, #152]	@ (8007d84 <USBD_CDC_DeInit+0x100>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f003 020f 	and.w	r2, r3, #15
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	3324      	adds	r3, #36	@ 0x24
 8007d00:	2200      	movs	r2, #0
 8007d02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d04:	4b1f      	ldr	r3, [pc, #124]	@ (8007d84 <USBD_CDC_DeInit+0x100>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 020f 	and.w	r2, r3, #15
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	440b      	add	r3, r1
 8007d18:	3326      	adds	r3, #38	@ 0x26
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	32b0      	adds	r2, #176	@ 0xb0
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01f      	beq.n	8007d70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	33b0      	adds	r3, #176	@ 0xb0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	32b0      	adds	r2, #176	@ 0xb0
 8007d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 fb58 	bl	800a408 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	32b0      	adds	r2, #176	@ 0xb0
 8007d62:	2100      	movs	r1, #0
 8007d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000093 	.word	0x20000093
 8007d80:	20000094 	.word	0x20000094
 8007d84:	20000095 	.word	0x20000095

08007d88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32b0      	adds	r2, #176	@ 0xb0
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e0bf      	b.n	8007f38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d050      	beq.n	8007e66 <USBD_CDC_Setup+0xde>
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	f040 80af 	bne.w	8007f28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d03a      	beq.n	8007e48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da1b      	bge.n	8007e14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	33b0      	adds	r3, #176	@ 0xb0
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007df2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	88d2      	ldrh	r2, [r2, #6]
 8007df8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	2b07      	cmp	r3, #7
 8007e00:	bf28      	it	cs
 8007e02:	2307      	movcs	r3, #7
 8007e04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	89fa      	ldrh	r2, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fd93 	bl	8009938 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e12:	e090      	b.n	8007f36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785a      	ldrb	r2, [r3, #1]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e24:	d803      	bhi.n	8007e2e <USBD_CDC_Setup+0xa6>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	e000      	b.n	8007e30 <USBD_CDC_Setup+0xa8>
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e36:	6939      	ldr	r1, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fda5 	bl	8009990 <USBD_CtlPrepareRx>
      break;
 8007e46:	e076      	b.n	8007f36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	33b0      	adds	r3, #176	@ 0xb0
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	7850      	ldrb	r0, [r2, #1]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	4798      	blx	r3
      break;
 8007e64:	e067      	b.n	8007f36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b0b      	cmp	r3, #11
 8007e6c:	d851      	bhi.n	8007f12 <USBD_CDC_Setup+0x18a>
 8007e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <USBD_CDC_Setup+0xec>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007ea5 	.word	0x08007ea5
 8007e78:	08007f21 	.word	0x08007f21
 8007e7c:	08007f13 	.word	0x08007f13
 8007e80:	08007f13 	.word	0x08007f13
 8007e84:	08007f13 	.word	0x08007f13
 8007e88:	08007f13 	.word	0x08007f13
 8007e8c:	08007f13 	.word	0x08007f13
 8007e90:	08007f13 	.word	0x08007f13
 8007e94:	08007f13 	.word	0x08007f13
 8007e98:	08007f13 	.word	0x08007f13
 8007e9c:	08007ecf 	.word	0x08007ecf
 8007ea0:	08007ef9 	.word	0x08007ef9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d107      	bne.n	8007ec0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007eb0:	f107 030a 	add.w	r3, r7, #10
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 fd3d 	bl	8009938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ebe:	e032      	b.n	8007f26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 fcbb 	bl	800983e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	75fb      	strb	r3, [r7, #23]
          break;
 8007ecc:	e02b      	b.n	8007f26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d107      	bne.n	8007eea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eda:	f107 030d 	add.w	r3, r7, #13
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fd28 	bl	8009938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ee8:	e01d      	b.n	8007f26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 fca6 	bl	800983e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef6:	e016      	b.n	8007f26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d00f      	beq.n	8007f24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fc99 	bl	800983e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f10:	e008      	b.n	8007f24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 fc92 	bl	800983e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f1e:	e002      	b.n	8007f26 <USBD_CDC_Setup+0x19e>
          break;
 8007f20:	bf00      	nop
 8007f22:	e008      	b.n	8007f36 <USBD_CDC_Setup+0x1ae>
          break;
 8007f24:	bf00      	nop
      }
      break;
 8007f26:	e006      	b.n	8007f36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fc87 	bl	800983e <USBD_CtlError>
      ret = USBD_FAIL;
 8007f30:	2303      	movs	r3, #3
 8007f32:	75fb      	strb	r3, [r7, #23]
      break;
 8007f34:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32b0      	adds	r2, #176	@ 0xb0
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e065      	b.n	8008036 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32b0      	adds	r2, #176	@ 0xb0
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d02f      	beq.n	8007ff4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 020f 	and.w	r2, r3, #15
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3318      	adds	r3, #24
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	f003 010f 	and.w	r1, r3, #15
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	440b      	add	r3, r1
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4403      	add	r3, r0
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d112      	bne.n	8007ff4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fe6:	78f9      	ldrb	r1, [r7, #3]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f002 f9a8 	bl	800a342 <USBD_LL_Transmit>
 8007ff2:	e01f      	b.n	8008034 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	33b0      	adds	r3, #176	@ 0xb0
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d010      	beq.n	8008034 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	33b0      	adds	r3, #176	@ 0xb0
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	32b0      	adds	r2, #176	@ 0xb0
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	32b0      	adds	r2, #176	@ 0xb0
 8008064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	e01a      	b.n	80080a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f002 f9a6 	bl	800a3c6 <USBD_LL_GetRxDataSize>
 800807a:	4602      	mov	r2, r0
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	33b0      	adds	r3, #176	@ 0xb0
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080a0:	4611      	mov	r1, r2
 80080a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	32b0      	adds	r2, #176	@ 0xb0
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e024      	b.n	800811a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	33b0      	adds	r3, #176	@ 0xb0
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d019      	beq.n	8008118 <USBD_CDC_EP0_RxReady+0x6a>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80080ea:	2bff      	cmp	r3, #255	@ 0xff
 80080ec:	d014      	beq.n	8008118 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	33b0      	adds	r3, #176	@ 0xb0
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008106:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800810e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	22ff      	movs	r2, #255	@ 0xff
 8008114:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800812c:	2182      	movs	r1, #130	@ 0x82
 800812e:	4818      	ldr	r0, [pc, #96]	@ (8008190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008130:	f000 fd4f 	bl	8008bd2 <USBD_GetEpDesc>
 8008134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008136:	2101      	movs	r1, #1
 8008138:	4815      	ldr	r0, [pc, #84]	@ (8008190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800813a:	f000 fd4a 	bl	8008bd2 <USBD_GetEpDesc>
 800813e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008140:	2181      	movs	r1, #129	@ 0x81
 8008142:	4813      	ldr	r0, [pc, #76]	@ (8008190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008144:	f000 fd45 	bl	8008bd2 <USBD_GetEpDesc>
 8008148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2210      	movs	r2, #16
 8008154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2200      	movs	r2, #0
 8008160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008164:	711a      	strb	r2, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d006      	beq.n	800817e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008178:	711a      	strb	r2, [r3, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2243      	movs	r2, #67	@ 0x43
 8008182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000050 	.word	0x20000050

08008194 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800819c:	2182      	movs	r1, #130	@ 0x82
 800819e:	4818      	ldr	r0, [pc, #96]	@ (8008200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081a0:	f000 fd17 	bl	8008bd2 <USBD_GetEpDesc>
 80081a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081a6:	2101      	movs	r1, #1
 80081a8:	4815      	ldr	r0, [pc, #84]	@ (8008200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081aa:	f000 fd12 	bl	8008bd2 <USBD_GetEpDesc>
 80081ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081b0:	2181      	movs	r1, #129	@ 0x81
 80081b2:	4813      	ldr	r0, [pc, #76]	@ (8008200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081b4:	f000 fd0d 	bl	8008bd2 <USBD_GetEpDesc>
 80081b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2210      	movs	r2, #16
 80081c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2200      	movs	r2, #0
 80081d0:	711a      	strb	r2, [r3, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f042 0202 	orr.w	r2, r2, #2
 80081d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	711a      	strb	r2, [r3, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f042 0202 	orr.w	r2, r2, #2
 80081ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2243      	movs	r2, #67	@ 0x43
 80081f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000050 	.word	0x20000050

08008204 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800820c:	2182      	movs	r1, #130	@ 0x82
 800820e:	4818      	ldr	r0, [pc, #96]	@ (8008270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008210:	f000 fcdf 	bl	8008bd2 <USBD_GetEpDesc>
 8008214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008216:	2101      	movs	r1, #1
 8008218:	4815      	ldr	r0, [pc, #84]	@ (8008270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800821a:	f000 fcda 	bl	8008bd2 <USBD_GetEpDesc>
 800821e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008220:	2181      	movs	r1, #129	@ 0x81
 8008222:	4813      	ldr	r0, [pc, #76]	@ (8008270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008224:	f000 fcd5 	bl	8008bd2 <USBD_GetEpDesc>
 8008228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2210      	movs	r2, #16
 8008234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2200      	movs	r2, #0
 8008240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008244:	711a      	strb	r2, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008258:	711a      	strb	r2, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2243      	movs	r2, #67	@ 0x43
 8008262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008264:	4b02      	ldr	r3, [pc, #8]	@ (8008270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000050 	.word	0x20000050

08008274 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	220a      	movs	r2, #10
 8008280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008282:	4b03      	ldr	r3, [pc, #12]	@ (8008290 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	2000000c 	.word	0x2000000c

08008294 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e009      	b.n	80082bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	33b0      	adds	r3, #176	@ 0xb0
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	32b0      	adds	r2, #176	@ 0xb0
 80082de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e008      	b.n	8008300 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	32b0      	adds	r2, #176	@ 0xb0
 8008320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008324:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	e004      	b.n	800833a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	32b0      	adds	r2, #176	@ 0xb0
 800835a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800836a:	2303      	movs	r3, #3
 800836c:	e025      	b.n	80083ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11f      	bne.n	80083b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008380:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <USBD_CDC_TransmitPacket+0x7c>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4403      	add	r3, r0
 800839a:	3318      	adds	r3, #24
 800839c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <USBD_CDC_TransmitPacket+0x7c>)
 80083a0:	7819      	ldrb	r1, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 ffc7 	bl	800a342 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000093 	.word	0x20000093

080083c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32b0      	adds	r2, #176	@ 0xb0
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	32b0      	adds	r2, #176	@ 0xb0
 80083ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e018      	b.n	8008428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <USBD_CDC_ReceivePacket+0x68>)
 8008400:	7819      	ldrb	r1, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 ffb9 	bl	800a384 <USBD_LL_PrepareReceive>
 8008412:	e008      	b.n	8008426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008414:	4b06      	ldr	r3, [pc, #24]	@ (8008430 <USBD_CDC_ReceivePacket+0x68>)
 8008416:	7819      	ldrb	r1, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800841e:	2340      	movs	r3, #64	@ 0x40
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 ffaf 	bl	800a384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000094 	.word	0x20000094

08008434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	e01f      	b.n	800848c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f001 fe29 	bl	800a0d8 <USBD_LL_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]

  return ret;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e025      	b.n	80084f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	@ 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	@ 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d8:	f107 020e 	add.w	r2, r7, #14
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 fe31 	bl	800a170 <USBD_LL_Start>
 800850e:	4603      	mov	r3, r0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f90c 	bl	80097ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80085c0:	461a      	mov	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d01a      	beq.n	800860c <USBD_LL_SetupStage+0x72>
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d822      	bhi.n	8008620 <USBD_LL_SetupStage+0x86>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <USBD_LL_SetupStage+0x4a>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d00a      	beq.n	80085f8 <USBD_LL_SetupStage+0x5e>
 80085e2:	e01d      	b.n	8008620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb63 	bl	8008cb8 <USBD_StdDevReq>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
      break;
 80085f6:	e020      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fbcb 	bl	8008d9c <USBD_StdItfReq>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
      break;
 800860a:	e016      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc2d 	bl	8008e74 <USBD_StdEPReq>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
      break;
 800861e:	e00c      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008626:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800862a:	b2db      	uxtb	r3, r3
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fdfe 	bl	800a230 <USBD_LL_StallEP>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
      break;
 8008638:	bf00      	nop
  }

  return ret;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	460b      	mov	r3, r1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d16e      	bne.n	800873a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800866a:	2b03      	cmp	r3, #3
 800866c:	f040 8098 	bne.w	80087a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	429a      	cmp	r2, r3
 800867a:	d913      	bls.n	80086a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	4293      	cmp	r3, r2
 8008694:	bf28      	it	cs
 8008696:	4613      	movcs	r3, r2
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f001 f994 	bl	80099ca <USBD_CtlContinueRx>
 80086a2:	e07d      	b.n	80087a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d014      	beq.n	80086dc <USBD_LL_DataOutStage+0x98>
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d81d      	bhi.n	80086f2 <USBD_LL_DataOutStage+0xae>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <USBD_LL_DataOutStage+0x7c>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d003      	beq.n	80086c6 <USBD_LL_DataOutStage+0x82>
 80086be:	e018      	b.n	80086f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75bb      	strb	r3, [r7, #22]
            break;
 80086c4:	e018      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fa64 	bl	8008b9e <USBD_CoreFindIF>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75bb      	strb	r3, [r7, #22]
            break;
 80086da:	e00d      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	4619      	mov	r1, r3
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 fa66 	bl	8008bb8 <USBD_CoreFindEP>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75bb      	strb	r3, [r7, #22]
            break;
 80086f0:	e002      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75bb      	strb	r3, [r7, #22]
            break;
 80086f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086f8:	7dbb      	ldrb	r3, [r7, #22]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d119      	bne.n	8008732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b03      	cmp	r3, #3
 8008708:	d113      	bne.n	8008732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800870a:	7dba      	ldrb	r2, [r7, #22]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	@ 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800871a:	7dba      	ldrb	r2, [r7, #22]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008722:	7dba      	ldrb	r2, [r7, #22]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	32ae      	adds	r2, #174	@ 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f001 f95a 	bl	80099ec <USBD_CtlSendStatus>
 8008738:	e032      	b.n	80087a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fa37 	bl	8008bb8 <USBD_CoreFindEP>
 800874a:	4603      	mov	r3, r0
 800874c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800874e:	7dbb      	ldrb	r3, [r7, #22]
 8008750:	2bff      	cmp	r3, #255	@ 0xff
 8008752:	d025      	beq.n	80087a0 <USBD_LL_DataOutStage+0x15c>
 8008754:	7dbb      	ldrb	r3, [r7, #22]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d122      	bne.n	80087a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d117      	bne.n	8008796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	32ae      	adds	r2, #174	@ 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00f      	beq.n	8008796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008776:	7dba      	ldrb	r2, [r7, #22]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800877e:	7dba      	ldrb	r2, [r7, #22]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	32ae      	adds	r2, #174	@ 0xae
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	7afa      	ldrb	r2, [r7, #11]
 800878c:	4611      	mov	r1, r2
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	e000      	b.n	80087a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b086      	sub	sp, #24
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	460b      	mov	r3, r1
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d16f      	bne.n	800889e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3314      	adds	r3, #20
 80087c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d15a      	bne.n	8008884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d914      	bls.n	8008804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 f8bc 	bl	800996e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f001 fdc1 	bl	800a384 <USBD_LL_PrepareReceive>
 8008802:	e03f      	b.n	8008884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d11c      	bne.n	800884a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008818:	429a      	cmp	r2, r3
 800881a:	d316      	bcc.n	800884a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008826:	429a      	cmp	r2, r3
 8008828:	d20f      	bcs.n	800884a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f001 f89d 	bl	800996e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f001 fd9e 	bl	800a384 <USBD_LL_PrepareReceive>
 8008848:	e01c      	b.n	8008884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d10f      	bne.n	8008876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f001 fcd9 	bl	800a230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f8c7 	bl	8009a12 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d03a      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7ff fe42 	bl	8008518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800889c:	e032      	b.n	8008904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f985 	bl	8008bb8 <USBD_CoreFindEP>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	2bff      	cmp	r3, #255	@ 0xff
 80088b6:	d025      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d122      	bne.n	8008904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d11c      	bne.n	8008904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088ca:	7dfa      	ldrb	r2, [r7, #23]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	32ae      	adds	r2, #174	@ 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d014      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80088da:	7dfa      	ldrb	r2, [r7, #23]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088e2:	7dfa      	ldrb	r2, [r7, #23]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	32ae      	adds	r2, #174	@ 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	7afa      	ldrb	r2, [r7, #11]
 80088f0:	4611      	mov	r1, r2
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088fa:	7dbb      	ldrb	r3, [r7, #22]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008900:	7dbb      	ldrb	r3, [r7, #22]
 8008902:	e000      	b.n	8008906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00e      	beq.n	8008974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6852      	ldr	r2, [r2, #4]
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	4611      	mov	r1, r2
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008974:	2340      	movs	r3, #64	@ 0x40
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fc13 	bl	800a1a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2240      	movs	r2, #64	@ 0x40
 800898c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008990:	2340      	movs	r3, #64	@ 0x40
 8008992:	2200      	movs	r2, #0
 8008994:	2180      	movs	r1, #128	@ 0x80
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 fc05 	bl	800a1a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2240      	movs	r2, #64	@ 0x40
 80089a6:	621a      	str	r2, [r3, #32]

  return ret;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d006      	beq.n	80089f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2204      	movs	r2, #4
 80089f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d106      	bne.n	8008a2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d110      	bne.n	8008a70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	32ae      	adds	r2, #174	@ 0xae
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e01c      	b.n	8008ad6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d115      	bne.n	8008ad4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32ae      	adds	r2, #174	@ 0xae
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	32ae      	adds	r2, #174	@ 0xae
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	32ae      	adds	r2, #174	@ 0xae
 8008af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e01c      	b.n	8008b3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d115      	bne.n	8008b38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	32ae      	adds	r2, #174	@ 0xae
 8008b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	@ 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	4611      	mov	r1, r2
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00e      	beq.n	8008b94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6852      	ldr	r2, [r2, #4]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	4611      	mov	r1, r2
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	4798      	blx	r3
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b90:	2303      	movs	r3, #3
 8008b92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008baa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	885b      	ldrh	r3, [r3, #2]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d91f      	bls.n	8008c38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bfe:	e013      	b.n	8008c28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c00:	f107 030a 	add.w	r3, r7, #10
 8008c04:	4619      	mov	r1, r3
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f000 f81b 	bl	8008c42 <USBD_GetNextDesc>
 8008c0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d108      	bne.n	8008c28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	789b      	ldrb	r3, [r3, #2]
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d008      	beq.n	8008c36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	885b      	ldrh	r3, [r3, #2]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	897b      	ldrh	r3, [r7, #10]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d8e5      	bhi.n	8008c00 <USBD_GetEpDesc+0x2e>
 8008c34:	e000      	b.n	8008c38 <USBD_GetEpDesc+0x66>
          break;
 8008c36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c38:	693b      	ldr	r3, [r7, #16]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	7812      	ldrb	r2, [r2, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b087      	sub	sp, #28
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c98:	8a3b      	ldrh	r3, [r7, #16]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	b21a      	sxth	r2, r3
 8008c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b21b      	sxth	r3, r3
 8008ca6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
	...

08008cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cce:	2b40      	cmp	r3, #64	@ 0x40
 8008cd0:	d005      	beq.n	8008cde <USBD_StdDevReq+0x26>
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d857      	bhi.n	8008d86 <USBD_StdDevReq+0xce>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <USBD_StdDevReq+0x42>
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d153      	bne.n	8008d86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	32ae      	adds	r2, #174	@ 0xae
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf8:	e04a      	b.n	8008d90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d83b      	bhi.n	8008d7a <USBD_StdDevReq+0xc2>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <USBD_StdDevReq+0x50>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008d71 	.word	0x08008d71
 8008d10:	08008d7b 	.word	0x08008d7b
 8008d14:	08008d67 	.word	0x08008d67
 8008d18:	08008d7b 	.word	0x08008d7b
 8008d1c:	08008d3b 	.word	0x08008d3b
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d7b 	.word	0x08008d7b
 8008d28:	08008d53 	.word	0x08008d53
 8008d2c:	08008d45 	.word	0x08008d45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa3c 	bl	80091b0 <USBD_GetDescriptor>
          break;
 8008d38:	e024      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fba1 	bl	8009484 <USBD_SetAddress>
          break;
 8008d42:	e01f      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fbe0 	bl	800950c <USBD_SetConfig>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8008d50:	e018      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fc83 	bl	8009660 <USBD_GetConfig>
          break;
 8008d5a:	e013      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fcb4 	bl	80096cc <USBD_GetStatus>
          break;
 8008d64:	e00e      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fce3 	bl	8009734 <USBD_SetFeature>
          break;
 8008d6e:	e009      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fd07 	bl	8009786 <USBD_ClrFeature>
          break;
 8008d78:	e004      	b.n	8008d84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fd5e 	bl	800983e <USBD_CtlError>
          break;
 8008d82:	bf00      	nop
      }
      break;
 8008d84:	e004      	b.n	8008d90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fd58 	bl	800983e <USBD_CtlError>
      break;
 8008d8e:	bf00      	nop
  }

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop

08008d9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008db2:	2b40      	cmp	r3, #64	@ 0x40
 8008db4:	d005      	beq.n	8008dc2 <USBD_StdItfReq+0x26>
 8008db6:	2b40      	cmp	r3, #64	@ 0x40
 8008db8:	d852      	bhi.n	8008e60 <USBD_StdItfReq+0xc4>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBD_StdItfReq+0x26>
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d14e      	bne.n	8008e60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d840      	bhi.n	8008e52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	889b      	ldrh	r3, [r3, #4]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d836      	bhi.n	8008e48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	889b      	ldrh	r3, [r3, #4]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fedb 	bl	8008b9e <USBD_CoreFindIF>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2bff      	cmp	r3, #255	@ 0xff
 8008df0:	d01d      	beq.n	8008e2e <USBD_StdItfReq+0x92>
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11a      	bne.n	8008e2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008df8:	7bba      	ldrb	r2, [r7, #14]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	32ae      	adds	r2, #174	@ 0xae
 8008dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00f      	beq.n	8008e28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e08:	7bba      	ldrb	r2, [r7, #14]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e10:	7bba      	ldrb	r2, [r7, #14]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32ae      	adds	r2, #174	@ 0xae
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e26:	e004      	b.n	8008e32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e2c:	e001      	b.n	8008e32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d110      	bne.n	8008e5c <USBD_StdItfReq+0xc0>
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10d      	bne.n	8008e5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fdd3 	bl	80099ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e46:	e009      	b.n	8008e5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fcf7 	bl	800983e <USBD_CtlError>
          break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fcf2 	bl	800983e <USBD_CtlError>
          break;
 8008e5a:	e000      	b.n	8008e5e <USBD_StdItfReq+0xc2>
          break;
 8008e5c:	bf00      	nop
      }
      break;
 8008e5e:	e004      	b.n	8008e6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fceb 	bl	800983e <USBD_CtlError>
      break;
 8008e68:	bf00      	nop
  }

  return ret;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	889b      	ldrh	r3, [r3, #4]
 8008e86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e90:	2b40      	cmp	r3, #64	@ 0x40
 8008e92:	d007      	beq.n	8008ea4 <USBD_StdEPReq+0x30>
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	f200 817f 	bhi.w	8009198 <USBD_StdEPReq+0x324>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d02a      	beq.n	8008ef4 <USBD_StdEPReq+0x80>
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	f040 817a 	bne.w	8009198 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff fe85 	bl	8008bb8 <USBD_CoreFindEP>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb2:	7b7b      	ldrb	r3, [r7, #13]
 8008eb4:	2bff      	cmp	r3, #255	@ 0xff
 8008eb6:	f000 8174 	beq.w	80091a2 <USBD_StdEPReq+0x32e>
 8008eba:	7b7b      	ldrb	r3, [r7, #13]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f040 8170 	bne.w	80091a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ec2:	7b7a      	ldrb	r2, [r7, #13]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008eca:	7b7a      	ldrb	r2, [r7, #13]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	32ae      	adds	r2, #174	@ 0xae
 8008ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8163 	beq.w	80091a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008edc:	7b7a      	ldrb	r2, [r7, #13]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	@ 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ef2:	e156      	b.n	80091a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d008      	beq.n	8008f0e <USBD_StdEPReq+0x9a>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	f300 8145 	bgt.w	800918c <USBD_StdEPReq+0x318>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 809b 	beq.w	800903e <USBD_StdEPReq+0x1ca>
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d03c      	beq.n	8008f86 <USBD_StdEPReq+0x112>
 8008f0c:	e13e      	b.n	800918c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d002      	beq.n	8008f20 <USBD_StdEPReq+0xac>
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d016      	beq.n	8008f4c <USBD_StdEPReq+0xd8>
 8008f1e:	e02c      	b.n	8008f7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <USBD_StdEPReq+0xce>
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b80      	cmp	r3, #128	@ 0x80
 8008f2a:	d00a      	beq.n	8008f42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f97d 	bl	800a230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f36:	2180      	movs	r1, #128	@ 0x80
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 f979 	bl	800a230 <USBD_LL_StallEP>
 8008f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f40:	e020      	b.n	8008f84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc7a 	bl	800983e <USBD_CtlError>
              break;
 8008f4a:	e01b      	b.n	8008f84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10e      	bne.n	8008f72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <USBD_StdEPReq+0xfe>
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d008      	beq.n	8008f72 <USBD_StdEPReq+0xfe>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f95f 	bl	800a230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd3a 	bl	80099ec <USBD_CtlSendStatus>

              break;
 8008f78:	e004      	b.n	8008f84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fc5e 	bl	800983e <USBD_CtlError>
              break;
 8008f82:	bf00      	nop
          }
          break;
 8008f84:	e107      	b.n	8009196 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d002      	beq.n	8008f98 <USBD_StdEPReq+0x124>
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d016      	beq.n	8008fc4 <USBD_StdEPReq+0x150>
 8008f96:	e04b      	b.n	8009030 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <USBD_StdEPReq+0x146>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	@ 0x80
 8008fa2:	d00a      	beq.n	8008fba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f941 	bl	800a230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	@ 0x80
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f93d 	bl	800a230 <USBD_LL_StallEP>
 8008fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb8:	e040      	b.n	800903c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc3e 	bl	800983e <USBD_CtlError>
              break;
 8008fc2:	e03b      	b.n	800903c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	885b      	ldrh	r3, [r3, #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d136      	bne.n	800903a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f947 	bl	800a26e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fd03 	bl	80099ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fde4 	bl	8008bb8 <USBD_CoreFindEP>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ff4:	7b7b      	ldrb	r3, [r7, #13]
 8008ff6:	2bff      	cmp	r3, #255	@ 0xff
 8008ff8:	d01f      	beq.n	800903a <USBD_StdEPReq+0x1c6>
 8008ffa:	7b7b      	ldrb	r3, [r7, #13]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11c      	bne.n	800903a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009000:	7b7a      	ldrb	r2, [r7, #13]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009008:	7b7a      	ldrb	r2, [r7, #13]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	32ae      	adds	r2, #174	@ 0xae
 800900e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009018:	7b7a      	ldrb	r2, [r7, #13]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	@ 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4798      	blx	r3
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800902e:	e004      	b.n	800903a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fc03 	bl	800983e <USBD_CtlError>
              break;
 8009038:	e000      	b.n	800903c <USBD_StdEPReq+0x1c8>
              break;
 800903a:	bf00      	nop
          }
          break;
 800903c:	e0ab      	b.n	8009196 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d002      	beq.n	8009050 <USBD_StdEPReq+0x1dc>
 800904a:	2b03      	cmp	r3, #3
 800904c:	d032      	beq.n	80090b4 <USBD_StdEPReq+0x240>
 800904e:	e097      	b.n	8009180 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <USBD_StdEPReq+0x1f2>
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b80      	cmp	r3, #128	@ 0x80
 800905a:	d004      	beq.n	8009066 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fbed 	bl	800983e <USBD_CtlError>
                break;
 8009064:	e091      	b.n	800918a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800906a:	2b00      	cmp	r3, #0
 800906c:	da0b      	bge.n	8009086 <USBD_StdEPReq+0x212>
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	3310      	adds	r3, #16
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	3304      	adds	r3, #4
 8009084:	e00b      	b.n	800909e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	4413      	add	r3, r2
 800909c:	3304      	adds	r3, #4
 800909e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2202      	movs	r2, #2
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc43 	bl	8009938 <USBD_CtlSendData>
              break;
 80090b2:	e06a      	b.n	800918a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da11      	bge.n	80090e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	f003 020f 	and.w	r2, r3, #15
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3324      	adds	r3, #36	@ 0x24
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d117      	bne.n	8009106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fbb0 	bl	800983e <USBD_CtlError>
                  break;
 80090de:	e054      	b.n	800918a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	f003 020f 	and.w	r2, r3, #15
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb9d 	bl	800983e <USBD_CtlError>
                  break;
 8009104:	e041      	b.n	800918a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800910a:	2b00      	cmp	r3, #0
 800910c:	da0b      	bge.n	8009126 <USBD_StdEPReq+0x2b2>
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	3310      	adds	r3, #16
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	3304      	adds	r3, #4
 8009124:	e00b      	b.n	800913e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	4413      	add	r3, r2
 800913c:	3304      	adds	r3, #4
 800913e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <USBD_StdEPReq+0x2d8>
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b80      	cmp	r3, #128	@ 0x80
 800914a:	d103      	bne.n	8009154 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e00e      	b.n	8009172 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 f8a7 	bl	800a2ac <USBD_LL_IsStallEP>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2201      	movs	r2, #1
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e002      	b.n	8009172 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2202      	movs	r2, #2
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fbdd 	bl	8009938 <USBD_CtlSendData>
              break;
 800917e:	e004      	b.n	800918a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fb5b 	bl	800983e <USBD_CtlError>
              break;
 8009188:	bf00      	nop
          }
          break;
 800918a:	e004      	b.n	8009196 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fb55 	bl	800983e <USBD_CtlError>
          break;
 8009194:	bf00      	nop
      }
      break;
 8009196:	e005      	b.n	80091a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb4f 	bl	800983e <USBD_CtlError>
      break;
 80091a0:	e000      	b.n	80091a4 <USBD_StdEPReq+0x330>
      break;
 80091a2:	bf00      	nop
  }

  return ret;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	f200 8128 	bhi.w	8009426 <USBD_GetDescriptor+0x276>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <USBD_GetDescriptor+0x2c>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	080091f9 	.word	0x080091f9
 80091e0:	08009211 	.word	0x08009211
 80091e4:	08009251 	.word	0x08009251
 80091e8:	08009427 	.word	0x08009427
 80091ec:	08009427 	.word	0x08009427
 80091f0:	080093c7 	.word	0x080093c7
 80091f4:	080093f3 	.word	0x080093f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
      break;
 800920e:	e112      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7c1b      	ldrb	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	f107 0208 	add.w	r2, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009232:	e100      	b.n	8009436 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	f107 0208 	add.w	r2, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
      break;
 800924e:	e0f2      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b05      	cmp	r3, #5
 8009258:	f200 80ac 	bhi.w	80093b4 <USBD_GetDescriptor+0x204>
 800925c:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <USBD_GetDescriptor+0xb4>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	0800927d 	.word	0x0800927d
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092e5 	.word	0x080092e5
 8009270:	08009319 	.word	0x08009319
 8009274:	0800934d 	.word	0x0800934d
 8009278:	08009381 	.word	0x08009381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800929e:	e091      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 facb 	bl	800983e <USBD_CtlError>
            err++;
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	3301      	adds	r3, #1
 80092ac:	72fb      	strb	r3, [r7, #11]
          break;
 80092ae:	e089      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7c12      	ldrb	r2, [r2, #16]
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
 80092d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d2:	e077      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fab1 	bl	800983e <USBD_CtlError>
            err++;
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	3301      	adds	r3, #1
 80092e0:	72fb      	strb	r3, [r7, #11]
          break;
 80092e2:	e06f      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e05d      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa97 	bl	800983e <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e055      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e043      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa7d 	bl	800983e <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e03b      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e029      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa63 	bl	800983e <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e021      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e00f      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa49 	bl	800983e <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e007      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa41 	bl	800983e <USBD_CtlError>
          err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093c2:	bf00      	nop
      }
      break;
 80093c4:	e037      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7c1b      	ldrb	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4610      	mov	r0, r2
 80093dc:	4798      	blx	r3
 80093de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e0:	e029      	b.n	8009436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa2a 	bl	800983e <USBD_CtlError>
        err++;
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	3301      	adds	r3, #1
 80093ee:	72fb      	strb	r3, [r7, #11]
      break;
 80093f0:	e021      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7c1b      	ldrb	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10d      	bne.n	8009416 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009402:	f107 0208 	add.w	r2, r7, #8
 8009406:	4610      	mov	r0, r2
 8009408:	4798      	blx	r3
 800940a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	2207      	movs	r2, #7
 8009412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009414:	e00f      	b.n	8009436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fa10 	bl	800983e <USBD_CtlError>
        err++;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	3301      	adds	r3, #1
 8009422:	72fb      	strb	r3, [r7, #11]
      break;
 8009424:	e007      	b.n	8009436 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa08 	bl	800983e <USBD_CtlError>
      err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	bf00      	nop
  }

  if (err != 0U)
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11e      	bne.n	800947a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d016      	beq.n	8009472 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00e      	beq.n	8009468 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	88da      	ldrh	r2, [r3, #6]
 800944e:	893b      	ldrh	r3, [r7, #8]
 8009450:	4293      	cmp	r3, r2
 8009452:	bf28      	it	cs
 8009454:	4613      	movcs	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	461a      	mov	r2, r3
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa69 	bl	8009938 <USBD_CtlSendData>
 8009466:	e009      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9e7 	bl	800983e <USBD_CtlError>
 8009470:	e004      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 faba 	bl	80099ec <USBD_CtlSendStatus>
 8009478:	e000      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    return;
 800947a:	bf00      	nop
  }
}
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop

08009484 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	889b      	ldrh	r3, [r3, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d131      	bne.n	80094fa <USBD_SetAddress+0x76>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d12d      	bne.n	80094fa <USBD_SetAddress+0x76>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094a4:	d829      	bhi.n	80094fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	885b      	ldrh	r3, [r3, #2]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d104      	bne.n	80094c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f9bc 	bl	800983e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	e01d      	b.n	8009504 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7bfa      	ldrb	r2, [r7, #15]
 80094cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 ff15 	bl	800a304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa86 	bl	80099ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	e009      	b.n	8009504 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f8:	e004      	b.n	8009504 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f99e 	bl	800983e <USBD_CtlError>
  }
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	4b4e      	ldr	r3, [pc, #312]	@ (800965c <USBD_SetConfig+0x150>)
 8009522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009524:	4b4d      	ldr	r3, [pc, #308]	@ (800965c <USBD_SetConfig+0x150>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d905      	bls.n	8009538 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f985 	bl	800983e <USBD_CtlError>
    return USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e08c      	b.n	8009652 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d002      	beq.n	800954a <USBD_SetConfig+0x3e>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d029      	beq.n	800959c <USBD_SetConfig+0x90>
 8009548:	e075      	b.n	8009636 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800954a:	4b44      	ldr	r3, [pc, #272]	@ (800965c <USBD_SetConfig+0x150>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d020      	beq.n	8009594 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009552:	4b42      	ldr	r3, [pc, #264]	@ (800965c <USBD_SetConfig+0x150>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800955c:	4b3f      	ldr	r3, [pc, #252]	@ (800965c <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fe ffe3 	bl	800852e <USBD_SetClassConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d008      	beq.n	8009584 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f962 	bl	800983e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2202      	movs	r2, #2
 800957e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009582:	e065      	b.n	8009650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fa31 	bl	80099ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2203      	movs	r2, #3
 800958e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009592:	e05d      	b.n	8009650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fa29 	bl	80099ec <USBD_CtlSendStatus>
      break;
 800959a:	e059      	b.n	8009650 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800959c:	4b2f      	ldr	r3, [pc, #188]	@ (800965c <USBD_SetConfig+0x150>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d112      	bne.n	80095ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095ac:	4b2b      	ldr	r3, [pc, #172]	@ (800965c <USBD_SetConfig+0x150>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095b6:	4b29      	ldr	r3, [pc, #164]	@ (800965c <USBD_SetConfig+0x150>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fe ffd2 	bl	8008566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa12 	bl	80099ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c8:	e042      	b.n	8009650 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095ca:	4b24      	ldr	r3, [pc, #144]	@ (800965c <USBD_SetConfig+0x150>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d02a      	beq.n	800962e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe ffc0 	bl	8008566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095e6:	4b1d      	ldr	r3, [pc, #116]	@ (800965c <USBD_SetConfig+0x150>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095f0:	4b1a      	ldr	r3, [pc, #104]	@ (800965c <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7fe ff99 	bl	800852e <USBD_SetClassConfig>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00f      	beq.n	8009626 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f918 	bl	800983e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fe ffa5 	bl	8008566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009624:	e014      	b.n	8009650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9e0 	bl	80099ec <USBD_CtlSendStatus>
      break;
 800962c:	e010      	b.n	8009650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9dc 	bl	80099ec <USBD_CtlSendStatus>
      break;
 8009634:	e00c      	b.n	8009650 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f900 	bl	800983e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800963e:	4b07      	ldr	r3, [pc, #28]	@ (800965c <USBD_SetConfig+0x150>)
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7fe ff8e 	bl	8008566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800964a:	2303      	movs	r3, #3
 800964c:	73fb      	strb	r3, [r7, #15]
      break;
 800964e:	bf00      	nop
  }

  return ret;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000424 	.word	0x20000424

08009660 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	88db      	ldrh	r3, [r3, #6]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d004      	beq.n	800967c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8e2 	bl	800983e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800967a:	e023      	b.n	80096c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	dc02      	bgt.n	800968e <USBD_GetConfig+0x2e>
 8009688:	2b00      	cmp	r3, #0
 800968a:	dc03      	bgt.n	8009694 <USBD_GetConfig+0x34>
 800968c:	e015      	b.n	80096ba <USBD_GetConfig+0x5a>
 800968e:	2b03      	cmp	r3, #3
 8009690:	d00b      	beq.n	80096aa <USBD_GetConfig+0x4a>
 8009692:	e012      	b.n	80096ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3308      	adds	r3, #8
 800969e:	2201      	movs	r2, #1
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f948 	bl	8009938 <USBD_CtlSendData>
        break;
 80096a8:	e00c      	b.n	80096c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	2201      	movs	r2, #1
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f940 	bl	8009938 <USBD_CtlSendData>
        break;
 80096b8:	e004      	b.n	80096c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8be 	bl	800983e <USBD_CtlError>
        break;
 80096c2:	bf00      	nop
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	3b01      	subs	r3, #1
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d81e      	bhi.n	8009722 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	88db      	ldrh	r3, [r3, #6]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d004      	beq.n	80096f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8a5 	bl	800983e <USBD_CtlError>
        break;
 80096f4:	e01a      	b.n	800972c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f043 0202 	orr.w	r2, r3, #2
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	330c      	adds	r3, #12
 8009716:	2202      	movs	r2, #2
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f90c 	bl	8009938 <USBD_CtlSendData>
      break;
 8009720:	e004      	b.n	800972c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f88a 	bl	800983e <USBD_CtlError>
      break;
 800972a:	bf00      	nop
  }
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	885b      	ldrh	r3, [r3, #2]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d107      	bne.n	8009756 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f94c 	bl	80099ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009754:	e013      	b.n	800977e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	885b      	ldrh	r3, [r3, #2]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d10b      	bne.n	8009776 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	889b      	ldrh	r3, [r3, #4]
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	b29b      	uxth	r3, r3
 8009766:	b2da      	uxtb	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f93c 	bl	80099ec <USBD_CtlSendStatus>
}
 8009774:	e003      	b.n	800977e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f860 	bl	800983e <USBD_CtlError>
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009796:	b2db      	uxtb	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	2b02      	cmp	r3, #2
 800979c:	d80b      	bhi.n	80097b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	885b      	ldrh	r3, [r3, #2]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d10c      	bne.n	80097c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f91c 	bl	80099ec <USBD_CtlSendStatus>
      }
      break;
 80097b4:	e004      	b.n	80097c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f840 	bl	800983e <USBD_CtlError>
      break;
 80097be:	e000      	b.n	80097c2 <USBD_ClrFeature+0x3c>
      break;
 80097c0:	bf00      	nop
  }
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	781a      	ldrb	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3301      	adds	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f7ff fa40 	bl	8008c7a <SWAPBYTE>
 80097fa:	4603      	mov	r3, r0
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff fa33 	bl	8008c7a <SWAPBYTE>
 8009814:	4603      	mov	r3, r0
 8009816:	461a      	mov	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff fa26 	bl	8008c7a <SWAPBYTE>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	80da      	strh	r2, [r3, #6]
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009848:	2180      	movs	r1, #128	@ 0x80
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fcf0 	bl	800a230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009850:	2100      	movs	r1, #0
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fcec 	bl	800a230 <USBD_LL_StallEP>
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d042      	beq.n	80098fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f000 f842 	bl	8009904 <USBD_GetLen>
 8009880:	4603      	mov	r3, r0
 8009882:	3301      	adds	r3, #1
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800988a:	d808      	bhi.n	800989e <USBD_GetString+0x3e>
 800988c:	6938      	ldr	r0, [r7, #16]
 800988e:	f000 f839 	bl	8009904 <USBD_GetLen>
 8009892:	4603      	mov	r3, r0
 8009894:	3301      	adds	r3, #1
 8009896:	b29b      	uxth	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	e001      	b.n	80098a2 <USBD_GetString+0x42>
 800989e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4413      	add	r3, r2
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	3301      	adds	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	2203      	movs	r2, #3
 80098c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	3301      	adds	r3, #1
 80098c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098c8:	e013      	b.n	80098f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	4413      	add	r3, r2
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	3301      	adds	r3, #1
 80098da:	613b      	str	r3, [r7, #16]
    idx++;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	3301      	adds	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4413      	add	r3, r2
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	3301      	adds	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e7      	bne.n	80098ca <USBD_GetString+0x6a>
 80098fa:	e000      	b.n	80098fe <USBD_GetString+0x9e>
    return;
 80098fc:	bf00      	nop
  }
}
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009914:	e005      	b.n	8009922 <USBD_GetLen+0x1e>
  {
    len++;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	3301      	adds	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	3301      	adds	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f5      	bne.n	8009916 <USBD_GetLen+0x12>
  }

  return len;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2202      	movs	r2, #2
 8009948:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fcef 	bl	800a342 <USBD_LL_Transmit>

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	2100      	movs	r1, #0
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fcde 	bl	800a342 <USBD_LL_Transmit>

  return USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2203      	movs	r2, #3
 80099a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	2100      	movs	r1, #0
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fce2 	bl	800a384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	2100      	movs	r1, #0
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fcd1 	bl	800a384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2204      	movs	r2, #4
 80099f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099fc:	2300      	movs	r3, #0
 80099fe:	2200      	movs	r2, #0
 8009a00:	2100      	movs	r1, #0
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fc9d 	bl	800a342 <USBD_LL_Transmit>

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2205      	movs	r2, #5
 8009a1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a22:	2300      	movs	r3, #0
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fcab 	bl	800a384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4912      	ldr	r1, [pc, #72]	@ (8009a88 <MX_USB_DEVICE_Init+0x50>)
 8009a40:	4812      	ldr	r0, [pc, #72]	@ (8009a8c <MX_USB_DEVICE_Init+0x54>)
 8009a42:	f7fe fcf7 	bl	8008434 <USBD_Init>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a4c:	f7f7 fd74 	bl	8001538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a50:	490f      	ldr	r1, [pc, #60]	@ (8009a90 <MX_USB_DEVICE_Init+0x58>)
 8009a52:	480e      	ldr	r0, [pc, #56]	@ (8009a8c <MX_USB_DEVICE_Init+0x54>)
 8009a54:	f7fe fd1e 	bl	8008494 <USBD_RegisterClass>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a5e:	f7f7 fd6b 	bl	8001538 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a62:	490c      	ldr	r1, [pc, #48]	@ (8009a94 <MX_USB_DEVICE_Init+0x5c>)
 8009a64:	4809      	ldr	r0, [pc, #36]	@ (8009a8c <MX_USB_DEVICE_Init+0x54>)
 8009a66:	f7fe fc15 	bl	8008294 <USBD_CDC_RegisterInterface>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a70:	f7f7 fd62 	bl	8001538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a74:	4805      	ldr	r0, [pc, #20]	@ (8009a8c <MX_USB_DEVICE_Init+0x54>)
 8009a76:	f7fe fd43 	bl	8008500 <USBD_Start>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a80:	f7f7 fd5a 	bl	8001538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a84:	bf00      	nop
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200000ac 	.word	0x200000ac
 8009a8c:	20000428 	.word	0x20000428
 8009a90:	20000018 	.word	0x20000018
 8009a94:	20000098 	.word	0x20000098

08009a98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4905      	ldr	r1, [pc, #20]	@ (8009ab4 <CDC_Init_FS+0x1c>)
 8009aa0:	4805      	ldr	r0, [pc, #20]	@ (8009ab8 <CDC_Init_FS+0x20>)
 8009aa2:	f7fe fc11 	bl	80082c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009aa6:	4905      	ldr	r1, [pc, #20]	@ (8009abc <CDC_Init_FS+0x24>)
 8009aa8:	4803      	ldr	r0, [pc, #12]	@ (8009ab8 <CDC_Init_FS+0x20>)
 8009aaa:	f7fe fc2f 	bl	800830c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20000f04 	.word	0x20000f04
 8009ab8:	20000428 	.word	0x20000428
 8009abc:	20000704 	.word	0x20000704

08009ac0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ac4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	71fb      	strb	r3, [r7, #7]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ae0:	79fb      	ldrb	r3, [r7, #7]
 8009ae2:	2b23      	cmp	r3, #35	@ 0x23
 8009ae4:	d84a      	bhi.n	8009b7c <CDC_Control_FS+0xac>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <CDC_Control_FS+0x1c>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b7d 	.word	0x08009b7d
 8009af0:	08009b7d 	.word	0x08009b7d
 8009af4:	08009b7d 	.word	0x08009b7d
 8009af8:	08009b7d 	.word	0x08009b7d
 8009afc:	08009b7d 	.word	0x08009b7d
 8009b00:	08009b7d 	.word	0x08009b7d
 8009b04:	08009b7d 	.word	0x08009b7d
 8009b08:	08009b7d 	.word	0x08009b7d
 8009b0c:	08009b7d 	.word	0x08009b7d
 8009b10:	08009b7d 	.word	0x08009b7d
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009b7d 	.word	0x08009b7d
 8009b1c:	08009b7d 	.word	0x08009b7d
 8009b20:	08009b7d 	.word	0x08009b7d
 8009b24:	08009b7d 	.word	0x08009b7d
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009b7d 	.word	0x08009b7d
 8009b30:	08009b7d 	.word	0x08009b7d
 8009b34:	08009b7d 	.word	0x08009b7d
 8009b38:	08009b7d 	.word	0x08009b7d
 8009b3c:	08009b7d 	.word	0x08009b7d
 8009b40:	08009b7d 	.word	0x08009b7d
 8009b44:	08009b7d 	.word	0x08009b7d
 8009b48:	08009b7d 	.word	0x08009b7d
 8009b4c:	08009b7d 	.word	0x08009b7d
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b7d 	.word	0x08009b7d
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b7d 	.word	0x08009b7d
 8009b74:	08009b7d 	.word	0x08009b7d
 8009b78:	08009b7d 	.word	0x08009b7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b7c:	bf00      	nop
  }

  return (USBD_OK);
 8009b7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4805      	ldr	r0, [pc, #20]	@ (8009bb0 <CDC_Receive_FS+0x24>)
 8009b9a:	f7fe fbb7 	bl	800830c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b9e:	4804      	ldr	r0, [pc, #16]	@ (8009bb0 <CDC_Receive_FS+0x24>)
 8009ba0:	f7fe fc12 	bl	80083c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ba4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000428 	.word	0x20000428

08009bb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009bfc <CDC_Transmit_FS+0x48>)
 8009bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e00b      	b.n	8009bf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bda:	887b      	ldrh	r3, [r7, #2]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4806      	ldr	r0, [pc, #24]	@ (8009bfc <CDC_Transmit_FS+0x48>)
 8009be2:	f7fe fb71 	bl	80082c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009be6:	4805      	ldr	r0, [pc, #20]	@ (8009bfc <CDC_Transmit_FS+0x48>)
 8009be8:	f7fe fbae 	bl	8008348 <USBD_CDC_TransmitPacket>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000428 	.word	0x20000428

08009c00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2212      	movs	r2, #18
 8009c34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c36:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	200000c8 	.word	0x200000c8

08009c48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2204      	movs	r2, #4
 8009c58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c5a:	4b03      	ldr	r3, [pc, #12]	@ (8009c68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	200000dc 	.word	0x200000dc

08009c6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4907      	ldr	r1, [pc, #28]	@ (8009ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c82:	4808      	ldr	r0, [pc, #32]	@ (8009ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c84:	f7ff fdec 	bl	8009860 <USBD_GetString>
 8009c88:	e004      	b.n	8009c94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4904      	ldr	r1, [pc, #16]	@ (8009ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c8e:	4805      	ldr	r0, [pc, #20]	@ (8009ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c90:	f7ff fde6 	bl	8009860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c94:	4b02      	ldr	r3, [pc, #8]	@ (8009ca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20001704 	.word	0x20001704
 8009ca4:	0800cd88 	.word	0x0800cd88

08009ca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	4904      	ldr	r1, [pc, #16]	@ (8009cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cb8:	4804      	ldr	r0, [pc, #16]	@ (8009ccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cba:	f7ff fdd1 	bl	8009860 <USBD_GetString>
  return USBD_StrDesc;
 8009cbe:	4b02      	ldr	r3, [pc, #8]	@ (8009cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20001704 	.word	0x20001704
 8009ccc:	0800cda0 	.word	0x0800cda0

08009cd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	221a      	movs	r2, #26
 8009ce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ce2:	f000 f843 	bl	8009d6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ce6:	4b02      	ldr	r3, [pc, #8]	@ (8009cf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	200000e0 	.word	0x200000e0

08009cf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4907      	ldr	r1, [pc, #28]	@ (8009d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d0a:	4808      	ldr	r0, [pc, #32]	@ (8009d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d0c:	f7ff fda8 	bl	8009860 <USBD_GetString>
 8009d10:	e004      	b.n	8009d1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	4904      	ldr	r1, [pc, #16]	@ (8009d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d16:	4805      	ldr	r0, [pc, #20]	@ (8009d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d18:	f7ff fda2 	bl	8009860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d1c:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20001704 	.word	0x20001704
 8009d2c:	0800cdb4 	.word	0x0800cdb4

08009d30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d105      	bne.n	8009d4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	4907      	ldr	r1, [pc, #28]	@ (8009d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d46:	4808      	ldr	r0, [pc, #32]	@ (8009d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d48:	f7ff fd8a 	bl	8009860 <USBD_GetString>
 8009d4c:	e004      	b.n	8009d58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	4904      	ldr	r1, [pc, #16]	@ (8009d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d52:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d54:	f7ff fd84 	bl	8009860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d58:	4b02      	ldr	r3, [pc, #8]	@ (8009d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20001704 	.word	0x20001704
 8009d68:	0800cdc0 	.word	0x0800cdc0

08009d6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d72:	4b0f      	ldr	r3, [pc, #60]	@ (8009db0 <Get_SerialNum+0x44>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d78:	4b0e      	ldr	r3, [pc, #56]	@ (8009db4 <Get_SerialNum+0x48>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009db8 <Get_SerialNum+0x4c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4413      	add	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d92:	2208      	movs	r2, #8
 8009d94:	4909      	ldr	r1, [pc, #36]	@ (8009dbc <Get_SerialNum+0x50>)
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f814 	bl	8009dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	4908      	ldr	r1, [pc, #32]	@ (8009dc0 <Get_SerialNum+0x54>)
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	f000 f80f 	bl	8009dc4 <IntToUnicode>
  }
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	1fff7a10 	.word	0x1fff7a10
 8009db4:	1fff7a14 	.word	0x1fff7a14
 8009db8:	1fff7a18 	.word	0x1fff7a18
 8009dbc:	200000e2 	.word	0x200000e2
 8009dc0:	200000f2 	.word	0x200000f2

08009dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
 8009dda:	e027      	b.n	8009e2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	0f1b      	lsrs	r3, r3, #28
 8009de0:	2b09      	cmp	r3, #9
 8009de2:	d80b      	bhi.n	8009dfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0f1b      	lsrs	r3, r3, #28
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	3230      	adds	r2, #48	@ 0x30
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
 8009dfa:	e00a      	b.n	8009e12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	0f1b      	lsrs	r3, r3, #28
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	4619      	mov	r1, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	440b      	add	r3, r1
 8009e0c:	3237      	adds	r2, #55	@ 0x37
 8009e0e:	b2d2      	uxtb	r2, r2
 8009e10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	4413      	add	r3, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]
 8009e2c:	7dfa      	ldrb	r2, [r7, #23]
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d3d3      	bcc.n	8009ddc <IntToUnicode+0x18>
  }
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08a      	sub	sp, #40	@ 0x28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	605a      	str	r2, [r3, #4]
 8009e56:	609a      	str	r2, [r3, #8]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e64:	d147      	bne.n	8009ef6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e66:	2300      	movs	r3, #0
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	4b25      	ldr	r3, [pc, #148]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	4a24      	ldr	r2, [pc, #144]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009e70:	f043 0301 	orr.w	r3, r3, #1
 8009e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e76:	4b22      	ldr	r3, [pc, #136]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4619      	mov	r1, r3
 8009e96:	481b      	ldr	r0, [pc, #108]	@ (8009f04 <HAL_PCD_MspInit+0xc0>)
 8009e98:	f7f7 ffbe 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e9c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009eae:	230a      	movs	r3, #10
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eb2:	f107 0314 	add.w	r3, r7, #20
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4812      	ldr	r0, [pc, #72]	@ (8009f04 <HAL_PCD_MspInit+0xc0>)
 8009eba:	f7f7 ffad 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ebe:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec8:	6353      	str	r3, [r2, #52]	@ 0x34
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8009eda:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <HAL_PCD_MspInit+0xbc>)
 8009edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	2043      	movs	r0, #67	@ 0x43
 8009eec:	f7f7 ff5d 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ef0:	2043      	movs	r0, #67	@ 0x43
 8009ef2:	f7f7 ff76 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3728      	adds	r7, #40	@ 0x28
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40023800 	.word	0x40023800
 8009f04:	40020000 	.word	0x40020000

08009f08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe fb3b 	bl	800859a <USBD_LL_SetupStage>
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7fe fb75 	bl	8008644 <USBD_LL_DataOutStage>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	3320      	adds	r3, #32
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f7fe fc0e 	bl	80087aa <USBD_LL_DataInStage>
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe fd48 	bl	8008a3a <USBD_LL_SOF>
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	79db      	ldrb	r3, [r3, #7]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d001      	beq.n	8009fca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009fc6:	f7f7 fab7 	bl	8001538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fd0:	7bfa      	ldrb	r2, [r7, #15]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fcec 	bl	80089b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fc94 	bl	800890e <USBD_LL_Reset>
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fce7 	bl	80089d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a016:	f043 0301 	orr.w	r3, r3, #1
 800a01a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7adb      	ldrb	r3, [r3, #11]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a024:	4b04      	ldr	r3, [pc, #16]	@ (800a038 <HAL_PCD_SuspendCallback+0x48>)
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	4a03      	ldr	r2, [pc, #12]	@ (800a038 <HAL_PCD_SuspendCallback+0x48>)
 800a02a:	f043 0306 	orr.w	r3, r3, #6
 800a02e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed00 	.word	0xe000ed00

0800a03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fcdd 	bl	8008a0a <USBD_LL_Resume>
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a06a:	78fa      	ldrb	r2, [r7, #3]
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fd35 	bl	8008ade <USBD_LL_IsoOUTIncomplete>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fcf1 	bl	8008a7a <USBD_LL_IsoINIncomplete>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fd47 	bl	8008b42 <USBD_LL_DevConnected>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fd44 	bl	8008b58 <USBD_LL_DevDisconnected>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d13c      	bne.n	800a162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0e8:	4a20      	ldr	r2, [pc, #128]	@ (800a16c <USBD_LL_Init+0x94>)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a16c <USBD_LL_Init+0x94>)
 800a0f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a16c <USBD_LL_Init+0x94>)
 800a0fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a0fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a100:	4b1a      	ldr	r3, [pc, #104]	@ (800a16c <USBD_LL_Init+0x94>)
 800a102:	2204      	movs	r2, #4
 800a104:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a106:	4b19      	ldr	r3, [pc, #100]	@ (800a16c <USBD_LL_Init+0x94>)
 800a108:	2202      	movs	r2, #2
 800a10a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a10c:	4b17      	ldr	r3, [pc, #92]	@ (800a16c <USBD_LL_Init+0x94>)
 800a10e:	2200      	movs	r2, #0
 800a110:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a112:	4b16      	ldr	r3, [pc, #88]	@ (800a16c <USBD_LL_Init+0x94>)
 800a114:	2202      	movs	r2, #2
 800a116:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a118:	4b14      	ldr	r3, [pc, #80]	@ (800a16c <USBD_LL_Init+0x94>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a11e:	4b13      	ldr	r3, [pc, #76]	@ (800a16c <USBD_LL_Init+0x94>)
 800a120:	2200      	movs	r2, #0
 800a122:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a124:	4b11      	ldr	r3, [pc, #68]	@ (800a16c <USBD_LL_Init+0x94>)
 800a126:	2200      	movs	r2, #0
 800a128:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a12a:	4b10      	ldr	r3, [pc, #64]	@ (800a16c <USBD_LL_Init+0x94>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a130:	4b0e      	ldr	r3, [pc, #56]	@ (800a16c <USBD_LL_Init+0x94>)
 800a132:	2200      	movs	r2, #0
 800a134:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a136:	480d      	ldr	r0, [pc, #52]	@ (800a16c <USBD_LL_Init+0x94>)
 800a138:	f7f9 fcea 	bl	8003b10 <HAL_PCD_Init>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a142:	f7f7 f9f9 	bl	8001538 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a146:	2180      	movs	r1, #128	@ 0x80
 800a148:	4808      	ldr	r0, [pc, #32]	@ (800a16c <USBD_LL_Init+0x94>)
 800a14a:	f7fa ff16 	bl	8004f7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a14e:	2240      	movs	r2, #64	@ 0x40
 800a150:	2100      	movs	r1, #0
 800a152:	4806      	ldr	r0, [pc, #24]	@ (800a16c <USBD_LL_Init+0x94>)
 800a154:	f7fa feca 	bl	8004eec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a158:	2280      	movs	r2, #128	@ 0x80
 800a15a:	2101      	movs	r1, #1
 800a15c:	4803      	ldr	r0, [pc, #12]	@ (800a16c <USBD_LL_Init+0x94>)
 800a15e:	f7fa fec5 	bl	8004eec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20001904 	.word	0x20001904

0800a170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a186:	4618      	mov	r0, r3
 800a188:	f7f9 fdd1 	bl	8003d2e <HAL_PCD_Start>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f942 	bl	800a41c <USBD_Get_USB_Status>
 800a198:	4603      	mov	r3, r0
 800a19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	4608      	mov	r0, r1
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	70fb      	strb	r3, [r7, #3]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70bb      	strb	r3, [r7, #2]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1ce:	78bb      	ldrb	r3, [r7, #2]
 800a1d0:	883a      	ldrh	r2, [r7, #0]
 800a1d2:	78f9      	ldrb	r1, [r7, #3]
 800a1d4:	f7fa faa5 	bl	8004722 <HAL_PCD_EP_Open>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 f91c 	bl	800a41c <USBD_Get_USB_Status>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	4611      	mov	r1, r2
 800a210:	4618      	mov	r0, r3
 800a212:	f7fa faf0 	bl	80047f6 <HAL_PCD_EP_Close>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 f8fd 	bl	800a41c <USBD_Get_USB_Status>
 800a222:	4603      	mov	r3, r0
 800a224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a226:	7bbb      	ldrb	r3, [r7, #14]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fa fba8 	bl	80049a4 <HAL_PCD_EP_SetStall>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 f8de 	bl	800a41c <USBD_Get_USB_Status>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	460b      	mov	r3, r1
 800a278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a288:	78fa      	ldrb	r2, [r7, #3]
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fa fbec 	bl	8004a6a <HAL_PCD_EP_ClrStall>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f8bf 	bl	800a41c <USBD_Get_USB_Status>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	da0b      	bge.n	800a2e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	3316      	adds	r3, #22
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	e00b      	b.n	800a2f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a2f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7fa f9d9 	bl	80046da <HAL_PCD_SetAddress>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 f874 	bl	800a41c <USBD_Get_USB_Status>
 800a334:	4603      	mov	r3, r0
 800a336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a338:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b086      	sub	sp, #24
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	460b      	mov	r3, r1
 800a350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a360:	7af9      	ldrb	r1, [r7, #11]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	f7fa fae3 	bl	8004930 <HAL_PCD_EP_Transmit>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f853 	bl	800a41c <USBD_Get_USB_Status>
 800a376:	4603      	mov	r3, r0
 800a378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a37a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	460b      	mov	r3, r1
 800a392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3a2:	7af9      	ldrb	r1, [r7, #11]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	f7fa fa6f 	bl	800488a <HAL_PCD_EP_Receive>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f832 	bl	800a41c <USBD_Get_USB_Status>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3d8:	78fa      	ldrb	r2, [r7, #3]
 800a3da:	4611      	mov	r1, r2
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fa fa8f 	bl	8004900 <HAL_PCD_EP_GetRxCount>
 800a3e2:	4603      	mov	r3, r0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3f4:	4b03      	ldr	r3, [pc, #12]	@ (800a404 <USBD_static_malloc+0x18>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20001de8 	.word	0x20001de8

0800a408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d817      	bhi.n	800a460 <USBD_Get_USB_Status+0x44>
 800a430:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <USBD_Get_USB_Status+0x1c>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a449 	.word	0x0800a449
 800a43c:	0800a44f 	.word	0x0800a44f
 800a440:	0800a455 	.word	0x0800a455
 800a444:	0800a45b 	.word	0x0800a45b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
    break;
 800a44c:	e00b      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a44e:	2303      	movs	r3, #3
 800a450:	73fb      	strb	r3, [r7, #15]
    break;
 800a452:	e008      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a454:	2301      	movs	r3, #1
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	e005      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a45a:	2303      	movs	r3, #3
 800a45c:	73fb      	strb	r3, [r7, #15]
    break;
 800a45e:	e002      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a460:	2303      	movs	r3, #3
 800a462:	73fb      	strb	r3, [r7, #15]
    break;
 800a464:	bf00      	nop
  }
  return usb_status;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <__cvt>:
 800a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	ec57 6b10 	vmov	r6, r7, d0
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	460c      	mov	r4, r1
 800a480:	4619      	mov	r1, r3
 800a482:	463b      	mov	r3, r7
 800a484:	bfbb      	ittet	lt
 800a486:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a48a:	461f      	movlt	r7, r3
 800a48c:	2300      	movge	r3, #0
 800a48e:	232d      	movlt	r3, #45	@ 0x2d
 800a490:	700b      	strb	r3, [r1, #0]
 800a492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a494:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a498:	4691      	mov	r9, r2
 800a49a:	f023 0820 	bic.w	r8, r3, #32
 800a49e:	bfbc      	itt	lt
 800a4a0:	4632      	movlt	r2, r6
 800a4a2:	4616      	movlt	r6, r2
 800a4a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4a8:	d005      	beq.n	800a4b6 <__cvt+0x42>
 800a4aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4ae:	d100      	bne.n	800a4b2 <__cvt+0x3e>
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	e000      	b.n	800a4b8 <__cvt+0x44>
 800a4b6:	2103      	movs	r1, #3
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	ab02      	add	r3, sp, #8
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	ec47 6b10 	vmov	d0, r6, r7
 800a4c4:	4653      	mov	r3, sl
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	f000 fe3a 	bl	800b140 <_dtoa_r>
 800a4cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	d119      	bne.n	800a508 <__cvt+0x94>
 800a4d4:	f019 0f01 	tst.w	r9, #1
 800a4d8:	d00e      	beq.n	800a4f8 <__cvt+0x84>
 800a4da:	eb00 0904 	add.w	r9, r0, r4
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f6 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4ea:	b108      	cbz	r0, 800a4f0 <__cvt+0x7c>
 800a4ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4f0:	2230      	movs	r2, #48	@ 0x30
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	454b      	cmp	r3, r9
 800a4f6:	d31e      	bcc.n	800a536 <__cvt+0xc2>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4fc:	1b5b      	subs	r3, r3, r5
 800a4fe:	4628      	mov	r0, r5
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	b004      	add	sp, #16
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a50c:	eb00 0904 	add.w	r9, r0, r4
 800a510:	d1e5      	bne.n	800a4de <__cvt+0x6a>
 800a512:	7803      	ldrb	r3, [r0, #0]
 800a514:	2b30      	cmp	r3, #48	@ 0x30
 800a516:	d10a      	bne.n	800a52e <__cvt+0xba>
 800a518:	2200      	movs	r2, #0
 800a51a:	2300      	movs	r3, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 800a524:	b918      	cbnz	r0, 800a52e <__cvt+0xba>
 800a526:	f1c4 0401 	rsb	r4, r4, #1
 800a52a:	f8ca 4000 	str.w	r4, [sl]
 800a52e:	f8da 3000 	ldr.w	r3, [sl]
 800a532:	4499      	add	r9, r3
 800a534:	e7d3      	b.n	800a4de <__cvt+0x6a>
 800a536:	1c59      	adds	r1, r3, #1
 800a538:	9103      	str	r1, [sp, #12]
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e7d9      	b.n	800a4f2 <__cvt+0x7e>

0800a53e <__exponent>:
 800a53e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a540:	2900      	cmp	r1, #0
 800a542:	bfba      	itte	lt
 800a544:	4249      	neglt	r1, r1
 800a546:	232d      	movlt	r3, #45	@ 0x2d
 800a548:	232b      	movge	r3, #43	@ 0x2b
 800a54a:	2909      	cmp	r1, #9
 800a54c:	7002      	strb	r2, [r0, #0]
 800a54e:	7043      	strb	r3, [r0, #1]
 800a550:	dd29      	ble.n	800a5a6 <__exponent+0x68>
 800a552:	f10d 0307 	add.w	r3, sp, #7
 800a556:	461d      	mov	r5, r3
 800a558:	270a      	movs	r7, #10
 800a55a:	461a      	mov	r2, r3
 800a55c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a560:	fb07 1416 	mls	r4, r7, r6, r1
 800a564:	3430      	adds	r4, #48	@ 0x30
 800a566:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a56a:	460c      	mov	r4, r1
 800a56c:	2c63      	cmp	r4, #99	@ 0x63
 800a56e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a572:	4631      	mov	r1, r6
 800a574:	dcf1      	bgt.n	800a55a <__exponent+0x1c>
 800a576:	3130      	adds	r1, #48	@ 0x30
 800a578:	1e94      	subs	r4, r2, #2
 800a57a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a57e:	1c41      	adds	r1, r0, #1
 800a580:	4623      	mov	r3, r4
 800a582:	42ab      	cmp	r3, r5
 800a584:	d30a      	bcc.n	800a59c <__exponent+0x5e>
 800a586:	f10d 0309 	add.w	r3, sp, #9
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	42ac      	cmp	r4, r5
 800a58e:	bf88      	it	hi
 800a590:	2300      	movhi	r3, #0
 800a592:	3302      	adds	r3, #2
 800a594:	4403      	add	r3, r0
 800a596:	1a18      	subs	r0, r3, r0
 800a598:	b003      	add	sp, #12
 800a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5a4:	e7ed      	b.n	800a582 <__exponent+0x44>
 800a5a6:	2330      	movs	r3, #48	@ 0x30
 800a5a8:	3130      	adds	r1, #48	@ 0x30
 800a5aa:	7083      	strb	r3, [r0, #2]
 800a5ac:	70c1      	strb	r1, [r0, #3]
 800a5ae:	1d03      	adds	r3, r0, #4
 800a5b0:	e7f1      	b.n	800a596 <__exponent+0x58>
	...

0800a5b4 <_printf_float>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	b08d      	sub	sp, #52	@ 0x34
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	461f      	mov	r7, r3
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	f000 fcbb 	bl	800af40 <_localeconv_r>
 800a5ca:	6803      	ldr	r3, [r0, #0]
 800a5cc:	9304      	str	r3, [sp, #16]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f5 fe56 	bl	8000280 <strlen>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5dc:	9005      	str	r0, [sp, #20]
 800a5de:	3307      	adds	r3, #7
 800a5e0:	f023 0307 	bic.w	r3, r3, #7
 800a5e4:	f103 0208 	add.w	r2, r3, #8
 800a5e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5ec:	f8d4 b000 	ldr.w	fp, [r4]
 800a5f0:	f8c8 2000 	str.w	r2, [r8]
 800a5f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5fc:	9307      	str	r3, [sp, #28]
 800a5fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800a602:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a60a:	4b9c      	ldr	r3, [pc, #624]	@ (800a87c <_printf_float+0x2c8>)
 800a60c:	f04f 32ff 	mov.w	r2, #4294967295
 800a610:	f7f6 fa94 	bl	8000b3c <__aeabi_dcmpun>
 800a614:	bb70      	cbnz	r0, 800a674 <_printf_float+0xc0>
 800a616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a61a:	4b98      	ldr	r3, [pc, #608]	@ (800a87c <_printf_float+0x2c8>)
 800a61c:	f04f 32ff 	mov.w	r2, #4294967295
 800a620:	f7f6 fa6e 	bl	8000b00 <__aeabi_dcmple>
 800a624:	bb30      	cbnz	r0, 800a674 <_printf_float+0xc0>
 800a626:	2200      	movs	r2, #0
 800a628:	2300      	movs	r3, #0
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f6 fa5d 	bl	8000aec <__aeabi_dcmplt>
 800a632:	b110      	cbz	r0, 800a63a <_printf_float+0x86>
 800a634:	232d      	movs	r3, #45	@ 0x2d
 800a636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a63a:	4a91      	ldr	r2, [pc, #580]	@ (800a880 <_printf_float+0x2cc>)
 800a63c:	4b91      	ldr	r3, [pc, #580]	@ (800a884 <_printf_float+0x2d0>)
 800a63e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a642:	bf94      	ite	ls
 800a644:	4690      	movls	r8, r2
 800a646:	4698      	movhi	r8, r3
 800a648:	2303      	movs	r3, #3
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	f02b 0304 	bic.w	r3, fp, #4
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	9700      	str	r7, [sp, #0]
 800a658:	4633      	mov	r3, r6
 800a65a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 f9d2 	bl	800aa08 <_printf_common>
 800a664:	3001      	adds	r0, #1
 800a666:	f040 808d 	bne.w	800a784 <_printf_float+0x1d0>
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	b00d      	add	sp, #52	@ 0x34
 800a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f6 fa5e 	bl	8000b3c <__aeabi_dcmpun>
 800a680:	b140      	cbz	r0, 800a694 <_printf_float+0xe0>
 800a682:	464b      	mov	r3, r9
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfbc      	itt	lt
 800a688:	232d      	movlt	r3, #45	@ 0x2d
 800a68a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a68e:	4a7e      	ldr	r2, [pc, #504]	@ (800a888 <_printf_float+0x2d4>)
 800a690:	4b7e      	ldr	r3, [pc, #504]	@ (800a88c <_printf_float+0x2d8>)
 800a692:	e7d4      	b.n	800a63e <_printf_float+0x8a>
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a69a:	9206      	str	r2, [sp, #24]
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	d13b      	bne.n	800a718 <_printf_float+0x164>
 800a6a0:	2306      	movs	r3, #6
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6b4:	ab09      	add	r3, sp, #36	@ 0x24
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	ec49 8b10 	vmov	d0, r8, r9
 800a6be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7ff fed6 	bl	800a474 <__cvt>
 800a6c8:	9b06      	ldr	r3, [sp, #24]
 800a6ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6cc:	2b47      	cmp	r3, #71	@ 0x47
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	d129      	bne.n	800a726 <_printf_float+0x172>
 800a6d2:	1cc8      	adds	r0, r1, #3
 800a6d4:	db02      	blt.n	800a6dc <_printf_float+0x128>
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	dd41      	ble.n	800a760 <_printf_float+0x1ac>
 800a6dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a6e0:	fa5f fa8a 	uxtb.w	sl, sl
 800a6e4:	3901      	subs	r1, #1
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6ee:	f7ff ff26 	bl	800a53e <__exponent>
 800a6f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6f4:	1813      	adds	r3, r2, r0
 800a6f6:	2a01      	cmp	r2, #1
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	dc02      	bgt.n	800a704 <_printf_float+0x150>
 800a6fe:	6822      	ldr	r2, [r4, #0]
 800a700:	07d2      	lsls	r2, r2, #31
 800a702:	d501      	bpl.n	800a708 <_printf_float+0x154>
 800a704:	3301      	adds	r3, #1
 800a706:	6123      	str	r3, [r4, #16]
 800a708:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0a2      	beq.n	800a656 <_printf_float+0xa2>
 800a710:	232d      	movs	r3, #45	@ 0x2d
 800a712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a716:	e79e      	b.n	800a656 <_printf_float+0xa2>
 800a718:	9a06      	ldr	r2, [sp, #24]
 800a71a:	2a47      	cmp	r2, #71	@ 0x47
 800a71c:	d1c2      	bne.n	800a6a4 <_printf_float+0xf0>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1c0      	bne.n	800a6a4 <_printf_float+0xf0>
 800a722:	2301      	movs	r3, #1
 800a724:	e7bd      	b.n	800a6a2 <_printf_float+0xee>
 800a726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a72a:	d9db      	bls.n	800a6e4 <_printf_float+0x130>
 800a72c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a730:	d118      	bne.n	800a764 <_printf_float+0x1b0>
 800a732:	2900      	cmp	r1, #0
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	dd0b      	ble.n	800a750 <_printf_float+0x19c>
 800a738:	6121      	str	r1, [r4, #16]
 800a73a:	b913      	cbnz	r3, 800a742 <_printf_float+0x18e>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	07d0      	lsls	r0, r2, #31
 800a740:	d502      	bpl.n	800a748 <_printf_float+0x194>
 800a742:	3301      	adds	r3, #1
 800a744:	440b      	add	r3, r1
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	e7db      	b.n	800a708 <_printf_float+0x154>
 800a750:	b913      	cbnz	r3, 800a758 <_printf_float+0x1a4>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	07d2      	lsls	r2, r2, #31
 800a756:	d501      	bpl.n	800a75c <_printf_float+0x1a8>
 800a758:	3302      	adds	r3, #2
 800a75a:	e7f4      	b.n	800a746 <_printf_float+0x192>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e7f2      	b.n	800a746 <_printf_float+0x192>
 800a760:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a766:	4299      	cmp	r1, r3
 800a768:	db05      	blt.n	800a776 <_printf_float+0x1c2>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	6121      	str	r1, [r4, #16]
 800a76e:	07d8      	lsls	r0, r3, #31
 800a770:	d5ea      	bpl.n	800a748 <_printf_float+0x194>
 800a772:	1c4b      	adds	r3, r1, #1
 800a774:	e7e7      	b.n	800a746 <_printf_float+0x192>
 800a776:	2900      	cmp	r1, #0
 800a778:	bfd4      	ite	le
 800a77a:	f1c1 0202 	rsble	r2, r1, #2
 800a77e:	2201      	movgt	r2, #1
 800a780:	4413      	add	r3, r2
 800a782:	e7e0      	b.n	800a746 <_printf_float+0x192>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	055a      	lsls	r2, r3, #21
 800a788:	d407      	bmi.n	800a79a <_printf_float+0x1e6>
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	4642      	mov	r2, r8
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	d12b      	bne.n	800a7f0 <_printf_float+0x23c>
 800a798:	e767      	b.n	800a66a <_printf_float+0xb6>
 800a79a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a79e:	f240 80dd 	bls.w	800a95c <_printf_float+0x3a8>
 800a7a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f7f6 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d033      	beq.n	800a81a <_printf_float+0x266>
 800a7b2:	4a37      	ldr	r2, [pc, #220]	@ (800a890 <_printf_float+0x2dc>)
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f af54 	beq.w	800a66a <_printf_float+0xb6>
 800a7c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a7c6:	4543      	cmp	r3, r8
 800a7c8:	db02      	blt.n	800a7d0 <_printf_float+0x21c>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	07d8      	lsls	r0, r3, #31
 800a7ce:	d50f      	bpl.n	800a7f0 <_printf_float+0x23c>
 800a7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f43f af45 	beq.w	800a66a <_printf_float+0xb6>
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7e8:	f104 0a1a 	add.w	sl, r4, #26
 800a7ec:	45c8      	cmp	r8, r9
 800a7ee:	dc09      	bgt.n	800a804 <_printf_float+0x250>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	079b      	lsls	r3, r3, #30
 800a7f4:	f100 8103 	bmi.w	800a9fe <_printf_float+0x44a>
 800a7f8:	68e0      	ldr	r0, [r4, #12]
 800a7fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	bfb8      	it	lt
 800a800:	4618      	movlt	r0, r3
 800a802:	e734      	b.n	800a66e <_printf_float+0xba>
 800a804:	2301      	movs	r3, #1
 800a806:	4652      	mov	r2, sl
 800a808:	4631      	mov	r1, r6
 800a80a:	4628      	mov	r0, r5
 800a80c:	47b8      	blx	r7
 800a80e:	3001      	adds	r0, #1
 800a810:	f43f af2b 	beq.w	800a66a <_printf_float+0xb6>
 800a814:	f109 0901 	add.w	r9, r9, #1
 800a818:	e7e8      	b.n	800a7ec <_printf_float+0x238>
 800a81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc39      	bgt.n	800a894 <_printf_float+0x2e0>
 800a820:	4a1b      	ldr	r2, [pc, #108]	@ (800a890 <_printf_float+0x2dc>)
 800a822:	2301      	movs	r3, #1
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f af1d 	beq.w	800a66a <_printf_float+0xb6>
 800a830:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a834:	ea59 0303 	orrs.w	r3, r9, r3
 800a838:	d102      	bne.n	800a840 <_printf_float+0x28c>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	07d9      	lsls	r1, r3, #31
 800a83e:	d5d7      	bpl.n	800a7f0 <_printf_float+0x23c>
 800a840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af0d 	beq.w	800a66a <_printf_float+0xb6>
 800a850:	f04f 0a00 	mov.w	sl, #0
 800a854:	f104 0b1a 	add.w	fp, r4, #26
 800a858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85a:	425b      	negs	r3, r3
 800a85c:	4553      	cmp	r3, sl
 800a85e:	dc01      	bgt.n	800a864 <_printf_float+0x2b0>
 800a860:	464b      	mov	r3, r9
 800a862:	e793      	b.n	800a78c <_printf_float+0x1d8>
 800a864:	2301      	movs	r3, #1
 800a866:	465a      	mov	r2, fp
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f aefb 	beq.w	800a66a <_printf_float+0xb6>
 800a874:	f10a 0a01 	add.w	sl, sl, #1
 800a878:	e7ee      	b.n	800a858 <_printf_float+0x2a4>
 800a87a:	bf00      	nop
 800a87c:	7fefffff 	.word	0x7fefffff
 800a880:	0800cde8 	.word	0x0800cde8
 800a884:	0800cdec 	.word	0x0800cdec
 800a888:	0800cdf0 	.word	0x0800cdf0
 800a88c:	0800cdf4 	.word	0x0800cdf4
 800a890:	0800cdf8 	.word	0x0800cdf8
 800a894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a89a:	4553      	cmp	r3, sl
 800a89c:	bfa8      	it	ge
 800a89e:	4653      	movge	r3, sl
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	4699      	mov	r9, r3
 800a8a4:	dc36      	bgt.n	800a914 <_printf_float+0x360>
 800a8a6:	f04f 0b00 	mov.w	fp, #0
 800a8aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ae:	f104 021a 	add.w	r2, r4, #26
 800a8b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8b4:	9306      	str	r3, [sp, #24]
 800a8b6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ba:	455b      	cmp	r3, fp
 800a8bc:	dc31      	bgt.n	800a922 <_printf_float+0x36e>
 800a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c0:	459a      	cmp	sl, r3
 800a8c2:	dc3a      	bgt.n	800a93a <_printf_float+0x386>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	07da      	lsls	r2, r3, #31
 800a8c8:	d437      	bmi.n	800a93a <_printf_float+0x386>
 800a8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8cc:	ebaa 0903 	sub.w	r9, sl, r3
 800a8d0:	9b06      	ldr	r3, [sp, #24]
 800a8d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a8d6:	4599      	cmp	r9, r3
 800a8d8:	bfa8      	it	ge
 800a8da:	4699      	movge	r9, r3
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	dc33      	bgt.n	800a94a <_printf_float+0x396>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ea:	f104 0b1a 	add.w	fp, r4, #26
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8f4:	eba3 0309 	sub.w	r3, r3, r9
 800a8f8:	4543      	cmp	r3, r8
 800a8fa:	f77f af79 	ble.w	800a7f0 <_printf_float+0x23c>
 800a8fe:	2301      	movs	r3, #1
 800a900:	465a      	mov	r2, fp
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	f43f aeae 	beq.w	800a66a <_printf_float+0xb6>
 800a90e:	f108 0801 	add.w	r8, r8, #1
 800a912:	e7ec      	b.n	800a8ee <_printf_float+0x33a>
 800a914:	4642      	mov	r2, r8
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	d1c2      	bne.n	800a8a6 <_printf_float+0x2f2>
 800a920:	e6a3      	b.n	800a66a <_printf_float+0xb6>
 800a922:	2301      	movs	r3, #1
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	9206      	str	r2, [sp, #24]
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f ae9c 	beq.w	800a66a <_printf_float+0xb6>
 800a932:	9a06      	ldr	r2, [sp, #24]
 800a934:	f10b 0b01 	add.w	fp, fp, #1
 800a938:	e7bb      	b.n	800a8b2 <_printf_float+0x2fe>
 800a93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93e:	4631      	mov	r1, r6
 800a940:	4628      	mov	r0, r5
 800a942:	47b8      	blx	r7
 800a944:	3001      	adds	r0, #1
 800a946:	d1c0      	bne.n	800a8ca <_printf_float+0x316>
 800a948:	e68f      	b.n	800a66a <_printf_float+0xb6>
 800a94a:	9a06      	ldr	r2, [sp, #24]
 800a94c:	464b      	mov	r3, r9
 800a94e:	4442      	add	r2, r8
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	d1c3      	bne.n	800a8e2 <_printf_float+0x32e>
 800a95a:	e686      	b.n	800a66a <_printf_float+0xb6>
 800a95c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a960:	f1ba 0f01 	cmp.w	sl, #1
 800a964:	dc01      	bgt.n	800a96a <_printf_float+0x3b6>
 800a966:	07db      	lsls	r3, r3, #31
 800a968:	d536      	bpl.n	800a9d8 <_printf_float+0x424>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4642      	mov	r2, r8
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f ae78 	beq.w	800a66a <_printf_float+0xb6>
 800a97a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae70 	beq.w	800a66a <_printf_float+0xb6>
 800a98a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a98e:	2200      	movs	r2, #0
 800a990:	2300      	movs	r3, #0
 800a992:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a996:	f7f6 f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a99a:	b9c0      	cbnz	r0, 800a9ce <_printf_float+0x41a>
 800a99c:	4653      	mov	r3, sl
 800a99e:	f108 0201 	add.w	r2, r8, #1
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d10c      	bne.n	800a9c6 <_printf_float+0x412>
 800a9ac:	e65d      	b.n	800a66a <_printf_float+0xb6>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	465a      	mov	r2, fp
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f43f ae56 	beq.w	800a66a <_printf_float+0xb6>
 800a9be:	f108 0801 	add.w	r8, r8, #1
 800a9c2:	45d0      	cmp	r8, sl
 800a9c4:	dbf3      	blt.n	800a9ae <_printf_float+0x3fa>
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9cc:	e6df      	b.n	800a78e <_printf_float+0x1da>
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	f104 0b1a 	add.w	fp, r4, #26
 800a9d6:	e7f4      	b.n	800a9c2 <_printf_float+0x40e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4642      	mov	r2, r8
 800a9dc:	e7e1      	b.n	800a9a2 <_printf_float+0x3ee>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	464a      	mov	r2, r9
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	f43f ae3e 	beq.w	800a66a <_printf_float+0xb6>
 800a9ee:	f108 0801 	add.w	r8, r8, #1
 800a9f2:	68e3      	ldr	r3, [r4, #12]
 800a9f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9f6:	1a5b      	subs	r3, r3, r1
 800a9f8:	4543      	cmp	r3, r8
 800a9fa:	dcf0      	bgt.n	800a9de <_printf_float+0x42a>
 800a9fc:	e6fc      	b.n	800a7f8 <_printf_float+0x244>
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f104 0919 	add.w	r9, r4, #25
 800aa06:	e7f4      	b.n	800a9f2 <_printf_float+0x43e>

0800aa08 <_printf_common>:
 800aa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	4616      	mov	r6, r2
 800aa0e:	4698      	mov	r8, r3
 800aa10:	688a      	ldr	r2, [r1, #8]
 800aa12:	690b      	ldr	r3, [r1, #16]
 800aa14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	bfb8      	it	lt
 800aa1c:	4613      	movlt	r3, r2
 800aa1e:	6033      	str	r3, [r6, #0]
 800aa20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa24:	4607      	mov	r7, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	b10a      	cbz	r2, 800aa2e <_printf_common+0x26>
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	0699      	lsls	r1, r3, #26
 800aa32:	bf42      	ittt	mi
 800aa34:	6833      	ldrmi	r3, [r6, #0]
 800aa36:	3302      	addmi	r3, #2
 800aa38:	6033      	strmi	r3, [r6, #0]
 800aa3a:	6825      	ldr	r5, [r4, #0]
 800aa3c:	f015 0506 	ands.w	r5, r5, #6
 800aa40:	d106      	bne.n	800aa50 <_printf_common+0x48>
 800aa42:	f104 0a19 	add.w	sl, r4, #25
 800aa46:	68e3      	ldr	r3, [r4, #12]
 800aa48:	6832      	ldr	r2, [r6, #0]
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	42ab      	cmp	r3, r5
 800aa4e:	dc26      	bgt.n	800aa9e <_printf_common+0x96>
 800aa50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	3b00      	subs	r3, #0
 800aa58:	bf18      	it	ne
 800aa5a:	2301      	movne	r3, #1
 800aa5c:	0692      	lsls	r2, r2, #26
 800aa5e:	d42b      	bmi.n	800aab8 <_printf_common+0xb0>
 800aa60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa64:	4641      	mov	r1, r8
 800aa66:	4638      	mov	r0, r7
 800aa68:	47c8      	blx	r9
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d01e      	beq.n	800aaac <_printf_common+0xa4>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	f003 0306 	and.w	r3, r3, #6
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	bf02      	ittt	eq
 800aa7a:	68e5      	ldreq	r5, [r4, #12]
 800aa7c:	6833      	ldreq	r3, [r6, #0]
 800aa7e:	1aed      	subeq	r5, r5, r3
 800aa80:	68a3      	ldr	r3, [r4, #8]
 800aa82:	bf0c      	ite	eq
 800aa84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa88:	2500      	movne	r5, #0
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	bfc4      	itt	gt
 800aa8e:	1a9b      	subgt	r3, r3, r2
 800aa90:	18ed      	addgt	r5, r5, r3
 800aa92:	2600      	movs	r6, #0
 800aa94:	341a      	adds	r4, #26
 800aa96:	42b5      	cmp	r5, r6
 800aa98:	d11a      	bne.n	800aad0 <_printf_common+0xc8>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e008      	b.n	800aab0 <_printf_common+0xa8>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4652      	mov	r2, sl
 800aaa2:	4641      	mov	r1, r8
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	47c8      	blx	r9
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d103      	bne.n	800aab4 <_printf_common+0xac>
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab4:	3501      	adds	r5, #1
 800aab6:	e7c6      	b.n	800aa46 <_printf_common+0x3e>
 800aab8:	18e1      	adds	r1, r4, r3
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	2030      	movs	r0, #48	@ 0x30
 800aabe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aac2:	4422      	add	r2, r4
 800aac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aacc:	3302      	adds	r3, #2
 800aace:	e7c7      	b.n	800aa60 <_printf_common+0x58>
 800aad0:	2301      	movs	r3, #1
 800aad2:	4622      	mov	r2, r4
 800aad4:	4641      	mov	r1, r8
 800aad6:	4638      	mov	r0, r7
 800aad8:	47c8      	blx	r9
 800aada:	3001      	adds	r0, #1
 800aadc:	d0e6      	beq.n	800aaac <_printf_common+0xa4>
 800aade:	3601      	adds	r6, #1
 800aae0:	e7d9      	b.n	800aa96 <_printf_common+0x8e>
	...

0800aae4 <_printf_i>:
 800aae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	7e0f      	ldrb	r7, [r1, #24]
 800aaea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaec:	2f78      	cmp	r7, #120	@ 0x78
 800aaee:	4691      	mov	r9, r2
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	469a      	mov	sl, r3
 800aaf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aafa:	d807      	bhi.n	800ab0c <_printf_i+0x28>
 800aafc:	2f62      	cmp	r7, #98	@ 0x62
 800aafe:	d80a      	bhi.n	800ab16 <_printf_i+0x32>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	f000 80d2 	beq.w	800acaa <_printf_i+0x1c6>
 800ab06:	2f58      	cmp	r7, #88	@ 0x58
 800ab08:	f000 80b9 	beq.w	800ac7e <_printf_i+0x19a>
 800ab0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab14:	e03a      	b.n	800ab8c <_printf_i+0xa8>
 800ab16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab1a:	2b15      	cmp	r3, #21
 800ab1c:	d8f6      	bhi.n	800ab0c <_printf_i+0x28>
 800ab1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab24 <_printf_i+0x40>)
 800ab20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab24:	0800ab7d 	.word	0x0800ab7d
 800ab28:	0800ab91 	.word	0x0800ab91
 800ab2c:	0800ab0d 	.word	0x0800ab0d
 800ab30:	0800ab0d 	.word	0x0800ab0d
 800ab34:	0800ab0d 	.word	0x0800ab0d
 800ab38:	0800ab0d 	.word	0x0800ab0d
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab0d 	.word	0x0800ab0d
 800ab44:	0800ab0d 	.word	0x0800ab0d
 800ab48:	0800ab0d 	.word	0x0800ab0d
 800ab4c:	0800ab0d 	.word	0x0800ab0d
 800ab50:	0800ac91 	.word	0x0800ac91
 800ab54:	0800abbb 	.word	0x0800abbb
 800ab58:	0800ac4b 	.word	0x0800ac4b
 800ab5c:	0800ab0d 	.word	0x0800ab0d
 800ab60:	0800ab0d 	.word	0x0800ab0d
 800ab64:	0800acb3 	.word	0x0800acb3
 800ab68:	0800ab0d 	.word	0x0800ab0d
 800ab6c:	0800abbb 	.word	0x0800abbb
 800ab70:	0800ab0d 	.word	0x0800ab0d
 800ab74:	0800ab0d 	.word	0x0800ab0d
 800ab78:	0800ac53 	.word	0x0800ac53
 800ab7c:	6833      	ldr	r3, [r6, #0]
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6032      	str	r2, [r6, #0]
 800ab84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e09d      	b.n	800accc <_printf_i+0x1e8>
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	1d19      	adds	r1, r3, #4
 800ab96:	6031      	str	r1, [r6, #0]
 800ab98:	0606      	lsls	r6, r0, #24
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0xbc>
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	e003      	b.n	800aba8 <_printf_i+0xc4>
 800aba0:	0645      	lsls	r5, r0, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0xb8>
 800aba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	da03      	bge.n	800abb4 <_printf_i+0xd0>
 800abac:	232d      	movs	r3, #45	@ 0x2d
 800abae:	426d      	negs	r5, r5
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb4:	4859      	ldr	r0, [pc, #356]	@ (800ad1c <_printf_i+0x238>)
 800abb6:	230a      	movs	r3, #10
 800abb8:	e011      	b.n	800abde <_printf_i+0xfa>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	0608      	lsls	r0, r1, #24
 800abc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abc4:	d402      	bmi.n	800abcc <_printf_i+0xe8>
 800abc6:	0649      	lsls	r1, r1, #25
 800abc8:	bf48      	it	mi
 800abca:	b2ad      	uxthmi	r5, r5
 800abcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abce:	4853      	ldr	r0, [pc, #332]	@ (800ad1c <_printf_i+0x238>)
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	bf14      	ite	ne
 800abd4:	230a      	movne	r3, #10
 800abd6:	2308      	moveq	r3, #8
 800abd8:	2100      	movs	r1, #0
 800abda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abde:	6866      	ldr	r6, [r4, #4]
 800abe0:	60a6      	str	r6, [r4, #8]
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	bfa2      	ittt	ge
 800abe6:	6821      	ldrge	r1, [r4, #0]
 800abe8:	f021 0104 	bicge.w	r1, r1, #4
 800abec:	6021      	strge	r1, [r4, #0]
 800abee:	b90d      	cbnz	r5, 800abf4 <_printf_i+0x110>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	d04b      	beq.n	800ac8c <_printf_i+0x1a8>
 800abf4:	4616      	mov	r6, r2
 800abf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800abfa:	fb03 5711 	mls	r7, r3, r1, r5
 800abfe:	5dc7      	ldrb	r7, [r0, r7]
 800ac00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac04:	462f      	mov	r7, r5
 800ac06:	42bb      	cmp	r3, r7
 800ac08:	460d      	mov	r5, r1
 800ac0a:	d9f4      	bls.n	800abf6 <_printf_i+0x112>
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d10b      	bne.n	800ac28 <_printf_i+0x144>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	07df      	lsls	r7, r3, #31
 800ac14:	d508      	bpl.n	800ac28 <_printf_i+0x144>
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	bfde      	ittt	le
 800ac1e:	2330      	movle	r3, #48	@ 0x30
 800ac20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac28:	1b92      	subs	r2, r2, r6
 800ac2a:	6122      	str	r2, [r4, #16]
 800ac2c:	f8cd a000 	str.w	sl, [sp]
 800ac30:	464b      	mov	r3, r9
 800ac32:	aa03      	add	r2, sp, #12
 800ac34:	4621      	mov	r1, r4
 800ac36:	4640      	mov	r0, r8
 800ac38:	f7ff fee6 	bl	800aa08 <_printf_common>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d14a      	bne.n	800acd6 <_printf_i+0x1f2>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	b004      	add	sp, #16
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	4833      	ldr	r0, [pc, #204]	@ (800ad20 <_printf_i+0x23c>)
 800ac54:	2778      	movs	r7, #120	@ 0x78
 800ac56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	6831      	ldr	r1, [r6, #0]
 800ac5e:	061f      	lsls	r7, r3, #24
 800ac60:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac64:	d402      	bmi.n	800ac6c <_printf_i+0x188>
 800ac66:	065f      	lsls	r7, r3, #25
 800ac68:	bf48      	it	mi
 800ac6a:	b2ad      	uxthmi	r5, r5
 800ac6c:	6031      	str	r1, [r6, #0]
 800ac6e:	07d9      	lsls	r1, r3, #31
 800ac70:	bf44      	itt	mi
 800ac72:	f043 0320 	orrmi.w	r3, r3, #32
 800ac76:	6023      	strmi	r3, [r4, #0]
 800ac78:	b11d      	cbz	r5, 800ac82 <_printf_i+0x19e>
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	e7ac      	b.n	800abd8 <_printf_i+0xf4>
 800ac7e:	4827      	ldr	r0, [pc, #156]	@ (800ad1c <_printf_i+0x238>)
 800ac80:	e7e9      	b.n	800ac56 <_printf_i+0x172>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	f023 0320 	bic.w	r3, r3, #32
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	e7f6      	b.n	800ac7a <_printf_i+0x196>
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	e7bd      	b.n	800ac0c <_printf_i+0x128>
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	6825      	ldr	r5, [r4, #0]
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	1d18      	adds	r0, r3, #4
 800ac98:	6030      	str	r0, [r6, #0]
 800ac9a:	062e      	lsls	r6, r5, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1c0>
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1c6>
 800aca4:	0668      	lsls	r0, r5, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1bc>
 800aca8:	8019      	strh	r1, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4616      	mov	r6, r2
 800acb0:	e7bc      	b.n	800ac2c <_printf_i+0x148>
 800acb2:	6833      	ldr	r3, [r6, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	681e      	ldr	r6, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7f5 fa8e 	bl	80001e0 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1e6>
 800acc6:	1b80      	subs	r0, r0, r6
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd4:	e7aa      	b.n	800ac2c <_printf_i+0x148>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	4632      	mov	r2, r6
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ad      	beq.n	800ac40 <_printf_i+0x15c>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x22e>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a6      	b.n	800ac44 <_printf_i+0x160>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09d      	beq.n	800ac40 <_printf_i+0x15c>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x212>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x206>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x222>
 800ad1a:	bf00      	nop
 800ad1c:	0800cdfa 	.word	0x0800cdfa
 800ad20:	0800ce0b 	.word	0x0800ce0b

0800ad24 <std>:
 800ad24:	2300      	movs	r3, #0
 800ad26:	b510      	push	{r4, lr}
 800ad28:	4604      	mov	r4, r0
 800ad2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad32:	6083      	str	r3, [r0, #8]
 800ad34:	8181      	strh	r1, [r0, #12]
 800ad36:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad38:	81c2      	strh	r2, [r0, #14]
 800ad3a:	6183      	str	r3, [r0, #24]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	2208      	movs	r2, #8
 800ad40:	305c      	adds	r0, #92	@ 0x5c
 800ad42:	f000 f8f4 	bl	800af2e <memset>
 800ad46:	4b0d      	ldr	r3, [pc, #52]	@ (800ad7c <std+0x58>)
 800ad48:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <std+0x5c>)
 800ad4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad84 <std+0x60>)
 800ad50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <std+0x64>)
 800ad54:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad56:	4b0d      	ldr	r3, [pc, #52]	@ (800ad8c <std+0x68>)
 800ad58:	6224      	str	r4, [r4, #32]
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	d006      	beq.n	800ad6c <std+0x48>
 800ad5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad62:	4294      	cmp	r4, r2
 800ad64:	d002      	beq.n	800ad6c <std+0x48>
 800ad66:	33d0      	adds	r3, #208	@ 0xd0
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d105      	bne.n	800ad78 <std+0x54>
 800ad6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad74:	f000 b958 	b.w	800b028 <__retarget_lock_init_recursive>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	bf00      	nop
 800ad7c:	0800aea9 	.word	0x0800aea9
 800ad80:	0800aecb 	.word	0x0800aecb
 800ad84:	0800af03 	.word	0x0800af03
 800ad88:	0800af27 	.word	0x0800af27
 800ad8c:	20002008 	.word	0x20002008

0800ad90 <stdio_exit_handler>:
 800ad90:	4a02      	ldr	r2, [pc, #8]	@ (800ad9c <stdio_exit_handler+0xc>)
 800ad92:	4903      	ldr	r1, [pc, #12]	@ (800ada0 <stdio_exit_handler+0x10>)
 800ad94:	4803      	ldr	r0, [pc, #12]	@ (800ada4 <stdio_exit_handler+0x14>)
 800ad96:	f000 b869 	b.w	800ae6c <_fwalk_sglue>
 800ad9a:	bf00      	nop
 800ad9c:	200000fc 	.word	0x200000fc
 800ada0:	0800c6d5 	.word	0x0800c6d5
 800ada4:	2000010c 	.word	0x2000010c

0800ada8 <cleanup_stdio>:
 800ada8:	6841      	ldr	r1, [r0, #4]
 800adaa:	4b0c      	ldr	r3, [pc, #48]	@ (800addc <cleanup_stdio+0x34>)
 800adac:	4299      	cmp	r1, r3
 800adae:	b510      	push	{r4, lr}
 800adb0:	4604      	mov	r4, r0
 800adb2:	d001      	beq.n	800adb8 <cleanup_stdio+0x10>
 800adb4:	f001 fc8e 	bl	800c6d4 <_fflush_r>
 800adb8:	68a1      	ldr	r1, [r4, #8]
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <cleanup_stdio+0x38>)
 800adbc:	4299      	cmp	r1, r3
 800adbe:	d002      	beq.n	800adc6 <cleanup_stdio+0x1e>
 800adc0:	4620      	mov	r0, r4
 800adc2:	f001 fc87 	bl	800c6d4 <_fflush_r>
 800adc6:	68e1      	ldr	r1, [r4, #12]
 800adc8:	4b06      	ldr	r3, [pc, #24]	@ (800ade4 <cleanup_stdio+0x3c>)
 800adca:	4299      	cmp	r1, r3
 800adcc:	d004      	beq.n	800add8 <cleanup_stdio+0x30>
 800adce:	4620      	mov	r0, r4
 800add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add4:	f001 bc7e 	b.w	800c6d4 <_fflush_r>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	bf00      	nop
 800addc:	20002008 	.word	0x20002008
 800ade0:	20002070 	.word	0x20002070
 800ade4:	200020d8 	.word	0x200020d8

0800ade8 <global_stdio_init.part.0>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <global_stdio_init.part.0+0x30>)
 800adec:	4c0b      	ldr	r4, [pc, #44]	@ (800ae1c <global_stdio_init.part.0+0x34>)
 800adee:	4a0c      	ldr	r2, [pc, #48]	@ (800ae20 <global_stdio_init.part.0+0x38>)
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	4620      	mov	r0, r4
 800adf4:	2200      	movs	r2, #0
 800adf6:	2104      	movs	r1, #4
 800adf8:	f7ff ff94 	bl	800ad24 <std>
 800adfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae00:	2201      	movs	r2, #1
 800ae02:	2109      	movs	r1, #9
 800ae04:	f7ff ff8e 	bl	800ad24 <std>
 800ae08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae12:	2112      	movs	r1, #18
 800ae14:	f7ff bf86 	b.w	800ad24 <std>
 800ae18:	20002140 	.word	0x20002140
 800ae1c:	20002008 	.word	0x20002008
 800ae20:	0800ad91 	.word	0x0800ad91

0800ae24 <__sfp_lock_acquire>:
 800ae24:	4801      	ldr	r0, [pc, #4]	@ (800ae2c <__sfp_lock_acquire+0x8>)
 800ae26:	f000 b900 	b.w	800b02a <__retarget_lock_acquire_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	20002149 	.word	0x20002149

0800ae30 <__sfp_lock_release>:
 800ae30:	4801      	ldr	r0, [pc, #4]	@ (800ae38 <__sfp_lock_release+0x8>)
 800ae32:	f000 b8fb 	b.w	800b02c <__retarget_lock_release_recursive>
 800ae36:	bf00      	nop
 800ae38:	20002149 	.word	0x20002149

0800ae3c <__sinit>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	f7ff fff0 	bl	800ae24 <__sfp_lock_acquire>
 800ae44:	6a23      	ldr	r3, [r4, #32]
 800ae46:	b11b      	cbz	r3, 800ae50 <__sinit+0x14>
 800ae48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae4c:	f7ff bff0 	b.w	800ae30 <__sfp_lock_release>
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <__sinit+0x28>)
 800ae52:	6223      	str	r3, [r4, #32]
 800ae54:	4b04      	ldr	r3, [pc, #16]	@ (800ae68 <__sinit+0x2c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f5      	bne.n	800ae48 <__sinit+0xc>
 800ae5c:	f7ff ffc4 	bl	800ade8 <global_stdio_init.part.0>
 800ae60:	e7f2      	b.n	800ae48 <__sinit+0xc>
 800ae62:	bf00      	nop
 800ae64:	0800ada9 	.word	0x0800ada9
 800ae68:	20002140 	.word	0x20002140

0800ae6c <_fwalk_sglue>:
 800ae6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	4607      	mov	r7, r0
 800ae72:	4688      	mov	r8, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	2600      	movs	r6, #0
 800ae78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae80:	d505      	bpl.n	800ae8e <_fwalk_sglue+0x22>
 800ae82:	6824      	ldr	r4, [r4, #0]
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	d1f7      	bne.n	800ae78 <_fwalk_sglue+0xc>
 800ae88:	4630      	mov	r0, r6
 800ae8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d907      	bls.n	800aea4 <_fwalk_sglue+0x38>
 800ae94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	d003      	beq.n	800aea4 <_fwalk_sglue+0x38>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4638      	mov	r0, r7
 800aea0:	47c0      	blx	r8
 800aea2:	4306      	orrs	r6, r0
 800aea4:	3568      	adds	r5, #104	@ 0x68
 800aea6:	e7e9      	b.n	800ae7c <_fwalk_sglue+0x10>

0800aea8 <__sread>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	460c      	mov	r4, r1
 800aeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb0:	f000 f86c 	bl	800af8c <_read_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	bfab      	itete	ge
 800aeb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeba:	89a3      	ldrhlt	r3, [r4, #12]
 800aebc:	181b      	addge	r3, r3, r0
 800aebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aec2:	bfac      	ite	ge
 800aec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aec6:	81a3      	strhlt	r3, [r4, #12]
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <__swrite>:
 800aeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	461f      	mov	r7, r3
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	05db      	lsls	r3, r3, #23
 800aed4:	4605      	mov	r5, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4616      	mov	r6, r2
 800aeda:	d505      	bpl.n	800aee8 <__swrite+0x1e>
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	2302      	movs	r3, #2
 800aee2:	2200      	movs	r2, #0
 800aee4:	f000 f840 	bl	800af68 <_lseek_r>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	4632      	mov	r2, r6
 800aef6:	463b      	mov	r3, r7
 800aef8:	4628      	mov	r0, r5
 800aefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	f000 b857 	b.w	800afb0 <_write_r>

0800af02 <__sseek>:
 800af02:	b510      	push	{r4, lr}
 800af04:	460c      	mov	r4, r1
 800af06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0a:	f000 f82d 	bl	800af68 <_lseek_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	bf15      	itete	ne
 800af14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af1e:	81a3      	strheq	r3, [r4, #12]
 800af20:	bf18      	it	ne
 800af22:	81a3      	strhne	r3, [r4, #12]
 800af24:	bd10      	pop	{r4, pc}

0800af26 <__sclose>:
 800af26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2a:	f000 b80d 	b.w	800af48 <_close_r>

0800af2e <memset>:
 800af2e:	4402      	add	r2, r0
 800af30:	4603      	mov	r3, r0
 800af32:	4293      	cmp	r3, r2
 800af34:	d100      	bne.n	800af38 <memset+0xa>
 800af36:	4770      	bx	lr
 800af38:	f803 1b01 	strb.w	r1, [r3], #1
 800af3c:	e7f9      	b.n	800af32 <memset+0x4>
	...

0800af40 <_localeconv_r>:
 800af40:	4800      	ldr	r0, [pc, #0]	@ (800af44 <_localeconv_r+0x4>)
 800af42:	4770      	bx	lr
 800af44:	20000248 	.word	0x20000248

0800af48 <_close_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	@ (800af64 <_close_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f6 fd12 	bl	800197c <_close>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_close_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_close_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20002144 	.word	0x20002144

0800af68 <_lseek_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	@ (800af88 <_lseek_r+0x20>)
 800af6c:	4604      	mov	r4, r0
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f6 fd27 	bl	80019ca <_lseek>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_lseek_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_lseek_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20002144 	.word	0x20002144

0800af8c <_read_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	@ (800afac <_read_r+0x20>)
 800af90:	4604      	mov	r4, r0
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	2200      	movs	r2, #0
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f7f6 fcb5 	bl	800190a <_read>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_read_r+0x1e>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_read_r+0x1e>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20002144 	.word	0x20002144

0800afb0 <_write_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	@ (800afd0 <_write_r+0x20>)
 800afb4:	4604      	mov	r4, r0
 800afb6:	4608      	mov	r0, r1
 800afb8:	4611      	mov	r1, r2
 800afba:	2200      	movs	r2, #0
 800afbc:	602a      	str	r2, [r5, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	f7f6 fcc0 	bl	8001944 <_write>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_write_r+0x1e>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_write_r+0x1e>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	20002144 	.word	0x20002144

0800afd4 <__errno>:
 800afd4:	4b01      	ldr	r3, [pc, #4]	@ (800afdc <__errno+0x8>)
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20000108 	.word	0x20000108

0800afe0 <__libc_init_array>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4d0d      	ldr	r5, [pc, #52]	@ (800b018 <__libc_init_array+0x38>)
 800afe4:	4c0d      	ldr	r4, [pc, #52]	@ (800b01c <__libc_init_array+0x3c>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	2600      	movs	r6, #0
 800afec:	42a6      	cmp	r6, r4
 800afee:	d109      	bne.n	800b004 <__libc_init_array+0x24>
 800aff0:	4d0b      	ldr	r5, [pc, #44]	@ (800b020 <__libc_init_array+0x40>)
 800aff2:	4c0c      	ldr	r4, [pc, #48]	@ (800b024 <__libc_init_array+0x44>)
 800aff4:	f001 febc 	bl	800cd70 <_init>
 800aff8:	1b64      	subs	r4, r4, r5
 800affa:	10a4      	asrs	r4, r4, #2
 800affc:	2600      	movs	r6, #0
 800affe:	42a6      	cmp	r6, r4
 800b000:	d105      	bne.n	800b00e <__libc_init_array+0x2e>
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	f855 3b04 	ldr.w	r3, [r5], #4
 800b008:	4798      	blx	r3
 800b00a:	3601      	adds	r6, #1
 800b00c:	e7ee      	b.n	800afec <__libc_init_array+0xc>
 800b00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b012:	4798      	blx	r3
 800b014:	3601      	adds	r6, #1
 800b016:	e7f2      	b.n	800affe <__libc_init_array+0x1e>
 800b018:	0800d160 	.word	0x0800d160
 800b01c:	0800d160 	.word	0x0800d160
 800b020:	0800d160 	.word	0x0800d160
 800b024:	0800d164 	.word	0x0800d164

0800b028 <__retarget_lock_init_recursive>:
 800b028:	4770      	bx	lr

0800b02a <__retarget_lock_acquire_recursive>:
 800b02a:	4770      	bx	lr

0800b02c <__retarget_lock_release_recursive>:
 800b02c:	4770      	bx	lr

0800b02e <quorem>:
 800b02e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b032:	6903      	ldr	r3, [r0, #16]
 800b034:	690c      	ldr	r4, [r1, #16]
 800b036:	42a3      	cmp	r3, r4
 800b038:	4607      	mov	r7, r0
 800b03a:	db7e      	blt.n	800b13a <quorem+0x10c>
 800b03c:	3c01      	subs	r4, #1
 800b03e:	f101 0814 	add.w	r8, r1, #20
 800b042:	00a3      	lsls	r3, r4, #2
 800b044:	f100 0514 	add.w	r5, r0, #20
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b058:	3301      	adds	r3, #1
 800b05a:	429a      	cmp	r2, r3
 800b05c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b060:	fbb2 f6f3 	udiv	r6, r2, r3
 800b064:	d32e      	bcc.n	800b0c4 <quorem+0x96>
 800b066:	f04f 0a00 	mov.w	sl, #0
 800b06a:	46c4      	mov	ip, r8
 800b06c:	46ae      	mov	lr, r5
 800b06e:	46d3      	mov	fp, sl
 800b070:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b074:	b298      	uxth	r0, r3
 800b076:	fb06 a000 	mla	r0, r6, r0, sl
 800b07a:	0c02      	lsrs	r2, r0, #16
 800b07c:	0c1b      	lsrs	r3, r3, #16
 800b07e:	fb06 2303 	mla	r3, r6, r3, r2
 800b082:	f8de 2000 	ldr.w	r2, [lr]
 800b086:	b280      	uxth	r0, r0
 800b088:	b292      	uxth	r2, r2
 800b08a:	1a12      	subs	r2, r2, r0
 800b08c:	445a      	add	r2, fp
 800b08e:	f8de 0000 	ldr.w	r0, [lr]
 800b092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b096:	b29b      	uxth	r3, r3
 800b098:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b09c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0a0:	b292      	uxth	r2, r2
 800b0a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0a6:	45e1      	cmp	r9, ip
 800b0a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b0ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0b0:	d2de      	bcs.n	800b070 <quorem+0x42>
 800b0b2:	9b00      	ldr	r3, [sp, #0]
 800b0b4:	58eb      	ldr	r3, [r5, r3]
 800b0b6:	b92b      	cbnz	r3, 800b0c4 <quorem+0x96>
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	3b04      	subs	r3, #4
 800b0bc:	429d      	cmp	r5, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	d32f      	bcc.n	800b122 <quorem+0xf4>
 800b0c2:	613c      	str	r4, [r7, #16]
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f001 f979 	bl	800c3bc <__mcmp>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	db25      	blt.n	800b11a <quorem+0xec>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0d6:	f8d1 c000 	ldr.w	ip, [r1]
 800b0da:	fa1f fe82 	uxth.w	lr, r2
 800b0de:	fa1f f38c 	uxth.w	r3, ip
 800b0e2:	eba3 030e 	sub.w	r3, r3, lr
 800b0e6:	4403      	add	r3, r0
 800b0e8:	0c12      	lsrs	r2, r2, #16
 800b0ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f8:	45c1      	cmp	r9, r8
 800b0fa:	f841 3b04 	str.w	r3, [r1], #4
 800b0fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b102:	d2e6      	bcs.n	800b0d2 <quorem+0xa4>
 800b104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10c:	b922      	cbnz	r2, 800b118 <quorem+0xea>
 800b10e:	3b04      	subs	r3, #4
 800b110:	429d      	cmp	r5, r3
 800b112:	461a      	mov	r2, r3
 800b114:	d30b      	bcc.n	800b12e <quorem+0x100>
 800b116:	613c      	str	r4, [r7, #16]
 800b118:	3601      	adds	r6, #1
 800b11a:	4630      	mov	r0, r6
 800b11c:	b003      	add	sp, #12
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	6812      	ldr	r2, [r2, #0]
 800b124:	3b04      	subs	r3, #4
 800b126:	2a00      	cmp	r2, #0
 800b128:	d1cb      	bne.n	800b0c2 <quorem+0x94>
 800b12a:	3c01      	subs	r4, #1
 800b12c:	e7c6      	b.n	800b0bc <quorem+0x8e>
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	3b04      	subs	r3, #4
 800b132:	2a00      	cmp	r2, #0
 800b134:	d1ef      	bne.n	800b116 <quorem+0xe8>
 800b136:	3c01      	subs	r4, #1
 800b138:	e7ea      	b.n	800b110 <quorem+0xe2>
 800b13a:	2000      	movs	r0, #0
 800b13c:	e7ee      	b.n	800b11c <quorem+0xee>
	...

0800b140 <_dtoa_r>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	69c7      	ldr	r7, [r0, #28]
 800b146:	b099      	sub	sp, #100	@ 0x64
 800b148:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b152:	9109      	str	r1, [sp, #36]	@ 0x24
 800b154:	4683      	mov	fp, r0
 800b156:	920e      	str	r2, [sp, #56]	@ 0x38
 800b158:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b15a:	b97f      	cbnz	r7, 800b17c <_dtoa_r+0x3c>
 800b15c:	2010      	movs	r0, #16
 800b15e:	f000 fdfd 	bl	800bd5c <malloc>
 800b162:	4602      	mov	r2, r0
 800b164:	f8cb 001c 	str.w	r0, [fp, #28]
 800b168:	b920      	cbnz	r0, 800b174 <_dtoa_r+0x34>
 800b16a:	4ba7      	ldr	r3, [pc, #668]	@ (800b408 <_dtoa_r+0x2c8>)
 800b16c:	21ef      	movs	r1, #239	@ 0xef
 800b16e:	48a7      	ldr	r0, [pc, #668]	@ (800b40c <_dtoa_r+0x2cc>)
 800b170:	f001 faf6 	bl	800c760 <__assert_func>
 800b174:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b178:	6007      	str	r7, [r0, #0]
 800b17a:	60c7      	str	r7, [r0, #12]
 800b17c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	b159      	cbz	r1, 800b19c <_dtoa_r+0x5c>
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	604a      	str	r2, [r1, #4]
 800b188:	2301      	movs	r3, #1
 800b18a:	4093      	lsls	r3, r2
 800b18c:	608b      	str	r3, [r1, #8]
 800b18e:	4658      	mov	r0, fp
 800b190:	f000 feda 	bl	800bf48 <_Bfree>
 800b194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b198:	2200      	movs	r2, #0
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	1e2b      	subs	r3, r5, #0
 800b19e:	bfb9      	ittee	lt
 800b1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1a4:	9303      	strlt	r3, [sp, #12]
 800b1a6:	2300      	movge	r3, #0
 800b1a8:	6033      	strge	r3, [r6, #0]
 800b1aa:	9f03      	ldr	r7, [sp, #12]
 800b1ac:	4b98      	ldr	r3, [pc, #608]	@ (800b410 <_dtoa_r+0x2d0>)
 800b1ae:	bfbc      	itt	lt
 800b1b0:	2201      	movlt	r2, #1
 800b1b2:	6032      	strlt	r2, [r6, #0]
 800b1b4:	43bb      	bics	r3, r7
 800b1b6:	d112      	bne.n	800b1de <_dtoa_r+0x9e>
 800b1b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1c4:	4323      	orrs	r3, r4
 800b1c6:	f000 854d 	beq.w	800bc64 <_dtoa_r+0xb24>
 800b1ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b424 <_dtoa_r+0x2e4>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 854f 	beq.w	800bc74 <_dtoa_r+0xb34>
 800b1d6:	f10a 0303 	add.w	r3, sl, #3
 800b1da:	f000 bd49 	b.w	800bc70 <_dtoa_r+0xb30>
 800b1de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	ec51 0b17 	vmov	r0, r1, d7
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b1ee:	f7f5 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	b158      	cbz	r0, 800b20e <_dtoa_r+0xce>
 800b1f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1fe:	b113      	cbz	r3, 800b206 <_dtoa_r+0xc6>
 800b200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b202:	4b84      	ldr	r3, [pc, #528]	@ (800b414 <_dtoa_r+0x2d4>)
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b428 <_dtoa_r+0x2e8>
 800b20a:	f000 bd33 	b.w	800bc74 <_dtoa_r+0xb34>
 800b20e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b212:	aa16      	add	r2, sp, #88	@ 0x58
 800b214:	a917      	add	r1, sp, #92	@ 0x5c
 800b216:	4658      	mov	r0, fp
 800b218:	f001 f980 	bl	800c51c <__d2b>
 800b21c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b220:	4681      	mov	r9, r0
 800b222:	2e00      	cmp	r6, #0
 800b224:	d077      	beq.n	800b316 <_dtoa_r+0x1d6>
 800b226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b228:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b234:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b238:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b23c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b240:	4619      	mov	r1, r3
 800b242:	2200      	movs	r2, #0
 800b244:	4b74      	ldr	r3, [pc, #464]	@ (800b418 <_dtoa_r+0x2d8>)
 800b246:	f7f5 f827 	bl	8000298 <__aeabi_dsub>
 800b24a:	a369      	add	r3, pc, #420	@ (adr r3, 800b3f0 <_dtoa_r+0x2b0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	a368      	add	r3, pc, #416	@ (adr r3, 800b3f8 <_dtoa_r+0x2b8>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f81f 	bl	800029c <__adddf3>
 800b25e:	4604      	mov	r4, r0
 800b260:	4630      	mov	r0, r6
 800b262:	460d      	mov	r5, r1
 800b264:	f7f5 f966 	bl	8000534 <__aeabi_i2d>
 800b268:	a365      	add	r3, pc, #404	@ (adr r3, 800b400 <_dtoa_r+0x2c0>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	f7f5 f9cb 	bl	8000608 <__aeabi_dmul>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 f80f 	bl	800029c <__adddf3>
 800b27e:	4604      	mov	r4, r0
 800b280:	460d      	mov	r5, r1
 800b282:	f7f5 fc71 	bl	8000b68 <__aeabi_d2iz>
 800b286:	2200      	movs	r2, #0
 800b288:	4607      	mov	r7, r0
 800b28a:	2300      	movs	r3, #0
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 fc2c 	bl	8000aec <__aeabi_dcmplt>
 800b294:	b140      	cbz	r0, 800b2a8 <_dtoa_r+0x168>
 800b296:	4638      	mov	r0, r7
 800b298:	f7f5 f94c 	bl	8000534 <__aeabi_i2d>
 800b29c:	4622      	mov	r2, r4
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f7f5 fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2a4:	b900      	cbnz	r0, 800b2a8 <_dtoa_r+0x168>
 800b2a6:	3f01      	subs	r7, #1
 800b2a8:	2f16      	cmp	r7, #22
 800b2aa:	d851      	bhi.n	800b350 <_dtoa_r+0x210>
 800b2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800b41c <_dtoa_r+0x2dc>)
 800b2ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ba:	f7f5 fc17 	bl	8000aec <__aeabi_dcmplt>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d048      	beq.n	800b354 <_dtoa_r+0x214>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2ca:	1b9b      	subs	r3, r3, r6
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	bf44      	itt	mi
 800b2d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2d4:	2300      	movmi	r3, #0
 800b2d6:	9208      	str	r2, [sp, #32]
 800b2d8:	bf54      	ite	pl
 800b2da:	f04f 0800 	movpl.w	r8, #0
 800b2de:	9308      	strmi	r3, [sp, #32]
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	db39      	blt.n	800b358 <_dtoa_r+0x218>
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b2e8:	443b      	add	r3, r7
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f2:	2b09      	cmp	r3, #9
 800b2f4:	d864      	bhi.n	800b3c0 <_dtoa_r+0x280>
 800b2f6:	2b05      	cmp	r3, #5
 800b2f8:	bfc4      	itt	gt
 800b2fa:	3b04      	subgt	r3, #4
 800b2fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b300:	f1a3 0302 	sub.w	r3, r3, #2
 800b304:	bfcc      	ite	gt
 800b306:	2400      	movgt	r4, #0
 800b308:	2401      	movle	r4, #1
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d863      	bhi.n	800b3d6 <_dtoa_r+0x296>
 800b30e:	e8df f003 	tbb	[pc, r3]
 800b312:	372a      	.short	0x372a
 800b314:	5535      	.short	0x5535
 800b316:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b31a:	441e      	add	r6, r3
 800b31c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b320:	2b20      	cmp	r3, #32
 800b322:	bfc1      	itttt	gt
 800b324:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b328:	409f      	lslgt	r7, r3
 800b32a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b32e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b332:	bfd6      	itet	le
 800b334:	f1c3 0320 	rsble	r3, r3, #32
 800b338:	ea47 0003 	orrgt.w	r0, r7, r3
 800b33c:	fa04 f003 	lslle.w	r0, r4, r3
 800b340:	f7f5 f8e8 	bl	8000514 <__aeabi_ui2d>
 800b344:	2201      	movs	r2, #1
 800b346:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b34a:	3e01      	subs	r6, #1
 800b34c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b34e:	e777      	b.n	800b240 <_dtoa_r+0x100>
 800b350:	2301      	movs	r3, #1
 800b352:	e7b8      	b.n	800b2c6 <_dtoa_r+0x186>
 800b354:	9012      	str	r0, [sp, #72]	@ 0x48
 800b356:	e7b7      	b.n	800b2c8 <_dtoa_r+0x188>
 800b358:	427b      	negs	r3, r7
 800b35a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b35c:	2300      	movs	r3, #0
 800b35e:	eba8 0807 	sub.w	r8, r8, r7
 800b362:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b364:	e7c4      	b.n	800b2f0 <_dtoa_r+0x1b0>
 800b366:	2300      	movs	r3, #0
 800b368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dc35      	bgt.n	800b3dc <_dtoa_r+0x29c>
 800b370:	2301      	movs	r3, #1
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	461a      	mov	r2, r3
 800b378:	920e      	str	r2, [sp, #56]	@ 0x38
 800b37a:	e00b      	b.n	800b394 <_dtoa_r+0x254>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e7f3      	b.n	800b368 <_dtoa_r+0x228>
 800b380:	2300      	movs	r3, #0
 800b382:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b386:	18fb      	adds	r3, r7, r3
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	3301      	adds	r3, #1
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	bfb8      	it	lt
 800b392:	2301      	movlt	r3, #1
 800b394:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b398:	2100      	movs	r1, #0
 800b39a:	2204      	movs	r2, #4
 800b39c:	f102 0514 	add.w	r5, r2, #20
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	d91f      	bls.n	800b3e4 <_dtoa_r+0x2a4>
 800b3a4:	6041      	str	r1, [r0, #4]
 800b3a6:	4658      	mov	r0, fp
 800b3a8:	f000 fd8e 	bl	800bec8 <_Balloc>
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d13c      	bne.n	800b42c <_dtoa_r+0x2ec>
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b420 <_dtoa_r+0x2e0>)
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3ba:	e6d8      	b.n	800b16e <_dtoa_r+0x2e>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e7e0      	b.n	800b382 <_dtoa_r+0x242>
 800b3c0:	2401      	movs	r4, #1
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	9307      	str	r3, [sp, #28]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2312      	movs	r3, #18
 800b3d4:	e7d0      	b.n	800b378 <_dtoa_r+0x238>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3da:	e7f5      	b.n	800b3c8 <_dtoa_r+0x288>
 800b3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	9307      	str	r3, [sp, #28]
 800b3e2:	e7d7      	b.n	800b394 <_dtoa_r+0x254>
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	0052      	lsls	r2, r2, #1
 800b3e8:	e7d8      	b.n	800b39c <_dtoa_r+0x25c>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	636f4361 	.word	0x636f4361
 800b3f4:	3fd287a7 	.word	0x3fd287a7
 800b3f8:	8b60c8b3 	.word	0x8b60c8b3
 800b3fc:	3fc68a28 	.word	0x3fc68a28
 800b400:	509f79fb 	.word	0x509f79fb
 800b404:	3fd34413 	.word	0x3fd34413
 800b408:	0800ce29 	.word	0x0800ce29
 800b40c:	0800ce40 	.word	0x0800ce40
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	0800cdf9 	.word	0x0800cdf9
 800b418:	3ff80000 	.word	0x3ff80000
 800b41c:	0800cf38 	.word	0x0800cf38
 800b420:	0800ce98 	.word	0x0800ce98
 800b424:	0800ce25 	.word	0x0800ce25
 800b428:	0800cdf8 	.word	0x0800cdf8
 800b42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b430:	6018      	str	r0, [r3, #0]
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	2b0e      	cmp	r3, #14
 800b436:	f200 80a4 	bhi.w	800b582 <_dtoa_r+0x442>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	f000 80a1 	beq.w	800b582 <_dtoa_r+0x442>
 800b440:	2f00      	cmp	r7, #0
 800b442:	dd33      	ble.n	800b4ac <_dtoa_r+0x36c>
 800b444:	4bad      	ldr	r3, [pc, #692]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b446:	f007 020f 	and.w	r2, r7, #15
 800b44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44e:	ed93 7b00 	vldr	d7, [r3]
 800b452:	05f8      	lsls	r0, r7, #23
 800b454:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b45c:	d516      	bpl.n	800b48c <_dtoa_r+0x34c>
 800b45e:	4ba8      	ldr	r3, [pc, #672]	@ (800b700 <_dtoa_r+0x5c0>)
 800b460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b468:	f7f5 f9f8 	bl	800085c <__aeabi_ddiv>
 800b46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b470:	f004 040f 	and.w	r4, r4, #15
 800b474:	2603      	movs	r6, #3
 800b476:	4da2      	ldr	r5, [pc, #648]	@ (800b700 <_dtoa_r+0x5c0>)
 800b478:	b954      	cbnz	r4, 800b490 <_dtoa_r+0x350>
 800b47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	f7f5 f9eb 	bl	800085c <__aeabi_ddiv>
 800b486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b48a:	e028      	b.n	800b4de <_dtoa_r+0x39e>
 800b48c:	2602      	movs	r6, #2
 800b48e:	e7f2      	b.n	800b476 <_dtoa_r+0x336>
 800b490:	07e1      	lsls	r1, r4, #31
 800b492:	d508      	bpl.n	800b4a6 <_dtoa_r+0x366>
 800b494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b49c:	f7f5 f8b4 	bl	8000608 <__aeabi_dmul>
 800b4a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	1064      	asrs	r4, r4, #1
 800b4a8:	3508      	adds	r5, #8
 800b4aa:	e7e5      	b.n	800b478 <_dtoa_r+0x338>
 800b4ac:	f000 80d2 	beq.w	800b654 <_dtoa_r+0x514>
 800b4b0:	427c      	negs	r4, r7
 800b4b2:	4b92      	ldr	r3, [pc, #584]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b4b4:	4d92      	ldr	r5, [pc, #584]	@ (800b700 <_dtoa_r+0x5c0>)
 800b4b6:	f004 020f 	and.w	r2, r4, #15
 800b4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ce:	1124      	asrs	r4, r4, #4
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2602      	movs	r6, #2
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	f040 80b2 	bne.w	800b63e <_dtoa_r+0x4fe>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1d3      	bne.n	800b486 <_dtoa_r+0x346>
 800b4de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80b7 	beq.w	800b658 <_dtoa_r+0x518>
 800b4ea:	4b86      	ldr	r3, [pc, #536]	@ (800b704 <_dtoa_r+0x5c4>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f5 fafb 	bl	8000aec <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f000 80ae 	beq.w	800b658 <_dtoa_r+0x518>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 80aa 	beq.w	800b658 <_dtoa_r+0x518>
 800b504:	9b00      	ldr	r3, [sp, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	dd37      	ble.n	800b57a <_dtoa_r+0x43a>
 800b50a:	1e7b      	subs	r3, r7, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	4620      	mov	r0, r4
 800b510:	4b7d      	ldr	r3, [pc, #500]	@ (800b708 <_dtoa_r+0x5c8>)
 800b512:	2200      	movs	r2, #0
 800b514:	4629      	mov	r1, r5
 800b516:	f7f5 f877 	bl	8000608 <__aeabi_dmul>
 800b51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51e:	9c00      	ldr	r4, [sp, #0]
 800b520:	3601      	adds	r6, #1
 800b522:	4630      	mov	r0, r6
 800b524:	f7f5 f806 	bl	8000534 <__aeabi_i2d>
 800b528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b52c:	f7f5 f86c 	bl	8000608 <__aeabi_dmul>
 800b530:	4b76      	ldr	r3, [pc, #472]	@ (800b70c <_dtoa_r+0x5cc>)
 800b532:	2200      	movs	r2, #0
 800b534:	f7f4 feb2 	bl	800029c <__adddf3>
 800b538:	4605      	mov	r5, r0
 800b53a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b53e:	2c00      	cmp	r4, #0
 800b540:	f040 808d 	bne.w	800b65e <_dtoa_r+0x51e>
 800b544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b548:	4b71      	ldr	r3, [pc, #452]	@ (800b710 <_dtoa_r+0x5d0>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f4 fea4 	bl	8000298 <__aeabi_dsub>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b558:	462a      	mov	r2, r5
 800b55a:	4633      	mov	r3, r6
 800b55c:	f7f5 fae4 	bl	8000b28 <__aeabi_dcmpgt>
 800b560:	2800      	cmp	r0, #0
 800b562:	f040 828b 	bne.w	800ba7c <_dtoa_r+0x93c>
 800b566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b56a:	462a      	mov	r2, r5
 800b56c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b570:	f7f5 fabc 	bl	8000aec <__aeabi_dcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	f040 8128 	bne.w	800b7ca <_dtoa_r+0x68a>
 800b57a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b57e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f2c0 815a 	blt.w	800b83e <_dtoa_r+0x6fe>
 800b58a:	2f0e      	cmp	r7, #14
 800b58c:	f300 8157 	bgt.w	800b83e <_dtoa_r+0x6fe>
 800b590:	4b5a      	ldr	r3, [pc, #360]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b596:	ed93 7b00 	vldr	d7, [r3]
 800b59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	ed8d 7b00 	vstr	d7, [sp]
 800b5a2:	da03      	bge.n	800b5ac <_dtoa_r+0x46c>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f340 8101 	ble.w	800b7ae <_dtoa_r+0x66e>
 800b5ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5b0:	4656      	mov	r6, sl
 800b5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f5 f94f 	bl	800085c <__aeabi_ddiv>
 800b5be:	f7f5 fad3 	bl	8000b68 <__aeabi_d2iz>
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	f7f4 ffb6 	bl	8000534 <__aeabi_i2d>
 800b5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5dc:	f7f4 fe5c 	bl	8000298 <__aeabi_dsub>
 800b5e0:	f806 4b01 	strb.w	r4, [r6], #1
 800b5e4:	9d07      	ldr	r5, [sp, #28]
 800b5e6:	eba6 040a 	sub.w	r4, r6, sl
 800b5ea:	42a5      	cmp	r5, r4
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	f040 8117 	bne.w	800b822 <_dtoa_r+0x6e2>
 800b5f4:	f7f4 fe52 	bl	800029c <__adddf3>
 800b5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	f7f5 fa92 	bl	8000b28 <__aeabi_dcmpgt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f040 80f9 	bne.w	800b7fc <_dtoa_r+0x6bc>
 800b60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 800b616:	b118      	cbz	r0, 800b620 <_dtoa_r+0x4e0>
 800b618:	f018 0f01 	tst.w	r8, #1
 800b61c:	f040 80ee 	bne.w	800b7fc <_dtoa_r+0x6bc>
 800b620:	4649      	mov	r1, r9
 800b622:	4658      	mov	r0, fp
 800b624:	f000 fc90 	bl	800bf48 <_Bfree>
 800b628:	2300      	movs	r3, #0
 800b62a:	7033      	strb	r3, [r6, #0]
 800b62c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b62e:	3701      	adds	r7, #1
 800b630:	601f      	str	r7, [r3, #0]
 800b632:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 831d 	beq.w	800bc74 <_dtoa_r+0xb34>
 800b63a:	601e      	str	r6, [r3, #0]
 800b63c:	e31a      	b.n	800bc74 <_dtoa_r+0xb34>
 800b63e:	07e2      	lsls	r2, r4, #31
 800b640:	d505      	bpl.n	800b64e <_dtoa_r+0x50e>
 800b642:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b646:	f7f4 ffdf 	bl	8000608 <__aeabi_dmul>
 800b64a:	3601      	adds	r6, #1
 800b64c:	2301      	movs	r3, #1
 800b64e:	1064      	asrs	r4, r4, #1
 800b650:	3508      	adds	r5, #8
 800b652:	e73f      	b.n	800b4d4 <_dtoa_r+0x394>
 800b654:	2602      	movs	r6, #2
 800b656:	e742      	b.n	800b4de <_dtoa_r+0x39e>
 800b658:	9c07      	ldr	r4, [sp, #28]
 800b65a:	9704      	str	r7, [sp, #16]
 800b65c:	e761      	b.n	800b522 <_dtoa_r+0x3e2>
 800b65e:	4b27      	ldr	r3, [pc, #156]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b662:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b666:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b66a:	4454      	add	r4, sl
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d053      	beq.n	800b718 <_dtoa_r+0x5d8>
 800b670:	4928      	ldr	r1, [pc, #160]	@ (800b714 <_dtoa_r+0x5d4>)
 800b672:	2000      	movs	r0, #0
 800b674:	f7f5 f8f2 	bl	800085c <__aeabi_ddiv>
 800b678:	4633      	mov	r3, r6
 800b67a:	462a      	mov	r2, r5
 800b67c:	f7f4 fe0c 	bl	8000298 <__aeabi_dsub>
 800b680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b684:	4656      	mov	r6, sl
 800b686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b68a:	f7f5 fa6d 	bl	8000b68 <__aeabi_d2iz>
 800b68e:	4605      	mov	r5, r0
 800b690:	f7f4 ff50 	bl	8000534 <__aeabi_i2d>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b69c:	f7f4 fdfc 	bl	8000298 <__aeabi_dsub>
 800b6a0:	3530      	adds	r5, #48	@ 0x30
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6aa:	f806 5b01 	strb.w	r5, [r6], #1
 800b6ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6b2:	f7f5 fa1b 	bl	8000aec <__aeabi_dcmplt>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d171      	bne.n	800b79e <_dtoa_r+0x65e>
 800b6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6be:	4911      	ldr	r1, [pc, #68]	@ (800b704 <_dtoa_r+0x5c4>)
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f7f4 fde9 	bl	8000298 <__aeabi_dsub>
 800b6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ca:	f7f5 fa0f 	bl	8000aec <__aeabi_dcmplt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f040 8095 	bne.w	800b7fe <_dtoa_r+0x6be>
 800b6d4:	42a6      	cmp	r6, r4
 800b6d6:	f43f af50 	beq.w	800b57a <_dtoa_r+0x43a>
 800b6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6de:	4b0a      	ldr	r3, [pc, #40]	@ (800b708 <_dtoa_r+0x5c8>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f7f4 ff91 	bl	8000608 <__aeabi_dmul>
 800b6e6:	4b08      	ldr	r3, [pc, #32]	@ (800b708 <_dtoa_r+0x5c8>)
 800b6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f2:	f7f4 ff89 	bl	8000608 <__aeabi_dmul>
 800b6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6fa:	e7c4      	b.n	800b686 <_dtoa_r+0x546>
 800b6fc:	0800cf38 	.word	0x0800cf38
 800b700:	0800cf10 	.word	0x0800cf10
 800b704:	3ff00000 	.word	0x3ff00000
 800b708:	40240000 	.word	0x40240000
 800b70c:	401c0000 	.word	0x401c0000
 800b710:	40140000 	.word	0x40140000
 800b714:	3fe00000 	.word	0x3fe00000
 800b718:	4631      	mov	r1, r6
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7f4 ff74 	bl	8000608 <__aeabi_dmul>
 800b720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b724:	9415      	str	r4, [sp, #84]	@ 0x54
 800b726:	4656      	mov	r6, sl
 800b728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72c:	f7f5 fa1c 	bl	8000b68 <__aeabi_d2iz>
 800b730:	4605      	mov	r5, r0
 800b732:	f7f4 feff 	bl	8000534 <__aeabi_i2d>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73e:	f7f4 fdab 	bl	8000298 <__aeabi_dsub>
 800b742:	3530      	adds	r5, #48	@ 0x30
 800b744:	f806 5b01 	strb.w	r5, [r6], #1
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	42a6      	cmp	r6, r4
 800b74e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	d124      	bne.n	800b7a2 <_dtoa_r+0x662>
 800b758:	4bac      	ldr	r3, [pc, #688]	@ (800ba0c <_dtoa_r+0x8cc>)
 800b75a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b75e:	f7f4 fd9d 	bl	800029c <__adddf3>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f5 f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d145      	bne.n	800b7fe <_dtoa_r+0x6be>
 800b772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b776:	49a5      	ldr	r1, [pc, #660]	@ (800ba0c <_dtoa_r+0x8cc>)
 800b778:	2000      	movs	r0, #0
 800b77a:	f7f4 fd8d 	bl	8000298 <__aeabi_dsub>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b786:	f7f5 f9b1 	bl	8000aec <__aeabi_dcmplt>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f aef5 	beq.w	800b57a <_dtoa_r+0x43a>
 800b790:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b792:	1e73      	subs	r3, r6, #1
 800b794:	9315      	str	r3, [sp, #84]	@ 0x54
 800b796:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b79a:	2b30      	cmp	r3, #48	@ 0x30
 800b79c:	d0f8      	beq.n	800b790 <_dtoa_r+0x650>
 800b79e:	9f04      	ldr	r7, [sp, #16]
 800b7a0:	e73e      	b.n	800b620 <_dtoa_r+0x4e0>
 800b7a2:	4b9b      	ldr	r3, [pc, #620]	@ (800ba10 <_dtoa_r+0x8d0>)
 800b7a4:	f7f4 ff30 	bl	8000608 <__aeabi_dmul>
 800b7a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ac:	e7bc      	b.n	800b728 <_dtoa_r+0x5e8>
 800b7ae:	d10c      	bne.n	800b7ca <_dtoa_r+0x68a>
 800b7b0:	4b98      	ldr	r3, [pc, #608]	@ (800ba14 <_dtoa_r+0x8d4>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b8:	f7f4 ff26 	bl	8000608 <__aeabi_dmul>
 800b7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7c0:	f7f5 f9a8 	bl	8000b14 <__aeabi_dcmpge>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f000 8157 	beq.w	800ba78 <_dtoa_r+0x938>
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	4625      	mov	r5, r4
 800b7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d0:	43db      	mvns	r3, r3
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	4656      	mov	r6, sl
 800b7d6:	2700      	movs	r7, #0
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f000 fbb4 	bl	800bf48 <_Bfree>
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	d0dc      	beq.n	800b79e <_dtoa_r+0x65e>
 800b7e4:	b12f      	cbz	r7, 800b7f2 <_dtoa_r+0x6b2>
 800b7e6:	42af      	cmp	r7, r5
 800b7e8:	d003      	beq.n	800b7f2 <_dtoa_r+0x6b2>
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4658      	mov	r0, fp
 800b7ee:	f000 fbab 	bl	800bf48 <_Bfree>
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4658      	mov	r0, fp
 800b7f6:	f000 fba7 	bl	800bf48 <_Bfree>
 800b7fa:	e7d0      	b.n	800b79e <_dtoa_r+0x65e>
 800b7fc:	9704      	str	r7, [sp, #16]
 800b7fe:	4633      	mov	r3, r6
 800b800:	461e      	mov	r6, r3
 800b802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b806:	2a39      	cmp	r2, #57	@ 0x39
 800b808:	d107      	bne.n	800b81a <_dtoa_r+0x6da>
 800b80a:	459a      	cmp	sl, r3
 800b80c:	d1f8      	bne.n	800b800 <_dtoa_r+0x6c0>
 800b80e:	9a04      	ldr	r2, [sp, #16]
 800b810:	3201      	adds	r2, #1
 800b812:	9204      	str	r2, [sp, #16]
 800b814:	2230      	movs	r2, #48	@ 0x30
 800b816:	f88a 2000 	strb.w	r2, [sl]
 800b81a:	781a      	ldrb	r2, [r3, #0]
 800b81c:	3201      	adds	r2, #1
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	e7bd      	b.n	800b79e <_dtoa_r+0x65e>
 800b822:	4b7b      	ldr	r3, [pc, #492]	@ (800ba10 <_dtoa_r+0x8d0>)
 800b824:	2200      	movs	r2, #0
 800b826:	f7f4 feef 	bl	8000608 <__aeabi_dmul>
 800b82a:	2200      	movs	r2, #0
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	f7f5 f951 	bl	8000ad8 <__aeabi_dcmpeq>
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f aebb 	beq.w	800b5b2 <_dtoa_r+0x472>
 800b83c:	e6f0      	b.n	800b620 <_dtoa_r+0x4e0>
 800b83e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b840:	2a00      	cmp	r2, #0
 800b842:	f000 80db 	beq.w	800b9fc <_dtoa_r+0x8bc>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	2a01      	cmp	r2, #1
 800b84a:	f300 80bf 	bgt.w	800b9cc <_dtoa_r+0x88c>
 800b84e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b850:	2a00      	cmp	r2, #0
 800b852:	f000 80b7 	beq.w	800b9c4 <_dtoa_r+0x884>
 800b856:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b85a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b85c:	4646      	mov	r6, r8
 800b85e:	9a08      	ldr	r2, [sp, #32]
 800b860:	2101      	movs	r1, #1
 800b862:	441a      	add	r2, r3
 800b864:	4658      	mov	r0, fp
 800b866:	4498      	add	r8, r3
 800b868:	9208      	str	r2, [sp, #32]
 800b86a:	f000 fc21 	bl	800c0b0 <__i2b>
 800b86e:	4605      	mov	r5, r0
 800b870:	b15e      	cbz	r6, 800b88a <_dtoa_r+0x74a>
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd08      	ble.n	800b88a <_dtoa_r+0x74a>
 800b878:	42b3      	cmp	r3, r6
 800b87a:	9a08      	ldr	r2, [sp, #32]
 800b87c:	bfa8      	it	ge
 800b87e:	4633      	movge	r3, r6
 800b880:	eba8 0803 	sub.w	r8, r8, r3
 800b884:	1af6      	subs	r6, r6, r3
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88c:	b1f3      	cbz	r3, 800b8cc <_dtoa_r+0x78c>
 800b88e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80b7 	beq.w	800ba04 <_dtoa_r+0x8c4>
 800b896:	b18c      	cbz	r4, 800b8bc <_dtoa_r+0x77c>
 800b898:	4629      	mov	r1, r5
 800b89a:	4622      	mov	r2, r4
 800b89c:	4658      	mov	r0, fp
 800b89e:	f000 fcc7 	bl	800c230 <__pow5mult>
 800b8a2:	464a      	mov	r2, r9
 800b8a4:	4601      	mov	r1, r0
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	4658      	mov	r0, fp
 800b8aa:	f000 fc17 	bl	800c0dc <__multiply>
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	9004      	str	r0, [sp, #16]
 800b8b2:	4658      	mov	r0, fp
 800b8b4:	f000 fb48 	bl	800bf48 <_Bfree>
 800b8b8:	9b04      	ldr	r3, [sp, #16]
 800b8ba:	4699      	mov	r9, r3
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8be:	1b1a      	subs	r2, r3, r4
 800b8c0:	d004      	beq.n	800b8cc <_dtoa_r+0x78c>
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	4658      	mov	r0, fp
 800b8c6:	f000 fcb3 	bl	800c230 <__pow5mult>
 800b8ca:	4681      	mov	r9, r0
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4658      	mov	r0, fp
 800b8d0:	f000 fbee 	bl	800c0b0 <__i2b>
 800b8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 81cf 	beq.w	800bc7c <_dtoa_r+0xb3c>
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4658      	mov	r0, fp
 800b8e4:	f000 fca4 	bl	800c230 <__pow5mult>
 800b8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	f300 8095 	bgt.w	800ba1c <_dtoa_r+0x8dc>
 800b8f2:	9b02      	ldr	r3, [sp, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f040 8087 	bne.w	800ba08 <_dtoa_r+0x8c8>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8089 	bne.w	800ba18 <_dtoa_r+0x8d8>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b90c:	0d1b      	lsrs	r3, r3, #20
 800b90e:	051b      	lsls	r3, r3, #20
 800b910:	b12b      	cbz	r3, 800b91e <_dtoa_r+0x7de>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	3301      	adds	r3, #1
 800b916:	9308      	str	r3, [sp, #32]
 800b918:	f108 0801 	add.w	r8, r8, #1
 800b91c:	2301      	movs	r3, #1
 800b91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 81b0 	beq.w	800bc88 <_dtoa_r+0xb48>
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b92e:	6918      	ldr	r0, [r3, #16]
 800b930:	f000 fb72 	bl	800c018 <__hi0bits>
 800b934:	f1c0 0020 	rsb	r0, r0, #32
 800b938:	9b08      	ldr	r3, [sp, #32]
 800b93a:	4418      	add	r0, r3
 800b93c:	f010 001f 	ands.w	r0, r0, #31
 800b940:	d077      	beq.n	800ba32 <_dtoa_r+0x8f2>
 800b942:	f1c0 0320 	rsb	r3, r0, #32
 800b946:	2b04      	cmp	r3, #4
 800b948:	dd6b      	ble.n	800ba22 <_dtoa_r+0x8e2>
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	f1c0 001c 	rsb	r0, r0, #28
 800b950:	4403      	add	r3, r0
 800b952:	4480      	add	r8, r0
 800b954:	4406      	add	r6, r0
 800b956:	9308      	str	r3, [sp, #32]
 800b958:	f1b8 0f00 	cmp.w	r8, #0
 800b95c:	dd05      	ble.n	800b96a <_dtoa_r+0x82a>
 800b95e:	4649      	mov	r1, r9
 800b960:	4642      	mov	r2, r8
 800b962:	4658      	mov	r0, fp
 800b964:	f000 fcbe 	bl	800c2e4 <__lshift>
 800b968:	4681      	mov	r9, r0
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd05      	ble.n	800b97c <_dtoa_r+0x83c>
 800b970:	4621      	mov	r1, r4
 800b972:	461a      	mov	r2, r3
 800b974:	4658      	mov	r0, fp
 800b976:	f000 fcb5 	bl	800c2e4 <__lshift>
 800b97a:	4604      	mov	r4, r0
 800b97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d059      	beq.n	800ba36 <_dtoa_r+0x8f6>
 800b982:	4621      	mov	r1, r4
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fd19 	bl	800c3bc <__mcmp>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	da53      	bge.n	800ba36 <_dtoa_r+0x8f6>
 800b98e:	1e7b      	subs	r3, r7, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	4649      	mov	r1, r9
 800b994:	2300      	movs	r3, #0
 800b996:	220a      	movs	r2, #10
 800b998:	4658      	mov	r0, fp
 800b99a:	f000 faf7 	bl	800bf8c <__multadd>
 800b99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8172 	beq.w	800bc8c <_dtoa_r+0xb4c>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	220a      	movs	r2, #10
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	f000 faec 	bl	800bf8c <__multadd>
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	dc67      	bgt.n	800ba8c <_dtoa_r+0x94c>
 800b9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	dc41      	bgt.n	800ba46 <_dtoa_r+0x906>
 800b9c2:	e063      	b.n	800ba8c <_dtoa_r+0x94c>
 800b9c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9ca:	e746      	b.n	800b85a <_dtoa_r+0x71a>
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	1e5c      	subs	r4, r3, #1
 800b9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	bfbf      	itttt	lt
 800b9d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9dc:	1ae3      	sublt	r3, r4, r3
 800b9de:	bfb4      	ite	lt
 800b9e0:	18d2      	addlt	r2, r2, r3
 800b9e2:	1b1c      	subge	r4, r3, r4
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	bfbc      	itt	lt
 800b9e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b9ea:	2400      	movlt	r4, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bfb5      	itete	lt
 800b9f0:	eba8 0603 	sublt.w	r6, r8, r3
 800b9f4:	9b07      	ldrge	r3, [sp, #28]
 800b9f6:	2300      	movlt	r3, #0
 800b9f8:	4646      	movge	r6, r8
 800b9fa:	e730      	b.n	800b85e <_dtoa_r+0x71e>
 800b9fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba00:	4646      	mov	r6, r8
 800ba02:	e735      	b.n	800b870 <_dtoa_r+0x730>
 800ba04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba06:	e75c      	b.n	800b8c2 <_dtoa_r+0x782>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	e788      	b.n	800b91e <_dtoa_r+0x7de>
 800ba0c:	3fe00000 	.word	0x3fe00000
 800ba10:	40240000 	.word	0x40240000
 800ba14:	40140000 	.word	0x40140000
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	e780      	b.n	800b91e <_dtoa_r+0x7de>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba20:	e782      	b.n	800b928 <_dtoa_r+0x7e8>
 800ba22:	d099      	beq.n	800b958 <_dtoa_r+0x818>
 800ba24:	9a08      	ldr	r2, [sp, #32]
 800ba26:	331c      	adds	r3, #28
 800ba28:	441a      	add	r2, r3
 800ba2a:	4498      	add	r8, r3
 800ba2c:	441e      	add	r6, r3
 800ba2e:	9208      	str	r2, [sp, #32]
 800ba30:	e792      	b.n	800b958 <_dtoa_r+0x818>
 800ba32:	4603      	mov	r3, r0
 800ba34:	e7f6      	b.n	800ba24 <_dtoa_r+0x8e4>
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	9704      	str	r7, [sp, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dc20      	bgt.n	800ba80 <_dtoa_r+0x940>
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	dd1e      	ble.n	800ba84 <_dtoa_r+0x944>
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f aec0 	bne.w	800b7ce <_dtoa_r+0x68e>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	2205      	movs	r2, #5
 800ba52:	4658      	mov	r0, fp
 800ba54:	f000 fa9a 	bl	800bf8c <__multadd>
 800ba58:	4601      	mov	r1, r0
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 fcad 	bl	800c3bc <__mcmp>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f77f aeb3 	ble.w	800b7ce <_dtoa_r+0x68e>
 800ba68:	4656      	mov	r6, sl
 800ba6a:	2331      	movs	r3, #49	@ 0x31
 800ba6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	e6ae      	b.n	800b7d6 <_dtoa_r+0x696>
 800ba78:	9c07      	ldr	r4, [sp, #28]
 800ba7a:	9704      	str	r7, [sp, #16]
 800ba7c:	4625      	mov	r5, r4
 800ba7e:	e7f3      	b.n	800ba68 <_dtoa_r+0x928>
 800ba80:	9b07      	ldr	r3, [sp, #28]
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 8104 	beq.w	800bc94 <_dtoa_r+0xb54>
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	dd05      	ble.n	800ba9c <_dtoa_r+0x95c>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4632      	mov	r2, r6
 800ba94:	4658      	mov	r0, fp
 800ba96:	f000 fc25 	bl	800c2e4 <__lshift>
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d05a      	beq.n	800bb58 <_dtoa_r+0xa18>
 800baa2:	6869      	ldr	r1, [r5, #4]
 800baa4:	4658      	mov	r0, fp
 800baa6:	f000 fa0f 	bl	800bec8 <_Balloc>
 800baaa:	4606      	mov	r6, r0
 800baac:	b928      	cbnz	r0, 800baba <_dtoa_r+0x97a>
 800baae:	4b84      	ldr	r3, [pc, #528]	@ (800bcc0 <_dtoa_r+0xb80>)
 800bab0:	4602      	mov	r2, r0
 800bab2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bab6:	f7ff bb5a 	b.w	800b16e <_dtoa_r+0x2e>
 800baba:	692a      	ldr	r2, [r5, #16]
 800babc:	3202      	adds	r2, #2
 800babe:	0092      	lsls	r2, r2, #2
 800bac0:	f105 010c 	add.w	r1, r5, #12
 800bac4:	300c      	adds	r0, #12
 800bac6:	f000 fe3d 	bl	800c744 <memcpy>
 800baca:	2201      	movs	r2, #1
 800bacc:	4631      	mov	r1, r6
 800bace:	4658      	mov	r0, fp
 800bad0:	f000 fc08 	bl	800c2e4 <__lshift>
 800bad4:	f10a 0301 	add.w	r3, sl, #1
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	9b00      	ldr	r3, [sp, #0]
 800badc:	4453      	add	r3, sl
 800bade:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	462f      	mov	r7, r5
 800bae8:	930a      	str	r3, [sp, #40]	@ 0x28
 800baea:	4605      	mov	r5, r0
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	4621      	mov	r1, r4
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4648      	mov	r0, r9
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	f7ff fa9a 	bl	800b02e <quorem>
 800bafa:	4639      	mov	r1, r7
 800bafc:	9002      	str	r0, [sp, #8]
 800bafe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb02:	4648      	mov	r0, r9
 800bb04:	f000 fc5a 	bl	800c3bc <__mcmp>
 800bb08:	462a      	mov	r2, r5
 800bb0a:	9008      	str	r0, [sp, #32]
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4658      	mov	r0, fp
 800bb10:	f000 fc70 	bl	800c3f4 <__mdiff>
 800bb14:	68c2      	ldr	r2, [r0, #12]
 800bb16:	4606      	mov	r6, r0
 800bb18:	bb02      	cbnz	r2, 800bb5c <_dtoa_r+0xa1c>
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4648      	mov	r0, r9
 800bb1e:	f000 fc4d 	bl	800c3bc <__mcmp>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4631      	mov	r1, r6
 800bb26:	4658      	mov	r0, fp
 800bb28:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb2a:	f000 fa0d 	bl	800bf48 <_Bfree>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb32:	9e07      	ldr	r6, [sp, #28]
 800bb34:	ea43 0102 	orr.w	r1, r3, r2
 800bb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3a:	4319      	orrs	r1, r3
 800bb3c:	d110      	bne.n	800bb60 <_dtoa_r+0xa20>
 800bb3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb42:	d029      	beq.n	800bb98 <_dtoa_r+0xa58>
 800bb44:	9b08      	ldr	r3, [sp, #32]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd02      	ble.n	800bb50 <_dtoa_r+0xa10>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb50:	9b00      	ldr	r3, [sp, #0]
 800bb52:	f883 8000 	strb.w	r8, [r3]
 800bb56:	e63f      	b.n	800b7d8 <_dtoa_r+0x698>
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e7bb      	b.n	800bad4 <_dtoa_r+0x994>
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	e7e1      	b.n	800bb24 <_dtoa_r+0x9e4>
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	db04      	blt.n	800bb70 <_dtoa_r+0xa30>
 800bb66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	d120      	bne.n	800bbb2 <_dtoa_r+0xa72>
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	dded      	ble.n	800bb50 <_dtoa_r+0xa10>
 800bb74:	4649      	mov	r1, r9
 800bb76:	2201      	movs	r2, #1
 800bb78:	4658      	mov	r0, fp
 800bb7a:	f000 fbb3 	bl	800c2e4 <__lshift>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4681      	mov	r9, r0
 800bb82:	f000 fc1b 	bl	800c3bc <__mcmp>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	dc03      	bgt.n	800bb92 <_dtoa_r+0xa52>
 800bb8a:	d1e1      	bne.n	800bb50 <_dtoa_r+0xa10>
 800bb8c:	f018 0f01 	tst.w	r8, #1
 800bb90:	d0de      	beq.n	800bb50 <_dtoa_r+0xa10>
 800bb92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb96:	d1d8      	bne.n	800bb4a <_dtoa_r+0xa0a>
 800bb98:	9a00      	ldr	r2, [sp, #0]
 800bb9a:	2339      	movs	r3, #57	@ 0x39
 800bb9c:	7013      	strb	r3, [r2, #0]
 800bb9e:	4633      	mov	r3, r6
 800bba0:	461e      	mov	r6, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bba8:	2a39      	cmp	r2, #57	@ 0x39
 800bbaa:	d052      	beq.n	800bc52 <_dtoa_r+0xb12>
 800bbac:	3201      	adds	r2, #1
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	e612      	b.n	800b7d8 <_dtoa_r+0x698>
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	dd07      	ble.n	800bbc6 <_dtoa_r+0xa86>
 800bbb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbba:	d0ed      	beq.n	800bb98 <_dtoa_r+0xa58>
 800bbbc:	9a00      	ldr	r2, [sp, #0]
 800bbbe:	f108 0301 	add.w	r3, r8, #1
 800bbc2:	7013      	strb	r3, [r2, #0]
 800bbc4:	e608      	b.n	800b7d8 <_dtoa_r+0x698>
 800bbc6:	9b07      	ldr	r3, [sp, #28]
 800bbc8:	9a07      	ldr	r2, [sp, #28]
 800bbca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d028      	beq.n	800bc26 <_dtoa_r+0xae6>
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4658      	mov	r0, fp
 800bbdc:	f000 f9d6 	bl	800bf8c <__multadd>
 800bbe0:	42af      	cmp	r7, r5
 800bbe2:	4681      	mov	r9, r0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	f04f 020a 	mov.w	r2, #10
 800bbec:	4639      	mov	r1, r7
 800bbee:	4658      	mov	r0, fp
 800bbf0:	d107      	bne.n	800bc02 <_dtoa_r+0xac2>
 800bbf2:	f000 f9cb 	bl	800bf8c <__multadd>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	9b07      	ldr	r3, [sp, #28]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9307      	str	r3, [sp, #28]
 800bc00:	e774      	b.n	800baec <_dtoa_r+0x9ac>
 800bc02:	f000 f9c3 	bl	800bf8c <__multadd>
 800bc06:	4629      	mov	r1, r5
 800bc08:	4607      	mov	r7, r0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	220a      	movs	r2, #10
 800bc0e:	4658      	mov	r0, fp
 800bc10:	f000 f9bc 	bl	800bf8c <__multadd>
 800bc14:	4605      	mov	r5, r0
 800bc16:	e7f0      	b.n	800bbfa <_dtoa_r+0xaba>
 800bc18:	9b00      	ldr	r3, [sp, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfcc      	ite	gt
 800bc1e:	461e      	movgt	r6, r3
 800bc20:	2601      	movle	r6, #1
 800bc22:	4456      	add	r6, sl
 800bc24:	2700      	movs	r7, #0
 800bc26:	4649      	mov	r1, r9
 800bc28:	2201      	movs	r2, #1
 800bc2a:	4658      	mov	r0, fp
 800bc2c:	f000 fb5a 	bl	800c2e4 <__lshift>
 800bc30:	4621      	mov	r1, r4
 800bc32:	4681      	mov	r9, r0
 800bc34:	f000 fbc2 	bl	800c3bc <__mcmp>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	dcb0      	bgt.n	800bb9e <_dtoa_r+0xa5e>
 800bc3c:	d102      	bne.n	800bc44 <_dtoa_r+0xb04>
 800bc3e:	f018 0f01 	tst.w	r8, #1
 800bc42:	d1ac      	bne.n	800bb9e <_dtoa_r+0xa5e>
 800bc44:	4633      	mov	r3, r6
 800bc46:	461e      	mov	r6, r3
 800bc48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc4c:	2a30      	cmp	r2, #48	@ 0x30
 800bc4e:	d0fa      	beq.n	800bc46 <_dtoa_r+0xb06>
 800bc50:	e5c2      	b.n	800b7d8 <_dtoa_r+0x698>
 800bc52:	459a      	cmp	sl, r3
 800bc54:	d1a4      	bne.n	800bba0 <_dtoa_r+0xa60>
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	2331      	movs	r3, #49	@ 0x31
 800bc5e:	f88a 3000 	strb.w	r3, [sl]
 800bc62:	e5b9      	b.n	800b7d8 <_dtoa_r+0x698>
 800bc64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bcc4 <_dtoa_r+0xb84>
 800bc6a:	b11b      	cbz	r3, 800bc74 <_dtoa_r+0xb34>
 800bc6c:	f10a 0308 	add.w	r3, sl, #8
 800bc70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	4650      	mov	r0, sl
 800bc76:	b019      	add	sp, #100	@ 0x64
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	f77f ae37 	ble.w	800b8f2 <_dtoa_r+0x7b2>
 800bc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e655      	b.n	800b938 <_dtoa_r+0x7f8>
 800bc8c:	9b00      	ldr	r3, [sp, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f77f aed6 	ble.w	800ba40 <_dtoa_r+0x900>
 800bc94:	4656      	mov	r6, sl
 800bc96:	4621      	mov	r1, r4
 800bc98:	4648      	mov	r0, r9
 800bc9a:	f7ff f9c8 	bl	800b02e <quorem>
 800bc9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bca2:	f806 8b01 	strb.w	r8, [r6], #1
 800bca6:	9b00      	ldr	r3, [sp, #0]
 800bca8:	eba6 020a 	sub.w	r2, r6, sl
 800bcac:	4293      	cmp	r3, r2
 800bcae:	ddb3      	ble.n	800bc18 <_dtoa_r+0xad8>
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	220a      	movs	r2, #10
 800bcb6:	4658      	mov	r0, fp
 800bcb8:	f000 f968 	bl	800bf8c <__multadd>
 800bcbc:	4681      	mov	r9, r0
 800bcbe:	e7ea      	b.n	800bc96 <_dtoa_r+0xb56>
 800bcc0:	0800ce98 	.word	0x0800ce98
 800bcc4:	0800ce1c 	.word	0x0800ce1c

0800bcc8 <_free_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4605      	mov	r5, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d041      	beq.n	800bd54 <_free_r+0x8c>
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f0c      	subs	r4, r1, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	18e4      	addlt	r4, r4, r3
 800bcdc:	f000 f8e8 	bl	800beb0 <__malloc_lock>
 800bce0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd58 <_free_r+0x90>)
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	b933      	cbnz	r3, 800bcf4 <_free_r+0x2c>
 800bce6:	6063      	str	r3, [r4, #4]
 800bce8:	6014      	str	r4, [r2, #0]
 800bcea:	4628      	mov	r0, r5
 800bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf0:	f000 b8e4 	b.w	800bebc <__malloc_unlock>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d908      	bls.n	800bd0a <_free_r+0x42>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	1821      	adds	r1, r4, r0
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf01      	itttt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	e7ed      	b.n	800bce6 <_free_r+0x1e>
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b10b      	cbz	r3, 800bd14 <_free_r+0x4c>
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	d9fa      	bls.n	800bd0a <_free_r+0x42>
 800bd14:	6811      	ldr	r1, [r2, #0]
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d10b      	bne.n	800bd34 <_free_r+0x6c>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	4401      	add	r1, r0
 800bd20:	1850      	adds	r0, r2, r1
 800bd22:	4283      	cmp	r3, r0
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	d1e0      	bne.n	800bcea <_free_r+0x22>
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	6053      	str	r3, [r2, #4]
 800bd2e:	4408      	add	r0, r1
 800bd30:	6010      	str	r0, [r2, #0]
 800bd32:	e7da      	b.n	800bcea <_free_r+0x22>
 800bd34:	d902      	bls.n	800bd3c <_free_r+0x74>
 800bd36:	230c      	movs	r3, #12
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	e7d6      	b.n	800bcea <_free_r+0x22>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf04      	itt	eq
 800bd44:	6819      	ldreq	r1, [r3, #0]
 800bd46:	685b      	ldreq	r3, [r3, #4]
 800bd48:	6063      	str	r3, [r4, #4]
 800bd4a:	bf04      	itt	eq
 800bd4c:	1809      	addeq	r1, r1, r0
 800bd4e:	6021      	streq	r1, [r4, #0]
 800bd50:	6054      	str	r4, [r2, #4]
 800bd52:	e7ca      	b.n	800bcea <_free_r+0x22>
 800bd54:	bd38      	pop	{r3, r4, r5, pc}
 800bd56:	bf00      	nop
 800bd58:	20002150 	.word	0x20002150

0800bd5c <malloc>:
 800bd5c:	4b02      	ldr	r3, [pc, #8]	@ (800bd68 <malloc+0xc>)
 800bd5e:	4601      	mov	r1, r0
 800bd60:	6818      	ldr	r0, [r3, #0]
 800bd62:	f000 b825 	b.w	800bdb0 <_malloc_r>
 800bd66:	bf00      	nop
 800bd68:	20000108 	.word	0x20000108

0800bd6c <sbrk_aligned>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	4e0f      	ldr	r6, [pc, #60]	@ (800bdac <sbrk_aligned+0x40>)
 800bd70:	460c      	mov	r4, r1
 800bd72:	6831      	ldr	r1, [r6, #0]
 800bd74:	4605      	mov	r5, r0
 800bd76:	b911      	cbnz	r1, 800bd7e <sbrk_aligned+0x12>
 800bd78:	f000 fcd4 	bl	800c724 <_sbrk_r>
 800bd7c:	6030      	str	r0, [r6, #0]
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4628      	mov	r0, r5
 800bd82:	f000 fccf 	bl	800c724 <_sbrk_r>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d103      	bne.n	800bd92 <sbrk_aligned+0x26>
 800bd8a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd8e:	4620      	mov	r0, r4
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	1cc4      	adds	r4, r0, #3
 800bd94:	f024 0403 	bic.w	r4, r4, #3
 800bd98:	42a0      	cmp	r0, r4
 800bd9a:	d0f8      	beq.n	800bd8e <sbrk_aligned+0x22>
 800bd9c:	1a21      	subs	r1, r4, r0
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 fcc0 	bl	800c724 <_sbrk_r>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d1f2      	bne.n	800bd8e <sbrk_aligned+0x22>
 800bda8:	e7ef      	b.n	800bd8a <sbrk_aligned+0x1e>
 800bdaa:	bf00      	nop
 800bdac:	2000214c 	.word	0x2000214c

0800bdb0 <_malloc_r>:
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	1ccd      	adds	r5, r1, #3
 800bdb6:	f025 0503 	bic.w	r5, r5, #3
 800bdba:	3508      	adds	r5, #8
 800bdbc:	2d0c      	cmp	r5, #12
 800bdbe:	bf38      	it	cc
 800bdc0:	250c      	movcc	r5, #12
 800bdc2:	2d00      	cmp	r5, #0
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	db01      	blt.n	800bdcc <_malloc_r+0x1c>
 800bdc8:	42a9      	cmp	r1, r5
 800bdca:	d904      	bls.n	800bdd6 <_malloc_r+0x26>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	6033      	str	r3, [r6, #0]
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800beac <_malloc_r+0xfc>
 800bdda:	f000 f869 	bl	800beb0 <__malloc_lock>
 800bdde:	f8d8 3000 	ldr.w	r3, [r8]
 800bde2:	461c      	mov	r4, r3
 800bde4:	bb44      	cbnz	r4, 800be38 <_malloc_r+0x88>
 800bde6:	4629      	mov	r1, r5
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7ff ffbf 	bl	800bd6c <sbrk_aligned>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	d158      	bne.n	800bea6 <_malloc_r+0xf6>
 800bdf4:	f8d8 4000 	ldr.w	r4, [r8]
 800bdf8:	4627      	mov	r7, r4
 800bdfa:	2f00      	cmp	r7, #0
 800bdfc:	d143      	bne.n	800be86 <_malloc_r+0xd6>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	d04b      	beq.n	800be9a <_malloc_r+0xea>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	4639      	mov	r1, r7
 800be06:	4630      	mov	r0, r6
 800be08:	eb04 0903 	add.w	r9, r4, r3
 800be0c:	f000 fc8a 	bl	800c724 <_sbrk_r>
 800be10:	4581      	cmp	r9, r0
 800be12:	d142      	bne.n	800be9a <_malloc_r+0xea>
 800be14:	6821      	ldr	r1, [r4, #0]
 800be16:	1a6d      	subs	r5, r5, r1
 800be18:	4629      	mov	r1, r5
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ffa6 	bl	800bd6c <sbrk_aligned>
 800be20:	3001      	adds	r0, #1
 800be22:	d03a      	beq.n	800be9a <_malloc_r+0xea>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	442b      	add	r3, r5
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	f8d8 3000 	ldr.w	r3, [r8]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	bb62      	cbnz	r2, 800be8c <_malloc_r+0xdc>
 800be32:	f8c8 7000 	str.w	r7, [r8]
 800be36:	e00f      	b.n	800be58 <_malloc_r+0xa8>
 800be38:	6822      	ldr	r2, [r4, #0]
 800be3a:	1b52      	subs	r2, r2, r5
 800be3c:	d420      	bmi.n	800be80 <_malloc_r+0xd0>
 800be3e:	2a0b      	cmp	r2, #11
 800be40:	d917      	bls.n	800be72 <_malloc_r+0xc2>
 800be42:	1961      	adds	r1, r4, r5
 800be44:	42a3      	cmp	r3, r4
 800be46:	6025      	str	r5, [r4, #0]
 800be48:	bf18      	it	ne
 800be4a:	6059      	strne	r1, [r3, #4]
 800be4c:	6863      	ldr	r3, [r4, #4]
 800be4e:	bf08      	it	eq
 800be50:	f8c8 1000 	streq.w	r1, [r8]
 800be54:	5162      	str	r2, [r4, r5]
 800be56:	604b      	str	r3, [r1, #4]
 800be58:	4630      	mov	r0, r6
 800be5a:	f000 f82f 	bl	800bebc <__malloc_unlock>
 800be5e:	f104 000b 	add.w	r0, r4, #11
 800be62:	1d23      	adds	r3, r4, #4
 800be64:	f020 0007 	bic.w	r0, r0, #7
 800be68:	1ac2      	subs	r2, r0, r3
 800be6a:	bf1c      	itt	ne
 800be6c:	1a1b      	subne	r3, r3, r0
 800be6e:	50a3      	strne	r3, [r4, r2]
 800be70:	e7af      	b.n	800bdd2 <_malloc_r+0x22>
 800be72:	6862      	ldr	r2, [r4, #4]
 800be74:	42a3      	cmp	r3, r4
 800be76:	bf0c      	ite	eq
 800be78:	f8c8 2000 	streq.w	r2, [r8]
 800be7c:	605a      	strne	r2, [r3, #4]
 800be7e:	e7eb      	b.n	800be58 <_malloc_r+0xa8>
 800be80:	4623      	mov	r3, r4
 800be82:	6864      	ldr	r4, [r4, #4]
 800be84:	e7ae      	b.n	800bde4 <_malloc_r+0x34>
 800be86:	463c      	mov	r4, r7
 800be88:	687f      	ldr	r7, [r7, #4]
 800be8a:	e7b6      	b.n	800bdfa <_malloc_r+0x4a>
 800be8c:	461a      	mov	r2, r3
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	42a3      	cmp	r3, r4
 800be92:	d1fb      	bne.n	800be8c <_malloc_r+0xdc>
 800be94:	2300      	movs	r3, #0
 800be96:	6053      	str	r3, [r2, #4]
 800be98:	e7de      	b.n	800be58 <_malloc_r+0xa8>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6033      	str	r3, [r6, #0]
 800be9e:	4630      	mov	r0, r6
 800bea0:	f000 f80c 	bl	800bebc <__malloc_unlock>
 800bea4:	e794      	b.n	800bdd0 <_malloc_r+0x20>
 800bea6:	6005      	str	r5, [r0, #0]
 800bea8:	e7d6      	b.n	800be58 <_malloc_r+0xa8>
 800beaa:	bf00      	nop
 800beac:	20002150 	.word	0x20002150

0800beb0 <__malloc_lock>:
 800beb0:	4801      	ldr	r0, [pc, #4]	@ (800beb8 <__malloc_lock+0x8>)
 800beb2:	f7ff b8ba 	b.w	800b02a <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	20002148 	.word	0x20002148

0800bebc <__malloc_unlock>:
 800bebc:	4801      	ldr	r0, [pc, #4]	@ (800bec4 <__malloc_unlock+0x8>)
 800bebe:	f7ff b8b5 	b.w	800b02c <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	20002148 	.word	0x20002148

0800bec8 <_Balloc>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	69c6      	ldr	r6, [r0, #28]
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	b976      	cbnz	r6, 800bef0 <_Balloc+0x28>
 800bed2:	2010      	movs	r0, #16
 800bed4:	f7ff ff42 	bl	800bd5c <malloc>
 800bed8:	4602      	mov	r2, r0
 800beda:	61e0      	str	r0, [r4, #28]
 800bedc:	b920      	cbnz	r0, 800bee8 <_Balloc+0x20>
 800bede:	4b18      	ldr	r3, [pc, #96]	@ (800bf40 <_Balloc+0x78>)
 800bee0:	4818      	ldr	r0, [pc, #96]	@ (800bf44 <_Balloc+0x7c>)
 800bee2:	216b      	movs	r1, #107	@ 0x6b
 800bee4:	f000 fc3c 	bl	800c760 <__assert_func>
 800bee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beec:	6006      	str	r6, [r0, #0]
 800beee:	60c6      	str	r6, [r0, #12]
 800bef0:	69e6      	ldr	r6, [r4, #28]
 800bef2:	68f3      	ldr	r3, [r6, #12]
 800bef4:	b183      	cbz	r3, 800bf18 <_Balloc+0x50>
 800bef6:	69e3      	ldr	r3, [r4, #28]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800befe:	b9b8      	cbnz	r0, 800bf30 <_Balloc+0x68>
 800bf00:	2101      	movs	r1, #1
 800bf02:	fa01 f605 	lsl.w	r6, r1, r5
 800bf06:	1d72      	adds	r2, r6, #5
 800bf08:	0092      	lsls	r2, r2, #2
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 fc46 	bl	800c79c <_calloc_r>
 800bf10:	b160      	cbz	r0, 800bf2c <_Balloc+0x64>
 800bf12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf16:	e00e      	b.n	800bf36 <_Balloc+0x6e>
 800bf18:	2221      	movs	r2, #33	@ 0x21
 800bf1a:	2104      	movs	r1, #4
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 fc3d 	bl	800c79c <_calloc_r>
 800bf22:	69e3      	ldr	r3, [r4, #28]
 800bf24:	60f0      	str	r0, [r6, #12]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e4      	bne.n	800bef6 <_Balloc+0x2e>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	6802      	ldr	r2, [r0, #0]
 800bf32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf36:	2300      	movs	r3, #0
 800bf38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf3c:	e7f7      	b.n	800bf2e <_Balloc+0x66>
 800bf3e:	bf00      	nop
 800bf40:	0800ce29 	.word	0x0800ce29
 800bf44:	0800cea9 	.word	0x0800cea9

0800bf48 <_Bfree>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	69c6      	ldr	r6, [r0, #28]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	b976      	cbnz	r6, 800bf70 <_Bfree+0x28>
 800bf52:	2010      	movs	r0, #16
 800bf54:	f7ff ff02 	bl	800bd5c <malloc>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	61e8      	str	r0, [r5, #28]
 800bf5c:	b920      	cbnz	r0, 800bf68 <_Bfree+0x20>
 800bf5e:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <_Bfree+0x3c>)
 800bf60:	4809      	ldr	r0, [pc, #36]	@ (800bf88 <_Bfree+0x40>)
 800bf62:	218f      	movs	r1, #143	@ 0x8f
 800bf64:	f000 fbfc 	bl	800c760 <__assert_func>
 800bf68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf6c:	6006      	str	r6, [r0, #0]
 800bf6e:	60c6      	str	r6, [r0, #12]
 800bf70:	b13c      	cbz	r4, 800bf82 <_Bfree+0x3a>
 800bf72:	69eb      	ldr	r3, [r5, #28]
 800bf74:	6862      	ldr	r2, [r4, #4]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf7c:	6021      	str	r1, [r4, #0]
 800bf7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	0800ce29 	.word	0x0800ce29
 800bf88:	0800cea9 	.word	0x0800cea9

0800bf8c <__multadd>:
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	690d      	ldr	r5, [r1, #16]
 800bf92:	4607      	mov	r7, r0
 800bf94:	460c      	mov	r4, r1
 800bf96:	461e      	mov	r6, r3
 800bf98:	f101 0c14 	add.w	ip, r1, #20
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bfa2:	b299      	uxth	r1, r3
 800bfa4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfa8:	0c1e      	lsrs	r6, r3, #16
 800bfaa:	0c0b      	lsrs	r3, r1, #16
 800bfac:	fb02 3306 	mla	r3, r2, r6, r3
 800bfb0:	b289      	uxth	r1, r1
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfb8:	4285      	cmp	r5, r0
 800bfba:	f84c 1b04 	str.w	r1, [ip], #4
 800bfbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfc2:	dcec      	bgt.n	800bf9e <__multadd+0x12>
 800bfc4:	b30e      	cbz	r6, 800c00a <__multadd+0x7e>
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	dc19      	bgt.n	800c000 <__multadd+0x74>
 800bfcc:	6861      	ldr	r1, [r4, #4]
 800bfce:	4638      	mov	r0, r7
 800bfd0:	3101      	adds	r1, #1
 800bfd2:	f7ff ff79 	bl	800bec8 <_Balloc>
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	b928      	cbnz	r0, 800bfe6 <__multadd+0x5a>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	4b0c      	ldr	r3, [pc, #48]	@ (800c010 <__multadd+0x84>)
 800bfde:	480d      	ldr	r0, [pc, #52]	@ (800c014 <__multadd+0x88>)
 800bfe0:	21ba      	movs	r1, #186	@ 0xba
 800bfe2:	f000 fbbd 	bl	800c760 <__assert_func>
 800bfe6:	6922      	ldr	r2, [r4, #16]
 800bfe8:	3202      	adds	r2, #2
 800bfea:	f104 010c 	add.w	r1, r4, #12
 800bfee:	0092      	lsls	r2, r2, #2
 800bff0:	300c      	adds	r0, #12
 800bff2:	f000 fba7 	bl	800c744 <memcpy>
 800bff6:	4621      	mov	r1, r4
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7ff ffa5 	bl	800bf48 <_Bfree>
 800bffe:	4644      	mov	r4, r8
 800c000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c004:	3501      	adds	r5, #1
 800c006:	615e      	str	r6, [r3, #20]
 800c008:	6125      	str	r5, [r4, #16]
 800c00a:	4620      	mov	r0, r4
 800c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c010:	0800ce98 	.word	0x0800ce98
 800c014:	0800cea9 	.word	0x0800cea9

0800c018 <__hi0bits>:
 800c018:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c01c:	4603      	mov	r3, r0
 800c01e:	bf36      	itet	cc
 800c020:	0403      	lslcc	r3, r0, #16
 800c022:	2000      	movcs	r0, #0
 800c024:	2010      	movcc	r0, #16
 800c026:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c02a:	bf3c      	itt	cc
 800c02c:	021b      	lslcc	r3, r3, #8
 800c02e:	3008      	addcc	r0, #8
 800c030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c034:	bf3c      	itt	cc
 800c036:	011b      	lslcc	r3, r3, #4
 800c038:	3004      	addcc	r0, #4
 800c03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03e:	bf3c      	itt	cc
 800c040:	009b      	lslcc	r3, r3, #2
 800c042:	3002      	addcc	r0, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	db05      	blt.n	800c054 <__hi0bits+0x3c>
 800c048:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c04c:	f100 0001 	add.w	r0, r0, #1
 800c050:	bf08      	it	eq
 800c052:	2020      	moveq	r0, #32
 800c054:	4770      	bx	lr

0800c056 <__lo0bits>:
 800c056:	6803      	ldr	r3, [r0, #0]
 800c058:	4602      	mov	r2, r0
 800c05a:	f013 0007 	ands.w	r0, r3, #7
 800c05e:	d00b      	beq.n	800c078 <__lo0bits+0x22>
 800c060:	07d9      	lsls	r1, r3, #31
 800c062:	d421      	bmi.n	800c0a8 <__lo0bits+0x52>
 800c064:	0798      	lsls	r0, r3, #30
 800c066:	bf49      	itett	mi
 800c068:	085b      	lsrmi	r3, r3, #1
 800c06a:	089b      	lsrpl	r3, r3, #2
 800c06c:	2001      	movmi	r0, #1
 800c06e:	6013      	strmi	r3, [r2, #0]
 800c070:	bf5c      	itt	pl
 800c072:	6013      	strpl	r3, [r2, #0]
 800c074:	2002      	movpl	r0, #2
 800c076:	4770      	bx	lr
 800c078:	b299      	uxth	r1, r3
 800c07a:	b909      	cbnz	r1, 800c080 <__lo0bits+0x2a>
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	2010      	movs	r0, #16
 800c080:	b2d9      	uxtb	r1, r3
 800c082:	b909      	cbnz	r1, 800c088 <__lo0bits+0x32>
 800c084:	3008      	adds	r0, #8
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	0719      	lsls	r1, r3, #28
 800c08a:	bf04      	itt	eq
 800c08c:	091b      	lsreq	r3, r3, #4
 800c08e:	3004      	addeq	r0, #4
 800c090:	0799      	lsls	r1, r3, #30
 800c092:	bf04      	itt	eq
 800c094:	089b      	lsreq	r3, r3, #2
 800c096:	3002      	addeq	r0, #2
 800c098:	07d9      	lsls	r1, r3, #31
 800c09a:	d403      	bmi.n	800c0a4 <__lo0bits+0x4e>
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	f100 0001 	add.w	r0, r0, #1
 800c0a2:	d003      	beq.n	800c0ac <__lo0bits+0x56>
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	4770      	bx	lr
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	4770      	bx	lr
 800c0ac:	2020      	movs	r0, #32
 800c0ae:	4770      	bx	lr

0800c0b0 <__i2b>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	f7ff ff07 	bl	800bec8 <_Balloc>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	b928      	cbnz	r0, 800c0ca <__i2b+0x1a>
 800c0be:	4b05      	ldr	r3, [pc, #20]	@ (800c0d4 <__i2b+0x24>)
 800c0c0:	4805      	ldr	r0, [pc, #20]	@ (800c0d8 <__i2b+0x28>)
 800c0c2:	f240 1145 	movw	r1, #325	@ 0x145
 800c0c6:	f000 fb4b 	bl	800c760 <__assert_func>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	6144      	str	r4, [r0, #20]
 800c0ce:	6103      	str	r3, [r0, #16]
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	0800ce98 	.word	0x0800ce98
 800c0d8:	0800cea9 	.word	0x0800cea9

0800c0dc <__multiply>:
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	690a      	ldr	r2, [r1, #16]
 800c0e4:	6923      	ldr	r3, [r4, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	bfa8      	it	ge
 800c0ea:	4623      	movge	r3, r4
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	bfa4      	itt	ge
 800c0f0:	460c      	movge	r4, r1
 800c0f2:	461f      	movge	r7, r3
 800c0f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	6861      	ldr	r1, [r4, #4]
 800c100:	eb0a 0609 	add.w	r6, sl, r9
 800c104:	42b3      	cmp	r3, r6
 800c106:	b085      	sub	sp, #20
 800c108:	bfb8      	it	lt
 800c10a:	3101      	addlt	r1, #1
 800c10c:	f7ff fedc 	bl	800bec8 <_Balloc>
 800c110:	b930      	cbnz	r0, 800c120 <__multiply+0x44>
 800c112:	4602      	mov	r2, r0
 800c114:	4b44      	ldr	r3, [pc, #272]	@ (800c228 <__multiply+0x14c>)
 800c116:	4845      	ldr	r0, [pc, #276]	@ (800c22c <__multiply+0x150>)
 800c118:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c11c:	f000 fb20 	bl	800c760 <__assert_func>
 800c120:	f100 0514 	add.w	r5, r0, #20
 800c124:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c128:	462b      	mov	r3, r5
 800c12a:	2200      	movs	r2, #0
 800c12c:	4543      	cmp	r3, r8
 800c12e:	d321      	bcc.n	800c174 <__multiply+0x98>
 800c130:	f107 0114 	add.w	r1, r7, #20
 800c134:	f104 0214 	add.w	r2, r4, #20
 800c138:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c13c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c140:	9302      	str	r3, [sp, #8]
 800c142:	1b13      	subs	r3, r2, r4
 800c144:	3b15      	subs	r3, #21
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	3304      	adds	r3, #4
 800c14c:	f104 0715 	add.w	r7, r4, #21
 800c150:	42ba      	cmp	r2, r7
 800c152:	bf38      	it	cc
 800c154:	2304      	movcc	r3, #4
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	9103      	str	r1, [sp, #12]
 800c15c:	428b      	cmp	r3, r1
 800c15e:	d80c      	bhi.n	800c17a <__multiply+0x9e>
 800c160:	2e00      	cmp	r6, #0
 800c162:	dd03      	ble.n	800c16c <__multiply+0x90>
 800c164:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d05b      	beq.n	800c224 <__multiply+0x148>
 800c16c:	6106      	str	r6, [r0, #16]
 800c16e:	b005      	add	sp, #20
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	f843 2b04 	str.w	r2, [r3], #4
 800c178:	e7d8      	b.n	800c12c <__multiply+0x50>
 800c17a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c17e:	f1ba 0f00 	cmp.w	sl, #0
 800c182:	d024      	beq.n	800c1ce <__multiply+0xf2>
 800c184:	f104 0e14 	add.w	lr, r4, #20
 800c188:	46a9      	mov	r9, r5
 800c18a:	f04f 0c00 	mov.w	ip, #0
 800c18e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c192:	f8d9 3000 	ldr.w	r3, [r9]
 800c196:	fa1f fb87 	uxth.w	fp, r7
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1a4:	f8d9 7000 	ldr.w	r7, [r9]
 800c1a8:	4463      	add	r3, ip
 800c1aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1bc:	4572      	cmp	r2, lr
 800c1be:	f849 3b04 	str.w	r3, [r9], #4
 800c1c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1c6:	d8e2      	bhi.n	800c18e <__multiply+0xb2>
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	f845 c003 	str.w	ip, [r5, r3]
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1d4:	3104      	adds	r1, #4
 800c1d6:	f1b9 0f00 	cmp.w	r9, #0
 800c1da:	d021      	beq.n	800c220 <__multiply+0x144>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	f104 0c14 	add.w	ip, r4, #20
 800c1e2:	46ae      	mov	lr, r5
 800c1e4:	f04f 0a00 	mov.w	sl, #0
 800c1e8:	f8bc b000 	ldrh.w	fp, [ip]
 800c1ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1f0:	fb09 770b 	mla	r7, r9, fp, r7
 800c1f4:	4457      	add	r7, sl
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1fc:	f84e 3b04 	str.w	r3, [lr], #4
 800c200:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c208:	f8be 3000 	ldrh.w	r3, [lr]
 800c20c:	fb09 330a 	mla	r3, r9, sl, r3
 800c210:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c214:	4562      	cmp	r2, ip
 800c216:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c21a:	d8e5      	bhi.n	800c1e8 <__multiply+0x10c>
 800c21c:	9f01      	ldr	r7, [sp, #4]
 800c21e:	51eb      	str	r3, [r5, r7]
 800c220:	3504      	adds	r5, #4
 800c222:	e799      	b.n	800c158 <__multiply+0x7c>
 800c224:	3e01      	subs	r6, #1
 800c226:	e79b      	b.n	800c160 <__multiply+0x84>
 800c228:	0800ce98 	.word	0x0800ce98
 800c22c:	0800cea9 	.word	0x0800cea9

0800c230 <__pow5mult>:
 800c230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c234:	4615      	mov	r5, r2
 800c236:	f012 0203 	ands.w	r2, r2, #3
 800c23a:	4607      	mov	r7, r0
 800c23c:	460e      	mov	r6, r1
 800c23e:	d007      	beq.n	800c250 <__pow5mult+0x20>
 800c240:	4c25      	ldr	r4, [pc, #148]	@ (800c2d8 <__pow5mult+0xa8>)
 800c242:	3a01      	subs	r2, #1
 800c244:	2300      	movs	r3, #0
 800c246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c24a:	f7ff fe9f 	bl	800bf8c <__multadd>
 800c24e:	4606      	mov	r6, r0
 800c250:	10ad      	asrs	r5, r5, #2
 800c252:	d03d      	beq.n	800c2d0 <__pow5mult+0xa0>
 800c254:	69fc      	ldr	r4, [r7, #28]
 800c256:	b97c      	cbnz	r4, 800c278 <__pow5mult+0x48>
 800c258:	2010      	movs	r0, #16
 800c25a:	f7ff fd7f 	bl	800bd5c <malloc>
 800c25e:	4602      	mov	r2, r0
 800c260:	61f8      	str	r0, [r7, #28]
 800c262:	b928      	cbnz	r0, 800c270 <__pow5mult+0x40>
 800c264:	4b1d      	ldr	r3, [pc, #116]	@ (800c2dc <__pow5mult+0xac>)
 800c266:	481e      	ldr	r0, [pc, #120]	@ (800c2e0 <__pow5mult+0xb0>)
 800c268:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c26c:	f000 fa78 	bl	800c760 <__assert_func>
 800c270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c274:	6004      	str	r4, [r0, #0]
 800c276:	60c4      	str	r4, [r0, #12]
 800c278:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c27c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c280:	b94c      	cbnz	r4, 800c296 <__pow5mult+0x66>
 800c282:	f240 2171 	movw	r1, #625	@ 0x271
 800c286:	4638      	mov	r0, r7
 800c288:	f7ff ff12 	bl	800c0b0 <__i2b>
 800c28c:	2300      	movs	r3, #0
 800c28e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c292:	4604      	mov	r4, r0
 800c294:	6003      	str	r3, [r0, #0]
 800c296:	f04f 0900 	mov.w	r9, #0
 800c29a:	07eb      	lsls	r3, r5, #31
 800c29c:	d50a      	bpl.n	800c2b4 <__pow5mult+0x84>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	f7ff ff1a 	bl	800c0dc <__multiply>
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	4680      	mov	r8, r0
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7ff fe4b 	bl	800bf48 <_Bfree>
 800c2b2:	4646      	mov	r6, r8
 800c2b4:	106d      	asrs	r5, r5, #1
 800c2b6:	d00b      	beq.n	800c2d0 <__pow5mult+0xa0>
 800c2b8:	6820      	ldr	r0, [r4, #0]
 800c2ba:	b938      	cbnz	r0, 800c2cc <__pow5mult+0x9c>
 800c2bc:	4622      	mov	r2, r4
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff ff0b 	bl	800c0dc <__multiply>
 800c2c6:	6020      	str	r0, [r4, #0]
 800c2c8:	f8c0 9000 	str.w	r9, [r0]
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e7e4      	b.n	800c29a <__pow5mult+0x6a>
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d6:	bf00      	nop
 800c2d8:	0800cf04 	.word	0x0800cf04
 800c2dc:	0800ce29 	.word	0x0800ce29
 800c2e0:	0800cea9 	.word	0x0800cea9

0800c2e4 <__lshift>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	6849      	ldr	r1, [r1, #4]
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	4691      	mov	r9, r2
 800c2f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2fc:	f108 0601 	add.w	r6, r8, #1
 800c300:	42b3      	cmp	r3, r6
 800c302:	db0b      	blt.n	800c31c <__lshift+0x38>
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff fddf 	bl	800bec8 <_Balloc>
 800c30a:	4605      	mov	r5, r0
 800c30c:	b948      	cbnz	r0, 800c322 <__lshift+0x3e>
 800c30e:	4602      	mov	r2, r0
 800c310:	4b28      	ldr	r3, [pc, #160]	@ (800c3b4 <__lshift+0xd0>)
 800c312:	4829      	ldr	r0, [pc, #164]	@ (800c3b8 <__lshift+0xd4>)
 800c314:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c318:	f000 fa22 	bl	800c760 <__assert_func>
 800c31c:	3101      	adds	r1, #1
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	e7ee      	b.n	800c300 <__lshift+0x1c>
 800c322:	2300      	movs	r3, #0
 800c324:	f100 0114 	add.w	r1, r0, #20
 800c328:	f100 0210 	add.w	r2, r0, #16
 800c32c:	4618      	mov	r0, r3
 800c32e:	4553      	cmp	r3, sl
 800c330:	db33      	blt.n	800c39a <__lshift+0xb6>
 800c332:	6920      	ldr	r0, [r4, #16]
 800c334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c338:	f104 0314 	add.w	r3, r4, #20
 800c33c:	f019 091f 	ands.w	r9, r9, #31
 800c340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c348:	d02b      	beq.n	800c3a2 <__lshift+0xbe>
 800c34a:	f1c9 0e20 	rsb	lr, r9, #32
 800c34e:	468a      	mov	sl, r1
 800c350:	2200      	movs	r2, #0
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	fa00 f009 	lsl.w	r0, r0, r9
 800c358:	4310      	orrs	r0, r2
 800c35a:	f84a 0b04 	str.w	r0, [sl], #4
 800c35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c362:	459c      	cmp	ip, r3
 800c364:	fa22 f20e 	lsr.w	r2, r2, lr
 800c368:	d8f3      	bhi.n	800c352 <__lshift+0x6e>
 800c36a:	ebac 0304 	sub.w	r3, ip, r4
 800c36e:	3b15      	subs	r3, #21
 800c370:	f023 0303 	bic.w	r3, r3, #3
 800c374:	3304      	adds	r3, #4
 800c376:	f104 0015 	add.w	r0, r4, #21
 800c37a:	4584      	cmp	ip, r0
 800c37c:	bf38      	it	cc
 800c37e:	2304      	movcc	r3, #4
 800c380:	50ca      	str	r2, [r1, r3]
 800c382:	b10a      	cbz	r2, 800c388 <__lshift+0xa4>
 800c384:	f108 0602 	add.w	r6, r8, #2
 800c388:	3e01      	subs	r6, #1
 800c38a:	4638      	mov	r0, r7
 800c38c:	612e      	str	r6, [r5, #16]
 800c38e:	4621      	mov	r1, r4
 800c390:	f7ff fdda 	bl	800bf48 <_Bfree>
 800c394:	4628      	mov	r0, r5
 800c396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c39e:	3301      	adds	r3, #1
 800c3a0:	e7c5      	b.n	800c32e <__lshift+0x4a>
 800c3a2:	3904      	subs	r1, #4
 800c3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3ac:	459c      	cmp	ip, r3
 800c3ae:	d8f9      	bhi.n	800c3a4 <__lshift+0xc0>
 800c3b0:	e7ea      	b.n	800c388 <__lshift+0xa4>
 800c3b2:	bf00      	nop
 800c3b4:	0800ce98 	.word	0x0800ce98
 800c3b8:	0800cea9 	.word	0x0800cea9

0800c3bc <__mcmp>:
 800c3bc:	690a      	ldr	r2, [r1, #16]
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6900      	ldr	r0, [r0, #16]
 800c3c2:	1a80      	subs	r0, r0, r2
 800c3c4:	b530      	push	{r4, r5, lr}
 800c3c6:	d10e      	bne.n	800c3e6 <__mcmp+0x2a>
 800c3c8:	3314      	adds	r3, #20
 800c3ca:	3114      	adds	r1, #20
 800c3cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3dc:	4295      	cmp	r5, r2
 800c3de:	d003      	beq.n	800c3e8 <__mcmp+0x2c>
 800c3e0:	d205      	bcs.n	800c3ee <__mcmp+0x32>
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e6:	bd30      	pop	{r4, r5, pc}
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d3f3      	bcc.n	800c3d4 <__mcmp+0x18>
 800c3ec:	e7fb      	b.n	800c3e6 <__mcmp+0x2a>
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	e7f9      	b.n	800c3e6 <__mcmp+0x2a>
	...

0800c3f4 <__mdiff>:
 800c3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4648      	mov	r0, r9
 800c400:	4614      	mov	r4, r2
 800c402:	f7ff ffdb 	bl	800c3bc <__mcmp>
 800c406:	1e05      	subs	r5, r0, #0
 800c408:	d112      	bne.n	800c430 <__mdiff+0x3c>
 800c40a:	4629      	mov	r1, r5
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff fd5b 	bl	800bec8 <_Balloc>
 800c412:	4602      	mov	r2, r0
 800c414:	b928      	cbnz	r0, 800c422 <__mdiff+0x2e>
 800c416:	4b3f      	ldr	r3, [pc, #252]	@ (800c514 <__mdiff+0x120>)
 800c418:	f240 2137 	movw	r1, #567	@ 0x237
 800c41c:	483e      	ldr	r0, [pc, #248]	@ (800c518 <__mdiff+0x124>)
 800c41e:	f000 f99f 	bl	800c760 <__assert_func>
 800c422:	2301      	movs	r3, #1
 800c424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c428:	4610      	mov	r0, r2
 800c42a:	b003      	add	sp, #12
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c430:	bfbc      	itt	lt
 800c432:	464b      	movlt	r3, r9
 800c434:	46a1      	movlt	r9, r4
 800c436:	4630      	mov	r0, r6
 800c438:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c43c:	bfba      	itte	lt
 800c43e:	461c      	movlt	r4, r3
 800c440:	2501      	movlt	r5, #1
 800c442:	2500      	movge	r5, #0
 800c444:	f7ff fd40 	bl	800bec8 <_Balloc>
 800c448:	4602      	mov	r2, r0
 800c44a:	b918      	cbnz	r0, 800c454 <__mdiff+0x60>
 800c44c:	4b31      	ldr	r3, [pc, #196]	@ (800c514 <__mdiff+0x120>)
 800c44e:	f240 2145 	movw	r1, #581	@ 0x245
 800c452:	e7e3      	b.n	800c41c <__mdiff+0x28>
 800c454:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c458:	6926      	ldr	r6, [r4, #16]
 800c45a:	60c5      	str	r5, [r0, #12]
 800c45c:	f109 0310 	add.w	r3, r9, #16
 800c460:	f109 0514 	add.w	r5, r9, #20
 800c464:	f104 0e14 	add.w	lr, r4, #20
 800c468:	f100 0b14 	add.w	fp, r0, #20
 800c46c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c470:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	46d9      	mov	r9, fp
 800c478:	f04f 0c00 	mov.w	ip, #0
 800c47c:	9b01      	ldr	r3, [sp, #4]
 800c47e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c482:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	fa1f f38a 	uxth.w	r3, sl
 800c48c:	4619      	mov	r1, r3
 800c48e:	b283      	uxth	r3, r0
 800c490:	1acb      	subs	r3, r1, r3
 800c492:	0c00      	lsrs	r0, r0, #16
 800c494:	4463      	add	r3, ip
 800c496:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c49a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4a4:	4576      	cmp	r6, lr
 800c4a6:	f849 3b04 	str.w	r3, [r9], #4
 800c4aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4ae:	d8e5      	bhi.n	800c47c <__mdiff+0x88>
 800c4b0:	1b33      	subs	r3, r6, r4
 800c4b2:	3b15      	subs	r3, #21
 800c4b4:	f023 0303 	bic.w	r3, r3, #3
 800c4b8:	3415      	adds	r4, #21
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	42a6      	cmp	r6, r4
 800c4be:	bf38      	it	cc
 800c4c0:	2304      	movcc	r3, #4
 800c4c2:	441d      	add	r5, r3
 800c4c4:	445b      	add	r3, fp
 800c4c6:	461e      	mov	r6, r3
 800c4c8:	462c      	mov	r4, r5
 800c4ca:	4544      	cmp	r4, r8
 800c4cc:	d30e      	bcc.n	800c4ec <__mdiff+0xf8>
 800c4ce:	f108 0103 	add.w	r1, r8, #3
 800c4d2:	1b49      	subs	r1, r1, r5
 800c4d4:	f021 0103 	bic.w	r1, r1, #3
 800c4d8:	3d03      	subs	r5, #3
 800c4da:	45a8      	cmp	r8, r5
 800c4dc:	bf38      	it	cc
 800c4de:	2100      	movcc	r1, #0
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4e6:	b191      	cbz	r1, 800c50e <__mdiff+0x11a>
 800c4e8:	6117      	str	r7, [r2, #16]
 800c4ea:	e79d      	b.n	800c428 <__mdiff+0x34>
 800c4ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4f0:	46e6      	mov	lr, ip
 800c4f2:	0c08      	lsrs	r0, r1, #16
 800c4f4:	fa1c fc81 	uxtah	ip, ip, r1
 800c4f8:	4471      	add	r1, lr
 800c4fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4fe:	b289      	uxth	r1, r1
 800c500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c504:	f846 1b04 	str.w	r1, [r6], #4
 800c508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c50c:	e7dd      	b.n	800c4ca <__mdiff+0xd6>
 800c50e:	3f01      	subs	r7, #1
 800c510:	e7e7      	b.n	800c4e2 <__mdiff+0xee>
 800c512:	bf00      	nop
 800c514:	0800ce98 	.word	0x0800ce98
 800c518:	0800cea9 	.word	0x0800cea9

0800c51c <__d2b>:
 800c51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c520:	460f      	mov	r7, r1
 800c522:	2101      	movs	r1, #1
 800c524:	ec59 8b10 	vmov	r8, r9, d0
 800c528:	4616      	mov	r6, r2
 800c52a:	f7ff fccd 	bl	800bec8 <_Balloc>
 800c52e:	4604      	mov	r4, r0
 800c530:	b930      	cbnz	r0, 800c540 <__d2b+0x24>
 800c532:	4602      	mov	r2, r0
 800c534:	4b23      	ldr	r3, [pc, #140]	@ (800c5c4 <__d2b+0xa8>)
 800c536:	4824      	ldr	r0, [pc, #144]	@ (800c5c8 <__d2b+0xac>)
 800c538:	f240 310f 	movw	r1, #783	@ 0x30f
 800c53c:	f000 f910 	bl	800c760 <__assert_func>
 800c540:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c544:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c548:	b10d      	cbz	r5, 800c54e <__d2b+0x32>
 800c54a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	f1b8 0300 	subs.w	r3, r8, #0
 800c554:	d023      	beq.n	800c59e <__d2b+0x82>
 800c556:	4668      	mov	r0, sp
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f7ff fd7c 	bl	800c056 <__lo0bits>
 800c55e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c562:	b1d0      	cbz	r0, 800c59a <__d2b+0x7e>
 800c564:	f1c0 0320 	rsb	r3, r0, #32
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	430b      	orrs	r3, r1
 800c56e:	40c2      	lsrs	r2, r0
 800c570:	6163      	str	r3, [r4, #20]
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	61a3      	str	r3, [r4, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf0c      	ite	eq
 800c57c:	2201      	moveq	r2, #1
 800c57e:	2202      	movne	r2, #2
 800c580:	6122      	str	r2, [r4, #16]
 800c582:	b1a5      	cbz	r5, 800c5ae <__d2b+0x92>
 800c584:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c588:	4405      	add	r5, r0
 800c58a:	603d      	str	r5, [r7, #0]
 800c58c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c590:	6030      	str	r0, [r6, #0]
 800c592:	4620      	mov	r0, r4
 800c594:	b003      	add	sp, #12
 800c596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c59a:	6161      	str	r1, [r4, #20]
 800c59c:	e7ea      	b.n	800c574 <__d2b+0x58>
 800c59e:	a801      	add	r0, sp, #4
 800c5a0:	f7ff fd59 	bl	800c056 <__lo0bits>
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	3020      	adds	r0, #32
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	e7e8      	b.n	800c580 <__d2b+0x64>
 800c5ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5b6:	6038      	str	r0, [r7, #0]
 800c5b8:	6918      	ldr	r0, [r3, #16]
 800c5ba:	f7ff fd2d 	bl	800c018 <__hi0bits>
 800c5be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5c2:	e7e5      	b.n	800c590 <__d2b+0x74>
 800c5c4:	0800ce98 	.word	0x0800ce98
 800c5c8:	0800cea9 	.word	0x0800cea9

0800c5cc <__sflush_r>:
 800c5cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d4:	0716      	lsls	r6, r2, #28
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	460c      	mov	r4, r1
 800c5da:	d454      	bmi.n	800c686 <__sflush_r+0xba>
 800c5dc:	684b      	ldr	r3, [r1, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	dc02      	bgt.n	800c5e8 <__sflush_r+0x1c>
 800c5e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd48      	ble.n	800c67a <__sflush_r+0xae>
 800c5e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5ea:	2e00      	cmp	r6, #0
 800c5ec:	d045      	beq.n	800c67a <__sflush_r+0xae>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c5f4:	682f      	ldr	r7, [r5, #0]
 800c5f6:	6a21      	ldr	r1, [r4, #32]
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	d030      	beq.n	800c65e <__sflush_r+0x92>
 800c5fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	0759      	lsls	r1, r3, #29
 800c602:	d505      	bpl.n	800c610 <__sflush_r+0x44>
 800c604:	6863      	ldr	r3, [r4, #4]
 800c606:	1ad2      	subs	r2, r2, r3
 800c608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c60a:	b10b      	cbz	r3, 800c610 <__sflush_r+0x44>
 800c60c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c60e:	1ad2      	subs	r2, r2, r3
 800c610:	2300      	movs	r3, #0
 800c612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c614:	6a21      	ldr	r1, [r4, #32]
 800c616:	4628      	mov	r0, r5
 800c618:	47b0      	blx	r6
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	d106      	bne.n	800c62e <__sflush_r+0x62>
 800c620:	6829      	ldr	r1, [r5, #0]
 800c622:	291d      	cmp	r1, #29
 800c624:	d82b      	bhi.n	800c67e <__sflush_r+0xb2>
 800c626:	4a2a      	ldr	r2, [pc, #168]	@ (800c6d0 <__sflush_r+0x104>)
 800c628:	410a      	asrs	r2, r1
 800c62a:	07d6      	lsls	r6, r2, #31
 800c62c:	d427      	bmi.n	800c67e <__sflush_r+0xb2>
 800c62e:	2200      	movs	r2, #0
 800c630:	6062      	str	r2, [r4, #4]
 800c632:	04d9      	lsls	r1, r3, #19
 800c634:	6922      	ldr	r2, [r4, #16]
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	d504      	bpl.n	800c644 <__sflush_r+0x78>
 800c63a:	1c42      	adds	r2, r0, #1
 800c63c:	d101      	bne.n	800c642 <__sflush_r+0x76>
 800c63e:	682b      	ldr	r3, [r5, #0]
 800c640:	b903      	cbnz	r3, 800c644 <__sflush_r+0x78>
 800c642:	6560      	str	r0, [r4, #84]	@ 0x54
 800c644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c646:	602f      	str	r7, [r5, #0]
 800c648:	b1b9      	cbz	r1, 800c67a <__sflush_r+0xae>
 800c64a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c64e:	4299      	cmp	r1, r3
 800c650:	d002      	beq.n	800c658 <__sflush_r+0x8c>
 800c652:	4628      	mov	r0, r5
 800c654:	f7ff fb38 	bl	800bcc8 <_free_r>
 800c658:	2300      	movs	r3, #0
 800c65a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c65c:	e00d      	b.n	800c67a <__sflush_r+0xae>
 800c65e:	2301      	movs	r3, #1
 800c660:	4628      	mov	r0, r5
 800c662:	47b0      	blx	r6
 800c664:	4602      	mov	r2, r0
 800c666:	1c50      	adds	r0, r2, #1
 800c668:	d1c9      	bne.n	800c5fe <__sflush_r+0x32>
 800c66a:	682b      	ldr	r3, [r5, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0c6      	beq.n	800c5fe <__sflush_r+0x32>
 800c670:	2b1d      	cmp	r3, #29
 800c672:	d001      	beq.n	800c678 <__sflush_r+0xac>
 800c674:	2b16      	cmp	r3, #22
 800c676:	d11e      	bne.n	800c6b6 <__sflush_r+0xea>
 800c678:	602f      	str	r7, [r5, #0]
 800c67a:	2000      	movs	r0, #0
 800c67c:	e022      	b.n	800c6c4 <__sflush_r+0xf8>
 800c67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c682:	b21b      	sxth	r3, r3
 800c684:	e01b      	b.n	800c6be <__sflush_r+0xf2>
 800c686:	690f      	ldr	r7, [r1, #16]
 800c688:	2f00      	cmp	r7, #0
 800c68a:	d0f6      	beq.n	800c67a <__sflush_r+0xae>
 800c68c:	0793      	lsls	r3, r2, #30
 800c68e:	680e      	ldr	r6, [r1, #0]
 800c690:	bf08      	it	eq
 800c692:	694b      	ldreq	r3, [r1, #20]
 800c694:	600f      	str	r7, [r1, #0]
 800c696:	bf18      	it	ne
 800c698:	2300      	movne	r3, #0
 800c69a:	eba6 0807 	sub.w	r8, r6, r7
 800c69e:	608b      	str	r3, [r1, #8]
 800c6a0:	f1b8 0f00 	cmp.w	r8, #0
 800c6a4:	dde9      	ble.n	800c67a <__sflush_r+0xae>
 800c6a6:	6a21      	ldr	r1, [r4, #32]
 800c6a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6aa:	4643      	mov	r3, r8
 800c6ac:	463a      	mov	r2, r7
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b0      	blx	r6
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	dc08      	bgt.n	800c6c8 <__sflush_r+0xfc>
 800c6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c8:	4407      	add	r7, r0
 800c6ca:	eba8 0800 	sub.w	r8, r8, r0
 800c6ce:	e7e7      	b.n	800c6a0 <__sflush_r+0xd4>
 800c6d0:	dfbffffe 	.word	0xdfbffffe

0800c6d4 <_fflush_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	690b      	ldr	r3, [r1, #16]
 800c6d8:	4605      	mov	r5, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	b913      	cbnz	r3, 800c6e4 <_fflush_r+0x10>
 800c6de:	2500      	movs	r5, #0
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	b118      	cbz	r0, 800c6ee <_fflush_r+0x1a>
 800c6e6:	6a03      	ldr	r3, [r0, #32]
 800c6e8:	b90b      	cbnz	r3, 800c6ee <_fflush_r+0x1a>
 800c6ea:	f7fe fba7 	bl	800ae3c <__sinit>
 800c6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0f3      	beq.n	800c6de <_fflush_r+0xa>
 800c6f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c6f8:	07d0      	lsls	r0, r2, #31
 800c6fa:	d404      	bmi.n	800c706 <_fflush_r+0x32>
 800c6fc:	0599      	lsls	r1, r3, #22
 800c6fe:	d402      	bmi.n	800c706 <_fflush_r+0x32>
 800c700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c702:	f7fe fc92 	bl	800b02a <__retarget_lock_acquire_recursive>
 800c706:	4628      	mov	r0, r5
 800c708:	4621      	mov	r1, r4
 800c70a:	f7ff ff5f 	bl	800c5cc <__sflush_r>
 800c70e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c710:	07da      	lsls	r2, r3, #31
 800c712:	4605      	mov	r5, r0
 800c714:	d4e4      	bmi.n	800c6e0 <_fflush_r+0xc>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	059b      	lsls	r3, r3, #22
 800c71a:	d4e1      	bmi.n	800c6e0 <_fflush_r+0xc>
 800c71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c71e:	f7fe fc85 	bl	800b02c <__retarget_lock_release_recursive>
 800c722:	e7dd      	b.n	800c6e0 <_fflush_r+0xc>

0800c724 <_sbrk_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d06      	ldr	r5, [pc, #24]	@ (800c740 <_sbrk_r+0x1c>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	602b      	str	r3, [r5, #0]
 800c730:	f7f5 f958 	bl	80019e4 <_sbrk>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_sbrk_r+0x1a>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_sbrk_r+0x1a>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20002144 	.word	0x20002144

0800c744 <memcpy>:
 800c744:	440a      	add	r2, r1
 800c746:	4291      	cmp	r1, r2
 800c748:	f100 33ff 	add.w	r3, r0, #4294967295
 800c74c:	d100      	bne.n	800c750 <memcpy+0xc>
 800c74e:	4770      	bx	lr
 800c750:	b510      	push	{r4, lr}
 800c752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c75a:	4291      	cmp	r1, r2
 800c75c:	d1f9      	bne.n	800c752 <memcpy+0xe>
 800c75e:	bd10      	pop	{r4, pc}

0800c760 <__assert_func>:
 800c760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c762:	4614      	mov	r4, r2
 800c764:	461a      	mov	r2, r3
 800c766:	4b09      	ldr	r3, [pc, #36]	@ (800c78c <__assert_func+0x2c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4605      	mov	r5, r0
 800c76c:	68d8      	ldr	r0, [r3, #12]
 800c76e:	b954      	cbnz	r4, 800c786 <__assert_func+0x26>
 800c770:	4b07      	ldr	r3, [pc, #28]	@ (800c790 <__assert_func+0x30>)
 800c772:	461c      	mov	r4, r3
 800c774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c778:	9100      	str	r1, [sp, #0]
 800c77a:	462b      	mov	r3, r5
 800c77c:	4905      	ldr	r1, [pc, #20]	@ (800c794 <__assert_func+0x34>)
 800c77e:	f000 f841 	bl	800c804 <fiprintf>
 800c782:	f000 f851 	bl	800c828 <abort>
 800c786:	4b04      	ldr	r3, [pc, #16]	@ (800c798 <__assert_func+0x38>)
 800c788:	e7f4      	b.n	800c774 <__assert_func+0x14>
 800c78a:	bf00      	nop
 800c78c:	20000108 	.word	0x20000108
 800c790:	0800d045 	.word	0x0800d045
 800c794:	0800d017 	.word	0x0800d017
 800c798:	0800d00a 	.word	0x0800d00a

0800c79c <_calloc_r>:
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	fba1 5402 	umull	r5, r4, r1, r2
 800c7a2:	b93c      	cbnz	r4, 800c7b4 <_calloc_r+0x18>
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	f7ff fb03 	bl	800bdb0 <_malloc_r>
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	b928      	cbnz	r0, 800c7ba <_calloc_r+0x1e>
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
 800c7b4:	220c      	movs	r2, #12
 800c7b6:	6002      	str	r2, [r0, #0]
 800c7b8:	e7f9      	b.n	800c7ae <_calloc_r+0x12>
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4621      	mov	r1, r4
 800c7be:	f7fe fbb6 	bl	800af2e <memset>
 800c7c2:	e7f5      	b.n	800c7b0 <_calloc_r+0x14>

0800c7c4 <__ascii_mbtowc>:
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	b901      	cbnz	r1, 800c7ca <__ascii_mbtowc+0x6>
 800c7c8:	a901      	add	r1, sp, #4
 800c7ca:	b142      	cbz	r2, 800c7de <__ascii_mbtowc+0x1a>
 800c7cc:	b14b      	cbz	r3, 800c7e2 <__ascii_mbtowc+0x1e>
 800c7ce:	7813      	ldrb	r3, [r2, #0]
 800c7d0:	600b      	str	r3, [r1, #0]
 800c7d2:	7812      	ldrb	r2, [r2, #0]
 800c7d4:	1e10      	subs	r0, r2, #0
 800c7d6:	bf18      	it	ne
 800c7d8:	2001      	movne	r0, #1
 800c7da:	b002      	add	sp, #8
 800c7dc:	4770      	bx	lr
 800c7de:	4610      	mov	r0, r2
 800c7e0:	e7fb      	b.n	800c7da <__ascii_mbtowc+0x16>
 800c7e2:	f06f 0001 	mvn.w	r0, #1
 800c7e6:	e7f8      	b.n	800c7da <__ascii_mbtowc+0x16>

0800c7e8 <__ascii_wctomb>:
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	b141      	cbz	r1, 800c800 <__ascii_wctomb+0x18>
 800c7ee:	2aff      	cmp	r2, #255	@ 0xff
 800c7f0:	d904      	bls.n	800c7fc <__ascii_wctomb+0x14>
 800c7f2:	228a      	movs	r2, #138	@ 0x8a
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fa:	4770      	bx	lr
 800c7fc:	700a      	strb	r2, [r1, #0]
 800c7fe:	2001      	movs	r0, #1
 800c800:	4770      	bx	lr
	...

0800c804 <fiprintf>:
 800c804:	b40e      	push	{r1, r2, r3}
 800c806:	b503      	push	{r0, r1, lr}
 800c808:	4601      	mov	r1, r0
 800c80a:	ab03      	add	r3, sp, #12
 800c80c:	4805      	ldr	r0, [pc, #20]	@ (800c824 <fiprintf+0x20>)
 800c80e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c812:	6800      	ldr	r0, [r0, #0]
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	f000 f837 	bl	800c888 <_vfiprintf_r>
 800c81a:	b002      	add	sp, #8
 800c81c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c820:	b003      	add	sp, #12
 800c822:	4770      	bx	lr
 800c824:	20000108 	.word	0x20000108

0800c828 <abort>:
 800c828:	b508      	push	{r3, lr}
 800c82a:	2006      	movs	r0, #6
 800c82c:	f000 fa00 	bl	800cc30 <raise>
 800c830:	2001      	movs	r0, #1
 800c832:	f7f5 f85f 	bl	80018f4 <_exit>

0800c836 <__sfputc_r>:
 800c836:	6893      	ldr	r3, [r2, #8]
 800c838:	3b01      	subs	r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	b410      	push	{r4}
 800c83e:	6093      	str	r3, [r2, #8]
 800c840:	da08      	bge.n	800c854 <__sfputc_r+0x1e>
 800c842:	6994      	ldr	r4, [r2, #24]
 800c844:	42a3      	cmp	r3, r4
 800c846:	db01      	blt.n	800c84c <__sfputc_r+0x16>
 800c848:	290a      	cmp	r1, #10
 800c84a:	d103      	bne.n	800c854 <__sfputc_r+0x1e>
 800c84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c850:	f000 b932 	b.w	800cab8 <__swbuf_r>
 800c854:	6813      	ldr	r3, [r2, #0]
 800c856:	1c58      	adds	r0, r3, #1
 800c858:	6010      	str	r0, [r2, #0]
 800c85a:	7019      	strb	r1, [r3, #0]
 800c85c:	4608      	mov	r0, r1
 800c85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <__sfputs_r>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	4614      	mov	r4, r2
 800c86c:	18d5      	adds	r5, r2, r3
 800c86e:	42ac      	cmp	r4, r5
 800c870:	d101      	bne.n	800c876 <__sfputs_r+0x12>
 800c872:	2000      	movs	r0, #0
 800c874:	e007      	b.n	800c886 <__sfputs_r+0x22>
 800c876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87a:	463a      	mov	r2, r7
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ffda 	bl	800c836 <__sfputc_r>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	d1f3      	bne.n	800c86e <__sfputs_r+0xa>
 800c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c888 <_vfiprintf_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	460d      	mov	r5, r1
 800c88e:	b09d      	sub	sp, #116	@ 0x74
 800c890:	4614      	mov	r4, r2
 800c892:	4698      	mov	r8, r3
 800c894:	4606      	mov	r6, r0
 800c896:	b118      	cbz	r0, 800c8a0 <_vfiprintf_r+0x18>
 800c898:	6a03      	ldr	r3, [r0, #32]
 800c89a:	b90b      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x18>
 800c89c:	f7fe face 	bl	800ae3c <__sinit>
 800c8a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8a2:	07d9      	lsls	r1, r3, #31
 800c8a4:	d405      	bmi.n	800c8b2 <_vfiprintf_r+0x2a>
 800c8a6:	89ab      	ldrh	r3, [r5, #12]
 800c8a8:	059a      	lsls	r2, r3, #22
 800c8aa:	d402      	bmi.n	800c8b2 <_vfiprintf_r+0x2a>
 800c8ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8ae:	f7fe fbbc 	bl	800b02a <__retarget_lock_acquire_recursive>
 800c8b2:	89ab      	ldrh	r3, [r5, #12]
 800c8b4:	071b      	lsls	r3, r3, #28
 800c8b6:	d501      	bpl.n	800c8bc <_vfiprintf_r+0x34>
 800c8b8:	692b      	ldr	r3, [r5, #16]
 800c8ba:	b99b      	cbnz	r3, 800c8e4 <_vfiprintf_r+0x5c>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f000 f938 	bl	800cb34 <__swsetup_r>
 800c8c4:	b170      	cbz	r0, 800c8e4 <_vfiprintf_r+0x5c>
 800c8c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8c8:	07dc      	lsls	r4, r3, #31
 800c8ca:	d504      	bpl.n	800c8d6 <_vfiprintf_r+0x4e>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	b01d      	add	sp, #116	@ 0x74
 800c8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	0598      	lsls	r0, r3, #22
 800c8da:	d4f7      	bmi.n	800c8cc <_vfiprintf_r+0x44>
 800c8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8de:	f7fe fba5 	bl	800b02c <__retarget_lock_release_recursive>
 800c8e2:	e7f3      	b.n	800c8cc <_vfiprintf_r+0x44>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8e8:	2320      	movs	r3, #32
 800c8ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8f2:	2330      	movs	r3, #48	@ 0x30
 800c8f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800caa4 <_vfiprintf_r+0x21c>
 800c8f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8fc:	f04f 0901 	mov.w	r9, #1
 800c900:	4623      	mov	r3, r4
 800c902:	469a      	mov	sl, r3
 800c904:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c908:	b10a      	cbz	r2, 800c90e <_vfiprintf_r+0x86>
 800c90a:	2a25      	cmp	r2, #37	@ 0x25
 800c90c:	d1f9      	bne.n	800c902 <_vfiprintf_r+0x7a>
 800c90e:	ebba 0b04 	subs.w	fp, sl, r4
 800c912:	d00b      	beq.n	800c92c <_vfiprintf_r+0xa4>
 800c914:	465b      	mov	r3, fp
 800c916:	4622      	mov	r2, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7ff ffa2 	bl	800c864 <__sfputs_r>
 800c920:	3001      	adds	r0, #1
 800c922:	f000 80a7 	beq.w	800ca74 <_vfiprintf_r+0x1ec>
 800c926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c928:	445a      	add	r2, fp
 800c92a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c92c:	f89a 3000 	ldrb.w	r3, [sl]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 809f 	beq.w	800ca74 <_vfiprintf_r+0x1ec>
 800c936:	2300      	movs	r3, #0
 800c938:	f04f 32ff 	mov.w	r2, #4294967295
 800c93c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c940:	f10a 0a01 	add.w	sl, sl, #1
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	9307      	str	r3, [sp, #28]
 800c948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c94c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c94e:	4654      	mov	r4, sl
 800c950:	2205      	movs	r2, #5
 800c952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c956:	4853      	ldr	r0, [pc, #332]	@ (800caa4 <_vfiprintf_r+0x21c>)
 800c958:	f7f3 fc42 	bl	80001e0 <memchr>
 800c95c:	9a04      	ldr	r2, [sp, #16]
 800c95e:	b9d8      	cbnz	r0, 800c998 <_vfiprintf_r+0x110>
 800c960:	06d1      	lsls	r1, r2, #27
 800c962:	bf44      	itt	mi
 800c964:	2320      	movmi	r3, #32
 800c966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c96a:	0713      	lsls	r3, r2, #28
 800c96c:	bf44      	itt	mi
 800c96e:	232b      	movmi	r3, #43	@ 0x2b
 800c970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c974:	f89a 3000 	ldrb.w	r3, [sl]
 800c978:	2b2a      	cmp	r3, #42	@ 0x2a
 800c97a:	d015      	beq.n	800c9a8 <_vfiprintf_r+0x120>
 800c97c:	9a07      	ldr	r2, [sp, #28]
 800c97e:	4654      	mov	r4, sl
 800c980:	2000      	movs	r0, #0
 800c982:	f04f 0c0a 	mov.w	ip, #10
 800c986:	4621      	mov	r1, r4
 800c988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c98c:	3b30      	subs	r3, #48	@ 0x30
 800c98e:	2b09      	cmp	r3, #9
 800c990:	d94b      	bls.n	800ca2a <_vfiprintf_r+0x1a2>
 800c992:	b1b0      	cbz	r0, 800c9c2 <_vfiprintf_r+0x13a>
 800c994:	9207      	str	r2, [sp, #28]
 800c996:	e014      	b.n	800c9c2 <_vfiprintf_r+0x13a>
 800c998:	eba0 0308 	sub.w	r3, r0, r8
 800c99c:	fa09 f303 	lsl.w	r3, r9, r3
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	9304      	str	r3, [sp, #16]
 800c9a4:	46a2      	mov	sl, r4
 800c9a6:	e7d2      	b.n	800c94e <_vfiprintf_r+0xc6>
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	1d19      	adds	r1, r3, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	9103      	str	r1, [sp, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	bfbb      	ittet	lt
 800c9b4:	425b      	neglt	r3, r3
 800c9b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ba:	9307      	strge	r3, [sp, #28]
 800c9bc:	9307      	strlt	r3, [sp, #28]
 800c9be:	bfb8      	it	lt
 800c9c0:	9204      	strlt	r2, [sp, #16]
 800c9c2:	7823      	ldrb	r3, [r4, #0]
 800c9c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9c6:	d10a      	bne.n	800c9de <_vfiprintf_r+0x156>
 800c9c8:	7863      	ldrb	r3, [r4, #1]
 800c9ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9cc:	d132      	bne.n	800ca34 <_vfiprintf_r+0x1ac>
 800c9ce:	9b03      	ldr	r3, [sp, #12]
 800c9d0:	1d1a      	adds	r2, r3, #4
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	9203      	str	r2, [sp, #12]
 800c9d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9da:	3402      	adds	r4, #2
 800c9dc:	9305      	str	r3, [sp, #20]
 800c9de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cab4 <_vfiprintf_r+0x22c>
 800c9e2:	7821      	ldrb	r1, [r4, #0]
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	f7f3 fbfa 	bl	80001e0 <memchr>
 800c9ec:	b138      	cbz	r0, 800c9fe <_vfiprintf_r+0x176>
 800c9ee:	9b04      	ldr	r3, [sp, #16]
 800c9f0:	eba0 000a 	sub.w	r0, r0, sl
 800c9f4:	2240      	movs	r2, #64	@ 0x40
 800c9f6:	4082      	lsls	r2, r0
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	3401      	adds	r4, #1
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca02:	4829      	ldr	r0, [pc, #164]	@ (800caa8 <_vfiprintf_r+0x220>)
 800ca04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca08:	2206      	movs	r2, #6
 800ca0a:	f7f3 fbe9 	bl	80001e0 <memchr>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d03f      	beq.n	800ca92 <_vfiprintf_r+0x20a>
 800ca12:	4b26      	ldr	r3, [pc, #152]	@ (800caac <_vfiprintf_r+0x224>)
 800ca14:	bb1b      	cbnz	r3, 800ca5e <_vfiprintf_r+0x1d6>
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	3307      	adds	r3, #7
 800ca1a:	f023 0307 	bic.w	r3, r3, #7
 800ca1e:	3308      	adds	r3, #8
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca24:	443b      	add	r3, r7
 800ca26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca28:	e76a      	b.n	800c900 <_vfiprintf_r+0x78>
 800ca2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca2e:	460c      	mov	r4, r1
 800ca30:	2001      	movs	r0, #1
 800ca32:	e7a8      	b.n	800c986 <_vfiprintf_r+0xfe>
 800ca34:	2300      	movs	r3, #0
 800ca36:	3401      	adds	r4, #1
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f04f 0c0a 	mov.w	ip, #10
 800ca40:	4620      	mov	r0, r4
 800ca42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca46:	3a30      	subs	r2, #48	@ 0x30
 800ca48:	2a09      	cmp	r2, #9
 800ca4a:	d903      	bls.n	800ca54 <_vfiprintf_r+0x1cc>
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0c6      	beq.n	800c9de <_vfiprintf_r+0x156>
 800ca50:	9105      	str	r1, [sp, #20]
 800ca52:	e7c4      	b.n	800c9de <_vfiprintf_r+0x156>
 800ca54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca58:	4604      	mov	r4, r0
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e7f0      	b.n	800ca40 <_vfiprintf_r+0x1b8>
 800ca5e:	ab03      	add	r3, sp, #12
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	462a      	mov	r2, r5
 800ca64:	4b12      	ldr	r3, [pc, #72]	@ (800cab0 <_vfiprintf_r+0x228>)
 800ca66:	a904      	add	r1, sp, #16
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7fd fda3 	bl	800a5b4 <_printf_float>
 800ca6e:	4607      	mov	r7, r0
 800ca70:	1c78      	adds	r0, r7, #1
 800ca72:	d1d6      	bne.n	800ca22 <_vfiprintf_r+0x19a>
 800ca74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca76:	07d9      	lsls	r1, r3, #31
 800ca78:	d405      	bmi.n	800ca86 <_vfiprintf_r+0x1fe>
 800ca7a:	89ab      	ldrh	r3, [r5, #12]
 800ca7c:	059a      	lsls	r2, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_vfiprintf_r+0x1fe>
 800ca80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca82:	f7fe fad3 	bl	800b02c <__retarget_lock_release_recursive>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	065b      	lsls	r3, r3, #25
 800ca8a:	f53f af1f 	bmi.w	800c8cc <_vfiprintf_r+0x44>
 800ca8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca90:	e71e      	b.n	800c8d0 <_vfiprintf_r+0x48>
 800ca92:	ab03      	add	r3, sp, #12
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	462a      	mov	r2, r5
 800ca98:	4b05      	ldr	r3, [pc, #20]	@ (800cab0 <_vfiprintf_r+0x228>)
 800ca9a:	a904      	add	r1, sp, #16
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7fe f821 	bl	800aae4 <_printf_i>
 800caa2:	e7e4      	b.n	800ca6e <_vfiprintf_r+0x1e6>
 800caa4:	0800d147 	.word	0x0800d147
 800caa8:	0800d151 	.word	0x0800d151
 800caac:	0800a5b5 	.word	0x0800a5b5
 800cab0:	0800c865 	.word	0x0800c865
 800cab4:	0800d14d 	.word	0x0800d14d

0800cab8 <__swbuf_r>:
 800cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caba:	460e      	mov	r6, r1
 800cabc:	4614      	mov	r4, r2
 800cabe:	4605      	mov	r5, r0
 800cac0:	b118      	cbz	r0, 800caca <__swbuf_r+0x12>
 800cac2:	6a03      	ldr	r3, [r0, #32]
 800cac4:	b90b      	cbnz	r3, 800caca <__swbuf_r+0x12>
 800cac6:	f7fe f9b9 	bl	800ae3c <__sinit>
 800caca:	69a3      	ldr	r3, [r4, #24]
 800cacc:	60a3      	str	r3, [r4, #8]
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	071a      	lsls	r2, r3, #28
 800cad2:	d501      	bpl.n	800cad8 <__swbuf_r+0x20>
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	b943      	cbnz	r3, 800caea <__swbuf_r+0x32>
 800cad8:	4621      	mov	r1, r4
 800cada:	4628      	mov	r0, r5
 800cadc:	f000 f82a 	bl	800cb34 <__swsetup_r>
 800cae0:	b118      	cbz	r0, 800caea <__swbuf_r+0x32>
 800cae2:	f04f 37ff 	mov.w	r7, #4294967295
 800cae6:	4638      	mov	r0, r7
 800cae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	6922      	ldr	r2, [r4, #16]
 800caee:	1a98      	subs	r0, r3, r2
 800caf0:	6963      	ldr	r3, [r4, #20]
 800caf2:	b2f6      	uxtb	r6, r6
 800caf4:	4283      	cmp	r3, r0
 800caf6:	4637      	mov	r7, r6
 800caf8:	dc05      	bgt.n	800cb06 <__swbuf_r+0x4e>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4628      	mov	r0, r5
 800cafe:	f7ff fde9 	bl	800c6d4 <_fflush_r>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1ed      	bne.n	800cae2 <__swbuf_r+0x2a>
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	60a3      	str	r3, [r4, #8]
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	6022      	str	r2, [r4, #0]
 800cb12:	701e      	strb	r6, [r3, #0]
 800cb14:	6962      	ldr	r2, [r4, #20]
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d004      	beq.n	800cb26 <__swbuf_r+0x6e>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	07db      	lsls	r3, r3, #31
 800cb20:	d5e1      	bpl.n	800cae6 <__swbuf_r+0x2e>
 800cb22:	2e0a      	cmp	r6, #10
 800cb24:	d1df      	bne.n	800cae6 <__swbuf_r+0x2e>
 800cb26:	4621      	mov	r1, r4
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f7ff fdd3 	bl	800c6d4 <_fflush_r>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d0d9      	beq.n	800cae6 <__swbuf_r+0x2e>
 800cb32:	e7d6      	b.n	800cae2 <__swbuf_r+0x2a>

0800cb34 <__swsetup_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4b29      	ldr	r3, [pc, #164]	@ (800cbdc <__swsetup_r+0xa8>)
 800cb38:	4605      	mov	r5, r0
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	b118      	cbz	r0, 800cb48 <__swsetup_r+0x14>
 800cb40:	6a03      	ldr	r3, [r0, #32]
 800cb42:	b90b      	cbnz	r3, 800cb48 <__swsetup_r+0x14>
 800cb44:	f7fe f97a 	bl	800ae3c <__sinit>
 800cb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4c:	0719      	lsls	r1, r3, #28
 800cb4e:	d422      	bmi.n	800cb96 <__swsetup_r+0x62>
 800cb50:	06da      	lsls	r2, r3, #27
 800cb52:	d407      	bmi.n	800cb64 <__swsetup_r+0x30>
 800cb54:	2209      	movs	r2, #9
 800cb56:	602a      	str	r2, [r5, #0]
 800cb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb5c:	81a3      	strh	r3, [r4, #12]
 800cb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb62:	e033      	b.n	800cbcc <__swsetup_r+0x98>
 800cb64:	0758      	lsls	r0, r3, #29
 800cb66:	d512      	bpl.n	800cb8e <__swsetup_r+0x5a>
 800cb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6a:	b141      	cbz	r1, 800cb7e <__swsetup_r+0x4a>
 800cb6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d002      	beq.n	800cb7a <__swsetup_r+0x46>
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7ff f8a7 	bl	800bcc8 <_free_r>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	2300      	movs	r3, #0
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	f043 0308 	orr.w	r3, r3, #8
 800cb94:	81a3      	strh	r3, [r4, #12]
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	b94b      	cbnz	r3, 800cbae <__swsetup_r+0x7a>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba4:	d003      	beq.n	800cbae <__swsetup_r+0x7a>
 800cba6:	4621      	mov	r1, r4
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f000 f883 	bl	800ccb4 <__smakebuf_r>
 800cbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb2:	f013 0201 	ands.w	r2, r3, #1
 800cbb6:	d00a      	beq.n	800cbce <__swsetup_r+0x9a>
 800cbb8:	2200      	movs	r2, #0
 800cbba:	60a2      	str	r2, [r4, #8]
 800cbbc:	6962      	ldr	r2, [r4, #20]
 800cbbe:	4252      	negs	r2, r2
 800cbc0:	61a2      	str	r2, [r4, #24]
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	b942      	cbnz	r2, 800cbd8 <__swsetup_r+0xa4>
 800cbc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbca:	d1c5      	bne.n	800cb58 <__swsetup_r+0x24>
 800cbcc:	bd38      	pop	{r3, r4, r5, pc}
 800cbce:	0799      	lsls	r1, r3, #30
 800cbd0:	bf58      	it	pl
 800cbd2:	6962      	ldrpl	r2, [r4, #20]
 800cbd4:	60a2      	str	r2, [r4, #8]
 800cbd6:	e7f4      	b.n	800cbc2 <__swsetup_r+0x8e>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e7f7      	b.n	800cbcc <__swsetup_r+0x98>
 800cbdc:	20000108 	.word	0x20000108

0800cbe0 <_raise_r>:
 800cbe0:	291f      	cmp	r1, #31
 800cbe2:	b538      	push	{r3, r4, r5, lr}
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	d904      	bls.n	800cbf4 <_raise_r+0x14>
 800cbea:	2316      	movs	r3, #22
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cbf6:	b112      	cbz	r2, 800cbfe <_raise_r+0x1e>
 800cbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbfc:	b94b      	cbnz	r3, 800cc12 <_raise_r+0x32>
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 f830 	bl	800cc64 <_getpid_r>
 800cc04:	4622      	mov	r2, r4
 800cc06:	4601      	mov	r1, r0
 800cc08:	4628      	mov	r0, r5
 800cc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0e:	f000 b817 	b.w	800cc40 <_kill_r>
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d00a      	beq.n	800cc2c <_raise_r+0x4c>
 800cc16:	1c59      	adds	r1, r3, #1
 800cc18:	d103      	bne.n	800cc22 <_raise_r+0x42>
 800cc1a:	2316      	movs	r3, #22
 800cc1c:	6003      	str	r3, [r0, #0]
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e7e7      	b.n	800cbf2 <_raise_r+0x12>
 800cc22:	2100      	movs	r1, #0
 800cc24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4798      	blx	r3
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	e7e0      	b.n	800cbf2 <_raise_r+0x12>

0800cc30 <raise>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	@ (800cc3c <raise+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f7ff bfd3 	b.w	800cbe0 <_raise_r>
 800cc3a:	bf00      	nop
 800cc3c:	20000108 	.word	0x20000108

0800cc40 <_kill_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	@ (800cc60 <_kill_r+0x20>)
 800cc44:	2300      	movs	r3, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	602b      	str	r3, [r5, #0]
 800cc4e:	f7f4 fe41 	bl	80018d4 <_kill>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	d102      	bne.n	800cc5c <_kill_r+0x1c>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b103      	cbz	r3, 800cc5c <_kill_r+0x1c>
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	bd38      	pop	{r3, r4, r5, pc}
 800cc5e:	bf00      	nop
 800cc60:	20002144 	.word	0x20002144

0800cc64 <_getpid_r>:
 800cc64:	f7f4 be2e 	b.w	80018c4 <_getpid>

0800cc68 <__swhatbuf_r>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc70:	2900      	cmp	r1, #0
 800cc72:	b096      	sub	sp, #88	@ 0x58
 800cc74:	4615      	mov	r5, r2
 800cc76:	461e      	mov	r6, r3
 800cc78:	da0d      	bge.n	800cc96 <__swhatbuf_r+0x2e>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc80:	f04f 0100 	mov.w	r1, #0
 800cc84:	bf14      	ite	ne
 800cc86:	2340      	movne	r3, #64	@ 0x40
 800cc88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	6031      	str	r1, [r6, #0]
 800cc90:	602b      	str	r3, [r5, #0]
 800cc92:	b016      	add	sp, #88	@ 0x58
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
 800cc96:	466a      	mov	r2, sp
 800cc98:	f000 f848 	bl	800cd2c <_fstat_r>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	dbec      	blt.n	800cc7a <__swhatbuf_r+0x12>
 800cca0:	9901      	ldr	r1, [sp, #4]
 800cca2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cca6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccaa:	4259      	negs	r1, r3
 800ccac:	4159      	adcs	r1, r3
 800ccae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccb2:	e7eb      	b.n	800cc8c <__swhatbuf_r+0x24>

0800ccb4 <__smakebuf_r>:
 800ccb4:	898b      	ldrh	r3, [r1, #12]
 800ccb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccb8:	079d      	lsls	r5, r3, #30
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	d507      	bpl.n	800ccd0 <__smakebuf_r+0x1c>
 800ccc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	6123      	str	r3, [r4, #16]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	6163      	str	r3, [r4, #20]
 800cccc:	b003      	add	sp, #12
 800ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd0:	ab01      	add	r3, sp, #4
 800ccd2:	466a      	mov	r2, sp
 800ccd4:	f7ff ffc8 	bl	800cc68 <__swhatbuf_r>
 800ccd8:	9f00      	ldr	r7, [sp, #0]
 800ccda:	4605      	mov	r5, r0
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff f866 	bl	800bdb0 <_malloc_r>
 800cce4:	b948      	cbnz	r0, 800ccfa <__smakebuf_r+0x46>
 800cce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccea:	059a      	lsls	r2, r3, #22
 800ccec:	d4ee      	bmi.n	800cccc <__smakebuf_r+0x18>
 800ccee:	f023 0303 	bic.w	r3, r3, #3
 800ccf2:	f043 0302 	orr.w	r3, r3, #2
 800ccf6:	81a3      	strh	r3, [r4, #12]
 800ccf8:	e7e2      	b.n	800ccc0 <__smakebuf_r+0xc>
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	6020      	str	r0, [r4, #0]
 800ccfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	9b01      	ldr	r3, [sp, #4]
 800cd06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd0a:	b15b      	cbz	r3, 800cd24 <__smakebuf_r+0x70>
 800cd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 f81d 	bl	800cd50 <_isatty_r>
 800cd16:	b128      	cbz	r0, 800cd24 <__smakebuf_r+0x70>
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	f023 0303 	bic.w	r3, r3, #3
 800cd1e:	f043 0301 	orr.w	r3, r3, #1
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	431d      	orrs	r5, r3
 800cd28:	81a5      	strh	r5, [r4, #12]
 800cd2a:	e7cf      	b.n	800cccc <__smakebuf_r+0x18>

0800cd2c <_fstat_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d07      	ldr	r5, [pc, #28]	@ (800cd4c <_fstat_r+0x20>)
 800cd30:	2300      	movs	r3, #0
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	4611      	mov	r1, r2
 800cd38:	602b      	str	r3, [r5, #0]
 800cd3a:	f7f4 fe2b 	bl	8001994 <_fstat>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d102      	bne.n	800cd48 <_fstat_r+0x1c>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	b103      	cbz	r3, 800cd48 <_fstat_r+0x1c>
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	bd38      	pop	{r3, r4, r5, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20002144 	.word	0x20002144

0800cd50 <_isatty_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d06      	ldr	r5, [pc, #24]	@ (800cd6c <_isatty_r+0x1c>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	f7f4 fe2a 	bl	80019b4 <_isatty>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_isatty_r+0x1a>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_isatty_r+0x1a>
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	20002144 	.word	0x20002144

0800cd70 <_init>:
 800cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd72:	bf00      	nop
 800cd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd76:	bc08      	pop	{r3}
 800cd78:	469e      	mov	lr, r3
 800cd7a:	4770      	bx	lr

0800cd7c <_fini>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	bf00      	nop
 800cd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd82:	bc08      	pop	{r3}
 800cd84:	469e      	mov	lr, r3
 800cd86:	4770      	bx	lr
