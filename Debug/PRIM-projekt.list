
PRIM-projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f74  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800810c  0800810c  0000910c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008174  08008174  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800817c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d40  200000fc  08008278  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e3c  08008278  0000ae3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014383  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003715  00000000  00000000  0001e4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00021bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db6  00000000  00000000  00022dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001956c  00000000  00000000  00023b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f09  00000000  00000000  0003d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da0a  00000000  00000000  00055ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e39fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a9c  00000000  00000000  000e3a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e84dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080f4 	.word	0x080080f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080080f4 	.word	0x080080f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc38 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f810 	bl	80004f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d4:	f000 f876 	bl	80005c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f956 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f892 	bl	8000604 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004e0:	f000 f8be 	bl	8000660 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004e4:	f000 f8ea 	bl	80006bc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f918 	bl	800071c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f007 f8de 	bl	80076ac <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <main+0x28>

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	@ 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	@ 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fdca 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <SystemClock_Config+0xc8>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	4a26      	ldr	r2, [pc, #152]	@ (80005bc <SystemClock_Config+0xc8>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	@ 0x40
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <SystemClock_Config+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a20      	ldr	r2, [pc, #128]	@ (80005c0 <SystemClock_Config+0xcc>)
 800053e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000568:	23a8      	movs	r3, #168	@ 0xa8
 800056a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f002 ff5d 	bl	8003438 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f9da 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2102      	movs	r1, #2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f9bf 	bl	8003928 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b0:	f000 f9c4 	bl	800093c <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005da:	2301      	movs	r3, #1
 80005dc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005de:	23c8      	movs	r3, #200	@ 0xc8
 80005e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005e2:	2305      	movs	r3, #5
 80005e4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fba7 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80005f8:	f000 f9a0 	bl	800093c <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	@ (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f000 fec3 	bl	80013cc <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f976 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000118 	.word	0x20000118
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <MX_I2S2_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2S2_Init+0x50>)
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_I2S2_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000686:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <MX_I2S2_Init+0x58>)
 8000688:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2S2_Init+0x50>)
 8000698:	2201      	movs	r2, #1
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_I2S2_Init+0x50>)
 800069e:	f000 ffd9 	bl	8001654 <HAL_I2S_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f948 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	40003800 	.word	0x40003800
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <MX_I2S3_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <MX_I2S3_Init+0x5c>)
 80006e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006fc:	f000 ffaa 	bl	8001654 <HAL_I2S_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f919 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001b4 	.word	0x200001b4
 8000714:	40003c00 	.word	0x40003c00
 8000718:	00017700 	.word	0x00017700

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f003 fc39 	bl	8003fe4 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f8e0 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001fc 	.word	0x200001fc
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b61      	ldr	r3, [pc, #388]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a60      	ldr	r2, [pc, #384]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b5e      	ldr	r3, [pc, #376]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b5a      	ldr	r3, [pc, #360]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a59      	ldr	r2, [pc, #356]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b57      	ldr	r3, [pc, #348]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a52      	ldr	r2, [pc, #328]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3d      	ldr	r2, [pc, #244]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4838      	ldr	r0, [pc, #224]	@ (800092c <MX_GPIO_Init+0x1a4>)
 800084c:	f000 fda4 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4836      	ldr	r0, [pc, #216]	@ (8000930 <MX_GPIO_Init+0x1a8>)
 8000856:	f000 fd9f 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000860:	4834      	ldr	r0, [pc, #208]	@ (8000934 <MX_GPIO_Init+0x1ac>)
 8000862:	f000 fd99 	bl	8001398 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000866:	2304      	movs	r3, #4
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482c      	ldr	r0, [pc, #176]	@ (800092c <MX_GPIO_Init+0x1a4>)
 800087a:	f000 fc09 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4825      	ldr	r0, [pc, #148]	@ (800092c <MX_GPIO_Init+0x1a4>)
 8000896:	f000 fbfb 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800089a:	2332      	movs	r3, #50	@ 0x32
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481f      	ldr	r0, [pc, #124]	@ (800092c <MX_GPIO_Init+0x1a4>)
 80008b0:	f000 fbee 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4819      	ldr	r0, [pc, #100]	@ (8000930 <MX_GPIO_Init+0x1a8>)
 80008cc:	f000 fbe0 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_GPIO_Init+0x1b0>)
 80008e6:	f000 fbd3 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_GPIO_Init+0x1ac>)
 8000904:	f000 fbc4 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_GPIO_Init+0x1ac>)
 800091c:	f000 fbb8 	bl	8001090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	@ 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40021000 	.word	0x40021000
 8000930:	40020800 	.word	0x40020800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40020000 	.word	0x40020000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fb40 	bl	800100c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <HAL_I2C_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <HAL_I2C_MspInit+0x8c>)
 80009f4:	f000 fb4c 	bl	8001090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	@ 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a59      	ldr	r2, [pc, #356]	@ (8000bac <HAL_I2S_MspInit+0x184>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d15b      	bne.n	8000b02 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
 8000a4e:	4b58      	ldr	r3, [pc, #352]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a57      	ldr	r2, [pc, #348]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	4b51      	ldr	r3, [pc, #324]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a50      	ldr	r2, [pc, #320]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a49      	ldr	r2, [pc, #292]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b47      	ldr	r3, [pc, #284]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	483e      	ldr	r0, [pc, #248]	@ (8000bb4 <HAL_I2S_MspInit+0x18c>)
 8000aba:	f000 fae9 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4836      	ldr	r0, [pc, #216]	@ (8000bb4 <HAL_I2S_MspInit+0x18c>)
 8000ada:	f000 fad9 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af0:	2305      	movs	r3, #5
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	482f      	ldr	r0, [pc, #188]	@ (8000bb8 <HAL_I2S_MspInit+0x190>)
 8000afc:	f000 fac8 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b00:	e04f      	b.n	8000ba2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a2d      	ldr	r2, [pc, #180]	@ (8000bbc <HAL_I2S_MspInit+0x194>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d14a      	bne.n	8000ba2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a26      	ldr	r2, [pc, #152]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_I2S_MspInit+0x188>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b60:	2310      	movs	r3, #16
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b70:	2306      	movs	r3, #6
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <HAL_I2S_MspInit+0x198>)
 8000b7c:	f000 fa88 	bl	8001090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b80:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b92:	2306      	movs	r3, #6
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_I2S_MspInit+0x18c>)
 8000b9e:	f000 fa77 	bl	8001090 <HAL_GPIO_Init>
}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	@ 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40003800 	.word	0x40003800
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40003c00 	.word	0x40003c00
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <HAL_SPI_MspInit+0x84>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12b      	bne.n	8000c3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a17      	ldr	r2, [pc, #92]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c1e:	23e0      	movs	r3, #224	@ 0xe0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	f000 fa29 	bl	8001090 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000caa:	f000 f89b 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <OTG_FS_IRQHandler+0x10>)
 8000cba:	f001 faaf 	bl	800221c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001738 	.word	0x20001738

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f007 f9c7 	bl	80080ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fbd3 	bl	80004c8 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d30:	0800817c 	.word	0x0800817c
  ldr r2, =_sbss
 8000d34:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000d38:	20001e3c 	.word	0x20001e3c

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f94f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fde8 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f967 	bl	8001076 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000254 	.word	0x20000254

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000254 	.word	0x20000254

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff3e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff31 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e159      	b.n	8001360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8148 	bne.w	800135a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a2 	beq.w	800135a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a56      	ldr	r2, [pc, #344]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a52      	ldr	r2, [pc, #328]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	@ (8001380 <HAL_GPIO_Init+0x2f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x202>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1fe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1fa>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	@ (800138c <HAL_GPIO_Init+0x2fc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	@ (8001390 <HAL_GPIO_Init+0x300>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1f2>
 800127e:	2304      	movs	r3, #4
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001282:	2307      	movs	r3, #7
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f aea2 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e12b      	b.n	8001636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fad0 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	@ 0x24
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800142e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001430:	f002 fc72 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8001434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a81      	ldr	r2, [pc, #516]	@ (8001640 <HAL_I2C_Init+0x274>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d807      	bhi.n	8001450 <HAL_I2C_Init+0x84>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a80      	ldr	r2, [pc, #512]	@ (8001644 <HAL_I2C_Init+0x278>)
 8001444:	4293      	cmp	r3, r2
 8001446:	bf94      	ite	ls
 8001448:	2301      	movls	r3, #1
 800144a:	2300      	movhi	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e006      	b.n	800145e <HAL_I2C_Init+0x92>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a7d      	ldr	r2, [pc, #500]	@ (8001648 <HAL_I2C_Init+0x27c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0e7      	b.n	8001636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a78      	ldr	r2, [pc, #480]	@ (800164c <HAL_I2C_Init+0x280>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a6a      	ldr	r2, [pc, #424]	@ (8001640 <HAL_I2C_Init+0x274>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d802      	bhi.n	80014a0 <HAL_I2C_Init+0xd4>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3301      	adds	r3, #1
 800149e:	e009      	b.n	80014b4 <HAL_I2C_Init+0xe8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4a69      	ldr	r2, [pc, #420]	@ (8001650 <HAL_I2C_Init+0x284>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	3301      	adds	r3, #1
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	495c      	ldr	r1, [pc, #368]	@ (8001640 <HAL_I2C_Init+0x274>)
 80014d0:	428b      	cmp	r3, r1
 80014d2:	d819      	bhi.n	8001508 <HAL_I2C_Init+0x13c>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e59      	subs	r1, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014e8:	400b      	ands	r3, r1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <HAL_I2C_Init+0x138>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e59      	subs	r1, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001502:	e051      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001504:	2304      	movs	r3, #4
 8001506:	e04f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_I2C_Init+0x168>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	e012      	b.n	800155a <HAL_I2C_Init+0x18e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	0099      	lsls	r1, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x196>
 800155e:	2301      	movs	r3, #1
 8001560:	e022      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10e      	bne.n	8001588 <HAL_I2C_Init+0x1bc>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e58      	subs	r0, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	fbb0 f3f3 	udiv	r3, r0, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001586:	e00f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6911      	ldr	r1, [r2, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	000186a0 	.word	0x000186a0
 8001644:	001e847f 	.word	0x001e847f
 8001648:	003d08ff 	.word	0x003d08ff
 800164c:	431bde83 	.word	0x431bde83
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e128      	b.n	80018b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a90      	ldr	r2, [pc, #576]	@ (80018c0 <HAL_I2S_Init+0x26c>)
 800167e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff f9d1 	bl	8000a28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2202      	movs	r2, #2
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800169c:	f023 030f 	bic.w	r3, r3, #15
 80016a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2202      	movs	r2, #2
 80016a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d060      	beq.n	8001774 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80016ba:	2310      	movs	r3, #16
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e001      	b.n	80016c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d802      	bhi.n	80016d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f002 fc24 	bl	8003f20 <HAL_RCCEx_GetPeriphCLKFreq>
 80016d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e2:	d125      	bne.n	8001730 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	3305      	adds	r3, #5
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e01f      	b.n	800174e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	fbb2 f2f3 	udiv	r2, r2, r3
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	3305      	adds	r3, #5
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	e00e      	b.n	800174e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fbb2 f2f3 	udiv	r2, r2, r3
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	3305      	adds	r3, #5
 800174c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4a5c      	ldr	r2, [pc, #368]	@ (80018c4 <HAL_I2S_Init+0x270>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	e003      	b.n	800177c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001774:	2302      	movs	r3, #2
 8001776:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d902      	bls.n	8001788 <HAL_I2S_Init+0x134>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2bff      	cmp	r3, #255	@ 0xff
 8001786:	d907      	bls.n	8001798 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	f043 0210 	orr.w	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e08f      	b.n	80018b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	ea42 0103 	orr.w	r1, r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80017b6:	f023 030f 	bic.w	r3, r3, #15
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6851      	ldr	r1, [r2, #4]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6892      	ldr	r2, [r2, #8]
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68d2      	ldr	r2, [r2, #12]
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6992      	ldr	r2, [r2, #24]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d161      	bne.n	80018a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a38      	ldr	r2, [pc, #224]	@ (80018c8 <HAL_I2S_Init+0x274>)
 80017e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a37      	ldr	r2, [pc, #220]	@ (80018cc <HAL_I2S_Init+0x278>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_I2S_Init+0x1a4>
 80017f4:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <HAL_I2S_Init+0x27c>)
 80017f6:	e001      	b.n	80017fc <HAL_I2S_Init+0x1a8>
 80017f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4932      	ldr	r1, [pc, #200]	@ (80018cc <HAL_I2S_Init+0x278>)
 8001804:	428a      	cmp	r2, r1
 8001806:	d101      	bne.n	800180c <HAL_I2S_Init+0x1b8>
 8001808:	4a31      	ldr	r2, [pc, #196]	@ (80018d0 <HAL_I2S_Init+0x27c>)
 800180a:	e001      	b.n	8001810 <HAL_I2S_Init+0x1bc>
 800180c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001810:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2b      	ldr	r2, [pc, #172]	@ (80018cc <HAL_I2S_Init+0x278>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_I2S_Init+0x1d4>
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_I2S_Init+0x27c>)
 8001826:	e001      	b.n	800182c <HAL_I2S_Init+0x1d8>
 8001828:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800182c:	2202      	movs	r2, #2
 800182e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a25      	ldr	r2, [pc, #148]	@ (80018cc <HAL_I2S_Init+0x278>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_I2S_Init+0x1ea>
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <HAL_I2S_Init+0x27c>)
 800183c:	e001      	b.n	8001842 <HAL_I2S_Init+0x1ee>
 800183e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184e:	d003      	beq.n	8001858 <HAL_I2S_Init+0x204>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	e001      	b.n	8001864 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800186e:	4313      	orrs	r3, r2
 8001870:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001878:	4313      	orrs	r3, r2
 800187a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001882:	4313      	orrs	r3, r2
 8001884:	b29a      	uxth	r2, r3
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	4313      	orrs	r3, r2
 800188a:	b29b      	uxth	r3, r3
 800188c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001890:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_I2S_Init+0x278>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_I2S_Init+0x24c>
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_I2S_Init+0x27c>)
 800189e:	e001      	b.n	80018a4 <HAL_I2S_Init+0x250>
 80018a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018a4:	897a      	ldrh	r2, [r7, #10]
 80018a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	080019cb 	.word	0x080019cb
 80018c4:	cccccccd 	.word	0xcccccccd
 80018c8:	08001ae1 	.word	0x08001ae1
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40003400 	.word	0x40003400

080018d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	1c9a      	adds	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001940:	b29b      	uxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10e      	bne.n	8001964 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001954:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffb8 	bl	80018d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	b292      	uxth	r2, r2
 8001980:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	1c9a      	adds	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10e      	bne.n	80019c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80019b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff93 	bl	80018e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d13a      	bne.n	8001a5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d109      	bne.n	8001a04 <I2S_IRQHandler+0x3a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fa:	2b40      	cmp	r3, #64	@ 0x40
 80019fc:	d102      	bne.n	8001a04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb4 	bl	800196c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	2b40      	cmp	r3, #64	@ 0x40
 8001a0c:	d126      	bne.n	8001a5c <I2S_IRQHandler+0x92>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d11f      	bne.n	8001a5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001a2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff50 	bl	80018fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d136      	bne.n	8001ad6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d109      	bne.n	8001a86 <I2S_IRQHandler+0xbc>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	2b80      	cmp	r3, #128	@ 0x80
 8001a7e:	d102      	bne.n	8001a86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff45 	bl	8001910 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d122      	bne.n	8001ad6 <I2S_IRQHandler+0x10c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d11b      	bne.n	8001ad6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001aac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff13 	bl	80018fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a92      	ldr	r2, [pc, #584]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001afa:	4b92      	ldr	r3, [pc, #584]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001afc:	e001      	b.n	8001b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001afe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a8b      	ldr	r2, [pc, #556]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001b18:	4b8a      	ldr	r3, [pc, #552]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b1a:	e001      	b.n	8001b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001b1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b2c:	d004      	beq.n	8001b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 8099 	bne.w	8001c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f925 	bl	8001d9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9c8 	bl	8001efc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b72:	2b40      	cmp	r3, #64	@ 0x40
 8001b74:	d13a      	bne.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d035      	beq.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6e      	ldr	r2, [pc, #440]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b8c:	e001      	b.n	8001b92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4969      	ldr	r1, [pc, #420]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b9a:	428b      	cmp	r3, r1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b9e:	4b69      	ldr	r3, [pc, #420]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ba0:	e001      	b.n	8001ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ba6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001baa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001bba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe88 	bl	80018fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	f040 80c3 	bne.w	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80bd 	beq.w	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a49      	ldr	r2, [pc, #292]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001c1e:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c20:	e001      	b.n	8001c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001c22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4944      	ldr	r1, [pc, #272]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c2e:	428b      	cmp	r3, r1
 8001c30:	d101      	bne.n	8001c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001c32:	4b44      	ldr	r3, [pc, #272]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c34:	e001      	b.n	8001c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001c36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe4a 	bl	80018fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c68:	e089      	b.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d107      	bne.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8be 	bl	8001e00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8fd 	bl	8001e98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca4:	2b40      	cmp	r3, #64	@ 0x40
 8001ca6:	d12f      	bne.n	8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02a      	beq.n	8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cce:	e001      	b.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001cd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4919      	ldr	r1, [pc, #100]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ce2:	e001      	b.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ce4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ce8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fdfa 	bl	80018fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d136      	bne.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d031      	beq.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d28:	e001      	b.n	8001d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4902      	ldr	r1, [pc, #8]	@ (8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d36:	428b      	cmp	r3, r1
 8001d38:	d106      	bne.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001d3a:	4b02      	ldr	r3, [pc, #8]	@ (8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d3c:	e006      	b.n	8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001d3e:	bf00      	nop
 8001d40:	40003800 	.word	0x40003800
 8001d44:	40003400 	.word	0x40003400
 8001d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fdc0 	bl	80018fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d7c:	e000      	b.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d7e:	bf00      	nop
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	1c99      	adds	r1, r3, #2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6251      	str	r1, [r2, #36]	@ 0x24
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d113      	bne.n	8001df6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ddc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffc9 	bl	8001d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	1c99      	adds	r1, r3, #2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6251      	str	r1, [r2, #36]	@ 0x24
 8001e12:	8819      	ldrh	r1, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <I2SEx_TxISR_I2SExt+0x90>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <I2SEx_TxISR_I2SExt+0x22>
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <I2SEx_TxISR_I2SExt+0x94>)
 8001e20:	e001      	b.n	8001e26 <I2SEx_TxISR_I2SExt+0x26>
 8001e22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e26:	460a      	mov	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d121      	bne.n	8001e86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <I2SEx_TxISR_I2SExt+0x90>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <I2SEx_TxISR_I2SExt+0x50>
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <I2SEx_TxISR_I2SExt+0x94>)
 8001e4e:	e001      	b.n	8001e54 <I2SEx_TxISR_I2SExt+0x54>
 8001e50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	490d      	ldr	r1, [pc, #52]	@ (8001e90 <I2SEx_TxISR_I2SExt+0x90>)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d101      	bne.n	8001e64 <I2SEx_TxISR_I2SExt+0x64>
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <I2SEx_TxISR_I2SExt+0x94>)
 8001e62:	e001      	b.n	8001e68 <I2SEx_TxISR_I2SExt+0x68>
 8001e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff81 	bl	8001d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40003800 	.word	0x40003800
 8001e94:	40003400 	.word	0x40003400

08001e98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68d8      	ldr	r0, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	1c99      	adds	r1, r3, #2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001eb0:	b282      	uxth	r2, r0
 8001eb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d113      	bne.n	8001ef4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4a 	bl	8001d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <I2SEx_RxISR_I2SExt+0x90>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <I2SEx_RxISR_I2SExt+0x16>
 8001f0e:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <I2SEx_RxISR_I2SExt+0x94>)
 8001f10:	e001      	b.n	8001f16 <I2SEx_RxISR_I2SExt+0x1a>
 8001f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f16:	68d8      	ldr	r0, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	1c99      	adds	r1, r3, #2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001f22:	b282      	uxth	r2, r0
 8001f24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d121      	bne.n	8001f82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <I2SEx_RxISR_I2SExt+0x90>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <I2SEx_RxISR_I2SExt+0x50>
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <I2SEx_RxISR_I2SExt+0x94>)
 8001f4a:	e001      	b.n	8001f50 <I2SEx_RxISR_I2SExt+0x54>
 8001f4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <I2SEx_RxISR_I2SExt+0x90>)
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d101      	bne.n	8001f60 <I2SEx_RxISR_I2SExt+0x64>
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <I2SEx_RxISR_I2SExt+0x94>)
 8001f5e:	e001      	b.n	8001f64 <I2SEx_RxISR_I2SExt+0x68>
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff03 	bl	8001d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	40003400 	.word	0x40003400

08001f94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e101      	b.n	80021aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f005 fd53 	bl	8007a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 f9a0 	bl	8004326 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7c1a      	ldrb	r2, [r3, #16]
 8001fee:	f88d 2000 	strb.w	r2, [sp]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff6:	f002 f87e 	bl	80040f6 <USB_CoreInit>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ce      	b.n	80021aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f002 f998 	bl	8004348 <USB_SetCurrentMode>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0bf      	b.n	80021aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e04a      	b.n	80020c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3315      	adds	r3, #21
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3314      	adds	r3, #20
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	b298      	uxth	r0, r3
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	332e      	adds	r3, #46	@ 0x2e
 800206c:	4602      	mov	r2, r0
 800206e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3318      	adds	r3, #24
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	331c      	adds	r3, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3320      	adds	r3, #32
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3324      	adds	r3, #36	@ 0x24
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3af      	bcc.n	8002030 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e044      	b.n	8002160 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3b5      	bcc.n	80020d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7c1a      	ldrb	r2, [r3, #16]
 8002172:	f88d 2000 	strb.w	r2, [sp]
 8002176:	3304      	adds	r3, #4
 8002178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217a:	f002 f931 	bl	80043e0 <USB_DevInit>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e00c      	b.n	80021aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 f97b 	bl	800549e <USB_DevDisconnect>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_PCD_Start+0x1c>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e022      	b.n	8002214 <HAL_PCD_Start+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f882 	bl	8004304 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f929 	bl	800545c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08d      	sub	sp, #52	@ 0x34
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f9e7 	bl	8005606 <USB_GetMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 848c 	bne.w	8002b58 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 f94b 	bl	80054e0 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8482 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f938 	bl	80054e0 <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f002 0202 	and.w	r2, r2, #2
 8002288:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f926 	bl	80054e0 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b10      	cmp	r3, #16
 800229c:	d161      	bne.n	8002362 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0210 	bic.w	r2, r2, #16
 80022ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	0c5b      	lsrs	r3, r3, #17
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d124      	bne.n	8002324 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d035      	beq.n	8002352 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	6a38      	ldr	r0, [r7, #32]
 80022fa:	f002 ff5d 	bl	80051b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230a:	441a      	add	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231c:	441a      	add	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	e016      	b.n	8002352 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	0c5b      	lsrs	r3, r3, #17
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	2b06      	cmp	r3, #6
 800232e:	d110      	bne.n	8002352 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002336:	2208      	movs	r2, #8
 8002338:	4619      	mov	r1, r3
 800233a:	6a38      	ldr	r0, [r7, #32]
 800233c:	f002 ff3c 	bl	80051b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800234c:	441a      	add	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0210 	orr.w	r2, r2, #16
 8002360:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f8ba 	bl	80054e0 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002376:	f040 80a7 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 f8bf 	bl	8005506 <USB_ReadDevAllOutEpInterrupt>
 8002388:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800238a:	e099      	b.n	80024c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 808e 	beq.w	80024b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f8e3 	bl	800556e <USB_ReadDevOutEPInterrupt>
 80023a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fea3 	bl	8003114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	2308      	movs	r3, #8
 80023e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 ff79 	bl	80032e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d030      	beq.n	800247a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002420:	2b80      	cmp	r3, #128	@ 0x80
 8002422:	d109      	bne.n	8002438 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002436:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d108      	bne.n	8002468 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 fc0c 	bl	8007c80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	2302      	movs	r3, #2
 8002478:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2320      	movs	r3, #32
 8002494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ac:	461a      	mov	r2, r3
 80024ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	3301      	adds	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f47f af62 	bne.w	800238c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f807 	bl	80054e0 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024dc:	f040 80db 	bne.w	8002696 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 f828 	bl	800553a <USB_ReadDevAllInEpInterrupt>
 80024ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024f0:	e0cd      	b.n	800268e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80c2 	beq.w	8002682 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f84e 	bl	80055aa <USB_ReadDevInEPInterrupt>
 800250e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d057      	beq.n	80025ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800252e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	69f9      	ldr	r1, [r7, #28]
 8002536:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800253a:	4013      	ands	r3, r2
 800253c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800254a:	461a      	mov	r2, r3
 800254c:	2301      	movs	r3, #1
 800254e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	799b      	ldrb	r3, [r3, #6]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d132      	bne.n	80025be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3320      	adds	r3, #32
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	331c      	adds	r3, #28
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4419      	add	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	3320      	adds	r3, #32
 800258e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	2b00      	cmp	r3, #0
 8002594:	d113      	bne.n	80025be <HAL_PCD_IRQHandler+0x3a2>
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3324      	adds	r3, #36	@ 0x24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d108      	bne.n	80025be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025b6:	461a      	mov	r2, r3
 80025b8:	2101      	movs	r1, #1
 80025ba:	f003 f855 	bl	8005668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 fae0 	bl	8007b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e0:	461a      	mov	r2, r3
 80025e2:	2308      	movs	r3, #8
 80025e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025fc:	461a      	mov	r2, r3
 80025fe:	2310      	movs	r3, #16
 8002600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002618:	461a      	mov	r2, r3
 800261a:	2340      	movs	r3, #64	@ 0x40
 800261c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800262a:	6a38      	ldr	r0, [r7, #32]
 800262c:	f002 f83c 	bl	80046a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	3310      	adds	r3, #16
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	78db      	ldrb	r3, [r3, #3]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2200      	movs	r2, #0
 8002650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fb23 	bl	8007ca4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800266a:	461a      	mov	r2, r3
 800266c:	2302      	movs	r3, #2
 800266e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800267a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fcbd 	bl	8002ffc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f af2e 	bne.w	80024f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f002 ff20 	bl	80054e0 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026aa:	d122      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026d2:	2100      	movs	r1, #0
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fea3 	bl	8003420 <HAL_PCDEx_LPM_Callback>
 80026da:	e002      	b.n	80026e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f005 fac1 	bl	8007c64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fef2 	bl	80054e0 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002706:	d112      	bne.n	800272e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 fa7d 	bl	8007c18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800272c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fed4 	bl	80054e0 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002742:	f040 80b7 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2110      	movs	r1, #16
 8002760:	4618      	mov	r0, r3
 8002762:	f001 ffa1 	bl	80046a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276a:	e046      	b.n	80027fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002778:	461a      	mov	r2, r3
 800277a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800277e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	440a      	add	r2, r1
 8002796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800279a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800279e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ac:	461a      	mov	r2, r3
 80027ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	3301      	adds	r3, #1
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	791b      	ldrb	r3, [r3, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	4293      	cmp	r3, r2
 8002804:	d3b2      	bcc.n	800276c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002814:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002818:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7bdb      	ldrb	r3, [r3, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002832:	f043 030b 	orr.w	r3, r3, #11
 8002836:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002848:	f043 030b 	orr.w	r3, r3, #11
 800284c:	6453      	str	r3, [r2, #68]	@ 0x44
 800284e:	e015      	b.n	800287c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800285e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002862:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002866:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002876:	f043 030b 	orr.w	r3, r3, #11
 800287a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800288a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800288e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800289e:	461a      	mov	r2, r3
 80028a0:	f002 fee2 	bl	8005668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fe11 	bl	80054e0 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c8:	d123      	bne.n	8002912 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fea7 	bl	8005622 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 ff5e 	bl	800479a <USB_GetDevSpeed>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681c      	ldr	r4, [r3, #0]
 80028ea:	f001 fa09 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 80028ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028f4:	461a      	mov	r2, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f001 fc62 	bl	80041c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f005 f96c 	bl	8007bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fde2 	bl	80054e0 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10a      	bne.n	800293c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f005 f949 	bl	8007bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f002 0208 	and.w	r2, r2, #8
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fdcd 	bl	80054e0 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b80      	cmp	r3, #128	@ 0x80
 800294e:	d123      	bne.n	8002998 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295c:	2301      	movs	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002960:	e014      	b.n	800298c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fb0a 	bl	8002f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	461a      	mov	r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	4293      	cmp	r3, r2
 8002996:	d3e4      	bcc.n	8002962 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fd9f 	bl	80054e0 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ac:	d13c      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ae:	2301      	movs	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b2:	e02b      	b.n	8002a0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3318      	adds	r3, #24
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d115      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da12      	bge.n	8002a06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3317      	adds	r3, #23
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 faca 	bl	8002f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	3301      	adds	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	791b      	ldrb	r3, [r3, #4]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d3cd      	bcc.n	80029b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fd57 	bl	80054e0 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a3c:	d156      	bne.n	8002aec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a42:	e045      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d12e      	bne.n	8002aca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da2b      	bge.n	8002aca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d121      	bne.n	8002aca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac6:	6053      	str	r3, [r2, #4]
            break;
 8002ac8:	e008      	b.n	8002adc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	791b      	ldrb	r3, [r3, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d3b3      	bcc.n	8002a44 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fcf5 	bl	80054e0 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b00:	d10a      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 f8e0 	bl	8007cc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 fcdf 	bl	80054e0 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d115      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f005 f8d0 	bl	8007ce4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e000      	b.n	8002b58 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002b56:	bf00      	nop
    }
  }
}
 8002b58:	3734      	adds	r7, #52	@ 0x34
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}

08002b5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_PCD_SetAddress+0x1a>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e012      	b.n	8002b9e <HAL_PCD_SetAddress+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fc3e 	bl	8005410 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	4608      	mov	r0, r1
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	70fb      	strb	r3, [r7, #3]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	803b      	strh	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0f      	bge.n	8002bec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3310      	adds	r3, #16
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	705a      	strb	r2, [r3, #1]
 8002bea:	e00f      	b.n	8002c0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c18:	883b      	ldrh	r3, [r7, #0]
 8002c1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	78ba      	ldrb	r2, [r7, #2]
 8002c26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c3a:	78bb      	ldrb	r3, [r7, #2]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d102      	bne.n	8002c46 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_EP_Open+0xae>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e00e      	b.n	8002c72 <HAL_PCD_EP_Open+0xcc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 fdbe 	bl	80047e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da0f      	bge.n	8002cae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	705a      	strb	r2, [r3, #1]
 8002cac:	e00f      	b.n	8002cce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_PCD_EP_Close+0x6e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e00e      	b.n	8002d06 <HAL_PCD_EP_Close+0x8c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fdfc 	bl	80048f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	799b      	ldrb	r3, [r3, #6]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d102      	bne.n	8002d6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	799b      	ldrb	r3, [r3, #6]
 8002d72:	461a      	mov	r2, r3
 8002d74:	6979      	ldr	r1, [r7, #20]
 8002d76:	f001 fe99 	bl	8004aac <USB_EPStartXfer>

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3310      	adds	r3, #16
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df4:	7afb      	ldrb	r3, [r7, #11]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	799b      	ldrb	r3, [r3, #6]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	799b      	ldrb	r3, [r3, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6979      	ldr	r1, [r7, #20]
 8002e1a:	f001 fe47 	bl	8004aac <USB_EPStartXfer>

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	7912      	ldrb	r2, [r2, #4]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e04f      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da0f      	bge.n	8002e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	705a      	strb	r2, [r3, #1]
 8002e6c:	e00d      	b.n	8002e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_PCD_EP_SetStall+0x82>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e01d      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xbe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 f9d5 	bl	8005268 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7999      	ldrb	r1, [r3, #6]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f002 fbc6 	bl	8005668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	7912      	ldrb	r2, [r2, #4]
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e042      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3310      	adds	r3, #16
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00f      	b.n	8002f54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_EP_ClrStall+0x86>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e00e      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 f9de 	bl	8005344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0c      	bge.n	8002fc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e00c      	b.n	8002fe2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fffd 	bl	8004fe8 <USB_EPStopXfer>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3310      	adds	r3, #16
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d901      	bls.n	8003034 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e06b      	b.n	800310c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	d902      	bls.n	8003050 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3303      	adds	r3, #3
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003058:	e02a      	b.n	80030b0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3303      	adds	r3, #3
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4603      	mov	r3, r0
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f002 f852 	bl	800513c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	441a      	add	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	441a      	add	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d809      	bhi.n	80030da <PCD_WriteEmptyTxFifo+0xde>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d203      	bcs.n	80030da <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1bf      	bne.n	800305a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d811      	bhi.n	800310a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	2201      	movs	r2, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	43db      	mvns	r3, r3
 8003100:	6939      	ldr	r1, [r7, #16]
 8003102:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003106:	4013      	ands	r3, r2
 8003108:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	333c      	adds	r3, #60	@ 0x3c
 800312c:	3304      	adds	r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	799b      	ldrb	r3, [r3, #6]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d17b      	bne.n	8003242 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4a61      	ldr	r2, [pc, #388]	@ (80032dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	f240 80b9 	bls.w	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80b3 	beq.w	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	e0a7      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003196:	461a      	mov	r2, r3
 8003198:	2320      	movs	r3, #32
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	e098      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 8093 	bne.w	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	@ (80032dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d90f      	bls.n	80031d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ce:	6093      	str	r3, [r2, #8]
 80031d0:	e07e      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800321c:	461a      	mov	r2, r3
 800321e:	2101      	movs	r1, #1
 8003220:	f002 fa22 	bl	8005668 <USB_EP0_OutStart>
 8003224:	e006      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f004 fc8a 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
 8003240:	e046      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4a26      	ldr	r2, [pc, #152]	@ (80032e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d124      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e032      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	2320      	movs	r3, #32
 8003284:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f004 fc61 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
 8003292:	e01d      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d114      	bne.n	80032c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032bc:	461a      	mov	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	f002 f9d2 	bl	8005668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f004 fc42 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	4f54300a 	.word	0x4f54300a
 80032e0:	4f54310a 	.word	0x4f54310a

080032e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	333c      	adds	r3, #60	@ 0x3c
 80032fc:	3304      	adds	r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a15      	ldr	r2, [pc, #84]	@ (800336c <PCD_EP_OutSetupPacket_int+0x88>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d90e      	bls.n	8003338 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003336:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f004 fbf9 	bl	8007b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <PCD_EP_OutSetupPacket_int+0x88>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d90c      	bls.n	8003360 <PCD_EP_OutSetupPacket_int+0x7c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	799b      	ldrb	r3, [r3, #6]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003358:	461a      	mov	r2, r3
 800335a:	2101      	movs	r1, #1
 800335c:	f002 f984 	bl	8005668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	4f54300a 	.word	0x4f54300a

08003370 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800338e:	883b      	ldrh	r3, [r7, #0]
 8003390:	0419      	lsls	r1, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	430a      	orrs	r2, r1
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28
 800339c:	e028      	b.n	80033f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e00d      	b.n	80033ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	3340      	adds	r3, #64	@ 0x40
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4413      	add	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	3301      	adds	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d3ec      	bcc.n	80033b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033d8:	883b      	ldrh	r3, [r7, #0]
 80033da:	0418      	lsls	r0, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4302      	orrs	r2, r0
 80033e8:	3340      	adds	r3, #64	@ 0x40
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e267      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003456:	4b88      	ldr	r3, [pc, #544]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800346a:	2b08      	cmp	r3, #8
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b82      	ldr	r3, [pc, #520]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b7e      	ldr	r3, [pc, #504]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x108>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e242      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x74>
 800349e:	4b76      	ldr	r3, [pc, #472]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b70      	ldr	r3, [pc, #448]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a68      	ldr	r2, [pc, #416]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b66      	ldr	r3, [pc, #408]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fc8c 	bl	8000e0c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fd fc88 	bl	8000e0c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e207      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b5b      	ldr	r3, [pc, #364]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fc78 	bl	8000e0c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fd fc74 	bl	8000e0c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1f3      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	4b51      	ldr	r3, [pc, #324]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0xe8>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d063      	beq.n	8003616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800354e:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003562:	2b08      	cmp	r3, #8
 8003564:	d11c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d116      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e1c7      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4937      	ldr	r1, [pc, #220]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359e:	e03a      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a8:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fd fc2d 	bl	8000e0c <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b6:	f7fd fc29 	bl	8000e0c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1a8      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4925      	ldr	r1, [pc, #148]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e015      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ea:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fd fc0c 	bl	8000e0c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fd fc08 	bl	8000e0c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e187      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d036      	beq.n	8003690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd fbec 	bl	8000e0c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003638:	f7fd fbe8 	bl	8000e0c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e167      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x200>
 8003656:	e01b      	b.n	8003690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fd fbd5 	bl	8000e0c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e00e      	b.n	8003684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fd fbd1 	bl	8000e0c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d907      	bls.n	8003684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e150      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	42470000 	.word	0x42470000
 8003680:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ea      	bne.n	8003666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8097 	beq.w	80037cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b81      	ldr	r3, [pc, #516]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	4b7d      	ldr	r3, [pc, #500]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a7c      	ldr	r2, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b7a      	ldr	r3, [pc, #488]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b77      	ldr	r3, [pc, #476]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4b74      	ldr	r3, [pc, #464]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a73      	ldr	r2, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fb91 	bl	8000e0c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fd fb8d 	bl	8000e0c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e10c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x2ea>
 8003714:	4b64      	ldr	r3, [pc, #400]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	4a63      	ldr	r2, [pc, #396]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003720:	e01c      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b05      	cmp	r3, #5
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x30c>
 800372a:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5e      	ldr	r2, [pc, #376]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	4b5c      	ldr	r3, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	4a5b      	ldr	r2, [pc, #364]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6713      	str	r3, [r2, #112]	@ 0x70
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003744:	4b58      	ldr	r3, [pc, #352]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a57      	ldr	r2, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a54      	ldr	r2, [pc, #336]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d015      	beq.n	8003790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fd fb52 	bl	8000e0c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fb4e 	bl	8000e0c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0cb      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	4b49      	ldr	r3, [pc, #292]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ee      	beq.n	800376c <HAL_RCC_OscConfig+0x334>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7fd fb3c 	bl	8000e0c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fd fb38 	bl	8000e0c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0b5      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ee      	bne.n	8003798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	4a38      	ldr	r2, [pc, #224]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a1 	beq.w	8003918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d6:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d05c      	beq.n	800389c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d141      	bne.n	800386e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd fb0c 	bl	8000e0c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd fb08 	bl	8000e0c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e087      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	491b      	ldr	r1, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fd fae1 	bl	8000e0c <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fd fadd 	bl	8000e0c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e05c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x416>
 800386c:	e054      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fd faca 	bl	8000e0c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fac6 	bl	8000e0c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e045      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x444>
 800389a:	e03d      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e038      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x4ec>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d028      	beq.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d121      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11a      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d111      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0cc      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d90c      	bls.n	8003964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b65      	ldr	r3, [pc, #404]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d044      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e067      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4934      	ldr	r1, [pc, #208]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fd f9f8 	bl	8000e0c <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fd f9f4 	bl	8000e0c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d20c      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd f958 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08008154 	.word	0x08008154
 8003aec:	20000000 	.word	0x20000000
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b094      	sub	sp, #80	@ 0x50
 8003afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	4b79      	ldr	r3, [pc, #484]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x40>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	f200 80e1 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x34>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b26:	e0db      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b2c:	e0db      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2e:	4b73      	ldr	r3, [pc, #460]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b32:	e0d8      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b34:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	6139      	str	r1, [r7, #16]
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b98:	4659      	mov	r1, fp
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bac:	4659      	mov	r1, fp
 8003bae:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc6:	4690      	mov	r8, r2
 8003bc8:	4699      	mov	r9, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb18 0303 	adds.w	r3, r8, r3
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb49 0303 	adc.w	r3, r9, r3
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003be6:	4629      	mov	r1, r5
 8003be8:	024b      	lsls	r3, r1, #9
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	024a      	lsls	r2, r1, #9
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c04:	f7fc fae8 	bl	80001d8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c10:	e058      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3e:	0150      	lsls	r0, r2, #5
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4641      	mov	r1, r8
 8003c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c64:	ebb2 040a 	subs.w	r4, r2, sl
 8003c68:	eb63 050b 	sbc.w	r5, r3, fp
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb8:	f7fc fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3750      	adds	r7, #80	@ 0x50
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	@ (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08008164 	.word	0x08008164

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d038      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d68:	4b68      	ldr	r3, [pc, #416]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd f84d 	bl	8000e0c <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d76:	f7fd f849 	bl	8000e0c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0bd      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d88:	4b61      	ldr	r3, [pc, #388]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	071b      	lsls	r3, r3, #28
 8003da6:	495a      	ldr	r1, [pc, #360]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dae:	4b57      	ldr	r3, [pc, #348]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db4:	f7fd f82a 	bl	8000e0c <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dbc:	f7fd f826 	bl	8000e0c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e09a      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dce:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8083 	beq.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	4a47      	ldr	r2, [pc, #284]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df8:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e04:	4b43      	ldr	r3, [pc, #268]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a42      	ldr	r2, [pc, #264]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fc fffc 	bl	8000e0c <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fc fff8 	bl	8000e0c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e06c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e36:	4b36      	ldr	r3, [pc, #216]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d02f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d028      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e54:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b2c      	ldr	r3, [pc, #176]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e6a:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d114      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fc ffc6 	bl	8000e0c <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fc ffc2 	bl	8000e0c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e034      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ee      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003eb4:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec8:	4911      	ldr	r1, [pc, #68]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	4909      	ldr	r1, [pc, #36]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7d1a      	ldrb	r2, [r3, #20]
 8003efe:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003f00:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	42470068 	.word	0x42470068
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40007000 	.word	0x40007000
 8003f18:	42470e40 	.word	0x42470e40
 8003f1c:	424711e0 	.word	0x424711e0

08003f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d141      	bne.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f3e:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d006      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f54:	d131      	bne.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f56:	4b20      	ldr	r3, [pc, #128]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f58:	617b      	str	r3, [r7, #20]
          break;
 8003f5a:	e031      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f68:	d109      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f74:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f7e:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f88:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f90:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	617b      	str	r3, [r7, #20]
          break;
 8003fb8:	e002      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
          break;
 8003fbe:	bf00      	nop
        }
      }
      break;
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8003fc2:	bf00      	nop
    }
  }
  return frequency;
 8003fc4:	697b      	ldr	r3, [r7, #20]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00bb8000 	.word	0x00bb8000
 8003fdc:	007a1200 	.word	0x007a1200
 8003fe0:	00f42400 	.word	0x00f42400

08003fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07b      	b.n	80040ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	e005      	b.n	800401c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fdc4 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0104 	and.w	r1, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0210 	and.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f6:	b084      	sub	sp, #16
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	f107 001c 	add.w	r0, r7, #28
 8004104:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004108:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800410c:	2b01      	cmp	r3, #1
 800410e:	d123      	bne.n	8004158 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004138:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 fae9 	bl	8005724 <USB_CoreReset>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e01b      	b.n	8004190 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 fadd 	bl	8005724 <USB_CoreReset>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800416e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
 8004182:	e005      	b.n	8004190 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004190:	7fbb      	ldrb	r3, [r7, #30]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10b      	bne.n	80041ae <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f043 0206 	orr.w	r2, r3, #6
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ba:	b004      	add	sp, #16
 80041bc:	4770      	bx	lr
	...

080041c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d165      	bne.n	80042a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a41      	ldr	r2, [pc, #260]	@ (80042dc <USB_SetTurnaroundTime+0x11c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d906      	bls.n	80041ea <USB_SetTurnaroundTime+0x2a>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a40      	ldr	r2, [pc, #256]	@ (80042e0 <USB_SetTurnaroundTime+0x120>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d202      	bcs.n	80041ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041e4:	230f      	movs	r3, #15
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e062      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a3c      	ldr	r2, [pc, #240]	@ (80042e0 <USB_SetTurnaroundTime+0x120>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d306      	bcc.n	8004200 <USB_SetTurnaroundTime+0x40>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <USB_SetTurnaroundTime+0x124>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d202      	bcs.n	8004200 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041fa:	230e      	movs	r3, #14
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e057      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a38      	ldr	r2, [pc, #224]	@ (80042e4 <USB_SetTurnaroundTime+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d306      	bcc.n	8004216 <USB_SetTurnaroundTime+0x56>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a37      	ldr	r2, [pc, #220]	@ (80042e8 <USB_SetTurnaroundTime+0x128>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d202      	bcs.n	8004216 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004210:	230d      	movs	r3, #13
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e04c      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a33      	ldr	r2, [pc, #204]	@ (80042e8 <USB_SetTurnaroundTime+0x128>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d306      	bcc.n	800422c <USB_SetTurnaroundTime+0x6c>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a32      	ldr	r2, [pc, #200]	@ (80042ec <USB_SetTurnaroundTime+0x12c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d802      	bhi.n	800422c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004226:	230c      	movs	r3, #12
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e041      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <USB_SetTurnaroundTime+0x12c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d906      	bls.n	8004242 <USB_SetTurnaroundTime+0x82>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a2e      	ldr	r2, [pc, #184]	@ (80042f0 <USB_SetTurnaroundTime+0x130>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d802      	bhi.n	8004242 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800423c:	230b      	movs	r3, #11
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e036      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <USB_SetTurnaroundTime+0x130>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d906      	bls.n	8004258 <USB_SetTurnaroundTime+0x98>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <USB_SetTurnaroundTime+0x134>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d802      	bhi.n	8004258 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004252:	230a      	movs	r3, #10
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e02b      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <USB_SetTurnaroundTime+0x134>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d906      	bls.n	800426e <USB_SetTurnaroundTime+0xae>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <USB_SetTurnaroundTime+0x138>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d202      	bcs.n	800426e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004268:	2309      	movs	r3, #9
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e020      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a21      	ldr	r2, [pc, #132]	@ (80042f8 <USB_SetTurnaroundTime+0x138>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d306      	bcc.n	8004284 <USB_SetTurnaroundTime+0xc4>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4a20      	ldr	r2, [pc, #128]	@ (80042fc <USB_SetTurnaroundTime+0x13c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d802      	bhi.n	8004284 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800427e:	2308      	movs	r3, #8
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e015      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a1d      	ldr	r2, [pc, #116]	@ (80042fc <USB_SetTurnaroundTime+0x13c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d906      	bls.n	800429a <USB_SetTurnaroundTime+0xda>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a1c      	ldr	r2, [pc, #112]	@ (8004300 <USB_SetTurnaroundTime+0x140>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d202      	bcs.n	800429a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004294:	2307      	movs	r3, #7
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e00a      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800429a:	2306      	movs	r3, #6
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e007      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042a6:	2309      	movs	r3, #9
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e001      	b.n	80042b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042ac:	2309      	movs	r3, #9
 80042ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	029b      	lsls	r3, r3, #10
 80042c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	00d8acbf 	.word	0x00d8acbf
 80042e0:	00e4e1c0 	.word	0x00e4e1c0
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	01067380 	.word	0x01067380
 80042ec:	011a499f 	.word	0x011a499f
 80042f0:	01312cff 	.word	0x01312cff
 80042f4:	014ca43f 	.word	0x014ca43f
 80042f8:	016e3600 	.word	0x016e3600
 80042fc:	01a6ab1f 	.word	0x01a6ab1f
 8004300:	01e84800 	.word	0x01e84800

08004304 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d115      	bne.n	8004396 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004376:	200a      	movs	r0, #10
 8004378:	f7fc fd54 	bl	8000e24 <HAL_Delay>
      ms += 10U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	330a      	adds	r3, #10
 8004380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f001 f93f 	bl	8005606 <USB_GetMode>
 8004388:	4603      	mov	r3, r0
 800438a:	2b01      	cmp	r3, #1
 800438c:	d01e      	beq.n	80043cc <USB_SetCurrentMode+0x84>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2bc7      	cmp	r3, #199	@ 0xc7
 8004392:	d9f0      	bls.n	8004376 <USB_SetCurrentMode+0x2e>
 8004394:	e01a      	b.n	80043cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d115      	bne.n	80043c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043a8:	200a      	movs	r0, #10
 80043aa:	f7fc fd3b 	bl	8000e24 <HAL_Delay>
      ms += 10U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	330a      	adds	r3, #10
 80043b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f926 	bl	8005606 <USB_GetMode>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <USB_SetCurrentMode+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80043c4:	d9f0      	bls.n	80043a8 <USB_SetCurrentMode+0x60>
 80043c6:	e001      	b.n	80043cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e005      	b.n	80043d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80043d0:	d101      	bne.n	80043d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043e0:	b084      	sub	sp, #16
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e009      	b.n	8004414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3340      	adds	r3, #64	@ 0x40
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	2200      	movs	r2, #0
 800440c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3301      	adds	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b0e      	cmp	r3, #14
 8004418:	d9f2      	bls.n	8004400 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800441a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11c      	bne.n	800445c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
 800445a:	e00b      	b.n	8004474 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004480:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10d      	bne.n	80044a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004490:	2100      	movs	r1, #0
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f968 	bl	8004768 <USB_SetDevSpeed>
 8004498:	e008      	b.n	80044ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800449a:	2101      	movs	r1, #1
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f963 	bl	8004768 <USB_SetDevSpeed>
 80044a2:	e003      	b.n	80044ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044a4:	2103      	movs	r1, #3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f95e 	bl	8004768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044ac:	2110      	movs	r1, #16
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8fa 	bl	80046a8 <USB_FlushTxFifo>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f924 	bl	800470c <USB_FlushRxFifo>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d4:	461a      	mov	r2, r3
 80044d6:	2300      	movs	r3, #0
 80044d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e0:	461a      	mov	r2, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ec:	461a      	mov	r2, r3
 80044ee:	2300      	movs	r3, #0
 80044f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e043      	b.n	8004580 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800450a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800450e:	d118      	bne.n	8004542 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e013      	b.n	8004554 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e008      	b.n	8004554 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	461a      	mov	r2, r3
 8004562:	2300      	movs	r3, #0
 8004564:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004572:	461a      	mov	r2, r3
 8004574:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004578:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3301      	adds	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004584:	461a      	mov	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4293      	cmp	r3, r2
 800458a:	d3b5      	bcc.n	80044f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e043      	b.n	800461a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a8:	d118      	bne.n	80045dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e013      	b.n	80045ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e008      	b.n	80045ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3301      	adds	r3, #1
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800461e:	461a      	mov	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4293      	cmp	r3, r2
 8004624:	d3b5      	bcc.n	8004592 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004638:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004646:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699a      	ldr	r2, [r3, #24]
 8004660:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <USB_DevInit+0x2c4>)
 8004662:	4313      	orrs	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004668:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f043 0208 	orr.w	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800467c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004694:	7dfb      	ldrb	r3, [r7, #23]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a0:	b004      	add	sp, #16
 80046a2:	4770      	bx	lr
 80046a4:	803c3800 	.word	0x803c3800

080046a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3301      	adds	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046c2:	d901      	bls.n	80046c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e01b      	b.n	8004700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	daf2      	bge.n	80046b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	019b      	lsls	r3, r3, #6
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046ec:	d901      	bls.n	80046f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e006      	b.n	8004700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d0f0      	beq.n	80046e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004724:	d901      	bls.n	800472a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e018      	b.n	800475c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	daf2      	bge.n	8004718 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2210      	movs	r2, #16
 800473a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004748:	d901      	bls.n	800474e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e006      	b.n	800475c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d0f0      	beq.n	800473c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b087      	sub	sp, #28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0306 	and.w	r3, r3, #6
 80047b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
 80047be:	e00a      	b.n	80047d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d002      	beq.n	80047cc <USB_GetDevSpeed+0x32>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b06      	cmp	r3, #6
 80047ca:	d102      	bne.n	80047d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047cc:	2302      	movs	r3, #2
 80047ce:	75fb      	strb	r3, [r7, #23]
 80047d0:	e001      	b.n	80047d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047d2:	230f      	movs	r3, #15
 80047d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d13a      	bne.n	8004876 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800481e:	4313      	orrs	r3, r2
 8004820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d155      	bne.n	80048e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	059b      	lsls	r3, r3, #22
 800485a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	4313      	orrs	r3, r2
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800486a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e036      	b.n	80048e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11a      	bne.n	80048e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ca:	430b      	orrs	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d161      	bne.n	80049d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004926:	d11f      	bne.n	8004968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004942:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	b29b      	uxth	r3, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004988:	4013      	ands	r3, r2
 800498a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ac:	4013      	ands	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ca:	4619      	mov	r1, r3
 80049cc:	4b35      	ldr	r3, [pc, #212]	@ (8004aa4 <USB_DeactivateEndpoint+0x1b0>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
 80049d2:	e060      	b.n	8004a96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ea:	d11f      	bne.n	8004a2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	43db      	mvns	r3, r3
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a70:	4013      	ands	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <USB_DeactivateEndpoint+0x1b4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	ec337800 	.word	0xec337800
 8004aa8:	eff37800 	.word	0xeff37800

08004aac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	@ 0x28
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 817f 	bne.w	8004dcc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d132      	bne.n	8004b3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004af4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b34:	0cdb      	lsrs	r3, r3, #19
 8004b36:	04db      	lsls	r3, r3, #19
 8004b38:	6113      	str	r3, [r2, #16]
 8004b3a:	e097      	b.n	8004c6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b56:	0cdb      	lsrs	r3, r3, #19
 8004b58:	04db      	lsls	r3, r3, #19
 8004b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11a      	bne.n	8004bbc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d903      	bls.n	8004b9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bb8:	6113      	str	r3, [r2, #16]
 8004bba:	e044      	b.n	8004c46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	8afb      	ldrh	r3, [r7, #22]
 8004be2:	04d9      	lsls	r1, r3, #19
 8004be4:	4ba4      	ldr	r3, [pc, #656]	@ (8004e78 <USB_EPStartXfer+0x3cc>)
 8004be6:	400b      	ands	r3, r1
 8004be8:	69b9      	ldr	r1, [r7, #24]
 8004bea:	0148      	lsls	r0, r1, #5
 8004bec:	69f9      	ldr	r1, [r7, #28]
 8004bee:	4401      	add	r1, r0
 8004bf0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	791b      	ldrb	r3, [r3, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d122      	bne.n	8004c46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	075b      	lsls	r3, r3, #29
 8004c32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	0148      	lsls	r0, r1, #5
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	4401      	add	r1, r0
 8004c3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c42:	4313      	orrs	r3, r2
 8004c44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	0148      	lsls	r0, r1, #5
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	4401      	add	r1, r0
 8004c64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d14b      	bne.n	8004d0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	791b      	ldrb	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d128      	bne.n	8004ce8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d110      	bne.n	8004cc8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00f      	b.n	8004ce8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e166      	b.n	8004fd8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d015      	beq.n	8004d5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 814e 	beq.w	8004fd8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	69f9      	ldr	r1, [r7, #28]
 8004d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8004d5c:	e13c      	b.n	8004fd8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00f      	b.n	8004db0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68d9      	ldr	r1, [r3, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	b298      	uxth	r0, r3
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f9b9 	bl	800513c <USB_WritePacket>
 8004dca:	e105      	b.n	8004fd8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de6:	0cdb      	lsrs	r3, r3, #19
 8004de8:	04db      	lsls	r3, r3, #19
 8004dea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e0e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d132      	bne.n	8004e7c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	0148      	lsls	r0, r1, #5
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	4401      	add	r1, r0
 8004e4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e72:	6113      	str	r3, [r2, #16]
 8004e74:	e062      	b.n	8004f3c <USB_EPStartXfer+0x490>
 8004e76:	bf00      	nop
 8004e78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d123      	bne.n	8004ecc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	0148      	lsls	r0, r1, #5
 8004e9e:	69f9      	ldr	r1, [r7, #28]
 8004ea0:	4401      	add	r1, r0
 8004ea2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ec4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ec8:	6113      	str	r3, [r2, #16]
 8004eca:	e037      	b.n	8004f3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	8afa      	ldrh	r2, [r7, #22]
 8004ee8:	fb03 f202 	mul.w	r2, r3, r2
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	8afb      	ldrh	r3, [r7, #22]
 8004f00:	04d9      	lsls	r1, r3, #19
 8004f02:	4b38      	ldr	r3, [pc, #224]	@ (8004fe4 <USB_EPStartXfer+0x538>)
 8004f04:	400b      	ands	r3, r1
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	0148      	lsls	r0, r1, #5
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	4401      	add	r1, r0
 8004f0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	0148      	lsls	r0, r1, #5
 8004f30:	69f9      	ldr	r1, [r7, #28]
 8004f32:	4401      	add	r1, r0
 8004f34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d10d      	bne.n	8004f5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	68d9      	ldr	r1, [r3, #12]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	791b      	ldrb	r3, [r3, #4]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d128      	bne.n	8004fb8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d110      	bne.n	8004f98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e00f      	b.n	8004fb8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	1ff80000 	.word	0x1ff80000

08004fe8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d14a      	bne.n	800509c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800501e:	f040 8086 	bne.w	800512e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005040:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005044:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005068:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3301      	adds	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005076:	4293      	cmp	r3, r2
 8005078:	d902      	bls.n	8005080 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e056      	b.n	800512e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005098:	d0e7      	beq.n	800506a <USB_EPStopXfer+0x82>
 800509a:	e048      	b.n	800512e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b4:	d13b      	bne.n	800512e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f242 7210 	movw	r2, #10000	@ 0x2710
 800510a:	4293      	cmp	r3, r2
 800510c:	d902      	bls.n	8005114 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
          break;
 8005112:	e00c      	b.n	800512e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512c:	d0e7      	beq.n	80050fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	460b      	mov	r3, r1
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	4613      	mov	r3, r2
 8005150:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800515a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d123      	bne.n	80051aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005162:	88bb      	ldrh	r3, [r7, #4]
 8005164:	3303      	adds	r3, #3
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e018      	b.n	80051a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	031a      	lsls	r2, r3, #12
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517c:	461a      	mov	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3301      	adds	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3301      	adds	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3e2      	bcc.n	8005170 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3724      	adds	r7, #36	@ 0x24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b08b      	sub	sp, #44	@ 0x2c
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	e014      	b.n	800520e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	3301      	adds	r3, #1
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	3301      	adds	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	3301      	adds	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	3301      	adds	r3, #1
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	429a      	cmp	r2, r3
 8005214:	d3e6      	bcc.n	80051e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01e      	beq.n	800525a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005226:	461a      	mov	r2, r3
 8005228:	f107 0310 	add.w	r3, r7, #16
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	b2da      	uxtb	r2, r3
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	701a      	strb	r2, [r3, #0]
      i++;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	3301      	adds	r3, #1
 8005246:	623b      	str	r3, [r7, #32]
      pDest++;
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	3301      	adds	r3, #1
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800524e:	8bfb      	ldrh	r3, [r7, #30]
 8005250:	3b01      	subs	r3, #1
 8005252:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ea      	bne.n	8005230 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800525c:	4618      	mov	r0, r3
 800525e:	372c      	adds	r7, #44	@ 0x2c
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d12c      	bne.n	80052de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db12      	blt.n	80052bc <USB_EPSetStall+0x54>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00f      	beq.n	80052bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e02b      	b.n	8005336 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db12      	blt.n	8005316 <USB_EPSetStall+0xae>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00f      	beq.n	8005316 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005310:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005314:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005330:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005334:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d128      	bne.n	80053b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800537e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	791b      	ldrb	r3, [r3, #4]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d003      	beq.n	8005390 <USB_EPClearStall+0x4c>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d138      	bne.n	8005402 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e027      	b.n	8005402 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	791b      	ldrb	r3, [r3, #4]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d003      	beq.n	80053e2 <USB_EPClearStall+0x9e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d10f      	bne.n	8005402 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800542e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005432:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800548a:	f023 0302 	bic.w	r3, r3, #2
 800548e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	b29b      	uxth	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800559c:	68bb      	ldr	r3, [r7, #8]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	01db      	lsls	r3, r3, #7
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4013      	ands	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055f8:	68bb      	ldr	r3, [r7, #8]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800563c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	460b      	mov	r3, r1
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	333c      	adds	r3, #60	@ 0x3c
 800567e:	3304      	adds	r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <USB_EP0_OutStart+0xb8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d90a      	bls.n	80056a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569c:	d101      	bne.n	80056a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e037      	b.n	8005712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056d0:	f043 0318 	orr.w	r3, r3, #24
 80056d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80056e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10f      	bne.n	8005710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800570e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	4f54300a 	.word	0x4f54300a

08005724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800573c:	d901      	bls.n	8005742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e01b      	b.n	800577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	daf2      	bge.n	8005730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005766:	d901      	bls.n	800576c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e006      	b.n	800577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d0f0      	beq.n	800575a <USB_CoreReset+0x36>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005794:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005798:	f002 fc3c 	bl	8008014 <USBD_static_malloc>
 800579c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	32b0      	adds	r2, #176	@ 0xb0
 80057ae:	2100      	movs	r1, #0
 80057b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0d4      	b.n	8005962 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80057bc:	2100      	movs	r1, #0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f002 fc6c 	bl	800809c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32b0      	adds	r2, #176	@ 0xb0
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	32b0      	adds	r2, #176	@ 0xb0
 80057de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7c1b      	ldrb	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d138      	bne.n	8005862 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057f0:	4b5e      	ldr	r3, [pc, #376]	@ (800596c <USBD_CDC_Init+0x1e4>)
 80057f2:	7819      	ldrb	r1, [r3, #0]
 80057f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057f8:	2202      	movs	r2, #2
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f002 fae7 	bl	8007dce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005800:	4b5a      	ldr	r3, [pc, #360]	@ (800596c <USBD_CDC_Init+0x1e4>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 020f 	and.w	r2, r3, #15
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	3324      	adds	r3, #36	@ 0x24
 8005816:	2201      	movs	r2, #1
 8005818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800581a:	4b55      	ldr	r3, [pc, #340]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 800581c:	7819      	ldrb	r1, [r3, #0]
 800581e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005822:	2202      	movs	r2, #2
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f002 fad2 	bl	8007dce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800582a:	4b51      	ldr	r3, [pc, #324]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005842:	2201      	movs	r2, #1
 8005844:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005846:	4b4b      	ldr	r3, [pc, #300]	@ (8005974 <USBD_CDC_Init+0x1ec>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	3326      	adds	r3, #38	@ 0x26
 800585c:	2210      	movs	r2, #16
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e035      	b.n	80058ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005862:	4b42      	ldr	r3, [pc, #264]	@ (800596c <USBD_CDC_Init+0x1e4>)
 8005864:	7819      	ldrb	r1, [r3, #0]
 8005866:	2340      	movs	r3, #64	@ 0x40
 8005868:	2202      	movs	r2, #2
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f002 faaf 	bl	8007dce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005870:	4b3e      	ldr	r3, [pc, #248]	@ (800596c <USBD_CDC_Init+0x1e4>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3324      	adds	r3, #36	@ 0x24
 8005886:	2201      	movs	r2, #1
 8005888:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 800588c:	7819      	ldrb	r1, [r3, #0]
 800588e:	2340      	movs	r3, #64	@ 0x40
 8005890:	2202      	movs	r2, #2
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fa9b 	bl	8007dce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005898:	4b35      	ldr	r3, [pc, #212]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80058b0:	2201      	movs	r2, #1
 80058b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <USBD_CDC_Init+0x1ec>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3326      	adds	r3, #38	@ 0x26
 80058ca:	2210      	movs	r2, #16
 80058cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058ce:	4b29      	ldr	r3, [pc, #164]	@ (8005974 <USBD_CDC_Init+0x1ec>)
 80058d0:	7819      	ldrb	r1, [r3, #0]
 80058d2:	2308      	movs	r3, #8
 80058d4:	2203      	movs	r2, #3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f002 fa79 	bl	8007dce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058dc:	4b25      	ldr	r3, [pc, #148]	@ (8005974 <USBD_CDC_Init+0x1ec>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3324      	adds	r3, #36	@ 0x24
 80058f2:	2201      	movs	r2, #1
 80058f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	33b0      	adds	r3, #176	@ 0xb0
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800592c:	2302      	movs	r3, #2
 800592e:	e018      	b.n	8005962 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7c1b      	ldrb	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005938:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 800593a:	7819      	ldrb	r1, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f002 fb30 	bl	8007fac <USBD_LL_PrepareReceive>
 800594c:	e008      	b.n	8005960 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800594e:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <USBD_CDC_Init+0x1e8>)
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005958:	2340      	movs	r3, #64	@ 0x40
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f002 fb26 	bl	8007fac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000093 	.word	0x20000093
 8005970:	20000094 	.word	0x20000094
 8005974:	20000095 	.word	0x20000095

08005978 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005984:	4b3a      	ldr	r3, [pc, #232]	@ (8005a70 <USBD_CDC_DeInit+0xf8>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f002 fa45 	bl	8007e1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005990:	4b37      	ldr	r3, [pc, #220]	@ (8005a70 <USBD_CDC_DeInit+0xf8>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3324      	adds	r3, #36	@ 0x24
 80059a6:	2200      	movs	r2, #0
 80059a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059aa:	4b32      	ldr	r3, [pc, #200]	@ (8005a74 <USBD_CDC_DeInit+0xfc>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f002 fa32 	bl	8007e1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a74 <USBD_CDC_DeInit+0xfc>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059ce:	2200      	movs	r2, #0
 80059d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <USBD_CDC_DeInit+0x100>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 fa1e 	bl	8007e1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059de:	4b26      	ldr	r3, [pc, #152]	@ (8005a78 <USBD_CDC_DeInit+0x100>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f003 020f 	and.w	r2, r3, #15
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3324      	adds	r3, #36	@ 0x24
 80059f4:	2200      	movs	r2, #0
 80059f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <USBD_CDC_DeInit+0x100>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3326      	adds	r3, #38	@ 0x26
 8005a0e:	2200      	movs	r2, #0
 8005a10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	32b0      	adds	r2, #176	@ 0xb0
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01f      	beq.n	8005a64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	33b0      	adds	r3, #176	@ 0xb0
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	32b0      	adds	r2, #176	@ 0xb0
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f002 faf2 	bl	8008030 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	32b0      	adds	r2, #176	@ 0xb0
 8005a56:	2100      	movs	r1, #0
 8005a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000093 	.word	0x20000093
 8005a74:	20000094 	.word	0x20000094
 8005a78:	20000095 	.word	0x20000095

08005a7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	32b0      	adds	r2, #176	@ 0xb0
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0bf      	b.n	8005c2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d050      	beq.n	8005b5a <USBD_CDC_Setup+0xde>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	f040 80af 	bne.w	8005c1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	88db      	ldrh	r3, [r3, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d03a      	beq.n	8005b3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da1b      	bge.n	8005b08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	33b0      	adds	r3, #176	@ 0xb0
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ae6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	88d2      	ldrh	r2, [r2, #6]
 8005aec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	88db      	ldrh	r3, [r3, #6]
 8005af2:	2b07      	cmp	r3, #7
 8005af4:	bf28      	it	cs
 8005af6:	2307      	movcs	r3, #7
 8005af8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	89fa      	ldrh	r2, [r7, #14]
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fd53 	bl	80075ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b06:	e090      	b.n	8005c2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	785a      	ldrb	r2, [r3, #1]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	88db      	ldrh	r3, [r3, #6]
 8005b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b18:	d803      	bhi.n	8005b22 <USBD_CDC_Setup+0xa6>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	e000      	b.n	8005b24 <USBD_CDC_Setup+0xa8>
 8005b22:	2240      	movs	r2, #64	@ 0x40
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005b32:	461a      	mov	r2, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fd65 	bl	8007604 <USBD_CtlPrepareRx>
      break;
 8005b3a:	e076      	b.n	8005c2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	33b0      	adds	r3, #176	@ 0xb0
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	7850      	ldrb	r0, [r2, #1]
 8005b52:	2200      	movs	r2, #0
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	4798      	blx	r3
      break;
 8005b58:	e067      	b.n	8005c2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b0b      	cmp	r3, #11
 8005b60:	d851      	bhi.n	8005c06 <USBD_CDC_Setup+0x18a>
 8005b62:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <USBD_CDC_Setup+0xec>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b99 	.word	0x08005b99
 8005b6c:	08005c15 	.word	0x08005c15
 8005b70:	08005c07 	.word	0x08005c07
 8005b74:	08005c07 	.word	0x08005c07
 8005b78:	08005c07 	.word	0x08005c07
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c07 	.word	0x08005c07
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005c07 	.word	0x08005c07
 8005b8c:	08005c07 	.word	0x08005c07
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bed 	.word	0x08005bed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d107      	bne.n	8005bb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ba4:	f107 030a 	add.w	r3, r7, #10
 8005ba8:	2202      	movs	r2, #2
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fcfd 	bl	80075ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb2:	e032      	b.n	8005c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 fc7b 	bl	80074b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc0:	e02b      	b.n	8005c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bce:	f107 030d 	add.w	r3, r7, #13
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fce8 	bl	80075ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bdc:	e01d      	b.n	8005c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fc66 	bl	80074b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005be6:	2303      	movs	r3, #3
 8005be8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bea:	e016      	b.n	8005c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d00f      	beq.n	8005c18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fc59 	bl	80074b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c04:	e008      	b.n	8005c18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fc52 	bl	80074b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e002      	b.n	8005c1a <USBD_CDC_Setup+0x19e>
          break;
 8005c14:	bf00      	nop
 8005c16:	e008      	b.n	8005c2a <USBD_CDC_Setup+0x1ae>
          break;
 8005c18:	bf00      	nop
      }
      break;
 8005c1a:	e006      	b.n	8005c2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fc47 	bl	80074b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005c46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32b0      	adds	r2, #176	@ 0xb0
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e065      	b.n	8005d2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	32b0      	adds	r2, #176	@ 0xb0
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3318      	adds	r3, #24
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d02f      	beq.n	8005ce8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	3318      	adds	r3, #24
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 010f 	and.w	r1, r3, #15
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	440b      	add	r3, r1
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4403      	add	r3, r0
 8005cb0:	331c      	adds	r3, #28
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d112      	bne.n	8005ce8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cda:	78f9      	ldrb	r1, [r7, #3]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f942 	bl	8007f6a <USBD_LL_Transmit>
 8005ce6:	e01f      	b.n	8005d28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	33b0      	adds	r3, #176	@ 0xb0
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d010      	beq.n	8005d28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	33b0      	adds	r3, #176	@ 0xb0
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	32b0      	adds	r2, #176	@ 0xb0
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	@ 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e01a      	b.n	8005d9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f002 f940 	bl	8007fee <USBD_LL_GetRxDataSize>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	33b0      	adds	r3, #176	@ 0xb0
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005d94:	4611      	mov	r1, r2
 8005d96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	32b0      	adds	r2, #176	@ 0xb0
 8005db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e024      	b.n	8005e0e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	33b0      	adds	r3, #176	@ 0xb0
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d019      	beq.n	8005e0c <USBD_CDC_EP0_RxReady+0x6a>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005dde:	2bff      	cmp	r3, #255	@ 0xff
 8005de0:	d014      	beq.n	8005e0c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	33b0      	adds	r3, #176	@ 0xb0
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005dfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	22ff      	movs	r2, #255	@ 0xff
 8005e08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e20:	2182      	movs	r1, #130	@ 0x82
 8005e22:	4818      	ldr	r0, [pc, #96]	@ (8005e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e24:	f000 fd0f 	bl	8006846 <USBD_GetEpDesc>
 8005e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4815      	ldr	r0, [pc, #84]	@ (8005e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e2e:	f000 fd0a 	bl	8006846 <USBD_GetEpDesc>
 8005e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e34:	2181      	movs	r1, #129	@ 0x81
 8005e36:	4813      	ldr	r0, [pc, #76]	@ (8005e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e38:	f000 fd05 	bl	8006846 <USBD_GetEpDesc>
 8005e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2210      	movs	r2, #16
 8005e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e58:	711a      	strb	r2, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e6c:	711a      	strb	r2, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2243      	movs	r2, #67	@ 0x43
 8005e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e78:	4b02      	ldr	r3, [pc, #8]	@ (8005e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000050 	.word	0x20000050

08005e88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e90:	2182      	movs	r1, #130	@ 0x82
 8005e92:	4818      	ldr	r0, [pc, #96]	@ (8005ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e94:	f000 fcd7 	bl	8006846 <USBD_GetEpDesc>
 8005e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4815      	ldr	r0, [pc, #84]	@ (8005ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e9e:	f000 fcd2 	bl	8006846 <USBD_GetEpDesc>
 8005ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ea4:	2181      	movs	r1, #129	@ 0x81
 8005ea6:	4813      	ldr	r0, [pc, #76]	@ (8005ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ea8:	f000 fccd 	bl	8006846 <USBD_GetEpDesc>
 8005eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d006      	beq.n	8005ece <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	711a      	strb	r2, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f042 0202 	orr.w	r2, r2, #2
 8005ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	711a      	strb	r2, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2243      	movs	r2, #67	@ 0x43
 8005ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ee8:	4b02      	ldr	r3, [pc, #8]	@ (8005ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000050 	.word	0x20000050

08005ef8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f00:	2182      	movs	r1, #130	@ 0x82
 8005f02:	4818      	ldr	r0, [pc, #96]	@ (8005f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f04:	f000 fc9f 	bl	8006846 <USBD_GetEpDesc>
 8005f08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	4815      	ldr	r0, [pc, #84]	@ (8005f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f0e:	f000 fc9a 	bl	8006846 <USBD_GetEpDesc>
 8005f12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f14:	2181      	movs	r1, #129	@ 0x81
 8005f16:	4813      	ldr	r0, [pc, #76]	@ (8005f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f18:	f000 fc95 	bl	8006846 <USBD_GetEpDesc>
 8005f1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2210      	movs	r2, #16
 8005f28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d006      	beq.n	8005f3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f38:	711a      	strb	r2, [r3, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f4c:	711a      	strb	r2, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2243      	movs	r2, #67	@ 0x43
 8005f56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f58:	4b02      	ldr	r3, [pc, #8]	@ (8005f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000050 	.word	0x20000050

08005f68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	220a      	movs	r2, #10
 8005f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f76:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	2000000c 	.word	0x2000000c

08005f88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e009      	b.n	8005fb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	33b0      	adds	r3, #176	@ 0xb0
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	32b0      	adds	r2, #176	@ 0xb0
 8005fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e008      	b.n	8005ff4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	32b0      	adds	r2, #176	@ 0xb0
 8006014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006020:	2303      	movs	r3, #3
 8006022:	e004      	b.n	800602e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	32b0      	adds	r2, #176	@ 0xb0
 800604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006052:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	@ 0xb0
 800605e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	e018      	b.n	800609c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7c1b      	ldrb	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006072:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <USBD_CDC_ReceivePacket+0x68>)
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800607c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 ff93 	bl	8007fac <USBD_LL_PrepareReceive>
 8006086:	e008      	b.n	800609a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006088:	4b06      	ldr	r3, [pc, #24]	@ (80060a4 <USBD_CDC_ReceivePacket+0x68>)
 800608a:	7819      	ldrb	r1, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006092:	2340      	movs	r3, #64	@ 0x40
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 ff89 	bl	8007fac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000094 	.word	0x20000094

080060a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	e01f      	b.n	8006100 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	79fa      	ldrb	r2, [r7, #7]
 80060f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 fe03 	bl	8007d00 <USBD_LL_Init>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e025      	b.n	800616c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32ae      	adds	r2, #174	@ 0xae
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	32ae      	adds	r2, #174	@ 0xae
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	f107 020e 	add.w	r2, r7, #14
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
 8006154:	4602      	mov	r2, r0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fe0b 	bl	8007d98 <USBD_LL_Start>
 8006182:	4603      	mov	r3, r0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4611      	mov	r1, r2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006200:	2303      	movs	r3, #3
 8006202:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f90c 	bl	800743e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b02      	cmp	r3, #2
 8006248:	d01a      	beq.n	8006280 <USBD_LL_SetupStage+0x72>
 800624a:	2b02      	cmp	r3, #2
 800624c:	d822      	bhi.n	8006294 <USBD_LL_SetupStage+0x86>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <USBD_LL_SetupStage+0x4a>
 8006252:	2b01      	cmp	r3, #1
 8006254:	d00a      	beq.n	800626c <USBD_LL_SetupStage+0x5e>
 8006256:	e01d      	b.n	8006294 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb63 	bl	800692c <USBD_StdDevReq>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
      break;
 800626a:	e020      	b.n	80062ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fbcb 	bl	8006a10 <USBD_StdItfReq>
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]
      break;
 800627e:	e016      	b.n	80062ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc2d 	bl	8006ae8 <USBD_StdEPReq>
 800628e:	4603      	mov	r3, r0
 8006290:	73fb      	strb	r3, [r7, #15]
      break;
 8006292:	e00c      	b.n	80062ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800629a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fdd8 	bl	8007e58 <USBD_LL_StallEP>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
      break;
 80062ac:	bf00      	nop
  }

  return ret;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	460b      	mov	r3, r1
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d16e      	bne.n	80063ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80062d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062de:	2b03      	cmp	r3, #3
 80062e0:	f040 8098 	bne.w	8006414 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d913      	bls.n	8006318 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	4293      	cmp	r3, r2
 8006308:	bf28      	it	cs
 800630a:	4613      	movcs	r3, r2
 800630c:	461a      	mov	r2, r3
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f001 f994 	bl	800763e <USBD_CtlContinueRx>
 8006316:	e07d      	b.n	8006414 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b02      	cmp	r3, #2
 8006324:	d014      	beq.n	8006350 <USBD_LL_DataOutStage+0x98>
 8006326:	2b02      	cmp	r3, #2
 8006328:	d81d      	bhi.n	8006366 <USBD_LL_DataOutStage+0xae>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <USBD_LL_DataOutStage+0x7c>
 800632e:	2b01      	cmp	r3, #1
 8006330:	d003      	beq.n	800633a <USBD_LL_DataOutStage+0x82>
 8006332:	e018      	b.n	8006366 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	75bb      	strb	r3, [r7, #22]
            break;
 8006338:	e018      	b.n	800636c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006340:	b2db      	uxtb	r3, r3
 8006342:	4619      	mov	r1, r3
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fa64 	bl	8006812 <USBD_CoreFindIF>
 800634a:	4603      	mov	r3, r0
 800634c:	75bb      	strb	r3, [r7, #22]
            break;
 800634e:	e00d      	b.n	800636c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006356:	b2db      	uxtb	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fa66 	bl	800682c <USBD_CoreFindEP>
 8006360:	4603      	mov	r3, r0
 8006362:	75bb      	strb	r3, [r7, #22]
            break;
 8006364:	e002      	b.n	800636c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	75bb      	strb	r3, [r7, #22]
            break;
 800636a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800636c:	7dbb      	ldrb	r3, [r7, #22]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d119      	bne.n	80063a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d113      	bne.n	80063a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800637e:	7dba      	ldrb	r2, [r7, #22]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	32ae      	adds	r2, #174	@ 0xae
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800638e:	7dba      	ldrb	r2, [r7, #22]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006396:	7dba      	ldrb	r2, [r7, #22]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	32ae      	adds	r2, #174	@ 0xae
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f001 f95a 	bl	8007660 <USBD_CtlSendStatus>
 80063ac:	e032      	b.n	8006414 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fa37 	bl	800682c <USBD_CoreFindEP>
 80063be:	4603      	mov	r3, r0
 80063c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c2:	7dbb      	ldrb	r3, [r7, #22]
 80063c4:	2bff      	cmp	r3, #255	@ 0xff
 80063c6:	d025      	beq.n	8006414 <USBD_LL_DataOutStage+0x15c>
 80063c8:	7dbb      	ldrb	r3, [r7, #22]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d122      	bne.n	8006414 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d117      	bne.n	800640a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063da:	7dba      	ldrb	r2, [r7, #22]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	32ae      	adds	r2, #174	@ 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063ea:	7dba      	ldrb	r2, [r7, #22]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063f2:	7dba      	ldrb	r2, [r7, #22]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	32ae      	adds	r2, #174	@ 0xae
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	7afa      	ldrb	r2, [r7, #11]
 8006400:	4611      	mov	r1, r2
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	e000      	b.n	8006416 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	460b      	mov	r3, r1
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d16f      	bne.n	8006512 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3314      	adds	r3, #20
 8006436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800643e:	2b02      	cmp	r3, #2
 8006440:	d15a      	bne.n	80064f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	429a      	cmp	r2, r3
 800644c:	d914      	bls.n	8006478 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	461a      	mov	r2, r3
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 f8bc 	bl	80075e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 fd9b 	bl	8007fac <USBD_LL_PrepareReceive>
 8006476:	e03f      	b.n	80064f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d11c      	bne.n	80064be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800648c:	429a      	cmp	r2, r3
 800648e:	d316      	bcc.n	80064be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800649a:	429a      	cmp	r2, r3
 800649c:	d20f      	bcs.n	80064be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800649e:	2200      	movs	r2, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f001 f89d 	bl	80075e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064b0:	2300      	movs	r3, #0
 80064b2:	2200      	movs	r2, #0
 80064b4:	2100      	movs	r1, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f001 fd78 	bl	8007fac <USBD_LL_PrepareReceive>
 80064bc:	e01c      	b.n	80064f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d10f      	bne.n	80064ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ea:	2180      	movs	r1, #128	@ 0x80
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 fcb3 	bl	8007e58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f001 f8c7 	bl	8007686 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d03a      	beq.n	8006578 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff fe42 	bl	800618c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006510:	e032      	b.n	8006578 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f985 	bl	800682c <USBD_CoreFindEP>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2bff      	cmp	r3, #255	@ 0xff
 800652a:	d025      	beq.n	8006578 <USBD_LL_DataInStage+0x15a>
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d122      	bne.n	8006578 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d11c      	bne.n	8006578 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800653e:	7dfa      	ldrb	r2, [r7, #23]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	32ae      	adds	r2, #174	@ 0xae
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d014      	beq.n	8006578 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800654e:	7dfa      	ldrb	r2, [r7, #23]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006556:	7dfa      	ldrb	r2, [r7, #23]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	32ae      	adds	r2, #174	@ 0xae
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	7afa      	ldrb	r2, [r7, #11]
 8006564:	4611      	mov	r1, r2
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800656e:	7dbb      	ldrb	r3, [r7, #22]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006574:	7dbb      	ldrb	r3, [r7, #22]
 8006576:	e000      	b.n	800657a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d014      	beq.n	80065e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6852      	ldr	r2, [r2, #4]
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	4611      	mov	r1, r2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065e8:	2340      	movs	r3, #64	@ 0x40
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fbed 	bl	8007dce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2240      	movs	r2, #64	@ 0x40
 8006600:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006604:	2340      	movs	r3, #64	@ 0x40
 8006606:	2200      	movs	r2, #0
 8006608:	2180      	movs	r1, #128	@ 0x80
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fbdf 	bl	8007dce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2240      	movs	r2, #64	@ 0x40
 800661a:	621a      	str	r2, [r3, #32]

  return ret;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b04      	cmp	r3, #4
 8006658:	d006      	beq.n	8006668 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006660:	b2da      	uxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2204      	movs	r2, #4
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b04      	cmp	r3, #4
 8006690:	d106      	bne.n	80066a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006698:	b2da      	uxtb	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d110      	bne.n	80066e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	32ae      	adds	r2, #174	@ 0xae
 8006704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800670c:	2303      	movs	r3, #3
 800670e:	e01c      	b.n	800674a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b03      	cmp	r3, #3
 800671a:	d115      	bne.n	8006748 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	@ 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32ae      	adds	r2, #174	@ 0xae
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4611      	mov	r1, r2
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32ae      	adds	r2, #174	@ 0xae
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e01c      	b.n	80067ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d115      	bne.n	80067ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32ae      	adds	r2, #174	@ 0xae
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	32ae      	adds	r2, #174	@ 0xae
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	4611      	mov	r1, r2
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6852      	ldr	r2, [r2, #4]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	4611      	mov	r1, r2
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800681e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006838:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	b29b      	uxth	r3, r3
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	4293      	cmp	r3, r2
 800686a:	d91f      	bls.n	80068ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006872:	e013      	b.n	800689c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006874:	f107 030a 	add.w	r3, r7, #10
 8006878:	4619      	mov	r1, r3
 800687a:	6978      	ldr	r0, [r7, #20]
 800687c:	f000 f81b 	bl	80068b6 <USBD_GetNextDesc>
 8006880:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b05      	cmp	r3, #5
 8006888:	d108      	bne.n	800689c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	789b      	ldrb	r3, [r3, #2]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	429a      	cmp	r2, r3
 8006896:	d008      	beq.n	80068aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	885b      	ldrh	r3, [r3, #2]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	897b      	ldrh	r3, [r7, #10]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d8e5      	bhi.n	8006874 <USBD_GetEpDesc+0x2e>
 80068a8:	e000      	b.n	80068ac <USBD_GetEpDesc+0x66>
          break;
 80068aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80068ac:	693b      	ldr	r3, [r7, #16]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	7812      	ldrb	r2, [r2, #0]
 80068cc:	4413      	add	r3, r2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b087      	sub	sp, #28
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3301      	adds	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800690c:	8a3b      	ldrh	r3, [r7, #16]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	b21a      	sxth	r2, r3
 8006912:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006916:	4313      	orrs	r3, r2
 8006918:	b21b      	sxth	r3, r3
 800691a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800691c:	89fb      	ldrh	r3, [r7, #14]
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d005      	beq.n	8006952 <USBD_StdDevReq+0x26>
 8006946:	2b40      	cmp	r3, #64	@ 0x40
 8006948:	d857      	bhi.n	80069fa <USBD_StdDevReq+0xce>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00f      	beq.n	800696e <USBD_StdDevReq+0x42>
 800694e:	2b20      	cmp	r3, #32
 8006950:	d153      	bne.n	80069fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	32ae      	adds	r2, #174	@ 0xae
 800695c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	e04a      	b.n	8006a04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	2b09      	cmp	r3, #9
 8006974:	d83b      	bhi.n	80069ee <USBD_StdDevReq+0xc2>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <USBD_StdDevReq+0x50>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069d1 	.word	0x080069d1
 8006980:	080069e5 	.word	0x080069e5
 8006984:	080069ef 	.word	0x080069ef
 8006988:	080069db 	.word	0x080069db
 800698c:	080069ef 	.word	0x080069ef
 8006990:	080069af 	.word	0x080069af
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069ef 	.word	0x080069ef
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069b9 	.word	0x080069b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa3c 	bl	8006e24 <USBD_GetDescriptor>
          break;
 80069ac:	e024      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fba1 	bl	80070f8 <USBD_SetAddress>
          break;
 80069b6:	e01f      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fbe0 	bl	8007180 <USBD_SetConfig>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
          break;
 80069c4:	e018      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fc83 	bl	80072d4 <USBD_GetConfig>
          break;
 80069ce:	e013      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fcb4 	bl	8007340 <USBD_GetStatus>
          break;
 80069d8:	e00e      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fce3 	bl	80073a8 <USBD_SetFeature>
          break;
 80069e2:	e009      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fd07 	bl	80073fa <USBD_ClrFeature>
          break;
 80069ec:	e004      	b.n	80069f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fd5e 	bl	80074b2 <USBD_CtlError>
          break;
 80069f6:	bf00      	nop
      }
      break;
 80069f8:	e004      	b.n	8006a04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fd58 	bl	80074b2 <USBD_CtlError>
      break;
 8006a02:	bf00      	nop
  }

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d005      	beq.n	8006a36 <USBD_StdItfReq+0x26>
 8006a2a:	2b40      	cmp	r3, #64	@ 0x40
 8006a2c:	d852      	bhi.n	8006ad4 <USBD_StdItfReq+0xc4>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <USBD_StdItfReq+0x26>
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d14e      	bne.n	8006ad4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d840      	bhi.n	8006ac6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	889b      	ldrh	r3, [r3, #4]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d836      	bhi.n	8006abc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	889b      	ldrh	r3, [r3, #4]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fedb 	bl	8006812 <USBD_CoreFindIF>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2bff      	cmp	r3, #255	@ 0xff
 8006a64:	d01d      	beq.n	8006aa2 <USBD_StdItfReq+0x92>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11a      	bne.n	8006aa2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a6c:	7bba      	ldrb	r2, [r7, #14]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32ae      	adds	r2, #174	@ 0xae
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00f      	beq.n	8006a9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a7c:	7bba      	ldrb	r2, [r7, #14]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a84:	7bba      	ldrb	r2, [r7, #14]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32ae      	adds	r2, #174	@ 0xae
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a9a:	e004      	b.n	8006aa6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006aa0:	e001      	b.n	8006aa6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	88db      	ldrh	r3, [r3, #6]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d110      	bne.n	8006ad0 <USBD_StdItfReq+0xc0>
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fdd3 	bl	8007660 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006aba:	e009      	b.n	8006ad0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fcf7 	bl	80074b2 <USBD_CtlError>
          break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fcf2 	bl	80074b2 <USBD_CtlError>
          break;
 8006ace:	e000      	b.n	8006ad2 <USBD_StdItfReq+0xc2>
          break;
 8006ad0:	bf00      	nop
      }
      break;
 8006ad2:	e004      	b.n	8006ade <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fceb 	bl	80074b2 <USBD_CtlError>
      break;
 8006adc:	bf00      	nop
  }

  return ret;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	889b      	ldrh	r3, [r3, #4]
 8006afa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b04:	2b40      	cmp	r3, #64	@ 0x40
 8006b06:	d007      	beq.n	8006b18 <USBD_StdEPReq+0x30>
 8006b08:	2b40      	cmp	r3, #64	@ 0x40
 8006b0a:	f200 817f 	bhi.w	8006e0c <USBD_StdEPReq+0x324>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d02a      	beq.n	8006b68 <USBD_StdEPReq+0x80>
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	f040 817a 	bne.w	8006e0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff fe85 	bl	800682c <USBD_CoreFindEP>
 8006b22:	4603      	mov	r3, r0
 8006b24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b26:	7b7b      	ldrb	r3, [r7, #13]
 8006b28:	2bff      	cmp	r3, #255	@ 0xff
 8006b2a:	f000 8174 	beq.w	8006e16 <USBD_StdEPReq+0x32e>
 8006b2e:	7b7b      	ldrb	r3, [r7, #13]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8170 	bne.w	8006e16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b36:	7b7a      	ldrb	r2, [r7, #13]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b3e:	7b7a      	ldrb	r2, [r7, #13]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	32ae      	adds	r2, #174	@ 0xae
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8163 	beq.w	8006e16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b50:	7b7a      	ldrb	r2, [r7, #13]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	32ae      	adds	r2, #174	@ 0xae
 8006b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b66:	e156      	b.n	8006e16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d008      	beq.n	8006b82 <USBD_StdEPReq+0x9a>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	f300 8145 	bgt.w	8006e00 <USBD_StdEPReq+0x318>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 809b 	beq.w	8006cb2 <USBD_StdEPReq+0x1ca>
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d03c      	beq.n	8006bfa <USBD_StdEPReq+0x112>
 8006b80:	e13e      	b.n	8006e00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d002      	beq.n	8006b94 <USBD_StdEPReq+0xac>
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d016      	beq.n	8006bc0 <USBD_StdEPReq+0xd8>
 8006b92:	e02c      	b.n	8006bee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <USBD_StdEPReq+0xce>
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b80      	cmp	r3, #128	@ 0x80
 8006b9e:	d00a      	beq.n	8006bb6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f957 	bl	8007e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006baa:	2180      	movs	r1, #128	@ 0x80
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f953 	bl	8007e58 <USBD_LL_StallEP>
 8006bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bb4:	e020      	b.n	8006bf8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc7a 	bl	80074b2 <USBD_CtlError>
              break;
 8006bbe:	e01b      	b.n	8006bf8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	885b      	ldrh	r3, [r3, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10e      	bne.n	8006be6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <USBD_StdEPReq+0xfe>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b80      	cmp	r3, #128	@ 0x80
 8006bd2:	d008      	beq.n	8006be6 <USBD_StdEPReq+0xfe>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f939 	bl	8007e58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fd3a 	bl	8007660 <USBD_CtlSendStatus>

              break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc5e 	bl	80074b2 <USBD_CtlError>
              break;
 8006bf6:	bf00      	nop
          }
          break;
 8006bf8:	e107      	b.n	8006e0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d002      	beq.n	8006c0c <USBD_StdEPReq+0x124>
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d016      	beq.n	8006c38 <USBD_StdEPReq+0x150>
 8006c0a:	e04b      	b.n	8006ca4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <USBD_StdEPReq+0x146>
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b80      	cmp	r3, #128	@ 0x80
 8006c16:	d00a      	beq.n	8006c2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f91b 	bl	8007e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c22:	2180      	movs	r1, #128	@ 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f917 	bl	8007e58 <USBD_LL_StallEP>
 8006c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c2c:	e040      	b.n	8006cb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fc3e 	bl	80074b2 <USBD_CtlError>
              break;
 8006c36:	e03b      	b.n	8006cb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d136      	bne.n	8006cae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f921 	bl	8007e96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fd03 	bl	8007660 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fde4 	bl	800682c <USBD_CoreFindEP>
 8006c64:	4603      	mov	r3, r0
 8006c66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c68:	7b7b      	ldrb	r3, [r7, #13]
 8006c6a:	2bff      	cmp	r3, #255	@ 0xff
 8006c6c:	d01f      	beq.n	8006cae <USBD_StdEPReq+0x1c6>
 8006c6e:	7b7b      	ldrb	r3, [r7, #13]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11c      	bne.n	8006cae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c74:	7b7a      	ldrb	r2, [r7, #13]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c7c:	7b7a      	ldrb	r2, [r7, #13]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32ae      	adds	r2, #174	@ 0xae
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d010      	beq.n	8006cae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c8c:	7b7a      	ldrb	r2, [r7, #13]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32ae      	adds	r2, #174	@ 0xae
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ca2:	e004      	b.n	8006cae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fc03 	bl	80074b2 <USBD_CtlError>
              break;
 8006cac:	e000      	b.n	8006cb0 <USBD_StdEPReq+0x1c8>
              break;
 8006cae:	bf00      	nop
          }
          break;
 8006cb0:	e0ab      	b.n	8006e0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d002      	beq.n	8006cc4 <USBD_StdEPReq+0x1dc>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d032      	beq.n	8006d28 <USBD_StdEPReq+0x240>
 8006cc2:	e097      	b.n	8006df4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d007      	beq.n	8006cda <USBD_StdEPReq+0x1f2>
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b80      	cmp	r3, #128	@ 0x80
 8006cce:	d004      	beq.n	8006cda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fbed 	bl	80074b2 <USBD_CtlError>
                break;
 8006cd8:	e091      	b.n	8006dfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da0b      	bge.n	8006cfa <USBD_StdEPReq+0x212>
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	e00b      	b.n	8006d12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	4413      	add	r3, r2
 8006d10:	3304      	adds	r3, #4
 8006d12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fc43 	bl	80075ac <USBD_CtlSendData>
              break;
 8006d26:	e06a      	b.n	8006dfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da11      	bge.n	8006d54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	3324      	adds	r3, #36	@ 0x24
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d117      	bne.n	8006d7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fbb0 	bl	80074b2 <USBD_CtlError>
                  break;
 8006d52:	e054      	b.n	8006dfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fb9d 	bl	80074b2 <USBD_CtlError>
                  break;
 8006d78:	e041      	b.n	8006dfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da0b      	bge.n	8006d9a <USBD_StdEPReq+0x2b2>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	3310      	adds	r3, #16
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	3304      	adds	r3, #4
 8006d98:	e00b      	b.n	8006db2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <USBD_StdEPReq+0x2d8>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b80      	cmp	r3, #128	@ 0x80
 8006dbe:	d103      	bne.n	8006dc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e00e      	b.n	8006de6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f881 	bl	8007ed4 <USBD_LL_IsStallEP>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2202      	movs	r2, #2
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fbdd 	bl	80075ac <USBD_CtlSendData>
              break;
 8006df2:	e004      	b.n	8006dfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fb5b 	bl	80074b2 <USBD_CtlError>
              break;
 8006dfc:	bf00      	nop
          }
          break;
 8006dfe:	e004      	b.n	8006e0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fb55 	bl	80074b2 <USBD_CtlError>
          break;
 8006e08:	bf00      	nop
      }
      break;
 8006e0a:	e005      	b.n	8006e18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb4f 	bl	80074b2 <USBD_CtlError>
      break;
 8006e14:	e000      	b.n	8006e18 <USBD_StdEPReq+0x330>
      break;
 8006e16:	bf00      	nop
  }

  return ret;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	885b      	ldrh	r3, [r3, #2]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	f200 8128 	bhi.w	800709a <USBD_GetDescriptor+0x276>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <USBD_GetDescriptor+0x2c>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	0800709b 	.word	0x0800709b
 8006e60:	0800709b 	.word	0x0800709b
 8006e64:	0800703b 	.word	0x0800703b
 8006e68:	08007067 	.word	0x08007067
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
      break;
 8006e82:	e112      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7c1b      	ldrb	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10d      	bne.n	8006ea8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	f107 0208 	add.w	r2, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ea6:	e100      	b.n	80070aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e0f2      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	885b      	ldrh	r3, [r3, #2]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	f200 80ac 	bhi.w	8007028 <USBD_GetDescriptor+0x204>
 8006ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <USBD_GetDescriptor+0xb4>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f8d 	.word	0x08006f8d
 8006ee8:	08006fc1 	.word	0x08006fc1
 8006eec:	08006ff5 	.word	0x08006ff5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e091      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 facb 	bl	80074b2 <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e089      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e077      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fab1 	bl	80074b2 <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e06f      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e05d      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa97 	bl	80074b2 <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e055      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fae:	e043      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa7d 	bl	80074b2 <USBD_CtlError>
            err++;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fbe:	e03b      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7c12      	ldrb	r2, [r2, #16]
 8006fd8:	f107 0108 	add.w	r1, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fe2:	e029      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa63 	bl	80074b2 <USBD_CtlError>
            err++;
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ff2:	e021      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007016:	e00f      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa49 	bl	80074b2 <USBD_CtlError>
            err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
          break;
 8007026:	e007      	b.n	8007038 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa41 	bl	80074b2 <USBD_CtlError>
          err++;
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	3301      	adds	r3, #1
 8007034:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007036:	bf00      	nop
      }
      break;
 8007038:	e037      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704a:	f107 0208 	add.w	r2, r7, #8
 800704e:	4610      	mov	r0, r2
 8007050:	4798      	blx	r3
 8007052:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007054:	e029      	b.n	80070aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa2a 	bl	80074b2 <USBD_CtlError>
        err++;
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	3301      	adds	r3, #1
 8007062:	72fb      	strb	r3, [r7, #11]
      break;
 8007064:	e021      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7c1b      	ldrb	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	f107 0208 	add.w	r2, r7, #8
 800707a:	4610      	mov	r0, r2
 800707c:	4798      	blx	r3
 800707e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	2207      	movs	r2, #7
 8007086:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007088:	e00f      	b.n	80070aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa10 	bl	80074b2 <USBD_CtlError>
        err++;
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	3301      	adds	r3, #1
 8007096:	72fb      	strb	r3, [r7, #11]
      break;
 8007098:	e007      	b.n	80070aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa08 	bl	80074b2 <USBD_CtlError>
      err++;
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	3301      	adds	r3, #1
 80070a6:	72fb      	strb	r3, [r7, #11]
      break;
 80070a8:	bf00      	nop
  }

  if (err != 0U)
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d11e      	bne.n	80070ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	88db      	ldrh	r3, [r3, #6]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d016      	beq.n	80070e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80070b8:	893b      	ldrh	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88da      	ldrh	r2, [r3, #6]
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bf28      	it	cs
 80070c8:	4613      	movcs	r3, r2
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070ce:	893b      	ldrh	r3, [r7, #8]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa69 	bl	80075ac <USBD_CtlSendData>
 80070da:	e009      	b.n	80070f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9e7 	bl	80074b2 <USBD_CtlError>
 80070e4:	e004      	b.n	80070f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 faba 	bl	8007660 <USBD_CtlSendStatus>
 80070ec:	e000      	b.n	80070f0 <USBD_GetDescriptor+0x2cc>
    return;
 80070ee:	bf00      	nop
  }
}
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	889b      	ldrh	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d131      	bne.n	800716e <USBD_SetAddress+0x76>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	88db      	ldrh	r3, [r3, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d12d      	bne.n	800716e <USBD_SetAddress+0x76>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	2b7f      	cmp	r3, #127	@ 0x7f
 8007118:	d829      	bhi.n	800716e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d104      	bne.n	800713c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f9bc 	bl	80074b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	e01d      	b.n	8007178 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7bfa      	ldrb	r2, [r7, #15]
 8007140:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 feef 	bl	8007f2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa86 	bl	8007660 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	e009      	b.n	8007178 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	e004      	b.n	8007178 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f99e 	bl	80074b2 <USBD_CtlError>
  }
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	4b4e      	ldr	r3, [pc, #312]	@ (80072d0 <USBD_SetConfig+0x150>)
 8007196:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007198:	4b4d      	ldr	r3, [pc, #308]	@ (80072d0 <USBD_SetConfig+0x150>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d905      	bls.n	80071ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f985 	bl	80074b2 <USBD_CtlError>
    return USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e08c      	b.n	80072c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d002      	beq.n	80071be <USBD_SetConfig+0x3e>
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d029      	beq.n	8007210 <USBD_SetConfig+0x90>
 80071bc:	e075      	b.n	80072aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071be:	4b44      	ldr	r3, [pc, #272]	@ (80072d0 <USBD_SetConfig+0x150>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d020      	beq.n	8007208 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80071c6:	4b42      	ldr	r3, [pc, #264]	@ (80072d0 <USBD_SetConfig+0x150>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071d0:	4b3f      	ldr	r3, [pc, #252]	@ (80072d0 <USBD_SetConfig+0x150>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fe ffe3 	bl	80061a2 <USBD_SetClassConfig>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f962 	bl	80074b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071f6:	e065      	b.n	80072c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa31 	bl	8007660 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2203      	movs	r2, #3
 8007202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007206:	e05d      	b.n	80072c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa29 	bl	8007660 <USBD_CtlSendStatus>
      break;
 800720e:	e059      	b.n	80072c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007210:	4b2f      	ldr	r3, [pc, #188]	@ (80072d0 <USBD_SetConfig+0x150>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d112      	bne.n	800723e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007220:	4b2b      	ldr	r3, [pc, #172]	@ (80072d0 <USBD_SetConfig+0x150>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800722a:	4b29      	ldr	r3, [pc, #164]	@ (80072d0 <USBD_SetConfig+0x150>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fe ffd2 	bl	80061da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa12 	bl	8007660 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800723c:	e042      	b.n	80072c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800723e:	4b24      	ldr	r3, [pc, #144]	@ (80072d0 <USBD_SetConfig+0x150>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d02a      	beq.n	80072a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe ffc0 	bl	80061da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800725a:	4b1d      	ldr	r3, [pc, #116]	@ (80072d0 <USBD_SetConfig+0x150>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007264:	4b1a      	ldr	r3, [pc, #104]	@ (80072d0 <USBD_SetConfig+0x150>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fe ff99 	bl	80061a2 <USBD_SetClassConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00f      	beq.n	800729a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f918 	bl	80074b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fe ffa5 	bl	80061da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007298:	e014      	b.n	80072c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9e0 	bl	8007660 <USBD_CtlSendStatus>
      break;
 80072a0:	e010      	b.n	80072c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9dc 	bl	8007660 <USBD_CtlSendStatus>
      break;
 80072a8:	e00c      	b.n	80072c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f900 	bl	80074b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <USBD_SetConfig+0x150>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fe ff8e 	bl	80061da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072be:	2303      	movs	r3, #3
 80072c0:	73fb      	strb	r3, [r7, #15]
      break;
 80072c2:	bf00      	nop
  }

  return ret;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000258 	.word	0x20000258

080072d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d004      	beq.n	80072f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8e2 	bl	80074b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ee:	e023      	b.n	8007338 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	dc02      	bgt.n	8007302 <USBD_GetConfig+0x2e>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc03      	bgt.n	8007308 <USBD_GetConfig+0x34>
 8007300:	e015      	b.n	800732e <USBD_GetConfig+0x5a>
 8007302:	2b03      	cmp	r3, #3
 8007304:	d00b      	beq.n	800731e <USBD_GetConfig+0x4a>
 8007306:	e012      	b.n	800732e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3308      	adds	r3, #8
 8007312:	2201      	movs	r2, #1
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f948 	bl	80075ac <USBD_CtlSendData>
        break;
 800731c:	e00c      	b.n	8007338 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	2201      	movs	r2, #1
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f940 	bl	80075ac <USBD_CtlSendData>
        break;
 800732c:	e004      	b.n	8007338 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8be 	bl	80074b2 <USBD_CtlError>
        break;
 8007336:	bf00      	nop
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	2b02      	cmp	r3, #2
 8007356:	d81e      	bhi.n	8007396 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	88db      	ldrh	r3, [r3, #6]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d004      	beq.n	800736a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f8a5 	bl	80074b2 <USBD_CtlError>
        break;
 8007368:	e01a      	b.n	80073a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	330c      	adds	r3, #12
 800738a:	2202      	movs	r2, #2
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f90c 	bl	80075ac <USBD_CtlSendData>
      break;
 8007394:	e004      	b.n	80073a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f88a 	bl	80074b2 <USBD_CtlError>
      break;
 800739e:	bf00      	nop
  }
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	885b      	ldrh	r3, [r3, #2]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d107      	bne.n	80073ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f94c 	bl	8007660 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80073c8:	e013      	b.n	80073f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d10b      	bne.n	80073ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	889b      	ldrh	r3, [r3, #4]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f93c 	bl	8007660 <USBD_CtlSendStatus>
}
 80073e8:	e003      	b.n	80073f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f860 	bl	80074b2 <USBD_CtlError>
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740a:	b2db      	uxtb	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	2b02      	cmp	r3, #2
 8007410:	d80b      	bhi.n	800742a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10c      	bne.n	8007434 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f91c 	bl	8007660 <USBD_CtlSendStatus>
      }
      break;
 8007428:	e004      	b.n	8007434 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f840 	bl	80074b2 <USBD_CtlError>
      break;
 8007432:	e000      	b.n	8007436 <USBD_ClrFeature+0x3c>
      break;
 8007434:	bf00      	nop
  }
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fa40 	bl	80068ee <SWAPBYTE>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff fa33 	bl	80068ee <SWAPBYTE>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff fa26 	bl	80068ee <SWAPBYTE>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461a      	mov	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	80da      	strh	r2, [r3, #6]
}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074bc:	2180      	movs	r1, #128	@ 0x80
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fcca 	bl	8007e58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fcc6 	bl	8007e58 <USBD_LL_StallEP>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d042      	beq.n	8007570 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80074ee:	6938      	ldr	r0, [r7, #16]
 80074f0:	f000 f842 	bl	8007578 <USBD_GetLen>
 80074f4:	4603      	mov	r3, r0
 80074f6:	3301      	adds	r3, #1
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fe:	d808      	bhi.n	8007512 <USBD_GetString+0x3e>
 8007500:	6938      	ldr	r0, [r7, #16]
 8007502:	f000 f839 	bl	8007578 <USBD_GetLen>
 8007506:	4603      	mov	r3, r0
 8007508:	3301      	adds	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	e001      	b.n	8007516 <USBD_GetString+0x42>
 8007512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	4413      	add	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
  idx++;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	3301      	adds	r3, #1
 800752a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	2203      	movs	r2, #3
 8007534:	701a      	strb	r2, [r3, #0]
  idx++;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	3301      	adds	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800753c:	e013      	b.n	8007566 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	4413      	add	r3, r2
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	3301      	adds	r3, #1
 800754e:	613b      	str	r3, [r7, #16]
    idx++;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	3301      	adds	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4413      	add	r3, r2
 800755c:	2200      	movs	r2, #0
 800755e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	3301      	adds	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e7      	bne.n	800753e <USBD_GetString+0x6a>
 800756e:	e000      	b.n	8007572 <USBD_GetString+0x9e>
    return;
 8007570:	bf00      	nop
  }
}
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007588:	e005      	b.n	8007596 <USBD_GetLen+0x1e>
  {
    len++;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	3301      	adds	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3301      	adds	r3, #1
 8007594:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f5      	bne.n	800758a <USBD_GetLen+0x12>
  }

  return len;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	2100      	movs	r1, #0
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fcc9 	bl	8007f6a <USBD_LL_Transmit>

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	2100      	movs	r1, #0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fcb8 	bl	8007f6a <USBD_LL_Transmit>

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2203      	movs	r2, #3
 8007614:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fcbc 	bl	8007fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fcab 	bl	8007fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2204      	movs	r2, #4
 800766c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007670:	2300      	movs	r3, #0
 8007672:	2200      	movs	r2, #0
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fc77 	bl	8007f6a <USBD_LL_Transmit>

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2205      	movs	r2, #5
 8007692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007696:	2300      	movs	r3, #0
 8007698:	2200      	movs	r2, #0
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc85 	bl	8007fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076b0:	2200      	movs	r2, #0
 80076b2:	4912      	ldr	r1, [pc, #72]	@ (80076fc <MX_USB_DEVICE_Init+0x50>)
 80076b4:	4812      	ldr	r0, [pc, #72]	@ (8007700 <MX_USB_DEVICE_Init+0x54>)
 80076b6:	f7fe fcf7 	bl	80060a8 <USBD_Init>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076c0:	f7f9 f93c 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076c4:	490f      	ldr	r1, [pc, #60]	@ (8007704 <MX_USB_DEVICE_Init+0x58>)
 80076c6:	480e      	ldr	r0, [pc, #56]	@ (8007700 <MX_USB_DEVICE_Init+0x54>)
 80076c8:	f7fe fd1e 	bl	8006108 <USBD_RegisterClass>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076d2:	f7f9 f933 	bl	800093c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076d6:	490c      	ldr	r1, [pc, #48]	@ (8007708 <MX_USB_DEVICE_Init+0x5c>)
 80076d8:	4809      	ldr	r0, [pc, #36]	@ (8007700 <MX_USB_DEVICE_Init+0x54>)
 80076da:	f7fe fc55 	bl	8005f88 <USBD_CDC_RegisterInterface>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076e4:	f7f9 f92a 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076e8:	4805      	ldr	r0, [pc, #20]	@ (8007700 <MX_USB_DEVICE_Init+0x54>)
 80076ea:	f7fe fd43 	bl	8006174 <USBD_Start>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076f4:	f7f9 f922 	bl	800093c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200000ac 	.word	0x200000ac
 8007700:	2000025c 	.word	0x2000025c
 8007704:	20000018 	.word	0x20000018
 8007708:	20000098 	.word	0x20000098

0800770c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007710:	2200      	movs	r2, #0
 8007712:	4905      	ldr	r1, [pc, #20]	@ (8007728 <CDC_Init_FS+0x1c>)
 8007714:	4805      	ldr	r0, [pc, #20]	@ (800772c <CDC_Init_FS+0x20>)
 8007716:	f7fe fc51 	bl	8005fbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800771a:	4905      	ldr	r1, [pc, #20]	@ (8007730 <CDC_Init_FS+0x24>)
 800771c:	4803      	ldr	r0, [pc, #12]	@ (800772c <CDC_Init_FS+0x20>)
 800771e:	f7fe fc6f 	bl	8006000 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007722:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000d38 	.word	0x20000d38
 800772c:	2000025c 	.word	0x2000025c
 8007730:	20000538 	.word	0x20000538

08007734 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
 8007750:	4613      	mov	r3, r2
 8007752:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	2b23      	cmp	r3, #35	@ 0x23
 8007758:	d84a      	bhi.n	80077f0 <CDC_Control_FS+0xac>
 800775a:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <CDC_Control_FS+0x1c>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	080077f1 	.word	0x080077f1
 8007764:	080077f1 	.word	0x080077f1
 8007768:	080077f1 	.word	0x080077f1
 800776c:	080077f1 	.word	0x080077f1
 8007770:	080077f1 	.word	0x080077f1
 8007774:	080077f1 	.word	0x080077f1
 8007778:	080077f1 	.word	0x080077f1
 800777c:	080077f1 	.word	0x080077f1
 8007780:	080077f1 	.word	0x080077f1
 8007784:	080077f1 	.word	0x080077f1
 8007788:	080077f1 	.word	0x080077f1
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077f1 	.word	0x080077f1
 8007794:	080077f1 	.word	0x080077f1
 8007798:	080077f1 	.word	0x080077f1
 800779c:	080077f1 	.word	0x080077f1
 80077a0:	080077f1 	.word	0x080077f1
 80077a4:	080077f1 	.word	0x080077f1
 80077a8:	080077f1 	.word	0x080077f1
 80077ac:	080077f1 	.word	0x080077f1
 80077b0:	080077f1 	.word	0x080077f1
 80077b4:	080077f1 	.word	0x080077f1
 80077b8:	080077f1 	.word	0x080077f1
 80077bc:	080077f1 	.word	0x080077f1
 80077c0:	080077f1 	.word	0x080077f1
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	080077f1 	.word	0x080077f1
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	080077f1 	.word	0x080077f1
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f1 	.word	0x080077f1
 80077dc:	080077f1 	.word	0x080077f1
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077f1 	.word	0x080077f1
 80077e8:	080077f1 	.word	0x080077f1
 80077ec:	080077f1 	.word	0x080077f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077f0:	bf00      	nop
  }

  return (USBD_OK);
 80077f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4805      	ldr	r0, [pc, #20]	@ (8007824 <CDC_Receive_FS+0x24>)
 800780e:	f7fe fbf7 	bl	8006000 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007812:	4804      	ldr	r0, [pc, #16]	@ (8007824 <CDC_Receive_FS+0x24>)
 8007814:	f7fe fc12 	bl	800603c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000025c 	.word	0x2000025c

08007828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800783a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800783e:	4618      	mov	r0, r3
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2212      	movs	r2, #18
 800785c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800785e:	4b03      	ldr	r3, [pc, #12]	@ (800786c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	200000c8 	.word	0x200000c8

08007870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2204      	movs	r2, #4
 8007880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007882:	4b03      	ldr	r3, [pc, #12]	@ (8007890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	200000dc 	.word	0x200000dc

08007894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4907      	ldr	r1, [pc, #28]	@ (80078c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078aa:	4808      	ldr	r0, [pc, #32]	@ (80078cc <USBD_FS_ProductStrDescriptor+0x38>)
 80078ac:	f7ff fe12 	bl	80074d4 <USBD_GetString>
 80078b0:	e004      	b.n	80078bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4904      	ldr	r1, [pc, #16]	@ (80078c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078b6:	4805      	ldr	r0, [pc, #20]	@ (80078cc <USBD_FS_ProductStrDescriptor+0x38>)
 80078b8:	f7ff fe0c 	bl	80074d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078bc:	4b02      	ldr	r3, [pc, #8]	@ (80078c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20001538 	.word	0x20001538
 80078cc:	0800810c 	.word	0x0800810c

080078d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	4904      	ldr	r1, [pc, #16]	@ (80078f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078e0:	4804      	ldr	r0, [pc, #16]	@ (80078f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078e2:	f7ff fdf7 	bl	80074d4 <USBD_GetString>
  return USBD_StrDesc;
 80078e6:	4b02      	ldr	r3, [pc, #8]	@ (80078f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20001538 	.word	0x20001538
 80078f4:	08008124 	.word	0x08008124

080078f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	221a      	movs	r2, #26
 8007908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800790a:	f000 f843 	bl	8007994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800790e:	4b02      	ldr	r3, [pc, #8]	@ (8007918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200000e0 	.word	0x200000e0

0800791c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4907      	ldr	r1, [pc, #28]	@ (8007950 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007932:	4808      	ldr	r0, [pc, #32]	@ (8007954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007934:	f7ff fdce 	bl	80074d4 <USBD_GetString>
 8007938:	e004      	b.n	8007944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4904      	ldr	r1, [pc, #16]	@ (8007950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800793e:	4805      	ldr	r0, [pc, #20]	@ (8007954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007940:	f7ff fdc8 	bl	80074d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007944:	4b02      	ldr	r3, [pc, #8]	@ (8007950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20001538 	.word	0x20001538
 8007954:	08008138 	.word	0x08008138

08007958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4907      	ldr	r1, [pc, #28]	@ (800798c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800796e:	4808      	ldr	r0, [pc, #32]	@ (8007990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007970:	f7ff fdb0 	bl	80074d4 <USBD_GetString>
 8007974:	e004      	b.n	8007980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4904      	ldr	r1, [pc, #16]	@ (800798c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800797a:	4805      	ldr	r0, [pc, #20]	@ (8007990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800797c:	f7ff fdaa 	bl	80074d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20001538 	.word	0x20001538
 8007990:	08008144 	.word	0x08008144

08007994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800799a:	4b0f      	ldr	r3, [pc, #60]	@ (80079d8 <Get_SerialNum+0x44>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079a0:	4b0e      	ldr	r3, [pc, #56]	@ (80079dc <Get_SerialNum+0x48>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079a6:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <Get_SerialNum+0x4c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4413      	add	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079ba:	2208      	movs	r2, #8
 80079bc:	4909      	ldr	r1, [pc, #36]	@ (80079e4 <Get_SerialNum+0x50>)
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f814 	bl	80079ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079c4:	2204      	movs	r2, #4
 80079c6:	4908      	ldr	r1, [pc, #32]	@ (80079e8 <Get_SerialNum+0x54>)
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f000 f80f 	bl	80079ec <IntToUnicode>
  }
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	1fff7a10 	.word	0x1fff7a10
 80079dc:	1fff7a14 	.word	0x1fff7a14
 80079e0:	1fff7a18 	.word	0x1fff7a18
 80079e4:	200000e2 	.word	0x200000e2
 80079e8:	200000f2 	.word	0x200000f2

080079ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]
 8007a02:	e027      	b.n	8007a54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0f1b      	lsrs	r3, r3, #28
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	d80b      	bhi.n	8007a24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	0f1b      	lsrs	r3, r3, #28
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4619      	mov	r1, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3230      	adds	r2, #48	@ 0x30
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e00a      	b.n	8007a3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0f1b      	lsrs	r3, r3, #28
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	440b      	add	r3, r1
 8007a34:	3237      	adds	r2, #55	@ 0x37
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	3301      	adds	r3, #1
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	3301      	adds	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
 8007a54:	7dfa      	ldrb	r2, [r7, #23]
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d3d3      	bcc.n	8007a04 <IntToUnicode+0x18>
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	@ 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	609a      	str	r2, [r3, #8]
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a8c:	d147      	bne.n	8007b1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	4b25      	ldr	r3, [pc, #148]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a96:	4a24      	ldr	r2, [pc, #144]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a9e:	4b22      	ldr	r3, [pc, #136]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007aaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4619      	mov	r1, r3
 8007abe:	481b      	ldr	r0, [pc, #108]	@ (8007b2c <HAL_PCD_MspInit+0xc0>)
 8007ac0:	f7f9 fae6 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ac4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aca:	2302      	movs	r3, #2
 8007acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4812      	ldr	r0, [pc, #72]	@ (8007b2c <HAL_PCD_MspInit+0xc0>)
 8007ae2:	f7f9 fad5 	bl	8001090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ae6:	4b10      	ldr	r3, [pc, #64]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aea:	4a0f      	ldr	r2, [pc, #60]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af0:	6353      	str	r3, [r2, #52]	@ 0x34
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afa:	4a0b      	ldr	r2, [pc, #44]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b02:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <HAL_PCD_MspInit+0xbc>)
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	2043      	movs	r0, #67	@ 0x43
 8007b14:	f7f9 fa85 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b18:	2043      	movs	r0, #67	@ 0x43
 8007b1a:	f7f9 fa9e 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b1e:	bf00      	nop
 8007b20:	3728      	adds	r7, #40	@ 0x28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	40020000 	.word	0x40020000

08007b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe fb61 	bl	800620e <USBD_LL_SetupStage>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	440b      	add	r3, r1
 8007b74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f7fe fb9b 	bl	80062b8 <USBD_LL_DataOutStage>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3320      	adds	r3, #32
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7fe fc34 	bl	800641e <USBD_LL_DataInStage>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fd6e 	bl	80066ae <USBD_LL_SOF>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	79db      	ldrb	r3, [r3, #7]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d001      	beq.n	8007bf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bee:	f7f8 fea5 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fd12 	bl	8006626 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fcba 	bl	8006582 <USBD_LL_Reset>
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fd0d 	bl	8006646 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7adb      	ldrb	r3, [r3, #11]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c4c:	4b04      	ldr	r3, [pc, #16]	@ (8007c60 <HAL_PCD_SuspendCallback+0x48>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	4a03      	ldr	r2, [pc, #12]	@ (8007c60 <HAL_PCD_SuspendCallback+0x48>)
 8007c52:	f043 0306 	orr.w	r3, r3, #6
 8007c56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	e000ed00 	.word	0xe000ed00

08007c64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fd03 	bl	800667e <USBD_LL_Resume>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fd5b 	bl	8006752 <USBD_LL_IsoOUTIncomplete>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fd17 	bl	80066ee <USBD_LL_IsoINIncomplete>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd6d 	bl	80067b6 <USBD_LL_DevConnected>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fd6a 	bl	80067cc <USBD_LL_DevDisconnected>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d13c      	bne.n	8007d8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d10:	4a20      	ldr	r2, [pc, #128]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d20:	4b1c      	ldr	r3, [pc, #112]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d28:	4b1a      	ldr	r3, [pc, #104]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d2e:	4b19      	ldr	r3, [pc, #100]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d30:	2202      	movs	r2, #2
 8007d32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d34:	4b17      	ldr	r3, [pc, #92]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d3a:	4b16      	ldr	r3, [pc, #88]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d40:	4b14      	ldr	r3, [pc, #80]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d46:	4b13      	ldr	r3, [pc, #76]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d4c:	4b11      	ldr	r3, [pc, #68]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007d52:	4b10      	ldr	r3, [pc, #64]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d58:	4b0e      	ldr	r3, [pc, #56]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d5e:	480d      	ldr	r0, [pc, #52]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d60:	f7fa f918 	bl	8001f94 <HAL_PCD_Init>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d6a:	f7f8 fde7 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d6e:	2180      	movs	r1, #128	@ 0x80
 8007d70:	4808      	ldr	r0, [pc, #32]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d72:	f7fb fb44 	bl	80033fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d76:	2240      	movs	r2, #64	@ 0x40
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4806      	ldr	r0, [pc, #24]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d7c:	f7fb faf8 	bl	8003370 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	2101      	movs	r1, #1
 8007d84:	4803      	ldr	r0, [pc, #12]	@ (8007d94 <USBD_LL_Init+0x94>)
 8007d86:	f7fb faf3 	bl	8003370 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20001738 	.word	0x20001738

08007d98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fa f9ff 	bl	80021b2 <HAL_PCD_Start>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f942 	bl	8008044 <USBD_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4611      	mov	r1, r2
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70bb      	strb	r3, [r7, #2]
 8007de4:	4613      	mov	r3, r2
 8007de6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007df6:	78bb      	ldrb	r3, [r7, #2]
 8007df8:	883a      	ldrh	r2, [r7, #0]
 8007dfa:	78f9      	ldrb	r1, [r7, #3]
 8007dfc:	f7fa fed3 	bl	8002ba6 <HAL_PCD_EP_Open>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f91c 	bl	8008044 <USBD_Get_USB_Status>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fa ff1e 	bl	8002c7a <HAL_PCD_EP_Close>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f8fd 	bl	8008044 <USBD_Get_USB_Status>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fa ffd6 	bl	8002e28 <HAL_PCD_EP_SetStall>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f8de 	bl	8008044 <USBD_Get_USB_Status>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fb f81a 	bl	8002eee <HAL_PCD_EP_ClrStall>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f8bf 	bl	8008044 <USBD_Get_USB_Status>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	da0b      	bge.n	8007f08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	3316      	adds	r3, #22
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	e00b      	b.n	8007f20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	4613      	mov	r3, r2
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fa fe07 	bl	8002b5e <HAL_PCD_SetAddress>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f874 	bl	8008044 <USBD_Get_USB_Status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	460b      	mov	r3, r1
 8007f78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f88:	7af9      	ldrb	r1, [r7, #11]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	f7fa ff11 	bl	8002db4 <HAL_PCD_EP_Transmit>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f853 	bl	8008044 <USBD_Get_USB_Status>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fca:	7af9      	ldrb	r1, [r7, #11]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	f7fa fe9d 	bl	8002d0e <HAL_PCD_EP_Receive>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f832 	bl	8008044 <USBD_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fe4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa febd 	bl	8002d84 <HAL_PCD_EP_GetRxCount>
 800800a:	4603      	mov	r3, r0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800801c:	4b03      	ldr	r3, [pc, #12]	@ (800802c <USBD_static_malloc+0x18>)
}
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20001c1c 	.word	0x20001c1c

08008030 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d817      	bhi.n	8008088 <USBD_Get_USB_Status+0x44>
 8008058:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <USBD_Get_USB_Status+0x1c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008077 	.word	0x08008077
 8008068:	0800807d 	.word	0x0800807d
 800806c:	08008083 	.word	0x08008083
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e00b      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e008      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	e005      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008082:	2303      	movs	r3, #3
 8008084:	73fb      	strb	r3, [r7, #15]
    break;
 8008086:	e002      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	73fb      	strb	r3, [r7, #15]
    break;
 800808c:	bf00      	nop
  }
  return usb_status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <memset>:
 800809c:	4402      	add	r2, r0
 800809e:	4603      	mov	r3, r0
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	f803 1b01 	strb.w	r1, [r3], #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4d0d      	ldr	r5, [pc, #52]	@ (80080e4 <__libc_init_array+0x38>)
 80080b0:	4c0d      	ldr	r4, [pc, #52]	@ (80080e8 <__libc_init_array+0x3c>)
 80080b2:	1b64      	subs	r4, r4, r5
 80080b4:	10a4      	asrs	r4, r4, #2
 80080b6:	2600      	movs	r6, #0
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	4d0b      	ldr	r5, [pc, #44]	@ (80080ec <__libc_init_array+0x40>)
 80080be:	4c0c      	ldr	r4, [pc, #48]	@ (80080f0 <__libc_init_array+0x44>)
 80080c0:	f000 f818 	bl	80080f4 <_init>
 80080c4:	1b64      	subs	r4, r4, r5
 80080c6:	10a4      	asrs	r4, r4, #2
 80080c8:	2600      	movs	r6, #0
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	f855 3b04 	ldr.w	r3, [r5], #4
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	08008174 	.word	0x08008174
 80080e8:	08008174 	.word	0x08008174
 80080ec:	08008174 	.word	0x08008174
 80080f0:	08008178 	.word	0x08008178

080080f4 <_init>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr

08008100 <_fini>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr
