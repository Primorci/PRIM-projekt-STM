
PRIM-projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800e270  0800e270  0000f270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e658  0800e658  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e658  0800e658  0000f658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e660  0800e660  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e660  0800e660  0000f660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e664  0800e664  0000f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e668  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ef0  200002c4  0800e92c  000102c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021b4  0800e92c  000111b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019984  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004011  00000000  00000000  00029c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012df  00000000  00000000  0002f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b443  00000000  00000000  000307e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6e9  00000000  00000000  0004bc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009820c  00000000  00000000  0006b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010351f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  00103564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e254 	.word	0x0800e254

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800e254 	.word	0x0800e254

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <i2c1_pisiRegister>:
void initGyro(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	230a      	movs	r3, #10
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	1d7b      	adds	r3, r7, #5
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <i2c1_pisiRegister+0x40>)
 8000ed8:	f001 fcac 	bl	8002834 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002e0 	.word	0x200002e0

08000eec <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	603a      	str	r2, [r7, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d906      	bls.n	8000f16 <i2c1_beriRegistre+0x2a>
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b19      	cmp	r3, #25
 8000f0c:	d103      	bne.n	8000f16 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f14:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	b298      	uxth	r0, r3
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	797a      	ldrb	r2, [r7, #5]
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4602      	mov	r2, r0
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <i2c1_beriRegistre+0x58>)
 8000f38:	f001 fd76 	bl	8002a28 <HAL_I2C_Mem_Read>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002e0 	.word	0x200002e0

08000f48 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000f4c:	2227      	movs	r2, #39	@ 0x27
 8000f4e:	2120      	movs	r1, #32
 8000f50:	2019      	movs	r0, #25
 8000f52:	f7ff ffa9 	bl	8000ea8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000f56:	2288      	movs	r2, #136	@ 0x88
 8000f58:	2123      	movs	r1, #35	@ 0x23
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f7ff ffa4 	bl	8000ea8 <i2c1_pisiRegister>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f74:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <spi1_beriRegister+0x50>)
 8000f82:	f001 fadf 	bl	8002544 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	f107 010e 	add.w	r1, r7, #14
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <spi1_beriRegister+0x54>)
 8000f96:	f005 fadb 	bl	8006550 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <spi1_beriRegister+0x50>)
 8000fa0:	f001 fad0 	bl	8002544 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	200003c4 	.word	0x200003c4

08000fbc <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4809      	ldr	r0, [pc, #36]	@ (8001008 <spi1_pisiRegister+0x4c>)
 8000fe4:	f001 faae 	bl	8002544 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000fe8:	f107 010e 	add.w	r1, r7, #14
 8000fec:	2302      	movs	r3, #2
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <spi1_pisiRegister+0x50>)
 8000ff2:	f005 f850 	bl	8006096 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4803      	ldr	r0, [pc, #12]	@ (8001008 <spi1_pisiRegister+0x4c>)
 8000ffc:	f001 faa2 	bl	8002544 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	200003c4 	.word	0x200003c4

08001010 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001026:	b2db      	uxtb	r3, r3
 8001028:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2108      	movs	r1, #8
 800102e:	480c      	ldr	r0, [pc, #48]	@ (8001060 <spi1_beriRegistre+0x50>)
 8001030:	f001 fa88 	bl	8002544 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8001034:	1df9      	adds	r1, r7, #7
 8001036:	230a      	movs	r3, #10
 8001038:	2201      	movs	r2, #1
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <spi1_beriRegistre+0x54>)
 800103c:	f005 f82b 	bl	8006096 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	b29a      	uxth	r2, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	4806      	ldr	r0, [pc, #24]	@ (8001064 <spi1_beriRegistre+0x54>)
 800104a:	f005 f968 	bl	800631e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2108      	movs	r1, #8
 8001052:	4803      	ldr	r0, [pc, #12]	@ (8001060 <spi1_beriRegistre+0x50>)
 8001054:	f001 fa76 	bl	8002544 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	200003c4 	.word	0x200003c4

08001068 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 800106e:	200f      	movs	r0, #15
 8001070:	f7ff ff78 	bl	8000f64 <spi1_beriRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2bd4      	cmp	r3, #212	@ 0xd4
 800107c:	d004      	beq.n	8001088 <initGyro+0x20>
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2bd3      	cmp	r3, #211	@ 0xd3
 8001082:	d001      	beq.n	8001088 <initGyro+0x20>
        for (;;);
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 8001088:	210f      	movs	r1, #15
 800108a:	2020      	movs	r0, #32
 800108c:	f7ff ff96 	bl	8000fbc <spi1_pisiRegister>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <send_data>:

void send_data() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
    uint8_t data[18]; // 6 bytes for accelerometer (3 axes * 2 bytes each) + 6 bytes for gyroscope (3 axes * 2 bytes each) + 2 bytes for a header
    uint8_t* accel_data = &data[2];  // Starting point for accelerometer data (after the header)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	3302      	adds	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
    uint8_t* gyro_data = &data[8];   // Starting point for gyroscope data (after the accelerometer data)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	3308      	adds	r3, #8
 80010a8:	61bb      	str	r3, [r7, #24]

    // Fill the header or start marker
    data[0] = 0xaa;
 80010aa:	23aa      	movs	r3, #170	@ 0xaa
 80010ac:	713b      	strb	r3, [r7, #4]
    data[1] = 0xab;  // Header
 80010ae:	23ab      	movs	r3, #171	@ 0xab
 80010b0:	717b      	strb	r3, [r7, #5]

    // Get Accelerometer Data (X, Y, Z)
    i2c1_beriRegistre(0x19, 0x28, (uint8_t*)&accel_data[0], 6); // Read 6 bytes (X, Y, Z)
 80010b2:	2306      	movs	r3, #6
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	2128      	movs	r1, #40	@ 0x28
 80010b8:	2019      	movs	r0, #25
 80010ba:	f7ff ff17 	bl	8000eec <i2c1_beriRegistre>

    // Get Gyroscope Data (X, Y, Z)
//    i2c1_beriRegistre(0x6B, 0x28, (uint8_t*)&gyro_data[0], 6);  // Assume gyroscope data starts at 0x28 (for example)
    spi1_beriRegistre(0x28, (uint8_t*)&gyro_data[0], 6);
 80010be:	2206      	movs	r2, #6
 80010c0:	69b9      	ldr	r1, [r7, #24]
 80010c2:	2028      	movs	r0, #40	@ 0x28
 80010c4:	f7ff ffa4 	bl	8001010 <spi1_beriRegistre>
    // Send Data over USB
    CDC_Transmit_FS(data, 18);  // Send 18 bytes: 2 for header + 6 for accelerometer + 6 for gyroscope
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2112      	movs	r1, #18
 80010cc:	4618      	mov	r0, r3
 80010ce:	f009 ffe1 	bl	800b094 <CDC_Transmit_FS>

    HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f000 ff7c 	bl	8001fd0 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <update_pwm_brightness>:

void update_pwm_brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t brightness_level) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value = (brightness_level * (ARR_VALUE + 1)) / 100;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d104      	bne.n	800110a <update_pwm_brightness+0x2a>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001108:	e013      	b.n	8001132 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b04      	cmp	r3, #4
 800110e:	d104      	bne.n	800111a <update_pwm_brightness+0x3a>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001118:	e00b      	b.n	8001132 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d104      	bne.n	800112a <update_pwm_brightness+0x4a>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001128:	e003      	b.n	8001132 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <checkDir>:

void checkDir(uint8_t value, int8_t *dir, int8_t max, int8_t min){
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
	if(value >= max)
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800115c:	429a      	cmp	r2, r3
 800115e:	db03      	blt.n	8001168 <checkDir+0x2a>
		dir = -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	603b      	str	r3, [r7, #0]
	else if(value <= min)
		dir = 1;
}
 8001166:	e006      	b.n	8001176 <checkDir+0x38>
	else if(value <= min)
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800116e:	429a      	cmp	r2, r3
 8001170:	dc01      	bgt.n	8001176 <checkDir+0x38>
		dir = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	603b      	str	r3, [r7, #0]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 feaf 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f8db 	bl	8001348 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001192:	f000 f941 	bl	8001418 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 faab 	bl	80016f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800119a:	f000 f95d 	bl	8001458 <MX_I2C1_Init>
  MX_I2S2_Init();
 800119e:	f000 f989 	bl	80014b4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80011a2:	f000 f9b5 	bl	8001510 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011a6:	f000 f9e1 	bl	800156c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011aa:	f009 fe25 	bl	800adf8 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80011ae:	f000 fa13 	bl	80015d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80011b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001324 <main+0x1a0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001324 <main+0x1a0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011c0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 80011c2:	2201      	movs	r2, #1
 80011c4:	2108      	movs	r1, #8
 80011c6:	4858      	ldr	r0, [pc, #352]	@ (8001328 <main+0x1a4>)
 80011c8:	f001 f9bc 	bl	8002544 <HAL_GPIO_WritePin>
  initGyro();
 80011cc:	f7ff ff4c 	bl	8001068 <initGyro>

  initOrientation();
 80011d0:	f7ff feba 	bl	8000f48 <initOrientation>
  __HAL_I2C_ENABLE(&hi2c1);
 80011d4:	4b55      	ldr	r3, [pc, #340]	@ (800132c <main+0x1a8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b54      	ldr	r3, [pc, #336]	@ (800132c <main+0x1a8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim4);
 80011e4:	4852      	ldr	r0, [pc, #328]	@ (8001330 <main+0x1ac>)
 80011e6:	f005 fcef 	bl	8006bc8 <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011ea:	2100      	movs	r1, #0
 80011ec:	4850      	ldr	r0, [pc, #320]	@ (8001330 <main+0x1ac>)
 80011ee:	f005 fd9f 	bl	8006d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011f2:	2104      	movs	r1, #4
 80011f4:	484e      	ldr	r0, [pc, #312]	@ (8001330 <main+0x1ac>)
 80011f6:	f005 fd9b 	bl	8006d30 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80011fa:	210c      	movs	r1, #12
 80011fc:	484c      	ldr	r0, [pc, #304]	@ (8001330 <main+0x1ac>)
 80011fe:	f005 fd97 	bl	8006d30 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  SensorData recivedData = {0};
  int8_t dir_Status = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	717b      	strb	r3, [r7, #5]
  int8_t dir_RoadType = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	713b      	strb	r3, [r7, #4]
  uint8_t status = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
  uint8_t roadType = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	  if(isDefined){
 8001212:	4b48      	ldr	r3, [pc, #288]	@ (8001334 <main+0x1b0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d07b      	beq.n	8001312 <main+0x18e>
		  if(recivedData.danger)
 800121a:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <main+0x1b4>)
 800121c:	f993 3000 	ldrsb.w	r3, [r3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <main+0xae>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800122a:	4844      	ldr	r0, [pc, #272]	@ (800133c <main+0x1b8>)
 800122c:	f001 f98a 	bl	8002544 <HAL_GPIO_WritePin>
 8001230:	e005      	b.n	800123e <main+0xba>
		  else
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001238:	4840      	ldr	r0, [pc, #256]	@ (800133c <main+0x1b8>)
 800123a:	f001 f983 	bl	8002544 <HAL_GPIO_WritePin>

		  update_pwm_brightness(&htim4, TIM_CHANNEL_2, status);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	461a      	mov	r2, r3
 8001242:	2104      	movs	r1, #4
 8001244:	483a      	ldr	r0, [pc, #232]	@ (8001330 <main+0x1ac>)
 8001246:	f7ff ff4b 	bl	80010e0 <update_pwm_brightness>

		  if(recivedData.roadType[0] == 'A'){
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <main+0x1b4>)
 800124c:	7a1b      	ldrb	r3, [r3, #8]
 800124e:	2b41      	cmp	r3, #65	@ 0x41
 8001250:	d10b      	bne.n	800126a <main+0xe6>
			  update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	4836      	ldr	r0, [pc, #216]	@ (8001330 <main+0x1ac>)
 8001258:	f7ff ff42 	bl	80010e0 <update_pwm_brightness>
			  update_pwm_brightness(&htim4, TIM_CHANNEL_4, roadType);
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	461a      	mov	r2, r3
 8001260:	210c      	movs	r1, #12
 8001262:	4833      	ldr	r0, [pc, #204]	@ (8001330 <main+0x1ac>)
 8001264:	f7ff ff3c 	bl	80010e0 <update_pwm_brightness>
 8001268:	e00a      	b.n	8001280 <main+0xfc>
		  }
		  else{
			  update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	210c      	movs	r1, #12
 800126e:	4830      	ldr	r0, [pc, #192]	@ (8001330 <main+0x1ac>)
 8001270:	f7ff ff36 	bl	80010e0 <update_pwm_brightness>
			  update_pwm_brightness(&htim4, TIM_CHANNEL_1, roadType);
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	461a      	mov	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	482d      	ldr	r0, [pc, #180]	@ (8001330 <main+0x1ac>)
 800127c:	f7ff ff30 	bl	80010e0 <update_pwm_brightness>
		  }

		  status += recivedData.danger ? 10 * (recivedData.dangerProximity / 20) * dir_Status :  10 * dir_Status;
 8001280:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <main+0x1b4>)
 8001282:	f993 3000 	ldrsb.w	r3, [r3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d014      	beq.n	80012b4 <main+0x130>
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <main+0x1b4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a2c      	ldr	r2, [pc, #176]	@ (8001340 <main+0x1bc>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	10d2      	asrs	r2, r2, #3
 8001296:	17db      	asrs	r3, r3, #31
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	fb12 f303 	smulbb	r3, r2, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e007      	b.n	80012c4 <main+0x140>
 80012b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	4413      	add	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]
		  roadType += 10 * ((100 - recivedData.roadQuality) / 20) * dir_RoadType;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <main+0x1b4>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80012d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <main+0x1c0>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	fb12 f303 	smulbb	r3, r2, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4413      	add	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]

		  checkDir(status, &dir_Status, 100, 0);
 80012f8:	1d79      	adds	r1, r7, #5
 80012fa:	79f8      	ldrb	r0, [r7, #7]
 80012fc:	2300      	movs	r3, #0
 80012fe:	2264      	movs	r2, #100	@ 0x64
 8001300:	f7ff ff1d 	bl	800113e <checkDir>
		  checkDir(roadType, &dir_RoadType, 100, 0);
 8001304:	1d39      	adds	r1, r7, #4
 8001306:	79b8      	ldrb	r0, [r7, #6]
 8001308:	2300      	movs	r3, #0
 800130a:	2264      	movs	r2, #100	@ 0x64
 800130c:	f7ff ff17 	bl	800113e <checkDir>
 8001310:	e004      	b.n	800131c <main+0x198>
	  }
	  else{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001312:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <main+0x1b8>)
 8001318:	f001 f92d 	bl	8002576 <HAL_GPIO_TogglePin>
	  }

	  send_data();
 800131c:	f7ff febc 	bl	8001098 <send_data>
	  if(isDefined){
 8001320:	e777      	b.n	8001212 <main+0x8e>
 8001322:	bf00      	nop
 8001324:	200003c4 	.word	0x200003c4
 8001328:	40021000 	.word	0x40021000
 800132c:	200002e0 	.word	0x200002e0
 8001330:	2000041c 	.word	0x2000041c
 8001334:	2000074c 	.word	0x2000074c
 8001338:	20000750 	.word	0x20000750
 800133c:	40020c00 	.word	0x40020c00
 8001340:	66666667 	.word	0x66666667
 8001344:	cccccccd 	.word	0xcccccccd

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	@ 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00b f859 	bl	800c40e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <SystemClock_Config+0xc8>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <SystemClock_Config+0xc8>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	@ 0x40
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <SystemClock_Config+0xc8>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <SystemClock_Config+0xcc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <SystemClock_Config+0xcc>)
 8001392:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <SystemClock_Config+0xcc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013bc:	23a8      	movs	r3, #168	@ 0xa8
 80013be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013c4:	2307      	movs	r3, #7
 80013c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 f803 	bl	80053d8 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d8:	f000 fa64 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2102      	movs	r1, #2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fa65 	bl	80058c8 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001404:	f000 fa4e 	bl	80018a4 <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3750      	adds	r7, #80	@ 0x50
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800142e:	2301      	movs	r3, #1
 8001430:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001432:	23c8      	movs	r3, #200	@ 0xc8
 8001434:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001436:	2305      	movs	r3, #5
 8001438:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fc4d 	bl	8005ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800144c:	f000 fa2a 	bl	80018a4 <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f001 f889 	bl	80025ac <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 fa00 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002e0 	.word	0x200002e0
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <MX_I2S2_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014da:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <MX_I2S2_Init+0x58>)
 80014dc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_I2S2_Init+0x50>)
 80014f2:	f002 f87f 	bl	80035f4 <HAL_I2S_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 f9d2 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000334 	.word	0x20000334
 8001508:	40003800 	.word	0x40003800
 800150c:	00017700 	.word	0x00017700

08001510 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001516:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <MX_I2S3_Init+0x58>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_I2S3_Init+0x54>)
 800151c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001520:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_I2S3_Init+0x54>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001534:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001538:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800153c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_I2S3_Init+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_I2S3_Init+0x54>)
 8001552:	f002 f84f 	bl	80035f4 <HAL_I2S_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800155c:	f000 f9a2 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000037c 	.word	0x2000037c
 8001568:	40003c00 	.word	0x40003c00

0800156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001572:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <MX_SPI1_Init+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001578:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_SPI1_Init+0x64>)
 800158c:	2202      	movs	r2, #2
 800158e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001592:	2201      	movs	r2, #1
 8001594:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015a0:	2218      	movs	r2, #24
 80015a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015b8:	220a      	movs	r2, #10
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015be:	f004 fce1 	bl	8005f84 <HAL_SPI_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c8:	f000 f96c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200003c4 	.word	0x200003c4
 80015d4:	40013000 	.word	0x40013000

080015d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	@ 0x38
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001608:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800160a:	4a38      	ldr	r2, [pc, #224]	@ (80016ec <MX_TIM4_Init+0x114>)
 800160c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800160e:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <MX_TIM4_Init+0x110>)
 8001610:	2253      	movs	r2, #83	@ 0x53
 8001612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <MX_TIM4_Init+0x110>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800161a:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800161c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <MX_TIM4_Init+0x110>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800162e:	482e      	ldr	r0, [pc, #184]	@ (80016e8 <MX_TIM4_Init+0x110>)
 8001630:	f005 fa7a 	bl	8006b28 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800163a:	f000 f933 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001648:	4619      	mov	r1, r3
 800164a:	4827      	ldr	r0, [pc, #156]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800164c:	f005 fce2 	bl	8007014 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001656:	f000 f925 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800165c:	f005 fb0e 	bl	8006c7c <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001666:	f000 f91d 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	4619      	mov	r1, r3
 8001678:	481b      	ldr	r0, [pc, #108]	@ (80016e8 <MX_TIM4_Init+0x110>)
 800167a:	f006 f86b 	bl	8007754 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001684:	f000 f90e 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001688:	2360      	movs	r3, #96	@ 0x60
 800168a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <MX_TIM4_Init+0x110>)
 80016a0:	f005 fbf6 	bl	8006e90 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016aa:	f000 f8fb 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <MX_TIM4_Init+0x110>)
 80016b6:	f005 fbeb 	bl	8006e90 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80016c0:	f000 f8f0 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	220c      	movs	r2, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MX_TIM4_Init+0x110>)
 80016cc:	f005 fbe0 	bl	8006e90 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80016d6:	f000 f8e5 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <MX_TIM4_Init+0x110>)
 80016dc:	f000 fa90 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	@ 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000041c 	.word	0x2000041c
 80016ec:	40000800 	.word	0x40000800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	4b5a      	ldr	r3, [pc, #360]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a59      	ldr	r2, [pc, #356]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a52      	ldr	r2, [pc, #328]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b4c      	ldr	r3, [pc, #304]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a44      	ldr	r2, [pc, #272]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b42      	ldr	r3, [pc, #264]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a3d      	ldr	r2, [pc, #244]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <MX_GPIO_Init+0x1a0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2108      	movs	r1, #8
 80017b2:	4838      	ldr	r0, [pc, #224]	@ (8001894 <MX_GPIO_Init+0x1a4>)
 80017b4:	f000 fec6 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2101      	movs	r1, #1
 80017bc:	4836      	ldr	r0, [pc, #216]	@ (8001898 <MX_GPIO_Init+0x1a8>)
 80017be:	f000 fec1 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|Audio_RST_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f244 0110 	movw	r1, #16400	@ 0x4010
 80017c8:	4834      	ldr	r0, [pc, #208]	@ (800189c <MX_GPIO_Init+0x1ac>)
 80017ca:	f000 febb 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80017ce:	2304      	movs	r3, #4
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	482c      	ldr	r0, [pc, #176]	@ (8001894 <MX_GPIO_Init+0x1a4>)
 80017e2:	f000 fd2b 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017e6:	2308      	movs	r3, #8
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4825      	ldr	r0, [pc, #148]	@ (8001894 <MX_GPIO_Init+0x1a4>)
 80017fe:	f000 fd1d 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001802:	2332      	movs	r3, #50	@ 0x32
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001806:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	481f      	ldr	r0, [pc, #124]	@ (8001894 <MX_GPIO_Init+0x1a4>)
 8001818:	f000 fd10 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4819      	ldr	r0, [pc, #100]	@ (8001898 <MX_GPIO_Init+0x1a8>)
 8001834:	f000 fd02 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800183c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <MX_GPIO_Init+0x1b0>)
 800184e:	f000 fcf5 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Audio_RST_Pin;
 8001852:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	480c      	ldr	r0, [pc, #48]	@ (800189c <MX_GPIO_Init+0x1ac>)
 800186c:	f000 fce6 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001870:	2320      	movs	r3, #32
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <MX_GPIO_Init+0x1ac>)
 8001884:	f000 fcda 	bl	800223c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	@ 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40021000 	.word	0x40021000
 8001898:	40020800 	.word	0x40020800
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	40020000 	.word	0x40020000

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <HAL_MspInit+0x4c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_MspInit+0x4c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f000 fc62 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <HAL_I2C_MspInit+0x84>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a17      	ldr	r2, [pc, #92]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800193e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001944:	2312      	movs	r3, #18
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001948:	2301      	movs	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001950:	2304      	movs	r3, #4
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <HAL_I2C_MspInit+0x8c>)
 800195c:	f000 fc6e 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 800196a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_I2C_MspInit+0x88>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	@ 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40005400 	.word	0x40005400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020400 	.word	0x40020400

08001990 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	@ 0x38
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a59      	ldr	r2, [pc, #356]	@ (8001b14 <HAL_I2S_MspInit+0x184>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d15c      	bne.n	8001a6c <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	4b58      	ldr	r3, [pc, #352]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a57      	ldr	r2, [pc, #348]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b55      	ldr	r3, [pc, #340]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a50      	ldr	r2, [pc, #320]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a49      	ldr	r2, [pc, #292]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a06:	2308      	movs	r3, #8
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a16:	2305      	movs	r3, #5
 8001a18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <HAL_I2S_MspInit+0x18c>)
 8001a22:	f000 fc0b 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001a26:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	4837      	ldr	r0, [pc, #220]	@ (8001b20 <HAL_I2S_MspInit+0x190>)
 8001a44:	f000 fbfa 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a62:	4619      	mov	r1, r3
 8001a64:	482e      	ldr	r0, [pc, #184]	@ (8001b20 <HAL_I2S_MspInit+0x190>)
 8001a66:	f000 fbe9 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a6a:	e04f      	b.n	8001b0c <HAL_I2S_MspInit+0x17c>
  else if(hi2s->Instance==SPI3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2c      	ldr	r2, [pc, #176]	@ (8001b24 <HAL_I2S_MspInit+0x194>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d14a      	bne.n	8001b0c <HAL_I2S_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a18      	ldr	r2, [pc, #96]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_I2S_MspInit+0x188>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001aca:	2310      	movs	r3, #16
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ada:	2306      	movs	r3, #6
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <HAL_I2S_MspInit+0x198>)
 8001ae6:	f000 fba9 	bl	800223c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001aea:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afc:	2306      	movs	r3, #6
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <HAL_I2S_MspInit+0x18c>)
 8001b08:	f000 fb98 	bl	800223c <HAL_GPIO_Init>
}
 8001b0c:	bf00      	nop
 8001b0e:	3738      	adds	r7, #56	@ 0x38
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40003800 	.word	0x40003800
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40003c00 	.word	0x40003c00
 8001b28:	40020000 	.word	0x40020000

08001b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <HAL_SPI_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b86:	23e0      	movs	r3, #224	@ 0xe0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_SPI_MspInit+0x8c>)
 8001ba2:	f000 fb4b 	bl	800223c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11e      	bne.n	8001c60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_TIM_MspPostInit+0x6c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_TIM_MspPostInit+0x6c>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_TIM_MspPostInit+0x6c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001c3e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <HAL_TIM_MspPostInit+0x70>)
 8001c5c:	f000 faee 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40000800 	.word	0x40000800
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020c00 	.word	0x40020c00

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <NMI_Handler+0x4>

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f961 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <OTG_FS_IRQHandler+0x10>)
 8001cda:	f002 fa6f 	bl	80041bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20001964 	.word	0x20001964

08001ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_kill>:

int _kill(int pid, int sig)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d02:	f00a fbd7 	bl	800c4b4 <__errno>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2216      	movs	r2, #22
 8001d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_exit>:

void _exit (int status)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffe7 	bl	8001cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <_exit+0x12>

08001d2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e00a      	b.n	8001d56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d40:	f3af 8000 	nop.w
 8001d44:	4601      	mov	r1, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	60ba      	str	r2, [r7, #8]
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbf0      	blt.n	8001d40 <_read+0x12>
  }

  return len;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e009      	b.n	8001d8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dbf1      	blt.n	8001d7a <_write+0x12>
  }
  return len;
 8001d96:	687b      	ldr	r3, [r7, #4]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_close>:

int _close(int file)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_isatty>:

int _isatty(int file)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f00a fb3c 	bl	800c4b4 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20020000 	.word	0x20020000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	20000464 	.word	0x20000464
 8001e70:	200021b8 	.word	0x200021b8

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <SystemInit+0x20>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <SystemInit+0x20>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e9c:	f7ff ffea 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f00a fafb 	bl	800c4c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7ff f95b 	bl	8001184 <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001edc:	0800e668 	.word	0x0800e668
  ldr r2, =_sbss
 8001ee0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001ee4:	200021b4 	.word	0x200021b4

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <HAL_Init+0x40>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_Init+0x40>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <HAL_Init+0x40>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f94f 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fcc6 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f967 	bl	8002222 <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f92f 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000468 	.word	0x20000468

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000468 	.word	0x20000468

08001fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff ffee 	bl	8001fb8 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_Delay+0x44>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff6:	bf00      	nop
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	@ (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	@ (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	@ 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff29 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff3e 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff31 	bl	800207c <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e159      	b.n	800250c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 8148 	bne.w	8002506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d005      	beq.n	800228e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	2b02      	cmp	r3, #2
 800228c:	d130      	bne.n	80022f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d017      	beq.n	800232c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d123      	bne.n	8002380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a2 	beq.w	8002506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <HAL_GPIO_Init+0x2e8>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a56      	ldr	r2, [pc, #344]	@ (8002524 <HAL_GPIO_Init+0x2e8>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b54      	ldr	r3, [pc, #336]	@ (8002524 <HAL_GPIO_Init+0x2e8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023de:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <HAL_GPIO_Init+0x2ec>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a49      	ldr	r2, [pc, #292]	@ (800252c <HAL_GPIO_Init+0x2f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x202>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a48      	ldr	r2, [pc, #288]	@ (8002530 <HAL_GPIO_Init+0x2f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x1fe>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a47      	ldr	r2, [pc, #284]	@ (8002534 <HAL_GPIO_Init+0x2f8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x1fa>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a46      	ldr	r2, [pc, #280]	@ (8002538 <HAL_GPIO_Init+0x2fc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x1f6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a45      	ldr	r2, [pc, #276]	@ (800253c <HAL_GPIO_Init+0x300>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x1f2>
 800242a:	2304      	movs	r3, #4
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800242e:	2307      	movs	r3, #7
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x204>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x204>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	@ (8002528 <HAL_GPIO_Init+0x2ec>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <HAL_GPIO_Init+0x304>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <HAL_GPIO_Init+0x304>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <HAL_GPIO_Init+0x304>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <HAL_GPIO_Init+0x304>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_GPIO_Init+0x304>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002540 <HAL_GPIO_Init+0x304>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_GPIO_Init+0x304>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <HAL_GPIO_Init+0x304>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f aea2 	bls.w	8002258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	041a      	lsls	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43d9      	mvns	r1, r3
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	400b      	ands	r3, r1
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e12b      	b.n	8002816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff f994 	bl	8001900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	@ 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800260e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002610:	f003 fb52 	bl	8005cb8 <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a81      	ldr	r2, [pc, #516]	@ (8002820 <HAL_I2C_Init+0x274>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d807      	bhi.n	8002630 <HAL_I2C_Init+0x84>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a80      	ldr	r2, [pc, #512]	@ (8002824 <HAL_I2C_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e006      	b.n	800263e <HAL_I2C_Init+0x92>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a7d      	ldr	r2, [pc, #500]	@ (8002828 <HAL_I2C_Init+0x27c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	bf94      	ite	ls
 8002638:	2301      	movls	r3, #1
 800263a:	2300      	movhi	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e7      	b.n	8002816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a78      	ldr	r2, [pc, #480]	@ (800282c <HAL_I2C_Init+0x280>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a6a      	ldr	r2, [pc, #424]	@ (8002820 <HAL_I2C_Init+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <HAL_I2C_Init+0xd4>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3301      	adds	r3, #1
 800267e:	e009      	b.n	8002694 <HAL_I2C_Init+0xe8>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <HAL_I2C_Init+0x284>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	495c      	ldr	r1, [pc, #368]	@ (8002820 <HAL_I2C_Init+0x274>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d819      	bhi.n	80026e8 <HAL_I2C_Init+0x13c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e59      	subs	r1, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026c8:	400b      	ands	r3, r1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_I2C_Init+0x138>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e59      	subs	r1, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	e051      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e4:	2304      	movs	r3, #4
 80026e6:	e04f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_I2C_Init+0x168>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e012      	b.n	800273a <HAL_I2C_Init+0x18e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x196>
 800273e:	2301      	movs	r3, #1
 8002740:	e022      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_I2C_Init+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e58      	subs	r0, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	fbb0 f3f3 	udiv	r3, r0, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6911      	ldr	r1, [r2, #16]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	000186a0 	.word	0x000186a0
 8002824:	001e847f 	.word	0x001e847f
 8002828:	003d08ff 	.word	0x003d08ff
 800282c:	431bde83 	.word	0x431bde83
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284e:	f7ff fbb3 	bl	8001fb8 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80d9 	bne.w	8002a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	496d      	ldr	r1, [pc, #436]	@ (8002a20 <HAL_I2C_Mem_Write+0x1ec>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc8b 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
 800287a:	e0cc      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2C_Mem_Write+0x56>
 8002886:	2302      	movs	r3, #2
 8002888:	e0c5      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2221      	movs	r2, #33	@ 0x21
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002a24 <HAL_I2C_Mem_Write+0x1f0>)
 80028f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	88f8      	ldrh	r0, [r7, #6]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fac2 	bl	8002e8c <I2C_RequestMemoryWrite>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d052      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e081      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fd50 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x180>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1aa      	bne.n	8002912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fd43 	bl	800344c <I2C_WaitOnBTFFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e016      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	@ 0x30
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff fab9 	bl	8001fb8 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 8214 	bne.w	8002e7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	497b      	ldr	r1, [pc, #492]	@ (8002c4c <HAL_I2C_Mem_Read+0x224>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fb91 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e207      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x56>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e200      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d007      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2222      	movs	r2, #34	@ 0x22
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	@ 0x40
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c50 <HAL_I2C_Mem_Read+0x228>)
 8002ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae6:	88f8      	ldrh	r0, [r7, #6]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa5e 	bl	8002fb8 <I2C_RequestMemoryRead>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1bc      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e190      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11b      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e170      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d11b      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	e150      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bcc:	e144      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	f200 80f1 	bhi.w	8002dba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d123      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fc79 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e145      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c26:	e117      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d14e      	bne.n	8002cce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	2200      	movs	r2, #0
 8002c38:	4906      	ldr	r1, [pc, #24]	@ (8002c54 <HAL_I2C_Mem_Read+0x22c>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 faa4 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e11a      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000
 8002c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ccc:	e0c4      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	496c      	ldr	r1, [pc, #432]	@ (8002e88 <HAL_I2C_Mem_Read+0x460>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa55 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cb      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	2200      	movs	r2, #0
 8002d32:	4955      	ldr	r1, [pc, #340]	@ (8002e88 <HAL_I2C_Mem_Read+0x460>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fa27 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e09d      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db8:	e04e      	b.n	8002e58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fb8c 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e058      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d124      	bne.n	8002e58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f aeb6 	bne.w	8002bce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3728      	adds	r7, #40	@ 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	00010004 	.word	0x00010004

08002e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f960 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002edc:	d103      	bne.n	8002ee6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e05f      	b.n	8002faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	492d      	ldr	r1, [pc, #180]	@ (8002fb4 <I2C_RequestMemoryWrite+0x128>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f9bb 	bl	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e04c      	b.n	8002faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa46 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e02b      	b.n	8002faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e021      	b.n	8002fa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f74:	6a39      	ldr	r1, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa20 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d107      	bne.n	8002f9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e005      	b.n	8002faa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	00010002 	.word	0x00010002

08002fb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f8c2 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003018:	d103      	bne.n	8003022 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0aa      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	4952      	ldr	r1, [pc, #328]	@ (8003184 <I2C_RequestMemoryRead+0x1cc>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f91d 	bl	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e097      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f9a8 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	2b04      	cmp	r3, #4
 8003078:	d107      	bne.n	800308a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e076      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e021      	b.n	80030e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f982 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e050      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030da:	893b      	ldrh	r3, [r7, #8]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f967 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e035      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2200      	movs	r2, #0
 8003128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f82b 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003146:	d103      	bne.n	8003150 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e013      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	4906      	ldr	r1, [pc, #24]	@ (8003184 <I2C_RequestMemoryRead+0x1cc>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f886 	bl	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00010002 	.word	0x00010002

08003188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	e048      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d044      	beq.n	800322c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe ff09 	bl	8001fb8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d139      	bne.n	800322c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10d      	bne.n	80031de <I2C_WaitOnFlagUntilTimeout+0x56>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	e00c      	b.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e023      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10d      	bne.n	8003252 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	43da      	mvns	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	e00c      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	429a      	cmp	r2, r3
 8003270:	d093      	beq.n	800319a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328a:	e071      	b.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d123      	bne.n	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e067      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d041      	beq.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ec:	f7fe fe64 	bl	8001fb8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d302      	bcc.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d136      	bne.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e00b      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e021      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10c      	bne.n	8003394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e00b      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f af6d 	bne.w	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c8:	e034      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8e3 	bl	8003596 <I2C_IsAcknowledgeFailed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e034      	b.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d028      	beq.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe fde9 	bl	8001fb8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11d      	bne.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b80      	cmp	r3, #128	@ 0x80
 8003404:	d016      	beq.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e007      	b.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b80      	cmp	r3, #128	@ 0x80
 8003440:	d1c3      	bne.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f89b 	bl	8003596 <I2C_IsAcknowledgeFailed>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e034      	b.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d028      	beq.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fda1 	bl	8001fb8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11d      	bne.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d1c3      	bne.n	800345a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e8:	e049      	b.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d119      	bne.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0210 	mvn.w	r2, #16
 8003500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e030      	b.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fe fd44 	bl	8001fb8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11d      	bne.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d016      	beq.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e007      	b.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	d1ae      	bne.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	d11b      	bne.n	80035e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e128      	b.n	8003858 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a90      	ldr	r2, [pc, #576]	@ (8003860 <HAL_I2S_Init+0x26c>)
 800361e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe f9b5 	bl	8001990 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800363c:	f023 030f 	bic.w	r3, r3, #15
 8003640:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d060      	beq.n	8003714 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800365a:	2310      	movs	r3, #16
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e001      	b.n	8003664 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003660:	2320      	movs	r3, #32
 8003662:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d802      	bhi.n	8003672 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003672:	2001      	movs	r0, #1
 8003674:	f002 fc24 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003678:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003682:	d125      	bne.n	80036d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fbb2 f2f3 	udiv	r2, r2, r3
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	3305      	adds	r3, #5
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e01f      	b.n	80036ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	3305      	adds	r3, #5
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e00e      	b.n	80036ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	461a      	mov	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	3305      	adds	r3, #5
 80036ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003864 <HAL_I2S_Init+0x270>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e003      	b.n	800371c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003714:	2302      	movs	r3, #2
 8003716:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d902      	bls.n	8003728 <HAL_I2S_Init+0x134>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2bff      	cmp	r3, #255	@ 0xff
 8003726:	d907      	bls.n	8003738 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	f043 0210 	orr.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e08f      	b.n	8003858 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	ea42 0103 	orr.w	r1, r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	430a      	orrs	r2, r1
 800374a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003756:	f023 030f 	bic.w	r3, r3, #15
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6851      	ldr	r1, [r2, #4]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68d2      	ldr	r2, [r2, #12]
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6992      	ldr	r2, [r2, #24]
 800376e:	430a      	orrs	r2, r1
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800377a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d161      	bne.n	8003848 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <HAL_I2S_Init+0x274>)
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a37      	ldr	r2, [pc, #220]	@ (800386c <HAL_I2S_Init+0x278>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_I2S_Init+0x1a4>
 8003794:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <HAL_I2S_Init+0x27c>)
 8003796:	e001      	b.n	800379c <HAL_I2S_Init+0x1a8>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4932      	ldr	r1, [pc, #200]	@ (800386c <HAL_I2S_Init+0x278>)
 80037a4:	428a      	cmp	r2, r1
 80037a6:	d101      	bne.n	80037ac <HAL_I2S_Init+0x1b8>
 80037a8:	4a31      	ldr	r2, [pc, #196]	@ (8003870 <HAL_I2S_Init+0x27c>)
 80037aa:	e001      	b.n	80037b0 <HAL_I2S_Init+0x1bc>
 80037ac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80037b0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <HAL_I2S_Init+0x278>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_I2S_Init+0x1d4>
 80037c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <HAL_I2S_Init+0x27c>)
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x1d8>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037cc:	2202      	movs	r2, #2
 80037ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a25      	ldr	r2, [pc, #148]	@ (800386c <HAL_I2S_Init+0x278>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_I2S_Init+0x1ea>
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <HAL_I2S_Init+0x27c>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2S_Init+0x1ee>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ee:	d003      	beq.n	80037f8 <HAL_I2S_Init+0x204>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e001      	b.n	8003804 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800380e:	4313      	orrs	r3, r2
 8003810:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003818:	4313      	orrs	r3, r2
 800381a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003822:	4313      	orrs	r3, r2
 8003824:	b29a      	uxth	r2, r3
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	4313      	orrs	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003830:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <HAL_I2S_Init+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_I2S_Init+0x24c>
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <HAL_I2S_Init+0x27c>)
 800383e:	e001      	b.n	8003844 <HAL_I2S_Init+0x250>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003844:	897a      	ldrh	r2, [r7, #10]
 8003846:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0800396b 	.word	0x0800396b
 8003864:	cccccccd 	.word	0xcccccccd
 8003868:	08003a81 	.word	0x08003a81
 800386c:	40003800 	.word	0x40003800
 8003870:	40003400 	.word	0x40003400

08003874 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10e      	bne.n	8003904 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffb8 	bl	8003874 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	b292      	uxth	r2, r2
 8003920:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10e      	bne.n	8003962 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003952:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff93 	bl	8003888 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b04      	cmp	r3, #4
 8003984:	d13a      	bne.n	80039fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d109      	bne.n	80039a4 <I2S_IRQHandler+0x3a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d102      	bne.n	80039a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffb4 	bl	800390c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d126      	bne.n	80039fc <I2S_IRQHandler+0x92>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d11f      	bne.n	80039fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ff50 	bl	800389c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d136      	bne.n	8003a76 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d109      	bne.n	8003a26 <I2S_IRQHandler+0xbc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	2b80      	cmp	r3, #128	@ 0x80
 8003a1e:	d102      	bne.n	8003a26 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff45 	bl	80038b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d122      	bne.n	8003a76 <I2S_IRQHandler+0x10c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d11b      	bne.n	8003a76 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff13 	bl	800389c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a92      	ldr	r2, [pc, #584]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a9a:	4b92      	ldr	r3, [pc, #584]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a9c:	e001      	b.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a8b      	ldr	r2, [pc, #556]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aba:	e001      	b.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003acc:	d004      	beq.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 8099 	bne.w	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d107      	bne.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f925 	bl	8003d3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9c8 	bl	8003e9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d13a      	bne.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d035      	beq.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b2c:	e001      	b.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4969      	ldr	r1, [pc, #420]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b3e:	4b69      	ldr	r3, [pc, #420]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b40:	e001      	b.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f043 0202 	orr.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fe88 	bl	800389c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	f040 80c3 	bne.w	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80bd 	beq.w	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a49      	ldr	r2, [pc, #292]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bbe:	4b49      	ldr	r3, [pc, #292]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bc0:	e001      	b.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4944      	ldr	r1, [pc, #272]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bce:	428b      	cmp	r3, r1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bd2:	4b44      	ldr	r3, [pc, #272]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd4:	e001      	b.n	8003bda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fe4a 	bl	800389c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c08:	e089      	b.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d107      	bne.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8be 	bl	8003da0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f8fd 	bl	8003e38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d12f      	bne.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02a      	beq.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c6e:	e001      	b.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4919      	ldr	r1, [pc, #100]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c82:	e001      	b.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f043 0202 	orr.w	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fdfa 	bl	800389c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d136      	bne.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d031      	beq.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a07      	ldr	r2, [pc, #28]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cc8:	e001      	b.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003cca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4902      	ldr	r1, [pc, #8]	@ (8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd6:	428b      	cmp	r3, r1
 8003cd8:	d106      	bne.n	8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cda:	4b02      	ldr	r3, [pc, #8]	@ (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cdc:	e006      	b.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cde:	bf00      	nop
 8003ce0:	40003800 	.word	0x40003800
 8003ce4:	40003400 	.word	0x40003400
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fdc0 	bl	800389c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1c:	e000      	b.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d1e:	bf00      	nop
}
 8003d20:	bf00      	nop
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	1c99      	adds	r1, r3, #2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d113      	bne.n	8003d96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ffc9 	bl	8003d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c99      	adds	r1, r3, #2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003db2:	8819      	ldrh	r1, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <I2SEx_TxISR_I2SExt+0x90>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <I2SEx_TxISR_I2SExt+0x22>
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <I2SEx_TxISR_I2SExt+0x94>)
 8003dc0:	e001      	b.n	8003dc6 <I2SEx_TxISR_I2SExt+0x26>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d121      	bne.n	8003e26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <I2SEx_TxISR_I2SExt+0x90>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <I2SEx_TxISR_I2SExt+0x50>
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <I2SEx_TxISR_I2SExt+0x94>)
 8003dee:	e001      	b.n	8003df4 <I2SEx_TxISR_I2SExt+0x54>
 8003df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	490d      	ldr	r1, [pc, #52]	@ (8003e30 <I2SEx_TxISR_I2SExt+0x90>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d101      	bne.n	8003e04 <I2SEx_TxISR_I2SExt+0x64>
 8003e00:	4b0c      	ldr	r3, [pc, #48]	@ (8003e34 <I2SEx_TxISR_I2SExt+0x94>)
 8003e02:	e001      	b.n	8003e08 <I2SEx_TxISR_I2SExt+0x68>
 8003e04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff81 	bl	8003d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40003800 	.word	0x40003800
 8003e34:	40003400 	.word	0x40003400

08003e38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68d8      	ldr	r0, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	1c99      	adds	r1, r3, #2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003e50:	b282      	uxth	r2, r0
 8003e52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d113      	bne.n	8003e94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff4a 	bl	8003d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	@ (8003f2c <I2SEx_RxISR_I2SExt+0x90>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <I2SEx_RxISR_I2SExt+0x16>
 8003eae:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <I2SEx_RxISR_I2SExt+0x94>)
 8003eb0:	e001      	b.n	8003eb6 <I2SEx_RxISR_I2SExt+0x1a>
 8003eb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eb6:	68d8      	ldr	r0, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	1c99      	adds	r1, r3, #2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003ec2:	b282      	uxth	r2, r0
 8003ec4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d121      	bne.n	8003f22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <I2SEx_RxISR_I2SExt+0x90>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <I2SEx_RxISR_I2SExt+0x50>
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <I2SEx_RxISR_I2SExt+0x94>)
 8003eea:	e001      	b.n	8003ef0 <I2SEx_RxISR_I2SExt+0x54>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	490d      	ldr	r1, [pc, #52]	@ (8003f2c <I2SEx_RxISR_I2SExt+0x90>)
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	d101      	bne.n	8003f00 <I2SEx_RxISR_I2SExt+0x64>
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <I2SEx_RxISR_I2SExt+0x94>)
 8003efe:	e001      	b.n	8003f04 <I2SEx_RxISR_I2SExt+0x68>
 8003f00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff03 	bl	8003d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40003800 	.word	0x40003800
 8003f30:	40003400 	.word	0x40003400

08003f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e101      	b.n	800414a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f007 f9df 	bl	800b324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fd6c 	bl	8007a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7c1a      	ldrb	r2, [r3, #16]
 8003f8e:	f88d 2000 	strb.w	r2, [sp]
 8003f92:	3304      	adds	r3, #4
 8003f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f96:	f003 fc4b 	bl	8007830 <USB_CoreInit>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0ce      	b.n	800414a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 fd64 	bl	8007a80 <USB_SetCurrentMode>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0bf      	b.n	800414a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e04a      	b.n	8004066 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3315      	adds	r3, #21
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	b298      	uxth	r0, r3
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	332e      	adds	r3, #46	@ 0x2e
 800400c:	4602      	mov	r2, r0
 800400e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	3318      	adds	r3, #24
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	331c      	adds	r3, #28
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	3320      	adds	r3, #32
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3324      	adds	r3, #36	@ 0x24
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3301      	adds	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	791b      	ldrb	r3, [r3, #4]
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	429a      	cmp	r2, r3
 800406e:	d3af      	bcc.n	8003fd0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	e044      	b.n	8004100 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040ce:	7bfa      	ldrb	r2, [r7, #15]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	3301      	adds	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	791b      	ldrb	r3, [r3, #4]
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3b5      	bcc.n	8004076 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7c1a      	ldrb	r2, [r3, #16]
 8004112:	f88d 2000 	strb.w	r2, [sp]
 8004116:	3304      	adds	r3, #4
 8004118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800411a:	f003 fcfd 	bl	8007b18 <USB_DevInit>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e00c      	b.n	800414a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fd47 	bl	8008bd6 <USB_DevDisconnect>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_PCD_Start+0x1c>
 800416a:	2302      	movs	r3, #2
 800416c:	e022      	b.n	80041b4 <HAL_PCD_Start+0x62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f003 fc4e 	bl	8007a3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 fcf5 	bl	8008b94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b08d      	sub	sp, #52	@ 0x34
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fdb3 	bl	8008d3e <USB_GetMode>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 848c 	bne.w	8004af8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fd17 	bl	8008c18 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8482 	beq.w	8004af6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fd04 	bl	8008c18 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d107      	bne.n	800422a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 0202 	and.w	r2, r2, #2
 8004228:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f004 fcf2 	bl	8008c18 <USB_ReadInterrupts>
 8004234:	4603      	mov	r3, r0
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d161      	bne.n	8004302 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0210 	bic.w	r2, r2, #16
 800424c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	3304      	adds	r3, #4
 800426c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	0c5b      	lsrs	r3, r3, #17
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2b02      	cmp	r3, #2
 8004278:	d124      	bne.n	80042c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d035      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6a38      	ldr	r0, [r7, #32]
 800429a:	f004 fb29 	bl	80088f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042aa:	441a      	add	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042bc:	441a      	add	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	615a      	str	r2, [r3, #20]
 80042c2:	e016      	b.n	80042f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	0c5b      	lsrs	r3, r3, #17
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2b06      	cmp	r3, #6
 80042ce:	d110      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042d6:	2208      	movs	r2, #8
 80042d8:	4619      	mov	r1, r3
 80042da:	6a38      	ldr	r0, [r7, #32]
 80042dc:	f004 fb08 	bl	80088f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ec:	441a      	add	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0210 	orr.w	r2, r2, #16
 8004300:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fc86 	bl	8008c18 <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004312:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004316:	f040 80a7 	bne.w	8004468 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fc8b 	bl	8008c3e <USB_ReadDevAllOutEpInterrupt>
 8004328:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800432a:	e099      	b.n	8004460 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 808e 	beq.w	8004454 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f004 fcaf 	bl	8008ca6 <USB_ReadDevOutEPInterrupt>
 8004348:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	2301      	movs	r3, #1
 8004364:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004366:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fea3 	bl	80050b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004384:	461a      	mov	r2, r3
 8004386:	2308      	movs	r3, #8
 8004388:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800438a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 ff79 	bl	8005284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	2310      	movs	r3, #16
 80043ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d030      	beq.n	800441a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b80      	cmp	r3, #128	@ 0x80
 80043c2:	d109      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	78db      	ldrb	r3, [r3, #3]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d108      	bne.n	8004408 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f007 f898 	bl	800b538 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004414:	461a      	mov	r2, r3
 8004416:	2302      	movs	r3, #2
 8004418:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2320      	movs	r3, #32
 8004434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444c:	461a      	mov	r2, r3
 800444e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004452:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	3301      	adds	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	f47f af62 	bne.w	800432c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f004 fbd3 	bl	8008c18 <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004478:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800447c:	f040 80db 	bne.w	8004636 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fbf4 	bl	8008c72 <USB_ReadDevAllInEpInterrupt>
 800448a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004490:	e0cd      	b.n	800462e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80c2 	beq.w	8004622 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f004 fc1a 	bl	8008ce2 <USB_ReadDevInEPInterrupt>
 80044ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d057      	beq.n	800456a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2201      	movs	r2, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044da:	4013      	ands	r3, r2
 80044dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ea:	461a      	mov	r2, r3
 80044ec:	2301      	movs	r3, #1
 80044ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	799b      	ldrb	r3, [r3, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d132      	bne.n	800455e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3320      	adds	r3, #32
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4403      	add	r3, r0
 8004518:	331c      	adds	r3, #28
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4419      	add	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4403      	add	r3, r0
 800452c:	3320      	adds	r3, #32
 800452e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d113      	bne.n	800455e <HAL_PCD_IRQHandler+0x3a2>
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3324      	adds	r3, #36	@ 0x24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004556:	461a      	mov	r2, r3
 8004558:	2101      	movs	r1, #1
 800455a:	f004 fc21 	bl	8008da0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	b2db      	uxtb	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f006 ff6c 	bl	800b442 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004580:	461a      	mov	r2, r3
 8004582:	2308      	movs	r3, #8
 8004584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	2310      	movs	r3, #16
 80045a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	461a      	mov	r2, r3
 80045ba:	2340      	movs	r3, #64	@ 0x40
 80045bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d023      	beq.n	8004610 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80045c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ca:	6a38      	ldr	r0, [r7, #32]
 80045cc:	f003 fc08 	bl	8007de0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80045d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	3310      	adds	r3, #16
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	3304      	adds	r3, #4
 80045e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f006 ffaf 	bl	800b55c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460a:	461a      	mov	r2, r3
 800460c:	2302      	movs	r3, #2
 800460e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800461a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fcbd 	bl	8004f9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	3301      	adds	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af2e 	bne.w	8004492 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 faec 	bl	8008c18 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800464a:	d122      	bne.n	8004692 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004666:	2b01      	cmp	r3, #1
 8004668:	d108      	bne.n	800467c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004672:	2100      	movs	r1, #0
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fea3 	bl	80053c0 <HAL_PCDEx_LPM_Callback>
 800467a:	e002      	b.n	8004682 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f006 ff4d 	bl	800b51c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fabe 	bl	8008c18 <USB_ReadInterrupts>
 800469c:	4603      	mov	r3, r0
 800469e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a6:	d112      	bne.n	80046ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d102      	bne.n	80046be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f006 ff09 	bl	800b4d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80046cc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f004 faa0 	bl	8008c18 <USB_ReadInterrupts>
 80046d8:	4603      	mov	r3, r0
 80046da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e2:	f040 80b7 	bne.w	8004854 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2110      	movs	r1, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f003 fb6d 	bl	8007de0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470a:	e046      	b.n	800479a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800470c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004718:	461a      	mov	r2, r3
 800471a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800471e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800473a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800473e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004752:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800476e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004772:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800478e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004792:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	3301      	adds	r3, #1
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d3b2      	bcc.n	800470c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80047b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7bdb      	ldrb	r3, [r3, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d2:	f043 030b 	orr.w	r3, r3, #11
 80047d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e8:	f043 030b 	orr.w	r3, r3, #11
 80047ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ee:	e015      	b.n	800481c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004802:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004806:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004816:	f043 030b 	orr.w	r3, r3, #11
 800481a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800482a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800482e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800483e:	461a      	mov	r2, r3
 8004840:	f004 faae 	bl	8008da0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f004 f9dd 	bl	8008c18 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004868:	d123      	bne.n	80048b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fa73 	bl	8008d5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f003 fb2a 	bl	8007ed2 <USB_GetDevSpeed>
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681c      	ldr	r4, [r3, #0]
 800488a:	f001 fa09 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 800488e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004894:	461a      	mov	r2, r3
 8004896:	4620      	mov	r0, r4
 8004898:	f003 f82e 	bl	80078f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f006 fdf8 	bl	800b492 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80048b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 f9ae 	bl	8008c18 <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10a      	bne.n	80048dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f006 fdd5 	bl	800b476 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f002 0208 	and.w	r2, r2, #8
 80048da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f004 f999 	bl	8008c18 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ec:	2b80      	cmp	r3, #128	@ 0x80
 80048ee:	d123      	bne.n	8004938 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048fc:	2301      	movs	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004900:	e014      	b.n	800492c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fb0a 	bl	8004f3a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	3301      	adds	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	461a      	mov	r2, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	4293      	cmp	r3, r2
 8004936:	d3e4      	bcc.n	8004902 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f004 f96b 	bl	8008c18 <USB_ReadInterrupts>
 8004942:	4603      	mov	r3, r0
 8004944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494c:	d13c      	bne.n	80049c8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800494e:	2301      	movs	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
 8004952:	e02b      	b.n	80049ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	3318      	adds	r3, #24
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d115      	bne.n	80049a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800497a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	da12      	bge.n	80049a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	3317      	adds	r3, #23
 8004990:	2201      	movs	r2, #1
 8004992:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 faca 	bl	8004f3a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	3301      	adds	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d3cd      	bcc.n	8004954 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80049c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f004 f923 	bl	8008c18 <USB_ReadInterrupts>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049dc:	d156      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049de:	2301      	movs	r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e2:	e045      	b.n	8004a70 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d12e      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da2b      	bge.n	8004a6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004a1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d121      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a66:	6053      	str	r3, [r2, #4]
            break;
 8004a68:	e008      	b.n	8004a7c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	791b      	ldrb	r3, [r3, #4]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d3b3      	bcc.n	80049e4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 f8c1 	bl	8008c18 <USB_ReadInterrupts>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d10a      	bne.n	8004ab8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f006 fd6c 	bl	800b580 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f004 f8ab 	bl	8008c18 <USB_ReadInterrupts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d115      	bne.n	8004af8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f006 fd5c 	bl	800b59c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e000      	b.n	8004af8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004af6:	bf00      	nop
    }
  }
}
 8004af8:	3734      	adds	r7, #52	@ 0x34
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}

08004afe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_PCD_SetAddress+0x1a>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e012      	b.n	8004b3e <HAL_PCD_SetAddress+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 f80a 	bl	8008b48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	461a      	mov	r2, r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	70fb      	strb	r3, [r7, #3]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	803b      	strh	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0f      	bge.n	8004b8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	705a      	strb	r2, [r3, #1]
 8004b8a:	e00f      	b.n	8004bac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004bb8:	883b      	ldrh	r3, [r7, #0]
 8004bba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	78ba      	ldrb	r2, [r7, #2]
 8004bc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bda:	78bb      	ldrb	r3, [r7, #2]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d102      	bne.n	8004be6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_PCD_EP_Open+0xae>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e00e      	b.n	8004c12 <HAL_PCD_EP_Open+0xcc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 f98a 	bl	8007f1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004c10:	7afb      	ldrb	r3, [r7, #11]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da0f      	bge.n	8004c4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	3304      	adds	r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	705a      	strb	r2, [r3, #1]
 8004c4c:	e00f      	b.n	8004c6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	3304      	adds	r3, #4
 8004c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_PCD_EP_Close+0x6e>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e00e      	b.n	8004ca6 <HAL_PCD_EP_Close+0x8c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 f9c8 	bl	800802c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	799b      	ldrb	r3, [r3, #6]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d102      	bne.n	8004d0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	799b      	ldrb	r3, [r3, #6]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6979      	ldr	r1, [r7, #20]
 8004d16:	f003 fa65 	bl	80081e4 <USB_EPStartXfer>

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	460b      	mov	r3, r1
 8004d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	f003 020f 	and.w	r2, r3, #15
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	3310      	adds	r3, #16
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2201      	movs	r2, #1
 8004d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	799b      	ldrb	r3, [r3, #6]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d102      	bne.n	8004dae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	799b      	ldrb	r3, [r3, #6]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	f003 fa13 	bl	80081e4 <USB_EPStartXfer>

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	7912      	ldrb	r2, [r2, #4]
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e04f      	b.n	8004e86 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da0f      	bge.n	8004e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	3304      	adds	r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	705a      	strb	r2, [r3, #1]
 8004e0c:	e00d      	b.n	8004e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_PCD_EP_SetStall+0x82>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e01d      	b.n	8004e86 <HAL_PCD_EP_SetStall+0xbe>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f003 fda1 	bl	80089a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7999      	ldrb	r1, [r3, #6]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e76:	461a      	mov	r2, r3
 8004e78:	f003 ff92 	bl	8008da0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	7912      	ldrb	r2, [r2, #4]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e042      	b.n	8004f32 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da0f      	bge.n	8004ed4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	f003 020f 	and.w	r2, r3, #15
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3304      	adds	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	705a      	strb	r2, [r3, #1]
 8004ed2:	e00f      	b.n	8004ef4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_PCD_EP_ClrStall+0x86>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e00e      	b.n	8004f32 <HAL_PCD_EP_ClrStall+0xa4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f003 fdaa 	bl	8008a7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da0c      	bge.n	8004f68 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	3310      	adds	r3, #16
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	3304      	adds	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e00c      	b.n	8004f82 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3304      	adds	r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fbc9 	bl	8008720 <USB_EPStopXfer>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f92:	7afb      	ldrb	r3, [r7, #11]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	@ 0x28
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3310      	adds	r3, #16
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d901      	bls.n	8004fd4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e06b      	b.n	80050ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d902      	bls.n	8004ff0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3303      	adds	r3, #3
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ff8:	e02a      	b.n	8005050 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	429a      	cmp	r2, r3
 800500e:	d902      	bls.n	8005016 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3303      	adds	r3, #3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4603      	mov	r3, r0
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f003 fc1e 	bl	8008874 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	441a      	add	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	429a      	cmp	r2, r3
 8005064:	d809      	bhi.n	800507a <PCD_WriteEmptyTxFifo+0xde>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800506e:	429a      	cmp	r2, r3
 8005070:	d203      	bcs.n	800507a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1bf      	bne.n	8004ffa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	429a      	cmp	r2, r3
 8005084:	d811      	bhi.n	80050aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2201      	movs	r2, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	43db      	mvns	r3, r3
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050a6:	4013      	ands	r3, r2
 80050a8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	333c      	adds	r3, #60	@ 0x3c
 80050cc:	3304      	adds	r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	799b      	ldrb	r3, [r3, #6]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d17b      	bne.n	80051e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d015      	beq.n	8005120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4a61      	ldr	r2, [pc, #388]	@ (800527c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	f240 80b9 	bls.w	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80b3 	beq.w	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511c:	6093      	str	r3, [r2, #8]
 800511e:	e0a7      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005136:	461a      	mov	r2, r3
 8005138:	2320      	movs	r3, #32
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	e098      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	f040 8093 	bne.w	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4a4b      	ldr	r2, [pc, #300]	@ (800527c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d90f      	bls.n	8005172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	6093      	str	r3, [r2, #8]
 8005170:	e07e      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	0159      	lsls	r1, r3, #5
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	440b      	add	r3, r1
 8005194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d114      	bne.n	80051d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051bc:	461a      	mov	r2, r3
 80051be:	2101      	movs	r1, #1
 80051c0:	f003 fdee 	bl	8008da0 <USB_EP0_OutStart>
 80051c4:	e006      	b.n	80051d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	441a      	add	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f006 f916 	bl	800b40c <HAL_PCD_DataOutStageCallback>
 80051e0:	e046      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4a26      	ldr	r2, [pc, #152]	@ (8005280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d124      	bne.n	8005234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005206:	6093      	str	r3, [r2, #8]
 8005208:	e032      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	2320      	movs	r3, #32
 8005224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f006 f8ed 	bl	800b40c <HAL_PCD_DataOutStageCallback>
 8005232:	e01d      	b.n	8005270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d114      	bne.n	8005264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800525c:	461a      	mov	r2, r3
 800525e:	2100      	movs	r1, #0
 8005260:	f003 fd9e 	bl	8008da0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f006 f8ce 	bl	800b40c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	4f54300a 	.word	0x4f54300a
 8005280:	4f54310a 	.word	0x4f54310a

08005284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	333c      	adds	r3, #60	@ 0x3c
 800529c:	3304      	adds	r3, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a15      	ldr	r2, [pc, #84]	@ (800530c <PCD_EP_OutSetupPacket_int+0x88>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d90e      	bls.n	80052d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d0:	461a      	mov	r2, r3
 80052d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f006 f885 	bl	800b3e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <PCD_EP_OutSetupPacket_int+0x88>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d90c      	bls.n	8005300 <PCD_EP_OutSetupPacket_int+0x7c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	799b      	ldrb	r3, [r3, #6]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d108      	bne.n	8005300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052f8:	461a      	mov	r2, r3
 80052fa:	2101      	movs	r1, #1
 80052fc:	f003 fd50 	bl	8008da0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	4f54300a 	.word	0x4f54300a

08005310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
 800531c:	4613      	mov	r3, r2
 800531e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800532e:	883b      	ldrh	r3, [r7, #0]
 8005330:	0419      	lsls	r1, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	430a      	orrs	r2, r1
 800533a:	629a      	str	r2, [r3, #40]	@ 0x28
 800533c:	e028      	b.n	8005390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800534c:	2300      	movs	r3, #0
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e00d      	b.n	800536e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	3340      	adds	r3, #64	@ 0x40
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	3301      	adds	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b01      	subs	r3, #1
 8005374:	429a      	cmp	r2, r3
 8005376:	d3ec      	bcc.n	8005352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005378:	883b      	ldrh	r3, [r7, #0]
 800537a:	0418      	lsls	r0, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	3b01      	subs	r3, #1
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	4302      	orrs	r2, r0
 8005388:	3340      	adds	r3, #64	@ 0x40
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e267      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d075      	beq.n	80054e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053f6:	4b88      	ldr	r3, [pc, #544]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d00c      	beq.n	800541c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005402:	4b85      	ldr	r3, [pc, #532]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800540a:	2b08      	cmp	r3, #8
 800540c:	d112      	bne.n	8005434 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540e:	4b82      	ldr	r3, [pc, #520]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541a:	d10b      	bne.n	8005434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541c:	4b7e      	ldr	r3, [pc, #504]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d05b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x108>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d157      	bne.n	80054e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e242      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d106      	bne.n	800544c <HAL_RCC_OscConfig+0x74>
 800543e:	4b76      	ldr	r3, [pc, #472]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a75      	ldr	r2, [pc, #468]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e01d      	b.n	8005488 <HAL_RCC_OscConfig+0xb0>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0x98>
 8005456:	4b70      	ldr	r3, [pc, #448]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6f      	ldr	r2, [pc, #444]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b6d      	ldr	r3, [pc, #436]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6c      	ldr	r2, [pc, #432]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e00b      	b.n	8005488 <HAL_RCC_OscConfig+0xb0>
 8005470:	4b69      	ldr	r3, [pc, #420]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a68      	ldr	r2, [pc, #416]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	4b66      	ldr	r3, [pc, #408]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a65      	ldr	r2, [pc, #404]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d013      	beq.n	80054b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fc fd92 	bl	8001fb8 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005498:	f7fc fd8e 	bl	8001fb8 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	@ 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e207      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0xc0>
 80054b6:	e014      	b.n	80054e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b8:	f7fc fd7e 	bl	8001fb8 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c0:	f7fc fd7a 	bl	8001fb8 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	@ 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e1f3      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d2:	4b51      	ldr	r3, [pc, #324]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0xe8>
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d063      	beq.n	80055b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fa:	4b47      	ldr	r3, [pc, #284]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005502:	2b08      	cmp	r3, #8
 8005504:	d11c      	bne.n	8005540 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005506:	4b44      	ldr	r3, [pc, #272]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d116      	bne.n	8005540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005512:	4b41      	ldr	r3, [pc, #260]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_RCC_OscConfig+0x152>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e1c7      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b3b      	ldr	r3, [pc, #236]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4937      	ldr	r1, [pc, #220]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553e:	e03a      	b.n	80055b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005548:	4b34      	ldr	r3, [pc, #208]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fc fd33 	bl	8001fb8 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005556:	f7fc fd2f 	bl	8001fb8 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e1a8      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005568:	4b2b      	ldr	r3, [pc, #172]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005574:	4b28      	ldr	r3, [pc, #160]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4925      	ldr	r1, [pc, #148]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]
 8005588:	e015      	b.n	80055b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fc fd12 	bl	8001fb8 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005598:	f7fc fd0e 	bl	8001fb8 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e187      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d036      	beq.n	8005630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d016      	beq.n	80055f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ca:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <HAL_RCC_OscConfig+0x248>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fc fcf2 	bl	8001fb8 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d8:	f7fc fcee 	bl	8001fb8 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e167      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCC_OscConfig+0x240>)
 80055ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x200>
 80055f6:	e01b      	b.n	8005630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f8:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <HAL_RCC_OscConfig+0x248>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fe:	f7fc fcdb 	bl	8001fb8 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005604:	e00e      	b.n	8005624 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fc fcd7 	bl	8001fb8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d907      	bls.n	8005624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e150      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
 8005618:	40023800 	.word	0x40023800
 800561c:	42470000 	.word	0x42470000
 8005620:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005624:	4b88      	ldr	r3, [pc, #544]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ea      	bne.n	8005606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8097 	beq.w	800576c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005642:	4b81      	ldr	r3, [pc, #516]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	4b7d      	ldr	r3, [pc, #500]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	4a7c      	ldr	r2, [pc, #496]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800565c:	6413      	str	r3, [r2, #64]	@ 0x40
 800565e:	4b7a      	ldr	r3, [pc, #488]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b77      	ldr	r3, [pc, #476]	@ (800584c <HAL_RCC_OscConfig+0x474>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d118      	bne.n	80056ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567a:	4b74      	ldr	r3, [pc, #464]	@ (800584c <HAL_RCC_OscConfig+0x474>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a73      	ldr	r2, [pc, #460]	@ (800584c <HAL_RCC_OscConfig+0x474>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005686:	f7fc fc97 	bl	8001fb8 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7fc fc93 	bl	8001fb8 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e10c      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a0:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCC_OscConfig+0x474>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x2ea>
 80056b4:	4b64      	ldr	r3, [pc, #400]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a63      	ldr	r2, [pc, #396]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c0:	e01c      	b.n	80056fc <HAL_RCC_OscConfig+0x324>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x30c>
 80056ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056da:	4a5b      	ldr	r2, [pc, #364]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0x324>
 80056e4:	4b58      	ldr	r3, [pc, #352]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e8:	4a57      	ldr	r2, [pc, #348]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f0:	4b55      	ldr	r3, [pc, #340]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f4:	4a54      	ldr	r2, [pc, #336]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80056f6:	f023 0304 	bic.w	r3, r3, #4
 80056fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc fc58 	bl	8001fb8 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570a:	e00a      	b.n	8005722 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570c:	f7fc fc54 	bl	8001fb8 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0cb      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	4b49      	ldr	r3, [pc, #292]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ee      	beq.n	800570c <HAL_RCC_OscConfig+0x334>
 800572e:	e014      	b.n	800575a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005730:	f7fc fc42 	bl	8001fb8 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005736:	e00a      	b.n	800574e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fc fc3e 	bl	8001fb8 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0b5      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	4b3e      	ldr	r3, [pc, #248]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ee      	bne.n	8005738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b39      	ldr	r3, [pc, #228]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	4a38      	ldr	r2, [pc, #224]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800576a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80a1 	beq.w	80058b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005776:	4b34      	ldr	r3, [pc, #208]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b08      	cmp	r3, #8
 8005780:	d05c      	beq.n	800583c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d141      	bne.n	800580e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578a:	4b31      	ldr	r3, [pc, #196]	@ (8005850 <HAL_RCC_OscConfig+0x478>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fc fc12 	bl	8001fb8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fc fc0e 	bl	8001fb8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e087      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	3b01      	subs	r3, #1
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	491b      	ldr	r1, [pc, #108]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <HAL_RCC_OscConfig+0x478>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e6:	f7fc fbe7 	bl	8001fb8 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ee:	f7fc fbe3 	bl	8001fb8 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e05c      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005800:	4b11      	ldr	r3, [pc, #68]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x416>
 800580c:	e054      	b.n	80058b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b10      	ldr	r3, [pc, #64]	@ (8005850 <HAL_RCC_OscConfig+0x478>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fc fbd0 	bl	8001fb8 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581c:	f7fc fbcc 	bl	8001fb8 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e045      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582e:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <HAL_RCC_OscConfig+0x470>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x444>
 800583a:	e03d      	b.n	80058b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d107      	bne.n	8005854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e038      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
 8005848:	40023800 	.word	0x40023800
 800584c:	40007000 	.word	0x40007000
 8005850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x4ec>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d028      	beq.n	80058b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d121      	bne.n	80058b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d11a      	bne.n	80058b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800588a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800588c:	4293      	cmp	r3, r2
 800588e:	d111      	bne.n	80058b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	3b01      	subs	r3, #1
 800589e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800

080058c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0cc      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058dc:	4b68      	ldr	r3, [pc, #416]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d90c      	bls.n	8005904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b65      	ldr	r3, [pc, #404]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b63      	ldr	r3, [pc, #396]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0b8      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800591c:	4b59      	ldr	r3, [pc, #356]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a58      	ldr	r2, [pc, #352]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005934:	4b53      	ldr	r3, [pc, #332]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a52      	ldr	r2, [pc, #328]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800593e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005940:	4b50      	ldr	r3, [pc, #320]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	494d      	ldr	r1, [pc, #308]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d044      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	4b47      	ldr	r3, [pc, #284]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d119      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e07f      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d003      	beq.n	8005986 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005986:	4b3f      	ldr	r3, [pc, #252]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e06f      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005996:	4b3b      	ldr	r3, [pc, #236]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e067      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059a6:	4b37      	ldr	r3, [pc, #220]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f023 0203 	bic.w	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4934      	ldr	r1, [pc, #208]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059b8:	f7fc fafe 	bl	8001fb8 <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c0:	f7fc fafa 	bl	8001fb8 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e04f      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 020c 	and.w	r2, r3, #12
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1eb      	bne.n	80059c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059e8:	4b25      	ldr	r3, [pc, #148]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d20c      	bcs.n	8005a10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e032      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a1c:	4b19      	ldr	r3, [pc, #100]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4916      	ldr	r1, [pc, #88]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3a:	4b12      	ldr	r3, [pc, #72]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	490e      	ldr	r1, [pc, #56]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a4e:	f000 f821 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005a52:	4602      	mov	r2, r0
 8005a54:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	490a      	ldr	r1, [pc, #40]	@ (8005a88 <HAL_RCC_ClockConfig+0x1c0>)
 8005a60:	5ccb      	ldrb	r3, [r1, r3]
 8005a62:	fa22 f303 	lsr.w	r3, r2, r3
 8005a66:	4a09      	ldr	r2, [pc, #36]	@ (8005a8c <HAL_RCC_ClockConfig+0x1c4>)
 8005a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a6a:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fc fa5e 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023c00 	.word	0x40023c00
 8005a84:	40023800 	.word	0x40023800
 8005a88:	0800e2d0 	.word	0x0800e2d0
 8005a8c:	20000000 	.word	0x20000000
 8005a90:	20000004 	.word	0x20000004

08005a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a98:	b094      	sub	sp, #80	@ 0x50
 8005a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aac:	4b79      	ldr	r3, [pc, #484]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d00d      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	f200 80e1 	bhi.w	8005c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d003      	beq.n	8005ace <HAL_RCC_GetSysClockFreq+0x3a>
 8005ac6:	e0db      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ac8:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005acc:	e0db      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ace:	4b73      	ldr	r3, [pc, #460]	@ (8005c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ad2:	e0d8      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ade:	4b6d      	ldr	r3, [pc, #436]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d063      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aea:	4b6a      	ldr	r3, [pc, #424]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	2200      	movs	r2, #0
 8005af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b06:	4622      	mov	r2, r4
 8005b08:	462b      	mov	r3, r5
 8005b0a:	f04f 0000 	mov.w	r0, #0
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	0159      	lsls	r1, r3, #5
 8005b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b18:	0150      	lsls	r0, r2, #5
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4621      	mov	r1, r4
 8005b20:	1a51      	subs	r1, r2, r1
 8005b22:	6139      	str	r1, [r7, #16]
 8005b24:	4629      	mov	r1, r5
 8005b26:	eb63 0301 	sbc.w	r3, r3, r1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b38:	4659      	mov	r1, fp
 8005b3a:	018b      	lsls	r3, r1, #6
 8005b3c:	4651      	mov	r1, sl
 8005b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b42:	4651      	mov	r1, sl
 8005b44:	018a      	lsls	r2, r1, #6
 8005b46:	4651      	mov	r1, sl
 8005b48:	ebb2 0801 	subs.w	r8, r2, r1
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b66:	4690      	mov	r8, r2
 8005b68:	4699      	mov	r9, r3
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	eb18 0303 	adds.w	r3, r8, r3
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	462b      	mov	r3, r5
 8005b74:	eb49 0303 	adc.w	r3, r9, r3
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b86:	4629      	mov	r1, r5
 8005b88:	024b      	lsls	r3, r1, #9
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b90:	4621      	mov	r1, r4
 8005b92:	024a      	lsls	r2, r1, #9
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ba4:	f7fb f808 	bl	8000bb8 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb0:	e058      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb2:	4b38      	ldr	r3, [pc, #224]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	f04f 0000 	mov.w	r0, #0
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	0159      	lsls	r1, r3, #5
 8005bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bde:	0150      	lsls	r0, r2, #5
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4641      	mov	r1, r8
 8005be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bea:	4649      	mov	r1, r9
 8005bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c04:	ebb2 040a 	subs.w	r4, r2, sl
 8005c08:	eb63 050b 	sbc.w	r5, r3, fp
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	00eb      	lsls	r3, r5, #3
 8005c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c1a:	00e2      	lsls	r2, r4, #3
 8005c1c:	4614      	mov	r4, r2
 8005c1e:	461d      	mov	r5, r3
 8005c20:	4643      	mov	r3, r8
 8005c22:	18e3      	adds	r3, r4, r3
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	464b      	mov	r3, r9
 8005c28:	eb45 0303 	adc.w	r3, r5, r3
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	028b      	lsls	r3, r1, #10
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c44:	4621      	mov	r1, r4
 8005c46:	028a      	lsls	r2, r1, #10
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	61fa      	str	r2, [r7, #28]
 8005c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c58:	f7fa ffae 	bl	8000bb8 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c64:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c7e:	e002      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c80:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3750      	adds	r7, #80	@ 0x50
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c92:	bf00      	nop
 8005c94:	40023800 	.word	0x40023800
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	007a1200 	.word	0x007a1200

08005ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cbc:	f7ff fff0 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	0a9b      	lsrs	r3, r3, #10
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	4903      	ldr	r1, [pc, #12]	@ (8005cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cce:	5ccb      	ldrb	r3, [r1, r3]
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	0800e2e0 	.word	0x0800e2e0

08005ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d038      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d08:	4b68      	ldr	r3, [pc, #416]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0e:	f7fc f953 	bl	8001fb8 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d16:	f7fc f94f 	bl	8001fb8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0bd      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d28:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f0      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	495a      	ldr	r1, [pc, #360]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d4e:	4b57      	ldr	r3, [pc, #348]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d54:	f7fc f930 	bl	8001fb8 <HAL_GetTick>
 8005d58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d5c:	f7fc f92c 	bl	8001fb8 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e09a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d6e:	4b50      	ldr	r3, [pc, #320]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8083 	beq.w	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	4b48      	ldr	r3, [pc, #288]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	4a47      	ldr	r2, [pc, #284]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d98:	4b45      	ldr	r3, [pc, #276]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005da4:	4b43      	ldr	r3, [pc, #268]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a42      	ldr	r2, [pc, #264]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005db0:	f7fc f902 	bl	8001fb8 <HAL_GetTick>
 8005db4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db8:	f7fc f8fe 	bl	8001fb8 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e06c      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005dca:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd6:	4b36      	ldr	r3, [pc, #216]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dde:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02f      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d028      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df4:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dfc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e04:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e0a:	4a29      	ldr	r2, [pc, #164]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e10:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d114      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fc f8cc 	bl	8001fb8 <HAL_GetTick>
 8005e20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e22:	e00a      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fc f8c8 	bl	8001fb8 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e034      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0ee      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e52:	d10d      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005e54:	4b16      	ldr	r3, [pc, #88]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e68:	4911      	ldr	r1, [pc, #68]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
 8005e6e:	e005      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005e70:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e7a:	6093      	str	r3, [r2, #8]
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e88:	4909      	ldr	r1, [pc, #36]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7d1a      	ldrb	r2, [r3, #20]
 8005e9e:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005ea0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	42470068 	.word	0x42470068
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	42470e40 	.word	0x42470e40
 8005ebc:	424711e0 	.word	0x424711e0

08005ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d141      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005ede:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef4:	d131      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ef6:	4b20      	ldr	r3, [pc, #128]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ef8:	617b      	str	r3, [r7, #20]
          break;
 8005efa:	e031      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005efc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f08:	d109      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f14:	4a19      	ldr	r2, [pc, #100]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e008      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f1e:	4b15      	ldr	r3, [pc, #84]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f28:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f30:	4b10      	ldr	r3, [pc, #64]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f44:	4b0b      	ldr	r3, [pc, #44]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f4a:	0f1b      	lsrs	r3, r3, #28
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	617b      	str	r3, [r7, #20]
          break;
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
          break;
 8005f5e:	bf00      	nop
        }
      }
      break;
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005f62:	bf00      	nop
    }
  }
  return frequency;
 8005f64:	697b      	ldr	r3, [r7, #20]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	00bb8000 	.word	0x00bb8000
 8005f7c:	007a1200 	.word	0x007a1200
 8005f80:	00f42400 	.word	0x00f42400

08005f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e07b      	b.n	800608e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa6:	d009      	beq.n	8005fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]
 8005fae:	e005      	b.n	8005fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb fda8 	bl	8001b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006040:	ea42 0103 	orr.w	r1, r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0104 	and.w	r1, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	f003 0210 	and.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800607c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b088      	sub	sp, #32
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a6:	f7fb ff87 	bl	8001fb8 <HAL_GetTick>
 80060aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	e12a      	b.n	8006316 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Transmit+0x36>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e122      	b.n	8006316 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_SPI_Transmit+0x48>
 80060da:	2302      	movs	r3, #2
 80060dc:	e11b      	b.n	8006316 <HAL_SPI_Transmit+0x280>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2203      	movs	r2, #3
 80060ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612c:	d10f      	bne.n	800614e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800613c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800614c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d007      	beq.n	800616c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006174:	d152      	bne.n	800621c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Transmit+0xee>
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d145      	bne.n	8006210 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061a8:	e032      	b.n	8006210 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d112      	bne.n	80061de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061dc:	e018      	b.n	8006210 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061de:	f7fb feeb 	bl	8001fb8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d803      	bhi.n	80061f6 <HAL_SPI_Transmit+0x160>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f4:	d102      	bne.n	80061fc <HAL_SPI_Transmit+0x166>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e082      	b.n	8006316 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1c7      	bne.n	80061aa <HAL_SPI_Transmit+0x114>
 800621a:	e053      	b.n	80062c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_SPI_Transmit+0x194>
 8006224:	8b7b      	ldrh	r3, [r7, #26]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d147      	bne.n	80062ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006250:	e033      	b.n	80062ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d113      	bne.n	8006288 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006286:	e018      	b.n	80062ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006288:	f7fb fe96 	bl	8001fb8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d803      	bhi.n	80062a0 <HAL_SPI_Transmit+0x20a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d102      	bne.n	80062a6 <HAL_SPI_Transmit+0x210>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e02d      	b.n	8006316 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1c6      	bne.n	8006252 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fbd9 	bl	8006a80 <SPI_EndRxTxTransaction>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b088      	sub	sp, #32
 8006322:	af02      	add	r7, sp, #8
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d001      	beq.n	800633e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	e104      	b.n	8006548 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006346:	d112      	bne.n	800636e <HAL_SPI_Receive+0x50>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10e      	bne.n	800636e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2204      	movs	r2, #4
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4613      	mov	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f8f3 	bl	8006550 <HAL_SPI_TransmitReceive>
 800636a:	4603      	mov	r3, r0
 800636c:	e0ec      	b.n	8006548 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800636e:	f7fb fe23 	bl	8001fb8 <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Receive+0x62>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0e1      	b.n	8006548 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_SPI_Receive+0x74>
 800638e:	2302      	movs	r3, #2
 8006390:	e0da      	b.n	8006548 <HAL_SPI_Receive+0x22a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2204      	movs	r2, #4
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	88fa      	ldrh	r2, [r7, #6]
 80063b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e0:	d10f      	bne.n	8006402 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006400:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d007      	beq.n	8006420 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800641e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d170      	bne.n	800650a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006428:	e035      	b.n	8006496 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d115      	bne.n	8006464 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f103 020c 	add.w	r2, r3, #12
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006462:	e018      	b.n	8006496 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006464:	f7fb fda8 	bl	8001fb8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d803      	bhi.n	800647c <HAL_SPI_Receive+0x15e>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <HAL_SPI_Receive+0x164>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e058      	b.n	8006548 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1c4      	bne.n	800642a <HAL_SPI_Receive+0x10c>
 80064a0:	e038      	b.n	8006514 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d113      	bne.n	80064d8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	b292      	uxth	r2, r2
 80064bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	1c9a      	adds	r2, r3, #2
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064d6:	e018      	b.n	800650a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d8:	f7fb fd6e 	bl	8001fb8 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d803      	bhi.n	80064f0 <HAL_SPI_Receive+0x1d2>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d102      	bne.n	80064f6 <HAL_SPI_Receive+0x1d8>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e01e      	b.n	8006548 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1c6      	bne.n	80064a2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fa4b 	bl	80069b4 <SPI_EndRxTransaction>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006546:	2300      	movs	r3, #0
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	@ 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800655e:	2301      	movs	r3, #1
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006562:	f7fb fd29 	bl	8001fb8 <HAL_GetTick>
 8006566:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800656e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800657a:	7ffb      	ldrb	r3, [r7, #31]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d00c      	beq.n	800659a <HAL_SPI_TransmitReceive+0x4a>
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006586:	d106      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x46>
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d001      	beq.n	800659a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006596:	2302      	movs	r3, #2
 8006598:	e17f      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x5c>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x5c>
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e174      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_SPI_TransmitReceive+0x6e>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e16d      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d003      	beq.n	80065da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2205      	movs	r2, #5
 80065d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	887a      	ldrh	r2, [r7, #2]
 80065ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	887a      	ldrh	r2, [r7, #2]
 80065f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	d007      	beq.n	800662e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800662c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006636:	d17e      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_TransmitReceive+0xf6>
 8006640:	8afb      	ldrh	r3, [r7, #22]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d16c      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666a:	e059      	b.n	8006720 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d11b      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x162>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d016      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x162>
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	2b01      	cmp	r3, #1
 8006688:	d113      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	881a      	ldrh	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	1c9a      	adds	r2, r3, #2
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d119      	bne.n	80066f4 <HAL_SPI_TransmitReceive+0x1a4>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	b292      	uxth	r2, r2
 80066d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066f4:	f7fb fc60 	bl	8001fb8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006700:	429a      	cmp	r2, r3
 8006702:	d80d      	bhi.n	8006720 <HAL_SPI_TransmitReceive+0x1d0>
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d009      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e0bc      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1a0      	bne.n	800666c <HAL_SPI_TransmitReceive+0x11c>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d19b      	bne.n	800666c <HAL_SPI_TransmitReceive+0x11c>
 8006734:	e082      	b.n	800683c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x1f4>
 800673e:	8afb      	ldrh	r3, [r7, #22]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d171      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676a:	e05d      	b.n	8006828 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d11c      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x264>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d017      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x264>
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	2b01      	cmp	r3, #1
 8006788:	d114      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d119      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x2a6>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d014      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067f6:	f7fb fbdf 	bl	8001fb8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006802:	429a      	cmp	r2, r3
 8006804:	d803      	bhi.n	800680e <HAL_SPI_TransmitReceive+0x2be>
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d102      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x2c4>
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e038      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d19c      	bne.n	800676c <HAL_SPI_TransmitReceive+0x21c>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d197      	bne.n	800676c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f91d 	bl	8006a80 <SPI_EndRxTxTransaction>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e01d      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006898:	2300      	movs	r3, #0
  }
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	@ 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068b4:	f7fb fb80 	bl	8001fb8 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4413      	add	r3, r2
 80068c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068c4:	f7fb fb78 	bl	8001fb8 <HAL_GetTick>
 80068c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	015b      	lsls	r3, r3, #5
 80068d0:	0d1b      	lsrs	r3, r3, #20
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	fb02 f303 	mul.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068da:	e054      	b.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d050      	beq.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068e4:	f7fb fb68 	bl	8001fb8 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d902      	bls.n	80068fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d13d      	bne.n	8006976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006912:	d111      	bne.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800691c:	d004      	beq.n	8006928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006926:	d107      	bne.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006940:	d10f      	bne.n	8006962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e017      	b.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3b01      	subs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d19b      	bne.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000000 	.word	0x20000000

080069b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c8:	d111      	bne.n	80069ee <SPI_EndRxTransaction+0x3a>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d2:	d004      	beq.n	80069de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069dc:	d107      	bne.n	80069ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069f6:	d12a      	bne.n	8006a4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a00:	d012      	beq.n	8006a28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2180      	movs	r1, #128	@ 0x80
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff ff49 	bl	80068a4 <SPI_WaitFlagStateUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d02d      	beq.n	8006a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e026      	b.n	8006a76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2101      	movs	r1, #1
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff ff36 	bl	80068a4 <SPI_WaitFlagStateUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01a      	beq.n	8006a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a42:	f043 0220 	orr.w	r2, r3, #32
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e013      	b.n	8006a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2200      	movs	r2, #0
 8006a56:	2101      	movs	r1, #1
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff ff23 	bl	80068a4 <SPI_WaitFlagStateUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e000      	b.n	8006a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2201      	movs	r2, #1
 8006a94:	2102      	movs	r1, #2
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff ff04 	bl	80068a4 <SPI_WaitFlagStateUntilTimeout>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa6:	f043 0220 	orr.w	r2, r3, #32
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e032      	b.n	8006b18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b20 <SPI_EndRxTxTransaction+0xa0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b24 <SPI_EndRxTxTransaction+0xa4>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	0d5b      	lsrs	r3, r3, #21
 8006abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ad0:	d112      	bne.n	8006af8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2180      	movs	r1, #128	@ 0x80
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fee1 	bl	80068a4 <SPI_WaitFlagStateUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d016      	beq.n	8006b16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e00f      	b.n	8006b18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0e:	2b80      	cmp	r3, #128	@ 0x80
 8006b10:	d0f2      	beq.n	8006af8 <SPI_EndRxTxTransaction+0x78>
 8006b12:	e000      	b.n	8006b16 <SPI_EndRxTxTransaction+0x96>
        break;
 8006b14:	bf00      	nop
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000000 	.word	0x20000000
 8006b24:	165e9f81 	.word	0x165e9f81

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e041      	b.n	8006bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fb f834 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 fb1c 	bl	80071a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e03c      	b.n	8006c5a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1e      	ldr	r2, [pc, #120]	@ (8006c68 <HAL_TIM_Base_Start+0xa0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d018      	beq.n	8006c24 <HAL_TIM_Base_Start+0x5c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfa:	d013      	beq.n	8006c24 <HAL_TIM_Base_Start+0x5c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1a      	ldr	r2, [pc, #104]	@ (8006c6c <HAL_TIM_Base_Start+0xa4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <HAL_TIM_Base_Start+0x5c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a19      	ldr	r2, [pc, #100]	@ (8006c70 <HAL_TIM_Base_Start+0xa8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d009      	beq.n	8006c24 <HAL_TIM_Base_Start+0x5c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <HAL_TIM_Base_Start+0xac>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_Base_Start+0x5c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <HAL_TIM_Base_Start+0xb0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d111      	bne.n	8006c48 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d010      	beq.n	8006c58 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	e007      	b.n	8006c58 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40014000 	.word	0x40014000

08006c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f839 	bl	8006d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 fa72 	bl	80071a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_TIM_PWM_Start+0x24>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e022      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d109      	bne.n	8006d6e <HAL_TIM_PWM_Start+0x3e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	e015      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d109      	bne.n	8006d88 <HAL_TIM_PWM_Start+0x58>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e008      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e068      	b.n	8006e74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Start+0x82>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db0:	e013      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x92>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc0:	e00b      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd0:	e003      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fc90 	bl	8007708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a23      	ldr	r2, [pc, #140]	@ (8006e7c <HAL_TIM_PWM_Start+0x14c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d107      	bne.n	8006e02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1d      	ldr	r2, [pc, #116]	@ (8006e7c <HAL_TIM_PWM_Start+0x14c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x10e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e14:	d013      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x10e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <HAL_TIM_PWM_Start+0x150>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x10e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a17      	ldr	r2, [pc, #92]	@ (8006e84 <HAL_TIM_PWM_Start+0x154>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x10e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a16      	ldr	r2, [pc, #88]	@ (8006e88 <HAL_TIM_PWM_Start+0x158>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x10e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a14      	ldr	r2, [pc, #80]	@ (8006e8c <HAL_TIM_PWM_Start+0x15c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d111      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b06      	cmp	r3, #6
 8006e4e:	d010      	beq.n	8006e72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e60:	e007      	b.n	8006e72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0201 	orr.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40014000 	.word	0x40014000

08006e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e0ae      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	f200 809f 	bhi.w	8006ffc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ef9 	.word	0x08006ef9
 8006ec8:	08006ffd 	.word	0x08006ffd
 8006ecc:	08006ffd 	.word	0x08006ffd
 8006ed0:	08006ffd 	.word	0x08006ffd
 8006ed4:	08006f39 	.word	0x08006f39
 8006ed8:	08006ffd 	.word	0x08006ffd
 8006edc:	08006ffd 	.word	0x08006ffd
 8006ee0:	08006ffd 	.word	0x08006ffd
 8006ee4:	08006f7b 	.word	0x08006f7b
 8006ee8:	08006ffd 	.word	0x08006ffd
 8006eec:	08006ffd 	.word	0x08006ffd
 8006ef0:	08006ffd 	.word	0x08006ffd
 8006ef4:	08006fbb 	.word	0x08006fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f9dc 	bl	80072bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0208 	orr.w	r2, r2, #8
 8006f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0204 	bic.w	r2, r2, #4
 8006f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6999      	ldr	r1, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	619a      	str	r2, [r3, #24]
      break;
 8006f36:	e064      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fa22 	bl	8007388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6999      	ldr	r1, [r3, #24]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	619a      	str	r2, [r3, #24]
      break;
 8006f78:	e043      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fa6d 	bl	8007460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f042 0208 	orr.w	r2, r2, #8
 8006f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0204 	bic.w	r2, r2, #4
 8006fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69d9      	ldr	r1, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	61da      	str	r2, [r3, #28]
      break;
 8006fb8:	e023      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fab7 	bl	8007534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69da      	ldr	r2, [r3, #28]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69d9      	ldr	r1, [r3, #28]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	021a      	lsls	r2, r3, #8
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	61da      	str	r2, [r3, #28]
      break;
 8006ffa:	e002      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8007000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_TIM_ConfigClockSource+0x1c>
 800702c:	2302      	movs	r3, #2
 800702e:	e0b4      	b.n	800719a <HAL_TIM_ConfigClockSource+0x186>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800704e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007068:	d03e      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0xd4>
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706e:	f200 8087 	bhi.w	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007076:	f000 8086 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x172>
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707e:	d87f      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 8007080:	2b70      	cmp	r3, #112	@ 0x70
 8007082:	d01a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0xa6>
 8007084:	2b70      	cmp	r3, #112	@ 0x70
 8007086:	d87b      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b60      	cmp	r3, #96	@ 0x60
 800708a:	d050      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x11a>
 800708c:	2b60      	cmp	r3, #96	@ 0x60
 800708e:	d877      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 8007090:	2b50      	cmp	r3, #80	@ 0x50
 8007092:	d03c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xfa>
 8007094:	2b50      	cmp	r3, #80	@ 0x50
 8007096:	d873      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 8007098:	2b40      	cmp	r3, #64	@ 0x40
 800709a:	d058      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x13a>
 800709c:	2b40      	cmp	r3, #64	@ 0x40
 800709e:	d86f      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 80070a0:	2b30      	cmp	r3, #48	@ 0x30
 80070a2:	d064      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15a>
 80070a4:	2b30      	cmp	r3, #48	@ 0x30
 80070a6:	d86b      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d060      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15a>
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d867      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05c      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15a>
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d05a      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15a>
 80070b8:	e062      	b.n	8007180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ca:	f000 fafd 	bl	80076c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	609a      	str	r2, [r3, #8]
      break;
 80070e6:	e04f      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070f8:	f000 fae6 	bl	80076c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800710a:	609a      	str	r2, [r3, #8]
      break;
 800710c:	e03c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fa5a 	bl	80075d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2150      	movs	r1, #80	@ 0x50
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fab3 	bl	8007692 <TIM_ITRx_SetConfig>
      break;
 800712c:	e02c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713a:	461a      	mov	r2, r3
 800713c:	f000 fa79 	bl	8007632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2160      	movs	r1, #96	@ 0x60
 8007146:	4618      	mov	r0, r3
 8007148:	f000 faa3 	bl	8007692 <TIM_ITRx_SetConfig>
      break;
 800714c:	e01c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800715a:	461a      	mov	r2, r3
 800715c:	f000 fa3a 	bl	80075d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2140      	movs	r1, #64	@ 0x40
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fa93 	bl	8007692 <TIM_ITRx_SetConfig>
      break;
 800716c:	e00c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f000 fa8a 	bl	8007692 <TIM_ITRx_SetConfig>
      break;
 800717e:	e003      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	e000      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a3a      	ldr	r2, [pc, #232]	@ (80072a0 <TIM_Base_SetConfig+0xfc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00f      	beq.n	80071dc <TIM_Base_SetConfig+0x38>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c2:	d00b      	beq.n	80071dc <TIM_Base_SetConfig+0x38>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a37      	ldr	r2, [pc, #220]	@ (80072a4 <TIM_Base_SetConfig+0x100>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_Base_SetConfig+0x38>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a36      	ldr	r2, [pc, #216]	@ (80072a8 <TIM_Base_SetConfig+0x104>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_Base_SetConfig+0x38>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a35      	ldr	r2, [pc, #212]	@ (80072ac <TIM_Base_SetConfig+0x108>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d108      	bne.n	80071ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a2b      	ldr	r2, [pc, #172]	@ (80072a0 <TIM_Base_SetConfig+0xfc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01b      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fc:	d017      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a28      	ldr	r2, [pc, #160]	@ (80072a4 <TIM_Base_SetConfig+0x100>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a27      	ldr	r2, [pc, #156]	@ (80072a8 <TIM_Base_SetConfig+0x104>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a26      	ldr	r2, [pc, #152]	@ (80072ac <TIM_Base_SetConfig+0x108>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a25      	ldr	r2, [pc, #148]	@ (80072b0 <TIM_Base_SetConfig+0x10c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a24      	ldr	r2, [pc, #144]	@ (80072b4 <TIM_Base_SetConfig+0x110>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0x8a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a23      	ldr	r2, [pc, #140]	@ (80072b8 <TIM_Base_SetConfig+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0e      	ldr	r2, [pc, #56]	@ (80072a0 <TIM_Base_SetConfig+0xfc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d103      	bne.n	8007274 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	d105      	bne.n	8007292 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f023 0201 	bic.w	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	611a      	str	r2, [r3, #16]
  }
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40014400 	.word	0x40014400
 80072b8:	40014800 	.word	0x40014800

080072bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f023 0201 	bic.w	r2, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 0302 	bic.w	r3, r3, #2
 8007304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1c      	ldr	r2, [pc, #112]	@ (8007384 <TIM_OC1_SetConfig+0xc8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10c      	bne.n	8007332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0308 	bic.w	r3, r3, #8
 800731e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 0304 	bic.w	r3, r3, #4
 8007330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a13      	ldr	r2, [pc, #76]	@ (8007384 <TIM_OC1_SetConfig+0xc8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d111      	bne.n	800735e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40010000 	.word	0x40010000

08007388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f023 0210 	bic.w	r2, r3, #16
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0320 	bic.w	r3, r3, #32
 80073d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1e      	ldr	r2, [pc, #120]	@ (800745c <TIM_OC2_SetConfig+0xd4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d10d      	bne.n	8007404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a15      	ldr	r2, [pc, #84]	@ (800745c <TIM_OC2_SetConfig+0xd4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d113      	bne.n	8007434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800741a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000

08007460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <TIM_OC3_SetConfig+0xd0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10d      	bne.n	80074da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <TIM_OC3_SetConfig+0xd0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d113      	bne.n	800750a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40010000 	.word	0x40010000

08007534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800757e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a10      	ldr	r2, [pc, #64]	@ (80075d0 <TIM_OC4_SetConfig+0x9c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d109      	bne.n	80075a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800759a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	019b      	lsls	r3, r3, #6
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000

080075d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0201 	bic.w	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 030a 	bic.w	r3, r3, #10
 8007610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007632:	b480      	push	{r7}
 8007634:	b087      	sub	sp, #28
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	f023 0210 	bic.w	r2, r3, #16
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800765c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	031b      	lsls	r3, r3, #12
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800766e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f043 0307 	orr.w	r3, r3, #7
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	609a      	str	r2, [r3, #8]
}
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	021a      	lsls	r2, r3, #8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	609a      	str	r2, [r3, #8]
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2201      	movs	r2, #1
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	43db      	mvns	r3, r3
 800772a:	401a      	ands	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a1a      	ldr	r2, [r3, #32]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	fa01 f303 	lsl.w	r3, r1, r3
 8007740:	431a      	orrs	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007768:	2302      	movs	r3, #2
 800776a:	e050      	b.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1c      	ldr	r2, [pc, #112]	@ (800781c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d018      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b8:	d013      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00e      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a16      	ldr	r2, [pc, #88]	@ (8007824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a15      	ldr	r2, [pc, #84]	@ (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a13      	ldr	r2, [pc, #76]	@ (800782c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d10c      	bne.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40014000 	.word	0x40014000

08007830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007830:	b084      	sub	sp, #16
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	f107 001c 	add.w	r0, r7, #28
 800783e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007842:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007846:	2b01      	cmp	r3, #1
 8007848:	d123      	bne.n	8007892 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800785e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007876:	2b01      	cmp	r3, #1
 8007878:	d105      	bne.n	8007886 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fae8 	bl	8008e5c <USB_CoreReset>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	e01b      	b.n	80078ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fadc 	bl	8008e5c <USB_CoreReset>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80078bc:	e005      	b.n	80078ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078ca:	7fbb      	ldrb	r3, [r7, #30]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d10b      	bne.n	80078e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f043 0206 	orr.w	r2, r3, #6
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f4:	b004      	add	sp, #16
 80078f6:	4770      	bx	lr

080078f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d165      	bne.n	80079d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4a41      	ldr	r2, [pc, #260]	@ (8007a14 <USB_SetTurnaroundTime+0x11c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d906      	bls.n	8007922 <USB_SetTurnaroundTime+0x2a>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4a40      	ldr	r2, [pc, #256]	@ (8007a18 <USB_SetTurnaroundTime+0x120>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d202      	bcs.n	8007922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800791c:	230f      	movs	r3, #15
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e062      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4a3c      	ldr	r2, [pc, #240]	@ (8007a18 <USB_SetTurnaroundTime+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d306      	bcc.n	8007938 <USB_SetTurnaroundTime+0x40>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4a3b      	ldr	r2, [pc, #236]	@ (8007a1c <USB_SetTurnaroundTime+0x124>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d202      	bcs.n	8007938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007932:	230e      	movs	r3, #14
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e057      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a38      	ldr	r2, [pc, #224]	@ (8007a1c <USB_SetTurnaroundTime+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d306      	bcc.n	800794e <USB_SetTurnaroundTime+0x56>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4a37      	ldr	r2, [pc, #220]	@ (8007a20 <USB_SetTurnaroundTime+0x128>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d202      	bcs.n	800794e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007948:	230d      	movs	r3, #13
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e04c      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4a33      	ldr	r2, [pc, #204]	@ (8007a20 <USB_SetTurnaroundTime+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d306      	bcc.n	8007964 <USB_SetTurnaroundTime+0x6c>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4a32      	ldr	r2, [pc, #200]	@ (8007a24 <USB_SetTurnaroundTime+0x12c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d802      	bhi.n	8007964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800795e:	230c      	movs	r3, #12
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e041      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4a2f      	ldr	r2, [pc, #188]	@ (8007a24 <USB_SetTurnaroundTime+0x12c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d906      	bls.n	800797a <USB_SetTurnaroundTime+0x82>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <USB_SetTurnaroundTime+0x130>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d802      	bhi.n	800797a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007974:	230b      	movs	r3, #11
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e036      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4a2a      	ldr	r2, [pc, #168]	@ (8007a28 <USB_SetTurnaroundTime+0x130>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d906      	bls.n	8007990 <USB_SetTurnaroundTime+0x98>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4a29      	ldr	r2, [pc, #164]	@ (8007a2c <USB_SetTurnaroundTime+0x134>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d802      	bhi.n	8007990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800798a:	230a      	movs	r3, #10
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e02b      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4a26      	ldr	r2, [pc, #152]	@ (8007a2c <USB_SetTurnaroundTime+0x134>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d906      	bls.n	80079a6 <USB_SetTurnaroundTime+0xae>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4a25      	ldr	r2, [pc, #148]	@ (8007a30 <USB_SetTurnaroundTime+0x138>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d202      	bcs.n	80079a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80079a0:	2309      	movs	r3, #9
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e020      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a21      	ldr	r2, [pc, #132]	@ (8007a30 <USB_SetTurnaroundTime+0x138>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d306      	bcc.n	80079bc <USB_SetTurnaroundTime+0xc4>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4a20      	ldr	r2, [pc, #128]	@ (8007a34 <USB_SetTurnaroundTime+0x13c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d802      	bhi.n	80079bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80079b6:	2308      	movs	r3, #8
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e015      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4a1d      	ldr	r2, [pc, #116]	@ (8007a34 <USB_SetTurnaroundTime+0x13c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d906      	bls.n	80079d2 <USB_SetTurnaroundTime+0xda>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a38 <USB_SetTurnaroundTime+0x140>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d202      	bcs.n	80079d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079cc:	2307      	movs	r3, #7
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e00a      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079d2:	2306      	movs	r3, #6
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e007      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079de:	2309      	movs	r3, #9
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e001      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079e4:	2309      	movs	r3, #9
 80079e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	00d8acbf 	.word	0x00d8acbf
 8007a18:	00e4e1c0 	.word	0x00e4e1c0
 8007a1c:	00f42400 	.word	0x00f42400
 8007a20:	01067380 	.word	0x01067380
 8007a24:	011a499f 	.word	0x011a499f
 8007a28:	01312cff 	.word	0x01312cff
 8007a2c:	014ca43f 	.word	0x014ca43f
 8007a30:	016e3600 	.word	0x016e3600
 8007a34:	01a6ab1f 	.word	0x01a6ab1f
 8007a38:	01e84800 	.word	0x01e84800

08007a3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f043 0201 	orr.w	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f023 0201 	bic.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d115      	bne.n	8007ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007aae:	200a      	movs	r0, #10
 8007ab0:	f7fa fa8e 	bl	8001fd0 <HAL_Delay>
      ms += 10U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	330a      	adds	r3, #10
 8007ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f93f 	bl	8008d3e <USB_GetMode>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d01e      	beq.n	8007b04 <USB_SetCurrentMode+0x84>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007aca:	d9f0      	bls.n	8007aae <USB_SetCurrentMode+0x2e>
 8007acc:	e01a      	b.n	8007b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d115      	bne.n	8007b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ae0:	200a      	movs	r0, #10
 8007ae2:	f7fa fa75 	bl	8001fd0 <HAL_Delay>
      ms += 10U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	330a      	adds	r3, #10
 8007aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f926 	bl	8008d3e <USB_GetMode>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <USB_SetCurrentMode+0x84>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007afc:	d9f0      	bls.n	8007ae0 <USB_SetCurrentMode+0x60>
 8007afe:	e001      	b.n	8007b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e005      	b.n	8007b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b08:	d101      	bne.n	8007b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b18:	b084      	sub	sp, #16
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e009      	b.n	8007b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3340      	adds	r3, #64	@ 0x40
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b0e      	cmp	r3, #14
 8007b50:	d9f2      	bls.n	8007b38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11c      	bne.n	8007b94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b92:	e00b      	b.n	8007bac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10d      	bne.n	8007bdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f968 	bl	8007ea0 <USB_SetDevSpeed>
 8007bd0:	e008      	b.n	8007be4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f963 	bl	8007ea0 <USB_SetDevSpeed>
 8007bda:	e003      	b.n	8007be4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bdc:	2103      	movs	r1, #3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f95e 	bl	8007ea0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007be4:	2110      	movs	r1, #16
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8fa 	bl	8007de0 <USB_FlushTxFifo>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f924 	bl	8007e44 <USB_FlushRxFifo>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c24:	461a      	mov	r2, r3
 8007c26:	2300      	movs	r3, #0
 8007c28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	e043      	b.n	8007cb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c46:	d118      	bne.n	8007c7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	e013      	b.n	8007c8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c70:	461a      	mov	r2, r3
 8007c72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	e008      	b.n	8007c8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c86:	461a      	mov	r2, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007caa:	461a      	mov	r2, r3
 8007cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d3b5      	bcc.n	8007c30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	e043      	b.n	8007d52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce0:	d118      	bne.n	8007d14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	e013      	b.n	8007d26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e008      	b.n	8007d26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d20:	461a      	mov	r2, r3
 8007d22:	2300      	movs	r3, #0
 8007d24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d44:	461a      	mov	r2, r3
 8007d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d56:	461a      	mov	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d3b5      	bcc.n	8007cca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f043 0210 	orr.w	r2, r3, #16
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <USB_DevInit+0x2c4>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007da0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f043 0208 	orr.w	r2, r3, #8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007db4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d107      	bne.n	8007dcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dc4:	f043 0304 	orr.w	r3, r3, #4
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dd8:	b004      	add	sp, #16
 8007dda:	4770      	bx	lr
 8007ddc:	803c3800 	.word	0x803c3800

08007de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dfa:	d901      	bls.n	8007e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e01b      	b.n	8007e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	daf2      	bge.n	8007dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	019b      	lsls	r3, r3, #6
 8007e10:	f043 0220 	orr.w	r2, r3, #32
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e24:	d901      	bls.n	8007e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e006      	b.n	8007e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d0f0      	beq.n	8007e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e5c:	d901      	bls.n	8007e62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e018      	b.n	8007e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	daf2      	bge.n	8007e50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2210      	movs	r2, #16
 8007e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e80:	d901      	bls.n	8007e86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e006      	b.n	8007e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d0f0      	beq.n	8007e74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b087      	sub	sp, #28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0306 	and.w	r3, r3, #6
 8007eea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d102      	bne.n	8007ef8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
 8007ef6:	e00a      	b.n	8007f0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <USB_GetDevSpeed+0x32>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	d102      	bne.n	8007f0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f04:	2302      	movs	r3, #2
 8007f06:	75fb      	strb	r3, [r7, #23]
 8007f08:	e001      	b.n	8007f0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f0a:	230f      	movs	r3, #15
 8007f0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d13a      	bne.n	8007fae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	2101      	movs	r1, #1
 8007f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	68f9      	ldr	r1, [r7, #12]
 8007f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f56:	4313      	orrs	r3, r2
 8007f58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d155      	bne.n	800801c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	059b      	lsls	r3, r3, #22
 8007f92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f94:	4313      	orrs	r3, r2
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e036      	b.n	800801c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d11a      	bne.n	800801c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008002:	430b      	orrs	r3, r1
 8008004:	4313      	orrs	r3, r2
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d161      	bne.n	800810c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800805a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800805e:	d11f      	bne.n	80080a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	440a      	add	r2, r1
 8008076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800807a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800807e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800809e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2101      	movs	r1, #1
 80080b2:	fa01 f303 	lsl.w	r3, r1, r3
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	43db      	mvns	r3, r3
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080c0:	4013      	ands	r3, r2
 80080c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	2101      	movs	r1, #1
 80080d6:	fa01 f303 	lsl.w	r3, r1, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	43db      	mvns	r3, r3
 80080de:	68f9      	ldr	r1, [r7, #12]
 80080e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080e4:	4013      	ands	r3, r2
 80080e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	0159      	lsls	r1, r3, #5
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	440b      	add	r3, r1
 80080fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008102:	4619      	mov	r1, r3
 8008104:	4b35      	ldr	r3, [pc, #212]	@ (80081dc <USB_DeactivateEndpoint+0x1b0>)
 8008106:	4013      	ands	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
 800810a:	e060      	b.n	80081ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800811e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008122:	d11f      	bne.n	8008164 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	440a      	add	r2, r1
 800813a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008142:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800815e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	43db      	mvns	r3, r3
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008184:	4013      	ands	r3, r2
 8008186:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	43db      	mvns	r3, r3
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081a8:	4013      	ands	r3, r2
 80081aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	0159      	lsls	r1, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	440b      	add	r3, r1
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	4619      	mov	r1, r3
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <USB_DeactivateEndpoint+0x1b4>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	ec337800 	.word	0xec337800
 80081e0:	eff37800 	.word	0xeff37800

080081e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	@ 0x28
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	f040 817f 	bne.w	8008504 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d132      	bne.n	8008274 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008228:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800822c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826c:	0cdb      	lsrs	r3, r3, #19
 800826e:	04db      	lsls	r3, r3, #19
 8008270:	6113      	str	r3, [r2, #16]
 8008272:	e097      	b.n	80083a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	440a      	add	r2, r1
 800828a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800828e:	0cdb      	lsrs	r3, r3, #19
 8008290:	04db      	lsls	r3, r3, #19
 8008292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11a      	bne.n	80082f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d903      	bls.n	80082d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082f0:	6113      	str	r3, [r2, #16]
 80082f2:	e044      	b.n	800837e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	8afb      	ldrh	r3, [r7, #22]
 800831a:	04d9      	lsls	r1, r3, #19
 800831c:	4ba4      	ldr	r3, [pc, #656]	@ (80085b0 <USB_EPStartXfer+0x3cc>)
 800831e:	400b      	ands	r3, r1
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	0148      	lsls	r0, r1, #5
 8008324:	69f9      	ldr	r1, [r7, #28]
 8008326:	4401      	add	r1, r0
 8008328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800832c:	4313      	orrs	r3, r2
 800832e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d122      	bne.n	800837e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008352:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008356:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	8afb      	ldrh	r3, [r7, #22]
 8008368:	075b      	lsls	r3, r3, #29
 800836a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800836e:	69b9      	ldr	r1, [r7, #24]
 8008370:	0148      	lsls	r0, r1, #5
 8008372:	69f9      	ldr	r1, [r7, #28]
 8008374:	4401      	add	r1, r0
 8008376:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800837a:	4313      	orrs	r3, r2
 800837c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008394:	69b9      	ldr	r1, [r7, #24]
 8008396:	0148      	lsls	r0, r1, #5
 8008398:	69f9      	ldr	r1, [r7, #28]
 800839a:	4401      	add	r1, r0
 800839c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083a0:	4313      	orrs	r3, r2
 80083a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d14b      	bne.n	8008442 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d128      	bne.n	8008420 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d110      	bne.n	8008400 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e00f      	b.n	8008420 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800841a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800841e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	440a      	add	r2, r1
 8008436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e166      	b.n	8008710 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800845c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008460:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d015      	beq.n	8008496 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 814e 	beq.w	8008710 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	69f9      	ldr	r1, [r7, #28]
 800848c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008490:	4313      	orrs	r3, r2
 8008492:	634b      	str	r3, [r1, #52]	@ 0x34
 8008494:	e13c      	b.n	8008710 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d110      	bne.n	80084c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e00f      	b.n	80084e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	68d9      	ldr	r1, [r3, #12]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	b298      	uxth	r0, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4603      	mov	r3, r0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f9b9 	bl	8008874 <USB_WritePacket>
 8008502:	e105      	b.n	8008710 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851e:	0cdb      	lsrs	r3, r3, #19
 8008520:	04db      	lsls	r3, r3, #19
 8008522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008546:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d132      	bne.n	80085b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800857c:	69b9      	ldr	r1, [r7, #24]
 800857e:	0148      	lsls	r0, r1, #5
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	4401      	add	r1, r0
 8008584:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008588:	4313      	orrs	r3, r2
 800858a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085aa:	6113      	str	r3, [r2, #16]
 80085ac:	e062      	b.n	8008674 <USB_EPStartXfer+0x490>
 80085ae:	bf00      	nop
 80085b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d123      	bne.n	8008604 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d2:	69b9      	ldr	r1, [r7, #24]
 80085d4:	0148      	lsls	r0, r1, #5
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	4401      	add	r1, r0
 80085da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085de:	4313      	orrs	r3, r2
 80085e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008600:	6113      	str	r3, [r2, #16]
 8008602:	e037      	b.n	8008674 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4413      	add	r3, r2
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	8afa      	ldrh	r2, [r7, #22]
 8008620:	fb03 f202 	mul.w	r2, r3, r2
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	8afb      	ldrh	r3, [r7, #22]
 8008638:	04d9      	lsls	r1, r3, #19
 800863a:	4b38      	ldr	r3, [pc, #224]	@ (800871c <USB_EPStartXfer+0x538>)
 800863c:	400b      	ands	r3, r1
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	0148      	lsls	r0, r1, #5
 8008642:	69f9      	ldr	r1, [r7, #28]
 8008644:	4401      	add	r1, r0
 8008646:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800864a:	4313      	orrs	r3, r2
 800864c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	0148      	lsls	r0, r1, #5
 8008668:	69f9      	ldr	r1, [r7, #28]
 800866a:	4401      	add	r1, r0
 800866c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008670:	4313      	orrs	r3, r2
 8008672:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10d      	bne.n	8008696 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	68d9      	ldr	r1, [r3, #12]
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	460a      	mov	r2, r1
 8008694:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	791b      	ldrb	r3, [r3, #4]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d128      	bne.n	80086f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d110      	bne.n	80086d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e00f      	b.n	80086f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	1ff80000 	.word	0x1ff80000

08008720 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d14a      	bne.n	80087d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008756:	f040 8086 	bne.w	8008866 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008778:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800877c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d902      	bls.n	80087b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
          break;
 80087b6:	e056      	b.n	8008866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087d0:	d0e7      	beq.n	80087a2 <USB_EPStopXfer+0x82>
 80087d2:	e048      	b.n	8008866 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ec:	d13b      	bne.n	8008866 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	0151      	lsls	r1, r2, #5
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	440a      	add	r2, r1
 8008808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800880c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008810:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	7812      	ldrb	r2, [r2, #0]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008842:	4293      	cmp	r3, r2
 8008844:	d902      	bls.n	800884c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
          break;
 800884a:	e00c      	b.n	8008866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008864:	d0e7      	beq.n	8008836 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
}
 8008868:	4618      	mov	r0, r3
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008874:	b480      	push	{r7}
 8008876:	b089      	sub	sp, #36	@ 0x24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	460b      	mov	r3, r1
 8008884:	71fb      	strb	r3, [r7, #7]
 8008886:	4613      	mov	r3, r2
 8008888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d123      	bne.n	80088e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800889a:	88bb      	ldrh	r3, [r7, #4]
 800889c:	3303      	adds	r3, #3
 800889e:	089b      	lsrs	r3, r3, #2
 80088a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	e018      	b.n	80088da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	031a      	lsls	r2, r3, #12
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088b4:	461a      	mov	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3301      	adds	r3, #1
 80088c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	3301      	adds	r3, #1
 80088d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d3e2      	bcc.n	80088a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3724      	adds	r7, #36	@ 0x24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b08b      	sub	sp, #44	@ 0x2c
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	089b      	lsrs	r3, r3, #2
 800890a:	b29b      	uxth	r3, r3
 800890c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008916:	2300      	movs	r3, #0
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	e014      	b.n	8008946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	601a      	str	r2, [r3, #0]
    pDest++;
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	3301      	adds	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	3301      	adds	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	3301      	adds	r3, #1
 8008938:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	3301      	adds	r3, #1
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	3301      	adds	r3, #1
 8008944:	623b      	str	r3, [r7, #32]
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	429a      	cmp	r2, r3
 800894c:	d3e6      	bcc.n	800891c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800894e:	8bfb      	ldrh	r3, [r7, #30]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01e      	beq.n	8008992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895e:	461a      	mov	r2, r3
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	b2da      	uxtb	r2, r3
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	701a      	strb	r2, [r3, #0]
      i++;
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	3301      	adds	r3, #1
 800897e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	3301      	adds	r3, #1
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	3b01      	subs	r3, #1
 800898a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800898c:	8bfb      	ldrh	r3, [r7, #30]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1ea      	bne.n	8008968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008994:	4618      	mov	r0, r3
 8008996:	372c      	adds	r7, #44	@ 0x2c
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12c      	bne.n	8008a16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	db12      	blt.n	80089f4 <USB_EPSetStall+0x54>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00f      	beq.n	80089f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	0151      	lsls	r1, r2, #5
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	440a      	add	r2, r1
 8008a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	e02b      	b.n	8008a6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	db12      	blt.n	8008a4e <USB_EPSetStall+0xae>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00f      	beq.n	8008a4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d128      	bne.n	8008aea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ab6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	791b      	ldrb	r3, [r3, #4]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d003      	beq.n	8008ac8 <USB_EPClearStall+0x4c>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	791b      	ldrb	r3, [r3, #4]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d138      	bne.n	8008b3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	e027      	b.n	8008b3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d003      	beq.n	8008b1a <USB_EPClearStall+0x9e>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d10f      	bne.n	8008b3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b7c:	68f9      	ldr	r1, [r7, #12]
 8008b7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bc2:	f023 0302 	bic.w	r3, r3, #2
 8008bc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c04:	f043 0302 	orr.w	r3, r3, #2
 8008c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c30:	68fb      	ldr	r3, [r7, #12]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	0c1b      	lsrs	r3, r3, #16
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	b29b      	uxth	r3, r3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b087      	sub	sp, #28
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	01db      	lsls	r3, r3, #7
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d30:	68bb      	ldr	r3, [r7, #8]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d78:	f023 0307 	bic.w	r3, r3, #7
 8008d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	333c      	adds	r3, #60	@ 0x3c
 8008db6:	3304      	adds	r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4a26      	ldr	r2, [pc, #152]	@ (8008e58 <USB_EP0_OutStart+0xb8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d90a      	bls.n	8008dda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd4:	d101      	bne.n	8008dda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e037      	b.n	8008e4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de0:	461a      	mov	r2, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e08:	f043 0318 	orr.w	r3, r3, #24
 8008e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10f      	bne.n	8008e48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	4f54300a 	.word	0x4f54300a

08008e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e74:	d901      	bls.n	8008e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e01b      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf2      	bge.n	8008e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e9e:	d901      	bls.n	8008ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e006      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d0f0      	beq.n	8008e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ecc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008ed0:	f002 fcfc 	bl	800b8cc <USBD_static_malloc>
 8008ed4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d109      	bne.n	8008ef0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32b0      	adds	r2, #176	@ 0xb0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008eec:	2302      	movs	r3, #2
 8008eee:	e0d4      	b.n	800909a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ef0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f003 fa89 	bl	800c40e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32b0      	adds	r2, #176	@ 0xb0
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32b0      	adds	r2, #176	@ 0xb0
 8008f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7c1b      	ldrb	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d138      	bne.n	8008f9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f28:	4b5e      	ldr	r3, [pc, #376]	@ (80090a4 <USBD_CDC_Init+0x1e4>)
 8008f2a:	7819      	ldrb	r1, [r3, #0]
 8008f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f30:	2202      	movs	r2, #2
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f002 fba7 	bl	800b686 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f38:	4b5a      	ldr	r3, [pc, #360]	@ (80090a4 <USBD_CDC_Init+0x1e4>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 020f 	and.w	r2, r3, #15
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	3324      	adds	r3, #36	@ 0x24
 8008f4e:	2201      	movs	r2, #1
 8008f50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f52:	4b55      	ldr	r3, [pc, #340]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8008f54:	7819      	ldrb	r1, [r3, #0]
 8008f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f002 fb92 	bl	800b686 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f62:	4b51      	ldr	r3, [pc, #324]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 020f 	and.w	r2, r3, #15
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80090ac <USBD_CDC_Init+0x1ec>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 020f 	and.w	r2, r3, #15
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	3326      	adds	r3, #38	@ 0x26
 8008f94:	2210      	movs	r2, #16
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e035      	b.n	8009006 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f9a:	4b42      	ldr	r3, [pc, #264]	@ (80090a4 <USBD_CDC_Init+0x1e4>)
 8008f9c:	7819      	ldrb	r1, [r3, #0]
 8008f9e:	2340      	movs	r3, #64	@ 0x40
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f002 fb6f 	bl	800b686 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80090a4 <USBD_CDC_Init+0x1e4>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 020f 	and.w	r2, r3, #15
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	3324      	adds	r3, #36	@ 0x24
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fc2:	4b39      	ldr	r3, [pc, #228]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8008fc4:	7819      	ldrb	r1, [r3, #0]
 8008fc6:	2340      	movs	r3, #64	@ 0x40
 8008fc8:	2202      	movs	r2, #2
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f002 fb5b 	bl	800b686 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fd0:	4b35      	ldr	r3, [pc, #212]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 020f 	and.w	r2, r3, #15
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fe8:	2201      	movs	r2, #1
 8008fea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008fec:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <USBD_CDC_Init+0x1ec>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	3326      	adds	r3, #38	@ 0x26
 8009002:	2210      	movs	r2, #16
 8009004:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <USBD_CDC_Init+0x1ec>)
 8009008:	7819      	ldrb	r1, [r3, #0]
 800900a:	2308      	movs	r3, #8
 800900c:	2203      	movs	r2, #3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f002 fb39 	bl	800b686 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009014:	4b25      	ldr	r3, [pc, #148]	@ (80090ac <USBD_CDC_Init+0x1ec>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	3324      	adds	r3, #36	@ 0x24
 800902a:	2201      	movs	r2, #1
 800902c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	33b0      	adds	r3, #176	@ 0xb0
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009064:	2302      	movs	r3, #2
 8009066:	e018      	b.n	800909a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7c1b      	ldrb	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009070:	4b0d      	ldr	r3, [pc, #52]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8009072:	7819      	ldrb	r1, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800907a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f002 fbf0 	bl	800b864 <USBD_LL_PrepareReceive>
 8009084:	e008      	b.n	8009098 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009086:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <USBD_CDC_Init+0x1e8>)
 8009088:	7819      	ldrb	r1, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009090:	2340      	movs	r3, #64	@ 0x40
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f002 fbe6 	bl	800b864 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000093 	.word	0x20000093
 80090a8:	20000094 	.word	0x20000094
 80090ac:	20000095 	.word	0x20000095

080090b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80090bc:	4b3a      	ldr	r3, [pc, #232]	@ (80091a8 <USBD_CDC_DeInit+0xf8>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f002 fb05 	bl	800b6d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80090c8:	4b37      	ldr	r3, [pc, #220]	@ (80091a8 <USBD_CDC_DeInit+0xf8>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	f003 020f 	and.w	r2, r3, #15
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	3324      	adds	r3, #36	@ 0x24
 80090de:	2200      	movs	r2, #0
 80090e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80090e2:	4b32      	ldr	r3, [pc, #200]	@ (80091ac <USBD_CDC_DeInit+0xfc>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f002 faf2 	bl	800b6d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80090ee:	4b2f      	ldr	r3, [pc, #188]	@ (80091ac <USBD_CDC_DeInit+0xfc>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f003 020f 	and.w	r2, r3, #15
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009106:	2200      	movs	r2, #0
 8009108:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800910a:	4b29      	ldr	r3, [pc, #164]	@ (80091b0 <USBD_CDC_DeInit+0x100>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f002 fade 	bl	800b6d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009116:	4b26      	ldr	r3, [pc, #152]	@ (80091b0 <USBD_CDC_DeInit+0x100>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3324      	adds	r3, #36	@ 0x24
 800912c:	2200      	movs	r2, #0
 800912e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009130:	4b1f      	ldr	r3, [pc, #124]	@ (80091b0 <USBD_CDC_DeInit+0x100>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3326      	adds	r3, #38	@ 0x26
 8009146:	2200      	movs	r2, #0
 8009148:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	32b0      	adds	r2, #176	@ 0xb0
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01f      	beq.n	800919c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	33b0      	adds	r3, #176	@ 0xb0
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32b0      	adds	r2, #176	@ 0xb0
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	4618      	mov	r0, r3
 8009180:	f002 fbb2 	bl	800b8e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	32b0      	adds	r2, #176	@ 0xb0
 800918e:	2100      	movs	r1, #0
 8009190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000093 	.word	0x20000093
 80091ac:	20000094 	.word	0x20000094
 80091b0:	20000095 	.word	0x20000095

080091b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	32b0      	adds	r2, #176	@ 0xb0
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e0bf      	b.n	8009364 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d050      	beq.n	8009292 <USBD_CDC_Setup+0xde>
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	f040 80af 	bne.w	8009354 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d03a      	beq.n	8009274 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b25b      	sxtb	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	da1b      	bge.n	8009240 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	33b0      	adds	r3, #176	@ 0xb0
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800921e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	88d2      	ldrh	r2, [r2, #6]
 8009224:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b07      	cmp	r3, #7
 800922c:	bf28      	it	cs
 800922e:	2307      	movcs	r3, #7
 8009230:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	89fa      	ldrh	r2, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fd5d 	bl	800acf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800923e:	e090      	b.n	8009362 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785a      	ldrb	r2, [r3, #1]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	88db      	ldrh	r3, [r3, #6]
 800924e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009250:	d803      	bhi.n	800925a <USBD_CDC_Setup+0xa6>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	b2da      	uxtb	r2, r3
 8009258:	e000      	b.n	800925c <USBD_CDC_Setup+0xa8>
 800925a:	2240      	movs	r2, #64	@ 0x40
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009262:	6939      	ldr	r1, [r7, #16]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800926a:	461a      	mov	r2, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 fd6f 	bl	800ad50 <USBD_CtlPrepareRx>
      break;
 8009272:	e076      	b.n	8009362 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	33b0      	adds	r3, #176	@ 0xb0
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	7850      	ldrb	r0, [r2, #1]
 800928a:	2200      	movs	r2, #0
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	4798      	blx	r3
      break;
 8009290:	e067      	b.n	8009362 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	2b0b      	cmp	r3, #11
 8009298:	d851      	bhi.n	800933e <USBD_CDC_Setup+0x18a>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_CDC_Setup+0xec>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092d1 	.word	0x080092d1
 80092a4:	0800934d 	.word	0x0800934d
 80092a8:	0800933f 	.word	0x0800933f
 80092ac:	0800933f 	.word	0x0800933f
 80092b0:	0800933f 	.word	0x0800933f
 80092b4:	0800933f 	.word	0x0800933f
 80092b8:	0800933f 	.word	0x0800933f
 80092bc:	0800933f 	.word	0x0800933f
 80092c0:	0800933f 	.word	0x0800933f
 80092c4:	0800933f 	.word	0x0800933f
 80092c8:	080092fb 	.word	0x080092fb
 80092cc:	08009325 	.word	0x08009325
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d107      	bne.n	80092ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092dc:	f107 030a 	add.w	r3, r7, #10
 80092e0:	2202      	movs	r2, #2
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 fd07 	bl	800acf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ea:	e032      	b.n	8009352 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fc85 	bl	800abfe <USBD_CtlError>
            ret = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	75fb      	strb	r3, [r7, #23]
          break;
 80092f8:	e02b      	b.n	8009352 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b03      	cmp	r3, #3
 8009304:	d107      	bne.n	8009316 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009306:	f107 030d 	add.w	r3, r7, #13
 800930a:	2201      	movs	r2, #1
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fcf2 	bl	800acf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009314:	e01d      	b.n	8009352 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fc70 	bl	800abfe <USBD_CtlError>
            ret = USBD_FAIL;
 800931e:	2303      	movs	r3, #3
 8009320:	75fb      	strb	r3, [r7, #23]
          break;
 8009322:	e016      	b.n	8009352 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b03      	cmp	r3, #3
 800932e:	d00f      	beq.n	8009350 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fc63 	bl	800abfe <USBD_CtlError>
            ret = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800933c:	e008      	b.n	8009350 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 fc5c 	bl	800abfe <USBD_CtlError>
          ret = USBD_FAIL;
 8009346:	2303      	movs	r3, #3
 8009348:	75fb      	strb	r3, [r7, #23]
          break;
 800934a:	e002      	b.n	8009352 <USBD_CDC_Setup+0x19e>
          break;
 800934c:	bf00      	nop
 800934e:	e008      	b.n	8009362 <USBD_CDC_Setup+0x1ae>
          break;
 8009350:	bf00      	nop
      }
      break;
 8009352:	e006      	b.n	8009362 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 fc51 	bl	800abfe <USBD_CtlError>
      ret = USBD_FAIL;
 800935c:	2303      	movs	r3, #3
 800935e:	75fb      	strb	r3, [r7, #23]
      break;
 8009360:	bf00      	nop
  }

  return (uint8_t)ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800937e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32b0      	adds	r2, #176	@ 0xb0
 800938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	e065      	b.n	8009462 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	32b0      	adds	r2, #176	@ 0xb0
 80093a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	f003 020f 	and.w	r2, r3, #15
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	3318      	adds	r3, #24
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d02f      	beq.n	8009420 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3318      	adds	r3, #24
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	f003 010f 	and.w	r1, r3, #15
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	460b      	mov	r3, r1
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	440b      	add	r3, r1
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4403      	add	r3, r0
 80093e8:	331c      	adds	r3, #28
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80093f0:	fb01 f303 	mul.w	r3, r1, r3
 80093f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d112      	bne.n	8009420 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	f003 020f 	and.w	r2, r3, #15
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	440b      	add	r3, r1
 800940c:	3318      	adds	r3, #24
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009412:	78f9      	ldrb	r1, [r7, #3]
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f002 fa02 	bl	800b822 <USBD_LL_Transmit>
 800941e:	e01f      	b.n	8009460 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	33b0      	adds	r3, #176	@ 0xb0
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d010      	beq.n	8009460 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	33b0      	adds	r3, #176	@ 0xb0
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	32b0      	adds	r2, #176	@ 0xb0
 8009480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009484:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	32b0      	adds	r2, #176	@ 0xb0
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009498:	2303      	movs	r3, #3
 800949a:	e01a      	b.n	80094d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f002 fa00 	bl	800b8a6 <USBD_LL_GetRxDataSize>
 80094a6:	4602      	mov	r2, r0
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	33b0      	adds	r3, #176	@ 0xb0
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80094cc:	4611      	mov	r1, r2
 80094ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	32b0      	adds	r2, #176	@ 0xb0
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e024      	b.n	8009546 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	33b0      	adds	r3, #176	@ 0xb0
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d019      	beq.n	8009544 <USBD_CDC_EP0_RxReady+0x6a>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009516:	2bff      	cmp	r3, #255	@ 0xff
 8009518:	d014      	beq.n	8009544 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	33b0      	adds	r3, #176	@ 0xb0
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009532:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800953a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	22ff      	movs	r2, #255	@ 0xff
 8009540:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009558:	2182      	movs	r1, #130	@ 0x82
 800955a:	4818      	ldr	r0, [pc, #96]	@ (80095bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800955c:	f000 fd19 	bl	8009f92 <USBD_GetEpDesc>
 8009560:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009562:	2101      	movs	r1, #1
 8009564:	4815      	ldr	r0, [pc, #84]	@ (80095bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009566:	f000 fd14 	bl	8009f92 <USBD_GetEpDesc>
 800956a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800956c:	2181      	movs	r1, #129	@ 0x81
 800956e:	4813      	ldr	r0, [pc, #76]	@ (80095bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009570:	f000 fd0f 	bl	8009f92 <USBD_GetEpDesc>
 8009574:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2210      	movs	r2, #16
 8009580:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d006      	beq.n	8009596 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2200      	movs	r2, #0
 800958c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009590:	711a      	strb	r2, [r3, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d006      	beq.n	80095aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a4:	711a      	strb	r2, [r3, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2243      	movs	r2, #67	@ 0x43
 80095ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095b0:	4b02      	ldr	r3, [pc, #8]	@ (80095bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000050 	.word	0x20000050

080095c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095c8:	2182      	movs	r1, #130	@ 0x82
 80095ca:	4818      	ldr	r0, [pc, #96]	@ (800962c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095cc:	f000 fce1 	bl	8009f92 <USBD_GetEpDesc>
 80095d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095d2:	2101      	movs	r1, #1
 80095d4:	4815      	ldr	r0, [pc, #84]	@ (800962c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095d6:	f000 fcdc 	bl	8009f92 <USBD_GetEpDesc>
 80095da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095dc:	2181      	movs	r1, #129	@ 0x81
 80095de:	4813      	ldr	r0, [pc, #76]	@ (800962c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095e0:	f000 fcd7 	bl	8009f92 <USBD_GetEpDesc>
 80095e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2210      	movs	r2, #16
 80095f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d006      	beq.n	8009606 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2200      	movs	r2, #0
 80095fc:	711a      	strb	r2, [r3, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f042 0202 	orr.w	r2, r2, #2
 8009604:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d006      	beq.n	800961a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	711a      	strb	r2, [r3, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f042 0202 	orr.w	r2, r2, #2
 8009618:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2243      	movs	r2, #67	@ 0x43
 800961e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009620:	4b02      	ldr	r3, [pc, #8]	@ (800962c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000050 	.word	0x20000050

08009630 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009638:	2182      	movs	r1, #130	@ 0x82
 800963a:	4818      	ldr	r0, [pc, #96]	@ (800969c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800963c:	f000 fca9 	bl	8009f92 <USBD_GetEpDesc>
 8009640:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009642:	2101      	movs	r1, #1
 8009644:	4815      	ldr	r0, [pc, #84]	@ (800969c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009646:	f000 fca4 	bl	8009f92 <USBD_GetEpDesc>
 800964a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800964c:	2181      	movs	r1, #129	@ 0x81
 800964e:	4813      	ldr	r0, [pc, #76]	@ (800969c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009650:	f000 fc9f 	bl	8009f92 <USBD_GetEpDesc>
 8009654:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2210      	movs	r2, #16
 8009660:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2200      	movs	r2, #0
 800966c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009670:	711a      	strb	r2, [r3, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009684:	711a      	strb	r2, [r3, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2243      	movs	r2, #67	@ 0x43
 800968e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009690:	4b02      	ldr	r3, [pc, #8]	@ (800969c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000050 	.word	0x20000050

080096a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	220a      	movs	r2, #10
 80096ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096ae:	4b03      	ldr	r3, [pc, #12]	@ (80096bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	2000000c 	.word	0x2000000c

080096c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e009      	b.n	80096e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	33b0      	adds	r3, #176	@ 0xb0
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	32b0      	adds	r2, #176	@ 0xb0
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	e008      	b.n	800972c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	32b0      	adds	r2, #176	@ 0xb0
 800974c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009750:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009758:	2303      	movs	r3, #3
 800975a:	e004      	b.n	8009766 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	32b0      	adds	r2, #176	@ 0xb0
 8009786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800978c:	2301      	movs	r3, #1
 800978e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	e025      	b.n	80097e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11f      	bne.n	80097e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80097ac:	4b10      	ldr	r3, [pc, #64]	@ (80097f0 <USBD_CDC_TransmitPacket+0x7c>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 020f 	and.w	r2, r3, #15
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4403      	add	r3, r0
 80097c6:	3318      	adds	r3, #24
 80097c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80097ca:	4b09      	ldr	r3, [pc, #36]	@ (80097f0 <USBD_CDC_TransmitPacket+0x7c>)
 80097cc:	7819      	ldrb	r1, [r3, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f002 f821 	bl	800b822 <USBD_LL_Transmit>

    ret = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000093 	.word	0x20000093

080097f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	e01f      	b.n	800984c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	79fa      	ldrb	r2, [r7, #7]
 800983e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f001 feb9 	bl	800b5b8 <USBD_LL_Init>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

  return ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009868:	2303      	movs	r3, #3
 800986a:	e025      	b.n	80098b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	32ae      	adds	r2, #174	@ 0xae
 800987e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00f      	beq.n	80098a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	32ae      	adds	r2, #174	@ 0xae
 8009892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	f107 020e 	add.w	r2, r7, #14
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	4602      	mov	r2, r0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 fec1 	bl	800b650 <USBD_LL_Start>
 80098ce:	4603      	mov	r3, r0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d009      	beq.n	800991c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	4611      	mov	r1, r2
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f001 f90c 	bl	800ab8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009980:	461a      	mov	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	2b02      	cmp	r3, #2
 8009994:	d01a      	beq.n	80099cc <USBD_LL_SetupStage+0x72>
 8009996:	2b02      	cmp	r3, #2
 8009998:	d822      	bhi.n	80099e0 <USBD_LL_SetupStage+0x86>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <USBD_LL_SetupStage+0x4a>
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d00a      	beq.n	80099b8 <USBD_LL_SetupStage+0x5e>
 80099a2:	e01d      	b.n	80099e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fb63 	bl	800a078 <USBD_StdDevReq>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]
      break;
 80099b6:	e020      	b.n	80099fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fbcb 	bl	800a15c <USBD_StdItfReq>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
      break;
 80099ca:	e016      	b.n	80099fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fc2d 	bl	800a234 <USBD_StdEPReq>
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
      break;
 80099de:	e00c      	b.n	80099fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 fe8e 	bl	800b710 <USBD_LL_StallEP>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
      break;
 80099f8:	bf00      	nop
  }

  return ret;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a16:	7afb      	ldrb	r3, [r7, #11]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d16e      	bne.n	8009afa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	f040 8098 	bne.w	8009b60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d913      	bls.n	8009a64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	1ad2      	subs	r2, r2, r3
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	4293      	cmp	r3, r2
 8009a54:	bf28      	it	cs
 8009a56:	4613      	movcs	r3, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f001 f994 	bl	800ad8a <USBD_CtlContinueRx>
 8009a62:	e07d      	b.n	8009b60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d014      	beq.n	8009a9c <USBD_LL_DataOutStage+0x98>
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d81d      	bhi.n	8009ab2 <USBD_LL_DataOutStage+0xae>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <USBD_LL_DataOutStage+0x7c>
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d003      	beq.n	8009a86 <USBD_LL_DataOutStage+0x82>
 8009a7e:	e018      	b.n	8009ab2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	75bb      	strb	r3, [r7, #22]
            break;
 8009a84:	e018      	b.n	8009ab8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fa64 	bl	8009f5e <USBD_CoreFindIF>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75bb      	strb	r3, [r7, #22]
            break;
 8009a9a:	e00d      	b.n	8009ab8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fa66 	bl	8009f78 <USBD_CoreFindEP>
 8009aac:	4603      	mov	r3, r0
 8009aae:	75bb      	strb	r3, [r7, #22]
            break;
 8009ab0:	e002      	b.n	8009ab8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ab6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ab8:	7dbb      	ldrb	r3, [r7, #22]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d119      	bne.n	8009af2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d113      	bne.n	8009af2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009aca:	7dba      	ldrb	r2, [r7, #22]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	32ae      	adds	r2, #174	@ 0xae
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009ada:	7dba      	ldrb	r2, [r7, #22]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ae2:	7dba      	ldrb	r2, [r7, #22]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	32ae      	adds	r2, #174	@ 0xae
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f001 f95a 	bl	800adac <USBD_CtlSendStatus>
 8009af8:	e032      	b.n	8009b60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	4619      	mov	r1, r3
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fa37 	bl	8009f78 <USBD_CoreFindEP>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b0e:	7dbb      	ldrb	r3, [r7, #22]
 8009b10:	2bff      	cmp	r3, #255	@ 0xff
 8009b12:	d025      	beq.n	8009b60 <USBD_LL_DataOutStage+0x15c>
 8009b14:	7dbb      	ldrb	r3, [r7, #22]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d122      	bne.n	8009b60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d117      	bne.n	8009b56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b26:	7dba      	ldrb	r2, [r7, #22]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	32ae      	adds	r2, #174	@ 0xae
 8009b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00f      	beq.n	8009b56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b36:	7dba      	ldrb	r2, [r7, #22]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b3e:	7dba      	ldrb	r2, [r7, #22]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	32ae      	adds	r2, #174	@ 0xae
 8009b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	7afa      	ldrb	r2, [r7, #11]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	4798      	blx	r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	e000      	b.n	8009b62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	460b      	mov	r3, r1
 8009b74:	607a      	str	r2, [r7, #4]
 8009b76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d16f      	bne.n	8009c5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3314      	adds	r3, #20
 8009b82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d15a      	bne.n	8009c44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d914      	bls.n	8009bc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f001 f8bc 	bl	800ad2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f001 fe51 	bl	800b864 <USBD_LL_PrepareReceive>
 8009bc2:	e03f      	b.n	8009c44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d11c      	bne.n	8009c0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d316      	bcc.n	8009c0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d20f      	bcs.n	8009c0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bea:	2200      	movs	r2, #0
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f001 f89d 	bl	800ad2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2100      	movs	r1, #0
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 fe2e 	bl	800b864 <USBD_LL_PrepareReceive>
 8009c08:	e01c      	b.n	8009c44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d10f      	bne.n	8009c36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d009      	beq.n	8009c36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c36:	2180      	movs	r1, #128	@ 0x80
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f001 fd69 	bl	800b710 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f001 f8c7 	bl	800add2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d03a      	beq.n	8009cc4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fe42 	bl	80098d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c5c:	e032      	b.n	8009cc4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	4619      	mov	r1, r3
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f985 	bl	8009f78 <USBD_CoreFindEP>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2bff      	cmp	r3, #255	@ 0xff
 8009c76:	d025      	beq.n	8009cc4 <USBD_LL_DataInStage+0x15a>
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d122      	bne.n	8009cc4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d11c      	bne.n	8009cc4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009c8a:	7dfa      	ldrb	r2, [r7, #23]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	32ae      	adds	r2, #174	@ 0xae
 8009c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d014      	beq.n	8009cc4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c9a:	7dfa      	ldrb	r2, [r7, #23]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ca2:	7dfa      	ldrb	r2, [r7, #23]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	32ae      	adds	r2, #174	@ 0xae
 8009ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	7afa      	ldrb	r2, [r7, #11]
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	4798      	blx	r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cba:	7dbb      	ldrb	r3, [r7, #22]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009cc0:	7dbb      	ldrb	r3, [r7, #22]
 8009cc2:	e000      	b.n	8009cc6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d014      	beq.n	8009d34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00e      	beq.n	8009d34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6852      	ldr	r2, [r2, #4]
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	4611      	mov	r1, r2
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	4798      	blx	r3
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d34:	2340      	movs	r3, #64	@ 0x40
 8009d36:	2200      	movs	r2, #0
 8009d38:	2100      	movs	r1, #0
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 fca3 	bl	800b686 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2240      	movs	r2, #64	@ 0x40
 8009d4c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d50:	2340      	movs	r3, #64	@ 0x40
 8009d52:	2200      	movs	r2, #0
 8009d54:	2180      	movs	r1, #128	@ 0x80
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 fc95 	bl	800b686 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2240      	movs	r2, #64	@ 0x40
 8009d66:	621a      	str	r2, [r3, #32]

  return ret;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	78fa      	ldrb	r2, [r7, #3]
 8009d82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d006      	beq.n	8009db4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2204      	movs	r2, #4
 8009db8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d106      	bne.n	8009dec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d110      	bne.n	8009e30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	32ae      	adds	r2, #174	@ 0xae
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e01c      	b.n	8009e96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d115      	bne.n	8009e94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	32ae      	adds	r2, #174	@ 0xae
 8009e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32ae      	adds	r2, #174	@ 0xae
 8009e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	32ae      	adds	r2, #174	@ 0xae
 8009eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e01c      	b.n	8009efa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d115      	bne.n	8009ef8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	32ae      	adds	r2, #174	@ 0xae
 8009ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	32ae      	adds	r2, #174	@ 0xae
 8009eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef0:	78fa      	ldrb	r2, [r7, #3]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00e      	beq.n	8009f54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6852      	ldr	r2, [r2, #4]
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	4611      	mov	r1, r2
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d91f      	bls.n	8009ff8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fbe:	e013      	b.n	8009fe8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fc0:	f107 030a 	add.w	r3, r7, #10
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6978      	ldr	r0, [r7, #20]
 8009fc8:	f000 f81b 	bl	800a002 <USBD_GetNextDesc>
 8009fcc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d108      	bne.n	8009fe8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	789b      	ldrb	r3, [r3, #2]
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d008      	beq.n	8009ff6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	885b      	ldrh	r3, [r3, #2]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	897b      	ldrh	r3, [r7, #10]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d8e5      	bhi.n	8009fc0 <USBD_GetEpDesc+0x2e>
 8009ff4:	e000      	b.n	8009ff8 <USBD_GetEpDesc+0x66>
          break;
 8009ff6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ff8:	693b      	ldr	r3, [r7, #16]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4413      	add	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b087      	sub	sp, #28
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3301      	adds	r3, #1
 800a050:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a058:	8a3b      	ldrh	r3, [r7, #16]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	b21a      	sxth	r2, r3
 800a05e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a062:	4313      	orrs	r3, r2
 800a064:	b21b      	sxth	r3, r3
 800a066:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a068:	89fb      	ldrh	r3, [r7, #14]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a08e:	2b40      	cmp	r3, #64	@ 0x40
 800a090:	d005      	beq.n	800a09e <USBD_StdDevReq+0x26>
 800a092:	2b40      	cmp	r3, #64	@ 0x40
 800a094:	d857      	bhi.n	800a146 <USBD_StdDevReq+0xce>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00f      	beq.n	800a0ba <USBD_StdDevReq+0x42>
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d153      	bne.n	800a146 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	32ae      	adds	r2, #174	@ 0xae
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b8:	e04a      	b.n	800a150 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b09      	cmp	r3, #9
 800a0c0:	d83b      	bhi.n	800a13a <USBD_StdDevReq+0xc2>
 800a0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <USBD_StdDevReq+0x50>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a131 	.word	0x0800a131
 800a0d0:	0800a13b 	.word	0x0800a13b
 800a0d4:	0800a127 	.word	0x0800a127
 800a0d8:	0800a13b 	.word	0x0800a13b
 800a0dc:	0800a0fb 	.word	0x0800a0fb
 800a0e0:	0800a0f1 	.word	0x0800a0f1
 800a0e4:	0800a13b 	.word	0x0800a13b
 800a0e8:	0800a113 	.word	0x0800a113
 800a0ec:	0800a105 	.word	0x0800a105
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa3c 	bl	800a570 <USBD_GetDescriptor>
          break;
 800a0f8:	e024      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fba1 	bl	800a844 <USBD_SetAddress>
          break;
 800a102:	e01f      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fbe0 	bl	800a8cc <USBD_SetConfig>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]
          break;
 800a110:	e018      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc83 	bl	800aa20 <USBD_GetConfig>
          break;
 800a11a:	e013      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fcb4 	bl	800aa8c <USBD_GetStatus>
          break;
 800a124:	e00e      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fce3 	bl	800aaf4 <USBD_SetFeature>
          break;
 800a12e:	e009      	b.n	800a144 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fd07 	bl	800ab46 <USBD_ClrFeature>
          break;
 800a138:	e004      	b.n	800a144 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fd5e 	bl	800abfe <USBD_CtlError>
          break;
 800a142:	bf00      	nop
      }
      break;
 800a144:	e004      	b.n	800a150 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fd58 	bl	800abfe <USBD_CtlError>
      break;
 800a14e:	bf00      	nop
  }

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop

0800a15c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a172:	2b40      	cmp	r3, #64	@ 0x40
 800a174:	d005      	beq.n	800a182 <USBD_StdItfReq+0x26>
 800a176:	2b40      	cmp	r3, #64	@ 0x40
 800a178:	d852      	bhi.n	800a220 <USBD_StdItfReq+0xc4>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <USBD_StdItfReq+0x26>
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d14e      	bne.n	800a220 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	3b01      	subs	r3, #1
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d840      	bhi.n	800a212 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	889b      	ldrh	r3, [r3, #4]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b01      	cmp	r3, #1
 800a198:	d836      	bhi.n	800a208 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	889b      	ldrh	r3, [r3, #4]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff fedb 	bl	8009f5e <USBD_CoreFindIF>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2bff      	cmp	r3, #255	@ 0xff
 800a1b0:	d01d      	beq.n	800a1ee <USBD_StdItfReq+0x92>
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11a      	bne.n	800a1ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1b8:	7bba      	ldrb	r2, [r7, #14]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	32ae      	adds	r2, #174	@ 0xae
 800a1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00f      	beq.n	800a1e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a1c8:	7bba      	ldrb	r2, [r7, #14]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1d0:	7bba      	ldrb	r2, [r7, #14]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32ae      	adds	r2, #174	@ 0xae
 800a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a1e6:	e004      	b.n	800a1f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a1ec:	e001      	b.n	800a1f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	88db      	ldrh	r3, [r3, #6]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d110      	bne.n	800a21c <USBD_StdItfReq+0xc0>
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10d      	bne.n	800a21c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fdd3 	bl	800adac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a206:	e009      	b.n	800a21c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fcf7 	bl	800abfe <USBD_CtlError>
          break;
 800a210:	e004      	b.n	800a21c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fcf2 	bl	800abfe <USBD_CtlError>
          break;
 800a21a:	e000      	b.n	800a21e <USBD_StdItfReq+0xc2>
          break;
 800a21c:	bf00      	nop
      }
      break;
 800a21e:	e004      	b.n	800a22a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fceb 	bl	800abfe <USBD_CtlError>
      break;
 800a228:	bf00      	nop
  }

  return ret;
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	889b      	ldrh	r3, [r3, #4]
 800a246:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a250:	2b40      	cmp	r3, #64	@ 0x40
 800a252:	d007      	beq.n	800a264 <USBD_StdEPReq+0x30>
 800a254:	2b40      	cmp	r3, #64	@ 0x40
 800a256:	f200 817f 	bhi.w	800a558 <USBD_StdEPReq+0x324>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d02a      	beq.n	800a2b4 <USBD_StdEPReq+0x80>
 800a25e:	2b20      	cmp	r3, #32
 800a260:	f040 817a 	bne.w	800a558 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff fe85 	bl	8009f78 <USBD_CoreFindEP>
 800a26e:	4603      	mov	r3, r0
 800a270:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a272:	7b7b      	ldrb	r3, [r7, #13]
 800a274:	2bff      	cmp	r3, #255	@ 0xff
 800a276:	f000 8174 	beq.w	800a562 <USBD_StdEPReq+0x32e>
 800a27a:	7b7b      	ldrb	r3, [r7, #13]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f040 8170 	bne.w	800a562 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a282:	7b7a      	ldrb	r2, [r7, #13]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a28a:	7b7a      	ldrb	r2, [r7, #13]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	32ae      	adds	r2, #174	@ 0xae
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8163 	beq.w	800a562 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a29c:	7b7a      	ldrb	r2, [r7, #13]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32ae      	adds	r2, #174	@ 0xae
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	4798      	blx	r3
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2b2:	e156      	b.n	800a562 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d008      	beq.n	800a2ce <USBD_StdEPReq+0x9a>
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	f300 8145 	bgt.w	800a54c <USBD_StdEPReq+0x318>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 809b 	beq.w	800a3fe <USBD_StdEPReq+0x1ca>
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d03c      	beq.n	800a346 <USBD_StdEPReq+0x112>
 800a2cc:	e13e      	b.n	800a54c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d002      	beq.n	800a2e0 <USBD_StdEPReq+0xac>
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d016      	beq.n	800a30c <USBD_StdEPReq+0xd8>
 800a2de:	e02c      	b.n	800a33a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00d      	beq.n	800a302 <USBD_StdEPReq+0xce>
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ea:	d00a      	beq.n	800a302 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fa0d 	bl	800b710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2f6:	2180      	movs	r1, #128	@ 0x80
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fa09 	bl	800b710 <USBD_LL_StallEP>
 800a2fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a300:	e020      	b.n	800a344 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fc7a 	bl	800abfe <USBD_CtlError>
              break;
 800a30a:	e01b      	b.n	800a344 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	885b      	ldrh	r3, [r3, #2]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10e      	bne.n	800a332 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <USBD_StdEPReq+0xfe>
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b80      	cmp	r3, #128	@ 0x80
 800a31e:	d008      	beq.n	800a332 <USBD_StdEPReq+0xfe>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	88db      	ldrh	r3, [r3, #6]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f9ef 	bl	800b710 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fd3a 	bl	800adac <USBD_CtlSendStatus>

              break;
 800a338:	e004      	b.n	800a344 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fc5e 	bl	800abfe <USBD_CtlError>
              break;
 800a342:	bf00      	nop
          }
          break;
 800a344:	e107      	b.n	800a556 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d002      	beq.n	800a358 <USBD_StdEPReq+0x124>
 800a352:	2b03      	cmp	r3, #3
 800a354:	d016      	beq.n	800a384 <USBD_StdEPReq+0x150>
 800a356:	e04b      	b.n	800a3f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a358:	7bbb      	ldrb	r3, [r7, #14]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00d      	beq.n	800a37a <USBD_StdEPReq+0x146>
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b80      	cmp	r3, #128	@ 0x80
 800a362:	d00a      	beq.n	800a37a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f001 f9d1 	bl	800b710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a36e:	2180      	movs	r1, #128	@ 0x80
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 f9cd 	bl	800b710 <USBD_LL_StallEP>
 800a376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a378:	e040      	b.n	800a3fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fc3e 	bl	800abfe <USBD_CtlError>
              break;
 800a382:	e03b      	b.n	800a3fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	885b      	ldrh	r3, [r3, #2]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d136      	bne.n	800a3fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a392:	2b00      	cmp	r3, #0
 800a394:	d004      	beq.n	800a3a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 f9d7 	bl	800b74e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fd03 	bl	800adac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fde4 	bl	8009f78 <USBD_CoreFindEP>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3b4:	7b7b      	ldrb	r3, [r7, #13]
 800a3b6:	2bff      	cmp	r3, #255	@ 0xff
 800a3b8:	d01f      	beq.n	800a3fa <USBD_StdEPReq+0x1c6>
 800a3ba:	7b7b      	ldrb	r3, [r7, #13]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11c      	bne.n	800a3fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3c0:	7b7a      	ldrb	r2, [r7, #13]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a3c8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32ae      	adds	r2, #174	@ 0xae
 800a3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d010      	beq.n	800a3fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3d8:	7b7a      	ldrb	r2, [r7, #13]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	32ae      	adds	r2, #174	@ 0xae
 800a3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a3ee:	e004      	b.n	800a3fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fc03 	bl	800abfe <USBD_CtlError>
              break;
 800a3f8:	e000      	b.n	800a3fc <USBD_StdEPReq+0x1c8>
              break;
 800a3fa:	bf00      	nop
          }
          break;
 800a3fc:	e0ab      	b.n	800a556 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b02      	cmp	r3, #2
 800a408:	d002      	beq.n	800a410 <USBD_StdEPReq+0x1dc>
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d032      	beq.n	800a474 <USBD_StdEPReq+0x240>
 800a40e:	e097      	b.n	800a540 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d007      	beq.n	800a426 <USBD_StdEPReq+0x1f2>
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b80      	cmp	r3, #128	@ 0x80
 800a41a:	d004      	beq.n	800a426 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fbed 	bl	800abfe <USBD_CtlError>
                break;
 800a424:	e091      	b.n	800a54a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	da0b      	bge.n	800a446 <USBD_StdEPReq+0x212>
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	3310      	adds	r3, #16
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4413      	add	r3, r2
 800a442:	3304      	adds	r3, #4
 800a444:	e00b      	b.n	800a45e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	4413      	add	r3, r2
 800a45c:	3304      	adds	r3, #4
 800a45e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2202      	movs	r2, #2
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fc43 	bl	800acf8 <USBD_CtlSendData>
              break;
 800a472:	e06a      	b.n	800a54a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	da11      	bge.n	800a4a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	f003 020f 	and.w	r2, r3, #15
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	4613      	mov	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	3324      	adds	r3, #36	@ 0x24
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d117      	bne.n	800a4c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fbb0 	bl	800abfe <USBD_CtlError>
                  break;
 800a49e:	e054      	b.n	800a54a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	f003 020f 	and.w	r2, r3, #15
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	440b      	add	r3, r1
 800a4b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fb9d 	bl	800abfe <USBD_CtlError>
                  break;
 800a4c4:	e041      	b.n	800a54a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	da0b      	bge.n	800a4e6 <USBD_StdEPReq+0x2b2>
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	3310      	adds	r3, #16
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	e00b      	b.n	800a4fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <USBD_StdEPReq+0x2d8>
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b80      	cmp	r3, #128	@ 0x80
 800a50a:	d103      	bne.n	800a514 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	e00e      	b.n	800a532 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f937 	bl	800b78c <USBD_LL_IsStallEP>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2201      	movs	r2, #1
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	e002      	b.n	800a532 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2202      	movs	r2, #2
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fbdd 	bl	800acf8 <USBD_CtlSendData>
              break;
 800a53e:	e004      	b.n	800a54a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fb5b 	bl	800abfe <USBD_CtlError>
              break;
 800a548:	bf00      	nop
          }
          break;
 800a54a:	e004      	b.n	800a556 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fb55 	bl	800abfe <USBD_CtlError>
          break;
 800a554:	bf00      	nop
      }
      break;
 800a556:	e005      	b.n	800a564 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fb4f 	bl	800abfe <USBD_CtlError>
      break;
 800a560:	e000      	b.n	800a564 <USBD_StdEPReq+0x330>
      break;
 800a562:	bf00      	nop
  }

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	885b      	ldrh	r3, [r3, #2]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	2b06      	cmp	r3, #6
 800a592:	f200 8128 	bhi.w	800a7e6 <USBD_GetDescriptor+0x276>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <USBD_GetDescriptor+0x2c>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5b9 	.word	0x0800a5b9
 800a5a0:	0800a5d1 	.word	0x0800a5d1
 800a5a4:	0800a611 	.word	0x0800a611
 800a5a8:	0800a7e7 	.word	0x0800a7e7
 800a5ac:	0800a7e7 	.word	0x0800a7e7
 800a5b0:	0800a787 	.word	0x0800a787
 800a5b4:	0800a7b3 	.word	0x0800a7b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	7c12      	ldrb	r2, [r2, #16]
 800a5c4:	f107 0108 	add.w	r1, r7, #8
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	60f8      	str	r0, [r7, #12]
      break;
 800a5ce:	e112      	b.n	800a7f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	7c1b      	ldrb	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10d      	bne.n	800a5f4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e0:	f107 0208 	add.w	r2, r7, #8
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4798      	blx	r3
 800a5e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5f2:	e100      	b.n	800a7f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	f107 0208 	add.w	r2, r7, #8
 800a600:	4610      	mov	r0, r2
 800a602:	4798      	blx	r3
 800a604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	2202      	movs	r2, #2
 800a60c:	701a      	strb	r2, [r3, #0]
      break;
 800a60e:	e0f2      	b.n	800a7f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	885b      	ldrh	r3, [r3, #2]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b05      	cmp	r3, #5
 800a618:	f200 80ac 	bhi.w	800a774 <USBD_GetDescriptor+0x204>
 800a61c:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <USBD_GetDescriptor+0xb4>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a63d 	.word	0x0800a63d
 800a628:	0800a671 	.word	0x0800a671
 800a62c:	0800a6a5 	.word	0x0800a6a5
 800a630:	0800a6d9 	.word	0x0800a6d9
 800a634:	0800a70d 	.word	0x0800a70d
 800a638:	0800a741 	.word	0x0800a741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	7c12      	ldrb	r2, [r2, #16]
 800a654:	f107 0108 	add.w	r1, r7, #8
 800a658:	4610      	mov	r0, r2
 800a65a:	4798      	blx	r3
 800a65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a65e:	e091      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 facb 	bl	800abfe <USBD_CtlError>
            err++;
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	3301      	adds	r3, #1
 800a66c:	72fb      	strb	r3, [r7, #11]
          break;
 800a66e:	e089      	b.n	800a784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	7c12      	ldrb	r2, [r2, #16]
 800a688:	f107 0108 	add.w	r1, r7, #8
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
 800a690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a692:	e077      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fab1 	bl	800abfe <USBD_CtlError>
            err++;
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a2:	e06f      	b.n	800a784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	7c12      	ldrb	r2, [r2, #16]
 800a6bc:	f107 0108 	add.w	r1, r7, #8
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4798      	blx	r3
 800a6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6c6:	e05d      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa97 	bl	800abfe <USBD_CtlError>
            err++;
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6d6:	e055      	b.n	800a784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	7c12      	ldrb	r2, [r2, #16]
 800a6f0:	f107 0108 	add.w	r1, r7, #8
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4798      	blx	r3
 800a6f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6fa:	e043      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fa7d 	bl	800abfe <USBD_CtlError>
            err++;
 800a704:	7afb      	ldrb	r3, [r7, #11]
 800a706:	3301      	adds	r3, #1
 800a708:	72fb      	strb	r3, [r7, #11]
          break;
 800a70a:	e03b      	b.n	800a784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00b      	beq.n	800a730 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	7c12      	ldrb	r2, [r2, #16]
 800a724:	f107 0108 	add.w	r1, r7, #8
 800a728:	4610      	mov	r0, r2
 800a72a:	4798      	blx	r3
 800a72c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a72e:	e029      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fa63 	bl	800abfe <USBD_CtlError>
            err++;
 800a738:	7afb      	ldrb	r3, [r7, #11]
 800a73a:	3301      	adds	r3, #1
 800a73c:	72fb      	strb	r3, [r7, #11]
          break;
 800a73e:	e021      	b.n	800a784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	7c12      	ldrb	r2, [r2, #16]
 800a758:	f107 0108 	add.w	r1, r7, #8
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a762:	e00f      	b.n	800a784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fa49 	bl	800abfe <USBD_CtlError>
            err++;
 800a76c:	7afb      	ldrb	r3, [r7, #11]
 800a76e:	3301      	adds	r3, #1
 800a770:	72fb      	strb	r3, [r7, #11]
          break;
 800a772:	e007      	b.n	800a784 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa41 	bl	800abfe <USBD_CtlError>
          err++;
 800a77c:	7afb      	ldrb	r3, [r7, #11]
 800a77e:	3301      	adds	r3, #1
 800a780:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a782:	bf00      	nop
      }
      break;
 800a784:	e037      	b.n	800a7f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7c1b      	ldrb	r3, [r3, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d109      	bne.n	800a7a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a796:	f107 0208 	add.w	r2, r7, #8
 800a79a:	4610      	mov	r0, r2
 800a79c:	4798      	blx	r3
 800a79e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7a0:	e029      	b.n	800a7f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fa2a 	bl	800abfe <USBD_CtlError>
        err++;
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a7b0:	e021      	b.n	800a7f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7c1b      	ldrb	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10d      	bne.n	800a7d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c2:	f107 0208 	add.w	r2, r7, #8
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	4798      	blx	r3
 800a7ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7d4:	e00f      	b.n	800a7f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa10 	bl	800abfe <USBD_CtlError>
        err++;
 800a7de:	7afb      	ldrb	r3, [r7, #11]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7e4:	e007      	b.n	800a7f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fa08 	bl	800abfe <USBD_CtlError>
      err++;
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7f4:	bf00      	nop
  }

  if (err != 0U)
 800a7f6:	7afb      	ldrb	r3, [r7, #11]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11e      	bne.n	800a83a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	88db      	ldrh	r3, [r3, #6]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d016      	beq.n	800a832 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a804:	893b      	ldrh	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00e      	beq.n	800a828 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	88da      	ldrh	r2, [r3, #6]
 800a80e:	893b      	ldrh	r3, [r7, #8]
 800a810:	4293      	cmp	r3, r2
 800a812:	bf28      	it	cs
 800a814:	4613      	movcs	r3, r2
 800a816:	b29b      	uxth	r3, r3
 800a818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a81a:	893b      	ldrh	r3, [r7, #8]
 800a81c:	461a      	mov	r2, r3
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fa69 	bl	800acf8 <USBD_CtlSendData>
 800a826:	e009      	b.n	800a83c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f9e7 	bl	800abfe <USBD_CtlError>
 800a830:	e004      	b.n	800a83c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 faba 	bl	800adac <USBD_CtlSendStatus>
 800a838:	e000      	b.n	800a83c <USBD_GetDescriptor+0x2cc>
    return;
 800a83a:	bf00      	nop
  }
}
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop

0800a844 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	889b      	ldrh	r3, [r3, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d131      	bne.n	800a8ba <USBD_SetAddress+0x76>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88db      	ldrh	r3, [r3, #6]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d12d      	bne.n	800a8ba <USBD_SetAddress+0x76>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	885b      	ldrh	r3, [r3, #2]
 800a862:	2b7f      	cmp	r3, #127	@ 0x7f
 800a864:	d829      	bhi.n	800a8ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	885b      	ldrh	r3, [r3, #2]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d104      	bne.n	800a888 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f9bc 	bl	800abfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a886:	e01d      	b.n	800a8c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7bfa      	ldrb	r2, [r7, #15]
 800a88c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 ffa5 	bl	800b7e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa86 	bl	800adac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ae:	e009      	b.n	800a8c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b8:	e004      	b.n	800a8c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f99e 	bl	800abfe <USBD_CtlError>
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	885b      	ldrh	r3, [r3, #2]
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	4b4e      	ldr	r3, [pc, #312]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a8e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a8e4:	4b4d      	ldr	r3, [pc, #308]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d905      	bls.n	800a8f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f985 	bl	800abfe <USBD_CtlError>
    return USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e08c      	b.n	800aa12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b02      	cmp	r3, #2
 800a902:	d002      	beq.n	800a90a <USBD_SetConfig+0x3e>
 800a904:	2b03      	cmp	r3, #3
 800a906:	d029      	beq.n	800a95c <USBD_SetConfig+0x90>
 800a908:	e075      	b.n	800a9f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a90a:	4b44      	ldr	r3, [pc, #272]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d020      	beq.n	800a954 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a912:	4b42      	ldr	r3, [pc, #264]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a91c:	4b3f      	ldr	r3, [pc, #252]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7fe ffe3 	bl	80098ee <USBD_SetClassConfig>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f962 	bl	800abfe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a942:	e065      	b.n	800aa10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa31 	bl	800adac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2203      	movs	r2, #3
 800a94e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a952:	e05d      	b.n	800aa10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fa29 	bl	800adac <USBD_CtlSendStatus>
      break;
 800a95a:	e059      	b.n	800aa10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a95c:	4b2f      	ldr	r3, [pc, #188]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d112      	bne.n	800a98a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2202      	movs	r2, #2
 800a968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a96c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a976:	4b29      	ldr	r3, [pc, #164]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7fe ffd2 	bl	8009926 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa12 	bl	800adac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a988:	e042      	b.n	800aa10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a98a:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	429a      	cmp	r2, r3
 800a996:	d02a      	beq.n	800a9ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7fe ffc0 	bl	8009926 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa1c <USBD_SetConfig+0x150>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7fe ff99 	bl	80098ee <USBD_SetClassConfig>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00f      	beq.n	800a9e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f918 	bl	800abfe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7fe ffa5 	bl	8009926 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a9e4:	e014      	b.n	800aa10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9e0 	bl	800adac <USBD_CtlSendStatus>
      break;
 800a9ec:	e010      	b.n	800aa10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9dc 	bl	800adac <USBD_CtlSendStatus>
      break;
 800a9f4:	e00c      	b.n	800aa10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f900 	bl	800abfe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9fe:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <USBD_SetConfig+0x150>)
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7fe ff8e 	bl	8009926 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa0e:	bf00      	nop
  }

  return ret;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	2000046c 	.word	0x2000046c

0800aa20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	88db      	ldrh	r3, [r3, #6]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d004      	beq.n	800aa3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f8e2 	bl	800abfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa3a:	e023      	b.n	800aa84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	dc02      	bgt.n	800aa4e <USBD_GetConfig+0x2e>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dc03      	bgt.n	800aa54 <USBD_GetConfig+0x34>
 800aa4c:	e015      	b.n	800aa7a <USBD_GetConfig+0x5a>
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d00b      	beq.n	800aa6a <USBD_GetConfig+0x4a>
 800aa52:	e012      	b.n	800aa7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f948 	bl	800acf8 <USBD_CtlSendData>
        break;
 800aa68:	e00c      	b.n	800aa84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f940 	bl	800acf8 <USBD_CtlSendData>
        break;
 800aa78:	e004      	b.n	800aa84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f8be 	bl	800abfe <USBD_CtlError>
        break;
 800aa82:	bf00      	nop
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d81e      	bhi.n	800aae2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	88db      	ldrh	r3, [r3, #6]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d004      	beq.n	800aab6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8a5 	bl	800abfe <USBD_CtlError>
        break;
 800aab4:	e01a      	b.n	800aaec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f043 0202 	orr.w	r2, r3, #2
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	330c      	adds	r3, #12
 800aad6:	2202      	movs	r2, #2
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f90c 	bl	800acf8 <USBD_CtlSendData>
      break;
 800aae0:	e004      	b.n	800aaec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f88a 	bl	800abfe <USBD_CtlError>
      break;
 800aaea:	bf00      	nop
  }
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	885b      	ldrh	r3, [r3, #2]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d107      	bne.n	800ab16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f94c 	bl	800adac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab14:	e013      	b.n	800ab3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	885b      	ldrh	r3, [r3, #2]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d10b      	bne.n	800ab36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	889b      	ldrh	r3, [r3, #4]
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f93c 	bl	800adac <USBD_CtlSendStatus>
}
 800ab34:	e003      	b.n	800ab3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f860 	bl	800abfe <USBD_CtlError>
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d80b      	bhi.n	800ab76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	885b      	ldrh	r3, [r3, #2]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d10c      	bne.n	800ab80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f91c 	bl	800adac <USBD_CtlSendStatus>
      }
      break;
 800ab74:	e004      	b.n	800ab80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f840 	bl	800abfe <USBD_CtlError>
      break;
 800ab7e:	e000      	b.n	800ab82 <USBD_ClrFeature+0x3c>
      break;
 800ab80:	bf00      	nop
  }
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	781a      	ldrb	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff fa40 	bl	800a03a <SWAPBYTE>
 800abba:	4603      	mov	r3, r0
 800abbc:	461a      	mov	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3301      	adds	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7ff fa33 	bl	800a03a <SWAPBYTE>
 800abd4:	4603      	mov	r3, r0
 800abd6:	461a      	mov	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3301      	adds	r3, #1
 800abe6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fa26 	bl	800a03a <SWAPBYTE>
 800abee:	4603      	mov	r3, r0
 800abf0:	461a      	mov	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	80da      	strh	r2, [r3, #6]
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac08:	2180      	movs	r1, #128	@ 0x80
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fd80 	bl	800b710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac10:	2100      	movs	r1, #0
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fd7c 	bl	800b710 <USBD_LL_StallEP>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d042      	beq.n	800acbc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ac3a:	6938      	ldr	r0, [r7, #16]
 800ac3c:	f000 f842 	bl	800acc4 <USBD_GetLen>
 800ac40:	4603      	mov	r3, r0
 800ac42:	3301      	adds	r3, #1
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac4a:	d808      	bhi.n	800ac5e <USBD_GetString+0x3e>
 800ac4c:	6938      	ldr	r0, [r7, #16]
 800ac4e:	f000 f839 	bl	800acc4 <USBD_GetLen>
 800ac52:	4603      	mov	r3, r0
 800ac54:	3301      	adds	r3, #1
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	e001      	b.n	800ac62 <USBD_GetString+0x42>
 800ac5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	7812      	ldrb	r2, [r2, #0]
 800ac70:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	3301      	adds	r3, #1
 800ac76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2203      	movs	r2, #3
 800ac80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac88:	e013      	b.n	800acb2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	4413      	add	r3, r2
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	7812      	ldrb	r2, [r2, #0]
 800ac94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	613b      	str	r3, [r7, #16]
    idx++;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	4413      	add	r3, r2
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
    idx++;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	3301      	adds	r3, #1
 800acb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e7      	bne.n	800ac8a <USBD_GetString+0x6a>
 800acba:	e000      	b.n	800acbe <USBD_GetString+0x9e>
    return;
 800acbc:	bf00      	nop
  }
}
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800acd4:	e005      	b.n	800ace2 <USBD_GetLen+0x1e>
  {
    len++;
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	3301      	adds	r3, #1
 800acda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	3301      	adds	r3, #1
 800ace0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f5      	bne.n	800acd6 <USBD_GetLen+0x12>
  }

  return len;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 fd7f 	bl	800b822 <USBD_LL_Transmit>

  return USBD_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b084      	sub	sp, #16
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	2100      	movs	r1, #0
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 fd6e 	bl	800b822 <USBD_LL_Transmit>

  return USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2203      	movs	r2, #3
 800ad60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	2100      	movs	r1, #0
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 fd72 	bl	800b864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 fd61 	bl	800b864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2204      	movs	r2, #4
 800adb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adbc:	2300      	movs	r3, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fd2d 	bl	800b822 <USBD_LL_Transmit>

  return USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2205      	movs	r2, #5
 800adde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ade2:	2300      	movs	r3, #0
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fd3b 	bl	800b864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800adfc:	2200      	movs	r2, #0
 800adfe:	4912      	ldr	r1, [pc, #72]	@ (800ae48 <MX_USB_DEVICE_Init+0x50>)
 800ae00:	4812      	ldr	r0, [pc, #72]	@ (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae02:	f7fe fcf7 	bl	80097f4 <USBD_Init>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae0c:	f7f6 fd4a 	bl	80018a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae10:	490f      	ldr	r1, [pc, #60]	@ (800ae50 <MX_USB_DEVICE_Init+0x58>)
 800ae12:	480e      	ldr	r0, [pc, #56]	@ (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae14:	f7fe fd1e 	bl	8009854 <USBD_RegisterClass>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae1e:	f7f6 fd41 	bl	80018a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae22:	490c      	ldr	r1, [pc, #48]	@ (800ae54 <MX_USB_DEVICE_Init+0x5c>)
 800ae24:	4809      	ldr	r0, [pc, #36]	@ (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae26:	f7fe fc4b 	bl	80096c0 <USBD_CDC_RegisterInterface>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae30:	f7f6 fd38 	bl	80018a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae34:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae36:	f7fe fd43 	bl	80098c0 <USBD_Start>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae40:	f7f6 fd30 	bl	80018a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae44:	bf00      	nop
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	200000ac 	.word	0x200000ac
 800ae4c:	20000470 	.word	0x20000470
 800ae50:	20000018 	.word	0x20000018
 800ae54:	20000098 	.word	0x20000098

0800ae58 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	460b      	mov	r3, r1
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800ae66:	897b      	ldrh	r3, [r7, #10]
 800ae68:	2b07      	cmp	r3, #7
 800ae6a:	d801      	bhi.n	800ae70 <parse_packet+0x18>
        return 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e050      	b.n	800af12 <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3303      	adds	r3, #3
 800ae74:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b25a      	sxtb	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	3301      	adds	r3, #1
 800ae84:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	061a      	lsls	r2, r3, #24
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	041b      	lsls	r3, r3, #16
 800ae94:	431a      	orrs	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	3302      	adds	r3, #2
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	3203      	adds	r2, #3
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	431a      	orrs	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	3301      	adds	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800aebe:	7cfb      	ldrb	r3, [r7, #19]
 800aec0:	2b04      	cmp	r3, #4
 800aec2:	d901      	bls.n	800aec8 <parse_packet+0x70>
        return 0; // String too long
 800aec4:	2300      	movs	r3, #0
 800aec6:	e024      	b.n	800af12 <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3308      	adds	r3, #8
 800aecc:	7cfa      	ldrb	r2, [r7, #19]
 800aece:	6979      	ldr	r1, [r7, #20]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 fb1c 	bl	800c50e <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800aed6:	7cfb      	ldrb	r3, [r7, #19]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	4413      	add	r3, r2
 800aedc:	2200      	movs	r2, #0
 800aede:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800aee0:	7cfb      	ldrb	r3, [r7, #19]
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	061a      	lsls	r2, r3, #24
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	3301      	adds	r3, #1
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	431a      	orrs	r2, r3
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3302      	adds	r3, #2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	4313      	orrs	r3, r2
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	3203      	adds	r2, #3
 800af06:	7812      	ldrb	r2, [r2, #0]
 800af08:	4313      	orrs	r3, r2
 800af0a:	461a      	mov	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	611a      	str	r2, [r3, #16]

    return 1;
 800af10:	2301      	movs	r3, #1
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af20:	2200      	movs	r2, #0
 800af22:	4905      	ldr	r1, [pc, #20]	@ (800af38 <CDC_Init_FS+0x1c>)
 800af24:	4805      	ldr	r0, [pc, #20]	@ (800af3c <CDC_Init_FS+0x20>)
 800af26:	f7fe fbe5 	bl	80096f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af2a:	4905      	ldr	r1, [pc, #20]	@ (800af40 <CDC_Init_FS+0x24>)
 800af2c:	4803      	ldr	r0, [pc, #12]	@ (800af3c <CDC_Init_FS+0x20>)
 800af2e:	f7fe fc03 	bl	8009738 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af34:	4618      	mov	r0, r3
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20000f64 	.word	0x20000f64
 800af3c:	20000470 	.word	0x20000470
 800af40:	20000764 	.word	0x20000764

0800af44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
 800af60:	4613      	mov	r3, r2
 800af62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	2b23      	cmp	r3, #35	@ 0x23
 800af68:	d84a      	bhi.n	800b000 <CDC_Control_FS+0xac>
 800af6a:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <CDC_Control_FS+0x1c>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800b001 	.word	0x0800b001
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b001 	.word	0x0800b001
 800af7c:	0800b001 	.word	0x0800b001
 800af80:	0800b001 	.word	0x0800b001
 800af84:	0800b001 	.word	0x0800b001
 800af88:	0800b001 	.word	0x0800b001
 800af8c:	0800b001 	.word	0x0800b001
 800af90:	0800b001 	.word	0x0800b001
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800b001 	.word	0x0800b001
 800afa0:	0800b001 	.word	0x0800b001
 800afa4:	0800b001 	.word	0x0800b001
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800b001 	.word	0x0800b001
 800afb4:	0800b001 	.word	0x0800b001
 800afb8:	0800b001 	.word	0x0800b001
 800afbc:	0800b001 	.word	0x0800b001
 800afc0:	0800b001 	.word	0x0800b001
 800afc4:	0800b001 	.word	0x0800b001
 800afc8:	0800b001 	.word	0x0800b001
 800afcc:	0800b001 	.word	0x0800b001
 800afd0:	0800b001 	.word	0x0800b001
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b001 	.word	0x0800b001
 800afe8:	0800b001 	.word	0x0800b001
 800afec:	0800b001 	.word	0x0800b001
 800aff0:	0800b001 	.word	0x0800b001
 800aff4:	0800b001 	.word	0x0800b001
 800aff8:	0800b001 	.word	0x0800b001
 800affc:	0800b001 	.word	0x0800b001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b000:	bf00      	nop
  }

  return (USBD_OK);
 800b002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b010:	b5b0      	push	{r4, r5, r7, lr}
 800b012:	b08e      	sub	sp, #56	@ 0x38
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
//		uint8_t error_response[] = "Invalid length";
//		CDC_Transmit_FS(error_response, strlen((char*)error_response));
//		return (USBD_FAIL);
//	}
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ff16 	bl	800ae58 <parse_packet>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d119      	bne.n	800b066 <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800b032:	4b15      	ldr	r3, [pc, #84]	@ (800b088 <CDC_Receive_FS+0x78>)
 800b034:	f107 040c 	add.w	r4, r7, #12
 800b038:	461d      	mov	r5, r3
 800b03a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b03c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b042:	6020      	str	r0, [r4, #0]
 800b044:	3404      	adds	r4, #4
 800b046:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800b048:	f107 030c 	add.w	r3, r7, #12
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f5 f917 	bl	8000280 <strlen>
 800b052:	4603      	mov	r3, r0
 800b054:	b29a      	uxth	r2, r3
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 f819 	bl	800b094 <CDC_Transmit_FS>
		return USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	e00b      	b.n	800b07e <CDC_Receive_FS+0x6e>
	}

	recivedData = data;
 800b066:	4b09      	ldr	r3, [pc, #36]	@ (800b08c <CDC_Receive_FS+0x7c>)
 800b068:	461d      	mov	r5, r3
 800b06a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800b06e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800b076:	4b06      	ldr	r3, [pc, #24]	@ (800b090 <CDC_Receive_FS+0x80>)
 800b078:	2201      	movs	r2, #1
 800b07a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b07c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3738      	adds	r7, #56	@ 0x38
 800b082:	46bd      	mov	sp, r7
 800b084:	bdb0      	pop	{r4, r5, r7, pc}
 800b086:	bf00      	nop
 800b088:	0800e270 	.word	0x0800e270
 800b08c:	20000750 	.word	0x20000750
 800b090:	2000074c 	.word	0x2000074c

0800b094 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b0dc <CDC_Transmit_FS+0x48>)
 800b0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e00b      	b.n	800b0d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b0ba:	887b      	ldrh	r3, [r7, #2]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	4806      	ldr	r0, [pc, #24]	@ (800b0dc <CDC_Transmit_FS+0x48>)
 800b0c2:	f7fe fb17 	bl	80096f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0c6:	4805      	ldr	r0, [pc, #20]	@ (800b0dc <CDC_Transmit_FS+0x48>)
 800b0c8:	f7fe fb54 	bl	8009774 <USBD_CDC_TransmitPacket>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000470 	.word	0x20000470

0800b0e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b0f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	371c      	adds	r7, #28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
	...

0800b104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	6039      	str	r1, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2212      	movs	r2, #18
 800b114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b116:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	200000c8 	.word	0x200000c8

0800b128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2204      	movs	r2, #4
 800b138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b13a:	4b03      	ldr	r3, [pc, #12]	@ (800b148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	200000dc 	.word	0x200000dc

0800b14c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d105      	bne.n	800b16a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4907      	ldr	r1, [pc, #28]	@ (800b180 <USBD_FS_ProductStrDescriptor+0x34>)
 800b162:	4808      	ldr	r0, [pc, #32]	@ (800b184 <USBD_FS_ProductStrDescriptor+0x38>)
 800b164:	f7ff fd5c 	bl	800ac20 <USBD_GetString>
 800b168:	e004      	b.n	800b174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4904      	ldr	r1, [pc, #16]	@ (800b180 <USBD_FS_ProductStrDescriptor+0x34>)
 800b16e:	4805      	ldr	r0, [pc, #20]	@ (800b184 <USBD_FS_ProductStrDescriptor+0x38>)
 800b170:	f7ff fd56 	bl	800ac20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b174:	4b02      	ldr	r3, [pc, #8]	@ (800b180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20001764 	.word	0x20001764
 800b184:	0800e288 	.word	0x0800e288

0800b188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	6039      	str	r1, [r7, #0]
 800b192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	4904      	ldr	r1, [pc, #16]	@ (800b1a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b198:	4804      	ldr	r0, [pc, #16]	@ (800b1ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b19a:	f7ff fd41 	bl	800ac20 <USBD_GetString>
  return USBD_StrDesc;
 800b19e:	4b02      	ldr	r3, [pc, #8]	@ (800b1a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20001764 	.word	0x20001764
 800b1ac:	0800e2a0 	.word	0x0800e2a0

0800b1b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	221a      	movs	r2, #26
 800b1c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1c2:	f000 f843 	bl	800b24c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1c6:	4b02      	ldr	r3, [pc, #8]	@ (800b1d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	200000e0 	.word	0x200000e0

0800b1d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	6039      	str	r1, [r7, #0]
 800b1de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d105      	bne.n	800b1f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4907      	ldr	r1, [pc, #28]	@ (800b208 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1ea:	4808      	ldr	r0, [pc, #32]	@ (800b20c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1ec:	f7ff fd18 	bl	800ac20 <USBD_GetString>
 800b1f0:	e004      	b.n	800b1fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	4904      	ldr	r1, [pc, #16]	@ (800b208 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1f6:	4805      	ldr	r0, [pc, #20]	@ (800b20c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1f8:	f7ff fd12 	bl	800ac20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1fc:	4b02      	ldr	r3, [pc, #8]	@ (800b208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20001764 	.word	0x20001764
 800b20c:	0800e2b4 	.word	0x0800e2b4

0800b210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	6039      	str	r1, [r7, #0]
 800b21a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d105      	bne.n	800b22e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	4907      	ldr	r1, [pc, #28]	@ (800b244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b226:	4808      	ldr	r0, [pc, #32]	@ (800b248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b228:	f7ff fcfa 	bl	800ac20 <USBD_GetString>
 800b22c:	e004      	b.n	800b238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	4904      	ldr	r1, [pc, #16]	@ (800b244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b232:	4805      	ldr	r0, [pc, #20]	@ (800b248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b234:	f7ff fcf4 	bl	800ac20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b238:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20001764 	.word	0x20001764
 800b248:	0800e2c0 	.word	0x0800e2c0

0800b24c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b252:	4b0f      	ldr	r3, [pc, #60]	@ (800b290 <Get_SerialNum+0x44>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b258:	4b0e      	ldr	r3, [pc, #56]	@ (800b294 <Get_SerialNum+0x48>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b25e:	4b0e      	ldr	r3, [pc, #56]	@ (800b298 <Get_SerialNum+0x4c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4413      	add	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d009      	beq.n	800b286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b272:	2208      	movs	r2, #8
 800b274:	4909      	ldr	r1, [pc, #36]	@ (800b29c <Get_SerialNum+0x50>)
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 f814 	bl	800b2a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b27c:	2204      	movs	r2, #4
 800b27e:	4908      	ldr	r1, [pc, #32]	@ (800b2a0 <Get_SerialNum+0x54>)
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f000 f80f 	bl	800b2a4 <IntToUnicode>
  }
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	1fff7a10 	.word	0x1fff7a10
 800b294:	1fff7a14 	.word	0x1fff7a14
 800b298:	1fff7a18 	.word	0x1fff7a18
 800b29c:	200000e2 	.word	0x200000e2
 800b2a0:	200000f2 	.word	0x200000f2

0800b2a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]
 800b2ba:	e027      	b.n	800b30c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	0f1b      	lsrs	r3, r3, #28
 800b2c0:	2b09      	cmp	r3, #9
 800b2c2:	d80b      	bhi.n	800b2dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	0f1b      	lsrs	r3, r3, #28
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3230      	adds	r2, #48	@ 0x30
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e00a      	b.n	800b2f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	0f1b      	lsrs	r3, r3, #28
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	440b      	add	r3, r1
 800b2ec:	3237      	adds	r2, #55	@ 0x37
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	2200      	movs	r2, #0
 800b304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	3301      	adds	r3, #1
 800b30a:	75fb      	strb	r3, [r7, #23]
 800b30c:	7dfa      	ldrb	r2, [r7, #23]
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	429a      	cmp	r2, r3
 800b312:	d3d3      	bcc.n	800b2bc <IntToUnicode+0x18>
  }
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08a      	sub	sp, #40	@ 0x28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b32c:	f107 0314 	add.w	r3, r7, #20
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	605a      	str	r2, [r3, #4]
 800b336:	609a      	str	r2, [r3, #8]
 800b338:	60da      	str	r2, [r3, #12]
 800b33a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b344:	d147      	bne.n	800b3d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b346:	2300      	movs	r3, #0
 800b348:	613b      	str	r3, [r7, #16]
 800b34a:	4b25      	ldr	r3, [pc, #148]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34e:	4a24      	ldr	r2, [pc, #144]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b350:	f043 0301 	orr.w	r3, r3, #1
 800b354:	6313      	str	r3, [r2, #48]	@ 0x30
 800b356:	4b22      	ldr	r3, [pc, #136]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	613b      	str	r3, [r7, #16]
 800b360:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b368:	2300      	movs	r3, #0
 800b36a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b370:	f107 0314 	add.w	r3, r7, #20
 800b374:	4619      	mov	r1, r3
 800b376:	481b      	ldr	r0, [pc, #108]	@ (800b3e4 <HAL_PCD_MspInit+0xc0>)
 800b378:	f7f6 ff60 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b37c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b382:	2302      	movs	r3, #2
 800b384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b386:	2300      	movs	r3, #0
 800b388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b38a:	2303      	movs	r3, #3
 800b38c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b38e:	230a      	movs	r3, #10
 800b390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b392:	f107 0314 	add.w	r3, r7, #20
 800b396:	4619      	mov	r1, r3
 800b398:	4812      	ldr	r0, [pc, #72]	@ (800b3e4 <HAL_PCD_MspInit+0xc0>)
 800b39a:	f7f6 ff4f 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b39e:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a2:	4a0f      	ldr	r2, [pc, #60]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a8:	6353      	str	r3, [r2, #52]	@ 0x34
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b2:	4a0b      	ldr	r2, [pc, #44]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b3b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b3b8:	6453      	str	r3, [r2, #68]	@ 0x44
 800b3ba:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <HAL_PCD_MspInit+0xbc>)
 800b3bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	2043      	movs	r0, #67	@ 0x43
 800b3cc:	f7f6 feff 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3d0:	2043      	movs	r0, #67	@ 0x43
 800b3d2:	f7f6 ff18 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	3728      	adds	r7, #40	@ 0x28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	40023800 	.word	0x40023800
 800b3e4:	40020000 	.word	0x40020000

0800b3e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe faab 	bl	800995a <USBD_LL_SetupStage>
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b41e:	78fa      	ldrb	r2, [r7, #3]
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	4613      	mov	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	4413      	add	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	440b      	add	r3, r1
 800b42c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	4619      	mov	r1, r3
 800b436:	f7fe fae5 	bl	8009a04 <USBD_LL_DataOutStage>
}
 800b43a:	bf00      	nop
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	460b      	mov	r3, r1
 800b44c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b454:	78fa      	ldrb	r2, [r7, #3]
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	4613      	mov	r3, r2
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	3320      	adds	r3, #32
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	4619      	mov	r1, r3
 800b46a:	f7fe fb7e 	bl	8009b6a <USBD_LL_DataInStage>
}
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fcb8 	bl	8009dfa <USBD_LL_SOF>
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b49a:	2301      	movs	r3, #1
 800b49c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	79db      	ldrb	r3, [r3, #7]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d001      	beq.n	800b4aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b4a6:	f7f6 f9fd 	bl	80018a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4b0:	7bfa      	ldrb	r2, [r7, #15]
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fc5c 	bl	8009d72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe fc04 	bl	8009cce <USBD_LL_Reset>
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fc57 	bl	8009d92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	6812      	ldr	r2, [r2, #0]
 800b4f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b4f6:	f043 0301 	orr.w	r3, r3, #1
 800b4fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	7adb      	ldrb	r3, [r3, #11]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d005      	beq.n	800b510 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b504:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <HAL_PCD_SuspendCallback+0x48>)
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	4a03      	ldr	r2, [pc, #12]	@ (800b518 <HAL_PCD_SuspendCallback+0x48>)
 800b50a:	f043 0306 	orr.w	r3, r3, #6
 800b50e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	e000ed00 	.word	0xe000ed00

0800b51c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fc4d 	bl	8009dca <USBD_LL_Resume>
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b54a:	78fa      	ldrb	r2, [r7, #3]
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fca5 	bl	8009e9e <USBD_LL_IsoOUTIncomplete>
}
 800b554:	bf00      	nop
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	4611      	mov	r1, r2
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fc61 	bl	8009e3a <USBD_LL_IsoINIncomplete>
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fcb7 	bl	8009f02 <USBD_LL_DevConnected>
}
 800b594:	bf00      	nop
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe fcb4 	bl	8009f18 <USBD_LL_DevDisconnected>
}
 800b5b0:	bf00      	nop
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d13c      	bne.n	800b642 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b5c8:	4a20      	ldr	r2, [pc, #128]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b5d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b5de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b5e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b5e6:	4b19      	ldr	r3, [pc, #100]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b5ec:	4b17      	ldr	r3, [pc, #92]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5f2:	4b16      	ldr	r3, [pc, #88]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5f8:	4b14      	ldr	r3, [pc, #80]	@ (800b64c <USBD_LL_Init+0x94>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b5fe:	4b13      	ldr	r3, [pc, #76]	@ (800b64c <USBD_LL_Init+0x94>)
 800b600:	2200      	movs	r2, #0
 800b602:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b604:	4b11      	ldr	r3, [pc, #68]	@ (800b64c <USBD_LL_Init+0x94>)
 800b606:	2200      	movs	r2, #0
 800b608:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b60a:	4b10      	ldr	r3, [pc, #64]	@ (800b64c <USBD_LL_Init+0x94>)
 800b60c:	2201      	movs	r2, #1
 800b60e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b610:	4b0e      	ldr	r3, [pc, #56]	@ (800b64c <USBD_LL_Init+0x94>)
 800b612:	2200      	movs	r2, #0
 800b614:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b616:	480d      	ldr	r0, [pc, #52]	@ (800b64c <USBD_LL_Init+0x94>)
 800b618:	f7f8 fc8c 	bl	8003f34 <HAL_PCD_Init>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b622:	f7f6 f93f 	bl	80018a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b626:	2180      	movs	r1, #128	@ 0x80
 800b628:	4808      	ldr	r0, [pc, #32]	@ (800b64c <USBD_LL_Init+0x94>)
 800b62a:	f7f9 feb8 	bl	800539e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b62e:	2240      	movs	r2, #64	@ 0x40
 800b630:	2100      	movs	r1, #0
 800b632:	4806      	ldr	r0, [pc, #24]	@ (800b64c <USBD_LL_Init+0x94>)
 800b634:	f7f9 fe6c 	bl	8005310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b638:	2280      	movs	r2, #128	@ 0x80
 800b63a:	2101      	movs	r1, #1
 800b63c:	4803      	ldr	r0, [pc, #12]	@ (800b64c <USBD_LL_Init+0x94>)
 800b63e:	f7f9 fe67 	bl	8005310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20001964 	.word	0x20001964

0800b650 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b666:	4618      	mov	r0, r3
 800b668:	f7f8 fd73 	bl	8004152 <HAL_PCD_Start>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f942 	bl	800b8fc <USBD_Get_USB_Status>
 800b678:	4603      	mov	r3, r0
 800b67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	4608      	mov	r0, r1
 800b690:	4611      	mov	r1, r2
 800b692:	461a      	mov	r2, r3
 800b694:	4603      	mov	r3, r0
 800b696:	70fb      	strb	r3, [r7, #3]
 800b698:	460b      	mov	r3, r1
 800b69a:	70bb      	strb	r3, [r7, #2]
 800b69c:	4613      	mov	r3, r2
 800b69e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b6ae:	78bb      	ldrb	r3, [r7, #2]
 800b6b0:	883a      	ldrh	r2, [r7, #0]
 800b6b2:	78f9      	ldrb	r1, [r7, #3]
 800b6b4:	f7f9 fa47 	bl	8004b46 <HAL_PCD_EP_Open>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 f91c 	bl	800b8fc <USBD_Get_USB_Status>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ec:	78fa      	ldrb	r2, [r7, #3]
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7f9 fa92 	bl	8004c1a <HAL_PCD_EP_Close>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 f8fd 	bl	800b8fc <USBD_Get_USB_Status>
 800b702:	4603      	mov	r3, r0
 800b704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b706:	7bbb      	ldrb	r3, [r7, #14]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b720:	2300      	movs	r3, #0
 800b722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b72a:	78fa      	ldrb	r2, [r7, #3]
 800b72c:	4611      	mov	r1, r2
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f9 fb4a 	bl	8004dc8 <HAL_PCD_EP_SetStall>
 800b734:	4603      	mov	r3, r0
 800b736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 f8de 	bl	800b8fc <USBD_Get_USB_Status>
 800b740:	4603      	mov	r3, r0
 800b742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b744:	7bbb      	ldrb	r3, [r7, #14]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	4611      	mov	r1, r2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f9 fb8e 	bl	8004e8e <HAL_PCD_EP_ClrStall>
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b776:	7bfb      	ldrb	r3, [r7, #15]
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 f8bf 	bl	800b8fc <USBD_Get_USB_Status>
 800b77e:	4603      	mov	r3, r0
 800b780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b782:	7bbb      	ldrb	r3, [r7, #14]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b79e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	da0b      	bge.n	800b7c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7a8:	78fb      	ldrb	r3, [r7, #3]
 800b7aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7ae:	68f9      	ldr	r1, [r7, #12]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	3316      	adds	r3, #22
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	e00b      	b.n	800b7d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b7d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7fe:	78fa      	ldrb	r2, [r7, #3]
 800b800:	4611      	mov	r1, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7f9 f97b 	bl	8004afe <HAL_PCD_SetAddress>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f874 	bl	800b8fc <USBD_Get_USB_Status>
 800b814:	4603      	mov	r3, r0
 800b816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b818:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
 800b82e:	460b      	mov	r3, r1
 800b830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b840:	7af9      	ldrb	r1, [r7, #11]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	f7f9 fa85 	bl	8004d54 <HAL_PCD_EP_Transmit>
 800b84a:	4603      	mov	r3, r0
 800b84c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	4618      	mov	r0, r3
 800b852:	f000 f853 	bl	800b8fc <USBD_Get_USB_Status>
 800b856:	4603      	mov	r3, r0
 800b858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b85a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	460b      	mov	r3, r1
 800b872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b882:	7af9      	ldrb	r1, [r7, #11]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	f7f9 fa11 	bl	8004cae <HAL_PCD_EP_Receive>
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	4618      	mov	r0, r3
 800b894:	f000 f832 	bl	800b8fc <USBD_Get_USB_Status>
 800b898:	4603      	mov	r3, r0
 800b89a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b89c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7f9 fa31 	bl	8004d24 <HAL_PCD_EP_GetRxCount>
 800b8c2:	4603      	mov	r3, r0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b8d4:	4b03      	ldr	r3, [pc, #12]	@ (800b8e4 <USBD_static_malloc+0x18>)
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	20001e48 	.word	0x20001e48

0800b8e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]

}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d817      	bhi.n	800b940 <USBD_Get_USB_Status+0x44>
 800b910:	a201      	add	r2, pc, #4	@ (adr r2, 800b918 <USBD_Get_USB_Status+0x1c>)
 800b912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b916:	bf00      	nop
 800b918:	0800b929 	.word	0x0800b929
 800b91c:	0800b92f 	.word	0x0800b92f
 800b920:	0800b935 	.word	0x0800b935
 800b924:	0800b93b 	.word	0x0800b93b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
    break;
 800b92c:	e00b      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b92e:	2303      	movs	r3, #3
 800b930:	73fb      	strb	r3, [r7, #15]
    break;
 800b932:	e008      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b934:	2301      	movs	r3, #1
 800b936:	73fb      	strb	r3, [r7, #15]
    break;
 800b938:	e005      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b93a:	2303      	movs	r3, #3
 800b93c:	73fb      	strb	r3, [r7, #15]
    break;
 800b93e:	e002      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b940:	2303      	movs	r3, #3
 800b942:	73fb      	strb	r3, [r7, #15]
    break;
 800b944:	bf00      	nop
  }
  return usb_status;
 800b946:	7bfb      	ldrb	r3, [r7, #15]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <__cvt>:
 800b954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	ec57 6b10 	vmov	r6, r7, d0
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	460c      	mov	r4, r1
 800b960:	4619      	mov	r1, r3
 800b962:	463b      	mov	r3, r7
 800b964:	bfbb      	ittet	lt
 800b966:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b96a:	461f      	movlt	r7, r3
 800b96c:	2300      	movge	r3, #0
 800b96e:	232d      	movlt	r3, #45	@ 0x2d
 800b970:	700b      	strb	r3, [r1, #0]
 800b972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b974:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b978:	4691      	mov	r9, r2
 800b97a:	f023 0820 	bic.w	r8, r3, #32
 800b97e:	bfbc      	itt	lt
 800b980:	4632      	movlt	r2, r6
 800b982:	4616      	movlt	r6, r2
 800b984:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b988:	d005      	beq.n	800b996 <__cvt+0x42>
 800b98a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b98e:	d100      	bne.n	800b992 <__cvt+0x3e>
 800b990:	3401      	adds	r4, #1
 800b992:	2102      	movs	r1, #2
 800b994:	e000      	b.n	800b998 <__cvt+0x44>
 800b996:	2103      	movs	r1, #3
 800b998:	ab03      	add	r3, sp, #12
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	ab02      	add	r3, sp, #8
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	ec47 6b10 	vmov	d0, r6, r7
 800b9a4:	4653      	mov	r3, sl
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	f000 fe4a 	bl	800c640 <_dtoa_r>
 800b9ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	d119      	bne.n	800b9e8 <__cvt+0x94>
 800b9b4:	f019 0f01 	tst.w	r9, #1
 800b9b8:	d00e      	beq.n	800b9d8 <__cvt+0x84>
 800b9ba:	eb00 0904 	add.w	r9, r0, r4
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f5 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9ca:	b108      	cbz	r0, 800b9d0 <__cvt+0x7c>
 800b9cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9d0:	2230      	movs	r2, #48	@ 0x30
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	454b      	cmp	r3, r9
 800b9d6:	d31e      	bcc.n	800ba16 <__cvt+0xc2>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9dc:	1b5b      	subs	r3, r3, r5
 800b9de:	4628      	mov	r0, r5
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	b004      	add	sp, #16
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9ec:	eb00 0904 	add.w	r9, r0, r4
 800b9f0:	d1e5      	bne.n	800b9be <__cvt+0x6a>
 800b9f2:	7803      	ldrb	r3, [r0, #0]
 800b9f4:	2b30      	cmp	r3, #48	@ 0x30
 800b9f6:	d10a      	bne.n	800ba0e <__cvt+0xba>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f5 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba04:	b918      	cbnz	r0, 800ba0e <__cvt+0xba>
 800ba06:	f1c4 0401 	rsb	r4, r4, #1
 800ba0a:	f8ca 4000 	str.w	r4, [sl]
 800ba0e:	f8da 3000 	ldr.w	r3, [sl]
 800ba12:	4499      	add	r9, r3
 800ba14:	e7d3      	b.n	800b9be <__cvt+0x6a>
 800ba16:	1c59      	adds	r1, r3, #1
 800ba18:	9103      	str	r1, [sp, #12]
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	e7d9      	b.n	800b9d2 <__cvt+0x7e>

0800ba1e <__exponent>:
 800ba1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba20:	2900      	cmp	r1, #0
 800ba22:	bfba      	itte	lt
 800ba24:	4249      	neglt	r1, r1
 800ba26:	232d      	movlt	r3, #45	@ 0x2d
 800ba28:	232b      	movge	r3, #43	@ 0x2b
 800ba2a:	2909      	cmp	r1, #9
 800ba2c:	7002      	strb	r2, [r0, #0]
 800ba2e:	7043      	strb	r3, [r0, #1]
 800ba30:	dd29      	ble.n	800ba86 <__exponent+0x68>
 800ba32:	f10d 0307 	add.w	r3, sp, #7
 800ba36:	461d      	mov	r5, r3
 800ba38:	270a      	movs	r7, #10
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba40:	fb07 1416 	mls	r4, r7, r6, r1
 800ba44:	3430      	adds	r4, #48	@ 0x30
 800ba46:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	2c63      	cmp	r4, #99	@ 0x63
 800ba4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba52:	4631      	mov	r1, r6
 800ba54:	dcf1      	bgt.n	800ba3a <__exponent+0x1c>
 800ba56:	3130      	adds	r1, #48	@ 0x30
 800ba58:	1e94      	subs	r4, r2, #2
 800ba5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba5e:	1c41      	adds	r1, r0, #1
 800ba60:	4623      	mov	r3, r4
 800ba62:	42ab      	cmp	r3, r5
 800ba64:	d30a      	bcc.n	800ba7c <__exponent+0x5e>
 800ba66:	f10d 0309 	add.w	r3, sp, #9
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	42ac      	cmp	r4, r5
 800ba6e:	bf88      	it	hi
 800ba70:	2300      	movhi	r3, #0
 800ba72:	3302      	adds	r3, #2
 800ba74:	4403      	add	r3, r0
 800ba76:	1a18      	subs	r0, r3, r0
 800ba78:	b003      	add	sp, #12
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba80:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba84:	e7ed      	b.n	800ba62 <__exponent+0x44>
 800ba86:	2330      	movs	r3, #48	@ 0x30
 800ba88:	3130      	adds	r1, #48	@ 0x30
 800ba8a:	7083      	strb	r3, [r0, #2]
 800ba8c:	70c1      	strb	r1, [r0, #3]
 800ba8e:	1d03      	adds	r3, r0, #4
 800ba90:	e7f1      	b.n	800ba76 <__exponent+0x58>
	...

0800ba94 <_printf_float>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	b08d      	sub	sp, #52	@ 0x34
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800baa0:	4616      	mov	r6, r2
 800baa2:	461f      	mov	r7, r3
 800baa4:	4605      	mov	r5, r0
 800baa6:	f000 fcbb 	bl	800c420 <_localeconv_r>
 800baaa:	6803      	ldr	r3, [r0, #0]
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f4 fbe6 	bl	8000280 <strlen>
 800bab4:	2300      	movs	r3, #0
 800bab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab8:	f8d8 3000 	ldr.w	r3, [r8]
 800babc:	9005      	str	r0, [sp, #20]
 800babe:	3307      	adds	r3, #7
 800bac0:	f023 0307 	bic.w	r3, r3, #7
 800bac4:	f103 0208 	add.w	r2, r3, #8
 800bac8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bacc:	f8d4 b000 	ldr.w	fp, [r4]
 800bad0:	f8c8 2000 	str.w	r2, [r8]
 800bad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bad8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	f8cd 8018 	str.w	r8, [sp, #24]
 800bae2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baea:	4b9c      	ldr	r3, [pc, #624]	@ (800bd5c <_printf_float+0x2c8>)
 800baec:	f04f 32ff 	mov.w	r2, #4294967295
 800baf0:	f7f5 f824 	bl	8000b3c <__aeabi_dcmpun>
 800baf4:	bb70      	cbnz	r0, 800bb54 <_printf_float+0xc0>
 800baf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bafa:	4b98      	ldr	r3, [pc, #608]	@ (800bd5c <_printf_float+0x2c8>)
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	f7f4 fffe 	bl	8000b00 <__aeabi_dcmple>
 800bb04:	bb30      	cbnz	r0, 800bb54 <_printf_float+0xc0>
 800bb06:	2200      	movs	r2, #0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 ffed 	bl	8000aec <__aeabi_dcmplt>
 800bb12:	b110      	cbz	r0, 800bb1a <_printf_float+0x86>
 800bb14:	232d      	movs	r3, #45	@ 0x2d
 800bb16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb1a:	4a91      	ldr	r2, [pc, #580]	@ (800bd60 <_printf_float+0x2cc>)
 800bb1c:	4b91      	ldr	r3, [pc, #580]	@ (800bd64 <_printf_float+0x2d0>)
 800bb1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb22:	bf94      	ite	ls
 800bb24:	4690      	movls	r8, r2
 800bb26:	4698      	movhi	r8, r3
 800bb28:	2303      	movs	r3, #3
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	f02b 0304 	bic.w	r3, fp, #4
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	9700      	str	r7, [sp, #0]
 800bb38:	4633      	mov	r3, r6
 800bb3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f9d2 	bl	800bee8 <_printf_common>
 800bb44:	3001      	adds	r0, #1
 800bb46:	f040 808d 	bne.w	800bc64 <_printf_float+0x1d0>
 800bb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4e:	b00d      	add	sp, #52	@ 0x34
 800bb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb54:	4642      	mov	r2, r8
 800bb56:	464b      	mov	r3, r9
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	f7f4 ffee 	bl	8000b3c <__aeabi_dcmpun>
 800bb60:	b140      	cbz	r0, 800bb74 <_printf_float+0xe0>
 800bb62:	464b      	mov	r3, r9
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfbc      	itt	lt
 800bb68:	232d      	movlt	r3, #45	@ 0x2d
 800bb6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb6e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd68 <_printf_float+0x2d4>)
 800bb70:	4b7e      	ldr	r3, [pc, #504]	@ (800bd6c <_printf_float+0x2d8>)
 800bb72:	e7d4      	b.n	800bb1e <_printf_float+0x8a>
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb7a:	9206      	str	r2, [sp, #24]
 800bb7c:	1c5a      	adds	r2, r3, #1
 800bb7e:	d13b      	bne.n	800bbf8 <_printf_float+0x164>
 800bb80:	2306      	movs	r3, #6
 800bb82:	6063      	str	r3, [r4, #4]
 800bb84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb88:	2300      	movs	r3, #0
 800bb8a:	6022      	str	r2, [r4, #0]
 800bb8c:	9303      	str	r3, [sp, #12]
 800bb8e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb90:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb94:	ab09      	add	r3, sp, #36	@ 0x24
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	6861      	ldr	r1, [r4, #4]
 800bb9a:	ec49 8b10 	vmov	d0, r8, r9
 800bb9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bba2:	4628      	mov	r0, r5
 800bba4:	f7ff fed6 	bl	800b954 <__cvt>
 800bba8:	9b06      	ldr	r3, [sp, #24]
 800bbaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbac:	2b47      	cmp	r3, #71	@ 0x47
 800bbae:	4680      	mov	r8, r0
 800bbb0:	d129      	bne.n	800bc06 <_printf_float+0x172>
 800bbb2:	1cc8      	adds	r0, r1, #3
 800bbb4:	db02      	blt.n	800bbbc <_printf_float+0x128>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	dd41      	ble.n	800bc40 <_printf_float+0x1ac>
 800bbbc:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbc0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbc4:	3901      	subs	r1, #1
 800bbc6:	4652      	mov	r2, sl
 800bbc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bbcc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbce:	f7ff ff26 	bl	800ba1e <__exponent>
 800bbd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbd4:	1813      	adds	r3, r2, r0
 800bbd6:	2a01      	cmp	r2, #1
 800bbd8:	4681      	mov	r9, r0
 800bbda:	6123      	str	r3, [r4, #16]
 800bbdc:	dc02      	bgt.n	800bbe4 <_printf_float+0x150>
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	07d2      	lsls	r2, r2, #31
 800bbe2:	d501      	bpl.n	800bbe8 <_printf_float+0x154>
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0a2      	beq.n	800bb36 <_printf_float+0xa2>
 800bbf0:	232d      	movs	r3, #45	@ 0x2d
 800bbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf6:	e79e      	b.n	800bb36 <_printf_float+0xa2>
 800bbf8:	9a06      	ldr	r2, [sp, #24]
 800bbfa:	2a47      	cmp	r2, #71	@ 0x47
 800bbfc:	d1c2      	bne.n	800bb84 <_printf_float+0xf0>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1c0      	bne.n	800bb84 <_printf_float+0xf0>
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7bd      	b.n	800bb82 <_printf_float+0xee>
 800bc06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc0a:	d9db      	bls.n	800bbc4 <_printf_float+0x130>
 800bc0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc10:	d118      	bne.n	800bc44 <_printf_float+0x1b0>
 800bc12:	2900      	cmp	r1, #0
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	dd0b      	ble.n	800bc30 <_printf_float+0x19c>
 800bc18:	6121      	str	r1, [r4, #16]
 800bc1a:	b913      	cbnz	r3, 800bc22 <_printf_float+0x18e>
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	07d0      	lsls	r0, r2, #31
 800bc20:	d502      	bpl.n	800bc28 <_printf_float+0x194>
 800bc22:	3301      	adds	r3, #1
 800bc24:	440b      	add	r3, r1
 800bc26:	6123      	str	r3, [r4, #16]
 800bc28:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc2a:	f04f 0900 	mov.w	r9, #0
 800bc2e:	e7db      	b.n	800bbe8 <_printf_float+0x154>
 800bc30:	b913      	cbnz	r3, 800bc38 <_printf_float+0x1a4>
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	07d2      	lsls	r2, r2, #31
 800bc36:	d501      	bpl.n	800bc3c <_printf_float+0x1a8>
 800bc38:	3302      	adds	r3, #2
 800bc3a:	e7f4      	b.n	800bc26 <_printf_float+0x192>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f2      	b.n	800bc26 <_printf_float+0x192>
 800bc40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc46:	4299      	cmp	r1, r3
 800bc48:	db05      	blt.n	800bc56 <_printf_float+0x1c2>
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	6121      	str	r1, [r4, #16]
 800bc4e:	07d8      	lsls	r0, r3, #31
 800bc50:	d5ea      	bpl.n	800bc28 <_printf_float+0x194>
 800bc52:	1c4b      	adds	r3, r1, #1
 800bc54:	e7e7      	b.n	800bc26 <_printf_float+0x192>
 800bc56:	2900      	cmp	r1, #0
 800bc58:	bfd4      	ite	le
 800bc5a:	f1c1 0202 	rsble	r2, r1, #2
 800bc5e:	2201      	movgt	r2, #1
 800bc60:	4413      	add	r3, r2
 800bc62:	e7e0      	b.n	800bc26 <_printf_float+0x192>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	055a      	lsls	r2, r3, #21
 800bc68:	d407      	bmi.n	800bc7a <_printf_float+0x1e6>
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	d12b      	bne.n	800bcd0 <_printf_float+0x23c>
 800bc78:	e767      	b.n	800bb4a <_printf_float+0xb6>
 800bc7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc7e:	f240 80dd 	bls.w	800be3c <_printf_float+0x3a8>
 800bc82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc86:	2200      	movs	r2, #0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f7f4 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d033      	beq.n	800bcfa <_printf_float+0x266>
 800bc92:	4a37      	ldr	r2, [pc, #220]	@ (800bd70 <_printf_float+0x2dc>)
 800bc94:	2301      	movs	r3, #1
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f af54 	beq.w	800bb4a <_printf_float+0xb6>
 800bca2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bca6:	4543      	cmp	r3, r8
 800bca8:	db02      	blt.n	800bcb0 <_printf_float+0x21c>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	07d8      	lsls	r0, r3, #31
 800bcae:	d50f      	bpl.n	800bcd0 <_printf_float+0x23c>
 800bcb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b8      	blx	r7
 800bcba:	3001      	adds	r0, #1
 800bcbc:	f43f af45 	beq.w	800bb4a <_printf_float+0xb6>
 800bcc0:	f04f 0900 	mov.w	r9, #0
 800bcc4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcc8:	f104 0a1a 	add.w	sl, r4, #26
 800bccc:	45c8      	cmp	r8, r9
 800bcce:	dc09      	bgt.n	800bce4 <_printf_float+0x250>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	079b      	lsls	r3, r3, #30
 800bcd4:	f100 8103 	bmi.w	800bede <_printf_float+0x44a>
 800bcd8:	68e0      	ldr	r0, [r4, #12]
 800bcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcdc:	4298      	cmp	r0, r3
 800bcde:	bfb8      	it	lt
 800bce0:	4618      	movlt	r0, r3
 800bce2:	e734      	b.n	800bb4e <_printf_float+0xba>
 800bce4:	2301      	movs	r3, #1
 800bce6:	4652      	mov	r2, sl
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af2b 	beq.w	800bb4a <_printf_float+0xb6>
 800bcf4:	f109 0901 	add.w	r9, r9, #1
 800bcf8:	e7e8      	b.n	800bccc <_printf_float+0x238>
 800bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dc39      	bgt.n	800bd74 <_printf_float+0x2e0>
 800bd00:	4a1b      	ldr	r2, [pc, #108]	@ (800bd70 <_printf_float+0x2dc>)
 800bd02:	2301      	movs	r3, #1
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f af1d 	beq.w	800bb4a <_printf_float+0xb6>
 800bd10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd14:	ea59 0303 	orrs.w	r3, r9, r3
 800bd18:	d102      	bne.n	800bd20 <_printf_float+0x28c>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	07d9      	lsls	r1, r3, #31
 800bd1e:	d5d7      	bpl.n	800bcd0 <_printf_float+0x23c>
 800bd20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	f43f af0d 	beq.w	800bb4a <_printf_float+0xb6>
 800bd30:	f04f 0a00 	mov.w	sl, #0
 800bd34:	f104 0b1a 	add.w	fp, r4, #26
 800bd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3a:	425b      	negs	r3, r3
 800bd3c:	4553      	cmp	r3, sl
 800bd3e:	dc01      	bgt.n	800bd44 <_printf_float+0x2b0>
 800bd40:	464b      	mov	r3, r9
 800bd42:	e793      	b.n	800bc6c <_printf_float+0x1d8>
 800bd44:	2301      	movs	r3, #1
 800bd46:	465a      	mov	r2, fp
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	f43f aefb 	beq.w	800bb4a <_printf_float+0xb6>
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	e7ee      	b.n	800bd38 <_printf_float+0x2a4>
 800bd5a:	bf00      	nop
 800bd5c:	7fefffff 	.word	0x7fefffff
 800bd60:	0800e2e8 	.word	0x0800e2e8
 800bd64:	0800e2ec 	.word	0x0800e2ec
 800bd68:	0800e2f0 	.word	0x0800e2f0
 800bd6c:	0800e2f4 	.word	0x0800e2f4
 800bd70:	0800e2f8 	.word	0x0800e2f8
 800bd74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd7a:	4553      	cmp	r3, sl
 800bd7c:	bfa8      	it	ge
 800bd7e:	4653      	movge	r3, sl
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	4699      	mov	r9, r3
 800bd84:	dc36      	bgt.n	800bdf4 <_printf_float+0x360>
 800bd86:	f04f 0b00 	mov.w	fp, #0
 800bd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8e:	f104 021a 	add.w	r2, r4, #26
 800bd92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd94:	9306      	str	r3, [sp, #24]
 800bd96:	eba3 0309 	sub.w	r3, r3, r9
 800bd9a:	455b      	cmp	r3, fp
 800bd9c:	dc31      	bgt.n	800be02 <_printf_float+0x36e>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda0:	459a      	cmp	sl, r3
 800bda2:	dc3a      	bgt.n	800be1a <_printf_float+0x386>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	07da      	lsls	r2, r3, #31
 800bda8:	d437      	bmi.n	800be1a <_printf_float+0x386>
 800bdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdac:	ebaa 0903 	sub.w	r9, sl, r3
 800bdb0:	9b06      	ldr	r3, [sp, #24]
 800bdb2:	ebaa 0303 	sub.w	r3, sl, r3
 800bdb6:	4599      	cmp	r9, r3
 800bdb8:	bfa8      	it	ge
 800bdba:	4699      	movge	r9, r3
 800bdbc:	f1b9 0f00 	cmp.w	r9, #0
 800bdc0:	dc33      	bgt.n	800be2a <_printf_float+0x396>
 800bdc2:	f04f 0800 	mov.w	r8, #0
 800bdc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdca:	f104 0b1a 	add.w	fp, r4, #26
 800bdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd0:	ebaa 0303 	sub.w	r3, sl, r3
 800bdd4:	eba3 0309 	sub.w	r3, r3, r9
 800bdd8:	4543      	cmp	r3, r8
 800bdda:	f77f af79 	ble.w	800bcd0 <_printf_float+0x23c>
 800bdde:	2301      	movs	r3, #1
 800bde0:	465a      	mov	r2, fp
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f aeae 	beq.w	800bb4a <_printf_float+0xb6>
 800bdee:	f108 0801 	add.w	r8, r8, #1
 800bdf2:	e7ec      	b.n	800bdce <_printf_float+0x33a>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d1c2      	bne.n	800bd86 <_printf_float+0x2f2>
 800be00:	e6a3      	b.n	800bb4a <_printf_float+0xb6>
 800be02:	2301      	movs	r3, #1
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	9206      	str	r2, [sp, #24]
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	f43f ae9c 	beq.w	800bb4a <_printf_float+0xb6>
 800be12:	9a06      	ldr	r2, [sp, #24]
 800be14:	f10b 0b01 	add.w	fp, fp, #1
 800be18:	e7bb      	b.n	800bd92 <_printf_float+0x2fe>
 800be1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	d1c0      	bne.n	800bdaa <_printf_float+0x316>
 800be28:	e68f      	b.n	800bb4a <_printf_float+0xb6>
 800be2a:	9a06      	ldr	r2, [sp, #24]
 800be2c:	464b      	mov	r3, r9
 800be2e:	4442      	add	r2, r8
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	d1c3      	bne.n	800bdc2 <_printf_float+0x32e>
 800be3a:	e686      	b.n	800bb4a <_printf_float+0xb6>
 800be3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be40:	f1ba 0f01 	cmp.w	sl, #1
 800be44:	dc01      	bgt.n	800be4a <_printf_float+0x3b6>
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d536      	bpl.n	800beb8 <_printf_float+0x424>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4642      	mov	r2, r8
 800be4e:	4631      	mov	r1, r6
 800be50:	4628      	mov	r0, r5
 800be52:	47b8      	blx	r7
 800be54:	3001      	adds	r0, #1
 800be56:	f43f ae78 	beq.w	800bb4a <_printf_float+0xb6>
 800be5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	f43f ae70 	beq.w	800bb4a <_printf_float+0xb6>
 800be6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be6e:	2200      	movs	r2, #0
 800be70:	2300      	movs	r3, #0
 800be72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be76:	f7f4 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be7a:	b9c0      	cbnz	r0, 800beae <_printf_float+0x41a>
 800be7c:	4653      	mov	r3, sl
 800be7e:	f108 0201 	add.w	r2, r8, #1
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	d10c      	bne.n	800bea6 <_printf_float+0x412>
 800be8c:	e65d      	b.n	800bb4a <_printf_float+0xb6>
 800be8e:	2301      	movs	r3, #1
 800be90:	465a      	mov	r2, fp
 800be92:	4631      	mov	r1, r6
 800be94:	4628      	mov	r0, r5
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	f43f ae56 	beq.w	800bb4a <_printf_float+0xb6>
 800be9e:	f108 0801 	add.w	r8, r8, #1
 800bea2:	45d0      	cmp	r8, sl
 800bea4:	dbf3      	blt.n	800be8e <_printf_float+0x3fa>
 800bea6:	464b      	mov	r3, r9
 800bea8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800beac:	e6df      	b.n	800bc6e <_printf_float+0x1da>
 800beae:	f04f 0800 	mov.w	r8, #0
 800beb2:	f104 0b1a 	add.w	fp, r4, #26
 800beb6:	e7f4      	b.n	800bea2 <_printf_float+0x40e>
 800beb8:	2301      	movs	r3, #1
 800beba:	4642      	mov	r2, r8
 800bebc:	e7e1      	b.n	800be82 <_printf_float+0x3ee>
 800bebe:	2301      	movs	r3, #1
 800bec0:	464a      	mov	r2, r9
 800bec2:	4631      	mov	r1, r6
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b8      	blx	r7
 800bec8:	3001      	adds	r0, #1
 800beca:	f43f ae3e 	beq.w	800bb4a <_printf_float+0xb6>
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bed6:	1a5b      	subs	r3, r3, r1
 800bed8:	4543      	cmp	r3, r8
 800beda:	dcf0      	bgt.n	800bebe <_printf_float+0x42a>
 800bedc:	e6fc      	b.n	800bcd8 <_printf_float+0x244>
 800bede:	f04f 0800 	mov.w	r8, #0
 800bee2:	f104 0919 	add.w	r9, r4, #25
 800bee6:	e7f4      	b.n	800bed2 <_printf_float+0x43e>

0800bee8 <_printf_common>:
 800bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beec:	4616      	mov	r6, r2
 800beee:	4698      	mov	r8, r3
 800bef0:	688a      	ldr	r2, [r1, #8]
 800bef2:	690b      	ldr	r3, [r1, #16]
 800bef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bef8:	4293      	cmp	r3, r2
 800befa:	bfb8      	it	lt
 800befc:	4613      	movlt	r3, r2
 800befe:	6033      	str	r3, [r6, #0]
 800bf00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf04:	4607      	mov	r7, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b10a      	cbz	r2, 800bf0e <_printf_common+0x26>
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	0699      	lsls	r1, r3, #26
 800bf12:	bf42      	ittt	mi
 800bf14:	6833      	ldrmi	r3, [r6, #0]
 800bf16:	3302      	addmi	r3, #2
 800bf18:	6033      	strmi	r3, [r6, #0]
 800bf1a:	6825      	ldr	r5, [r4, #0]
 800bf1c:	f015 0506 	ands.w	r5, r5, #6
 800bf20:	d106      	bne.n	800bf30 <_printf_common+0x48>
 800bf22:	f104 0a19 	add.w	sl, r4, #25
 800bf26:	68e3      	ldr	r3, [r4, #12]
 800bf28:	6832      	ldr	r2, [r6, #0]
 800bf2a:	1a9b      	subs	r3, r3, r2
 800bf2c:	42ab      	cmp	r3, r5
 800bf2e:	dc26      	bgt.n	800bf7e <_printf_common+0x96>
 800bf30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf34:	6822      	ldr	r2, [r4, #0]
 800bf36:	3b00      	subs	r3, #0
 800bf38:	bf18      	it	ne
 800bf3a:	2301      	movne	r3, #1
 800bf3c:	0692      	lsls	r2, r2, #26
 800bf3e:	d42b      	bmi.n	800bf98 <_printf_common+0xb0>
 800bf40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf44:	4641      	mov	r1, r8
 800bf46:	4638      	mov	r0, r7
 800bf48:	47c8      	blx	r9
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	d01e      	beq.n	800bf8c <_printf_common+0xa4>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	6922      	ldr	r2, [r4, #16]
 800bf52:	f003 0306 	and.w	r3, r3, #6
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	bf02      	ittt	eq
 800bf5a:	68e5      	ldreq	r5, [r4, #12]
 800bf5c:	6833      	ldreq	r3, [r6, #0]
 800bf5e:	1aed      	subeq	r5, r5, r3
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	bf0c      	ite	eq
 800bf64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf68:	2500      	movne	r5, #0
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	bfc4      	itt	gt
 800bf6e:	1a9b      	subgt	r3, r3, r2
 800bf70:	18ed      	addgt	r5, r5, r3
 800bf72:	2600      	movs	r6, #0
 800bf74:	341a      	adds	r4, #26
 800bf76:	42b5      	cmp	r5, r6
 800bf78:	d11a      	bne.n	800bfb0 <_printf_common+0xc8>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e008      	b.n	800bf90 <_printf_common+0xa8>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	4652      	mov	r2, sl
 800bf82:	4641      	mov	r1, r8
 800bf84:	4638      	mov	r0, r7
 800bf86:	47c8      	blx	r9
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d103      	bne.n	800bf94 <_printf_common+0xac>
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf94:	3501      	adds	r5, #1
 800bf96:	e7c6      	b.n	800bf26 <_printf_common+0x3e>
 800bf98:	18e1      	adds	r1, r4, r3
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	2030      	movs	r0, #48	@ 0x30
 800bf9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfa2:	4422      	add	r2, r4
 800bfa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfac:	3302      	adds	r3, #2
 800bfae:	e7c7      	b.n	800bf40 <_printf_common+0x58>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4641      	mov	r1, r8
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	47c8      	blx	r9
 800bfba:	3001      	adds	r0, #1
 800bfbc:	d0e6      	beq.n	800bf8c <_printf_common+0xa4>
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	e7d9      	b.n	800bf76 <_printf_common+0x8e>
	...

0800bfc4 <_printf_i>:
 800bfc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc8:	7e0f      	ldrb	r7, [r1, #24]
 800bfca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfcc:	2f78      	cmp	r7, #120	@ 0x78
 800bfce:	4691      	mov	r9, r2
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	469a      	mov	sl, r3
 800bfd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfda:	d807      	bhi.n	800bfec <_printf_i+0x28>
 800bfdc:	2f62      	cmp	r7, #98	@ 0x62
 800bfde:	d80a      	bhi.n	800bff6 <_printf_i+0x32>
 800bfe0:	2f00      	cmp	r7, #0
 800bfe2:	f000 80d2 	beq.w	800c18a <_printf_i+0x1c6>
 800bfe6:	2f58      	cmp	r7, #88	@ 0x58
 800bfe8:	f000 80b9 	beq.w	800c15e <_printf_i+0x19a>
 800bfec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bff4:	e03a      	b.n	800c06c <_printf_i+0xa8>
 800bff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bffa:	2b15      	cmp	r3, #21
 800bffc:	d8f6      	bhi.n	800bfec <_printf_i+0x28>
 800bffe:	a101      	add	r1, pc, #4	@ (adr r1, 800c004 <_printf_i+0x40>)
 800c000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c004:	0800c05d 	.word	0x0800c05d
 800c008:	0800c071 	.word	0x0800c071
 800c00c:	0800bfed 	.word	0x0800bfed
 800c010:	0800bfed 	.word	0x0800bfed
 800c014:	0800bfed 	.word	0x0800bfed
 800c018:	0800bfed 	.word	0x0800bfed
 800c01c:	0800c071 	.word	0x0800c071
 800c020:	0800bfed 	.word	0x0800bfed
 800c024:	0800bfed 	.word	0x0800bfed
 800c028:	0800bfed 	.word	0x0800bfed
 800c02c:	0800bfed 	.word	0x0800bfed
 800c030:	0800c171 	.word	0x0800c171
 800c034:	0800c09b 	.word	0x0800c09b
 800c038:	0800c12b 	.word	0x0800c12b
 800c03c:	0800bfed 	.word	0x0800bfed
 800c040:	0800bfed 	.word	0x0800bfed
 800c044:	0800c193 	.word	0x0800c193
 800c048:	0800bfed 	.word	0x0800bfed
 800c04c:	0800c09b 	.word	0x0800c09b
 800c050:	0800bfed 	.word	0x0800bfed
 800c054:	0800bfed 	.word	0x0800bfed
 800c058:	0800c133 	.word	0x0800c133
 800c05c:	6833      	ldr	r3, [r6, #0]
 800c05e:	1d1a      	adds	r2, r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6032      	str	r2, [r6, #0]
 800c064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c06c:	2301      	movs	r3, #1
 800c06e:	e09d      	b.n	800c1ac <_printf_i+0x1e8>
 800c070:	6833      	ldr	r3, [r6, #0]
 800c072:	6820      	ldr	r0, [r4, #0]
 800c074:	1d19      	adds	r1, r3, #4
 800c076:	6031      	str	r1, [r6, #0]
 800c078:	0606      	lsls	r6, r0, #24
 800c07a:	d501      	bpl.n	800c080 <_printf_i+0xbc>
 800c07c:	681d      	ldr	r5, [r3, #0]
 800c07e:	e003      	b.n	800c088 <_printf_i+0xc4>
 800c080:	0645      	lsls	r5, r0, #25
 800c082:	d5fb      	bpl.n	800c07c <_printf_i+0xb8>
 800c084:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c088:	2d00      	cmp	r5, #0
 800c08a:	da03      	bge.n	800c094 <_printf_i+0xd0>
 800c08c:	232d      	movs	r3, #45	@ 0x2d
 800c08e:	426d      	negs	r5, r5
 800c090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c094:	4859      	ldr	r0, [pc, #356]	@ (800c1fc <_printf_i+0x238>)
 800c096:	230a      	movs	r3, #10
 800c098:	e011      	b.n	800c0be <_printf_i+0xfa>
 800c09a:	6821      	ldr	r1, [r4, #0]
 800c09c:	6833      	ldr	r3, [r6, #0]
 800c09e:	0608      	lsls	r0, r1, #24
 800c0a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0a4:	d402      	bmi.n	800c0ac <_printf_i+0xe8>
 800c0a6:	0649      	lsls	r1, r1, #25
 800c0a8:	bf48      	it	mi
 800c0aa:	b2ad      	uxthmi	r5, r5
 800c0ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0ae:	4853      	ldr	r0, [pc, #332]	@ (800c1fc <_printf_i+0x238>)
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	bf14      	ite	ne
 800c0b4:	230a      	movne	r3, #10
 800c0b6:	2308      	moveq	r3, #8
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0be:	6866      	ldr	r6, [r4, #4]
 800c0c0:	60a6      	str	r6, [r4, #8]
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	bfa2      	ittt	ge
 800c0c6:	6821      	ldrge	r1, [r4, #0]
 800c0c8:	f021 0104 	bicge.w	r1, r1, #4
 800c0cc:	6021      	strge	r1, [r4, #0]
 800c0ce:	b90d      	cbnz	r5, 800c0d4 <_printf_i+0x110>
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	d04b      	beq.n	800c16c <_printf_i+0x1a8>
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0da:	fb03 5711 	mls	r7, r3, r1, r5
 800c0de:	5dc7      	ldrb	r7, [r0, r7]
 800c0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0e4:	462f      	mov	r7, r5
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	d9f4      	bls.n	800c0d6 <_printf_i+0x112>
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d10b      	bne.n	800c108 <_printf_i+0x144>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	07df      	lsls	r7, r3, #31
 800c0f4:	d508      	bpl.n	800c108 <_printf_i+0x144>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	bfde      	ittt	le
 800c0fe:	2330      	movle	r3, #48	@ 0x30
 800c100:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c104:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c108:	1b92      	subs	r2, r2, r6
 800c10a:	6122      	str	r2, [r4, #16]
 800c10c:	f8cd a000 	str.w	sl, [sp]
 800c110:	464b      	mov	r3, r9
 800c112:	aa03      	add	r2, sp, #12
 800c114:	4621      	mov	r1, r4
 800c116:	4640      	mov	r0, r8
 800c118:	f7ff fee6 	bl	800bee8 <_printf_common>
 800c11c:	3001      	adds	r0, #1
 800c11e:	d14a      	bne.n	800c1b6 <_printf_i+0x1f2>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	b004      	add	sp, #16
 800c126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	f043 0320 	orr.w	r3, r3, #32
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	4833      	ldr	r0, [pc, #204]	@ (800c200 <_printf_i+0x23c>)
 800c134:	2778      	movs	r7, #120	@ 0x78
 800c136:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	6831      	ldr	r1, [r6, #0]
 800c13e:	061f      	lsls	r7, r3, #24
 800c140:	f851 5b04 	ldr.w	r5, [r1], #4
 800c144:	d402      	bmi.n	800c14c <_printf_i+0x188>
 800c146:	065f      	lsls	r7, r3, #25
 800c148:	bf48      	it	mi
 800c14a:	b2ad      	uxthmi	r5, r5
 800c14c:	6031      	str	r1, [r6, #0]
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	bf44      	itt	mi
 800c152:	f043 0320 	orrmi.w	r3, r3, #32
 800c156:	6023      	strmi	r3, [r4, #0]
 800c158:	b11d      	cbz	r5, 800c162 <_printf_i+0x19e>
 800c15a:	2310      	movs	r3, #16
 800c15c:	e7ac      	b.n	800c0b8 <_printf_i+0xf4>
 800c15e:	4827      	ldr	r0, [pc, #156]	@ (800c1fc <_printf_i+0x238>)
 800c160:	e7e9      	b.n	800c136 <_printf_i+0x172>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	f023 0320 	bic.w	r3, r3, #32
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	e7f6      	b.n	800c15a <_printf_i+0x196>
 800c16c:	4616      	mov	r6, r2
 800c16e:	e7bd      	b.n	800c0ec <_printf_i+0x128>
 800c170:	6833      	ldr	r3, [r6, #0]
 800c172:	6825      	ldr	r5, [r4, #0]
 800c174:	6961      	ldr	r1, [r4, #20]
 800c176:	1d18      	adds	r0, r3, #4
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	062e      	lsls	r6, r5, #24
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	d501      	bpl.n	800c184 <_printf_i+0x1c0>
 800c180:	6019      	str	r1, [r3, #0]
 800c182:	e002      	b.n	800c18a <_printf_i+0x1c6>
 800c184:	0668      	lsls	r0, r5, #25
 800c186:	d5fb      	bpl.n	800c180 <_printf_i+0x1bc>
 800c188:	8019      	strh	r1, [r3, #0]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	4616      	mov	r6, r2
 800c190:	e7bc      	b.n	800c10c <_printf_i+0x148>
 800c192:	6833      	ldr	r3, [r6, #0]
 800c194:	1d1a      	adds	r2, r3, #4
 800c196:	6032      	str	r2, [r6, #0]
 800c198:	681e      	ldr	r6, [r3, #0]
 800c19a:	6862      	ldr	r2, [r4, #4]
 800c19c:	2100      	movs	r1, #0
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7f4 f81e 	bl	80001e0 <memchr>
 800c1a4:	b108      	cbz	r0, 800c1aa <_printf_i+0x1e6>
 800c1a6:	1b80      	subs	r0, r0, r6
 800c1a8:	6060      	str	r0, [r4, #4]
 800c1aa:	6863      	ldr	r3, [r4, #4]
 800c1ac:	6123      	str	r3, [r4, #16]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1b4:	e7aa      	b.n	800c10c <_printf_i+0x148>
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	4640      	mov	r0, r8
 800c1be:	47d0      	blx	sl
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d0ad      	beq.n	800c120 <_printf_i+0x15c>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	079b      	lsls	r3, r3, #30
 800c1c8:	d413      	bmi.n	800c1f2 <_printf_i+0x22e>
 800c1ca:	68e0      	ldr	r0, [r4, #12]
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	4298      	cmp	r0, r3
 800c1d0:	bfb8      	it	lt
 800c1d2:	4618      	movlt	r0, r3
 800c1d4:	e7a6      	b.n	800c124 <_printf_i+0x160>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4632      	mov	r2, r6
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4640      	mov	r0, r8
 800c1de:	47d0      	blx	sl
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d09d      	beq.n	800c120 <_printf_i+0x15c>
 800c1e4:	3501      	adds	r5, #1
 800c1e6:	68e3      	ldr	r3, [r4, #12]
 800c1e8:	9903      	ldr	r1, [sp, #12]
 800c1ea:	1a5b      	subs	r3, r3, r1
 800c1ec:	42ab      	cmp	r3, r5
 800c1ee:	dcf2      	bgt.n	800c1d6 <_printf_i+0x212>
 800c1f0:	e7eb      	b.n	800c1ca <_printf_i+0x206>
 800c1f2:	2500      	movs	r5, #0
 800c1f4:	f104 0619 	add.w	r6, r4, #25
 800c1f8:	e7f5      	b.n	800c1e6 <_printf_i+0x222>
 800c1fa:	bf00      	nop
 800c1fc:	0800e2fa 	.word	0x0800e2fa
 800c200:	0800e30b 	.word	0x0800e30b

0800c204 <std>:
 800c204:	2300      	movs	r3, #0
 800c206:	b510      	push	{r4, lr}
 800c208:	4604      	mov	r4, r0
 800c20a:	e9c0 3300 	strd	r3, r3, [r0]
 800c20e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c212:	6083      	str	r3, [r0, #8]
 800c214:	8181      	strh	r1, [r0, #12]
 800c216:	6643      	str	r3, [r0, #100]	@ 0x64
 800c218:	81c2      	strh	r2, [r0, #14]
 800c21a:	6183      	str	r3, [r0, #24]
 800c21c:	4619      	mov	r1, r3
 800c21e:	2208      	movs	r2, #8
 800c220:	305c      	adds	r0, #92	@ 0x5c
 800c222:	f000 f8f4 	bl	800c40e <memset>
 800c226:	4b0d      	ldr	r3, [pc, #52]	@ (800c25c <std+0x58>)
 800c228:	6263      	str	r3, [r4, #36]	@ 0x24
 800c22a:	4b0d      	ldr	r3, [pc, #52]	@ (800c260 <std+0x5c>)
 800c22c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c22e:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <std+0x60>)
 800c230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <std+0x64>)
 800c234:	6323      	str	r3, [r4, #48]	@ 0x30
 800c236:	4b0d      	ldr	r3, [pc, #52]	@ (800c26c <std+0x68>)
 800c238:	6224      	str	r4, [r4, #32]
 800c23a:	429c      	cmp	r4, r3
 800c23c:	d006      	beq.n	800c24c <std+0x48>
 800c23e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c242:	4294      	cmp	r4, r2
 800c244:	d002      	beq.n	800c24c <std+0x48>
 800c246:	33d0      	adds	r3, #208	@ 0xd0
 800c248:	429c      	cmp	r4, r3
 800c24a:	d105      	bne.n	800c258 <std+0x54>
 800c24c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c254:	f000 b958 	b.w	800c508 <__retarget_lock_init_recursive>
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	bf00      	nop
 800c25c:	0800c389 	.word	0x0800c389
 800c260:	0800c3ab 	.word	0x0800c3ab
 800c264:	0800c3e3 	.word	0x0800c3e3
 800c268:	0800c407 	.word	0x0800c407
 800c26c:	20002068 	.word	0x20002068

0800c270 <stdio_exit_handler>:
 800c270:	4a02      	ldr	r2, [pc, #8]	@ (800c27c <stdio_exit_handler+0xc>)
 800c272:	4903      	ldr	r1, [pc, #12]	@ (800c280 <stdio_exit_handler+0x10>)
 800c274:	4803      	ldr	r0, [pc, #12]	@ (800c284 <stdio_exit_handler+0x14>)
 800c276:	f000 b869 	b.w	800c34c <_fwalk_sglue>
 800c27a:	bf00      	nop
 800c27c:	200000fc 	.word	0x200000fc
 800c280:	0800dbd5 	.word	0x0800dbd5
 800c284:	2000010c 	.word	0x2000010c

0800c288 <cleanup_stdio>:
 800c288:	6841      	ldr	r1, [r0, #4]
 800c28a:	4b0c      	ldr	r3, [pc, #48]	@ (800c2bc <cleanup_stdio+0x34>)
 800c28c:	4299      	cmp	r1, r3
 800c28e:	b510      	push	{r4, lr}
 800c290:	4604      	mov	r4, r0
 800c292:	d001      	beq.n	800c298 <cleanup_stdio+0x10>
 800c294:	f001 fc9e 	bl	800dbd4 <_fflush_r>
 800c298:	68a1      	ldr	r1, [r4, #8]
 800c29a:	4b09      	ldr	r3, [pc, #36]	@ (800c2c0 <cleanup_stdio+0x38>)
 800c29c:	4299      	cmp	r1, r3
 800c29e:	d002      	beq.n	800c2a6 <cleanup_stdio+0x1e>
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f001 fc97 	bl	800dbd4 <_fflush_r>
 800c2a6:	68e1      	ldr	r1, [r4, #12]
 800c2a8:	4b06      	ldr	r3, [pc, #24]	@ (800c2c4 <cleanup_stdio+0x3c>)
 800c2aa:	4299      	cmp	r1, r3
 800c2ac:	d004      	beq.n	800c2b8 <cleanup_stdio+0x30>
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b4:	f001 bc8e 	b.w	800dbd4 <_fflush_r>
 800c2b8:	bd10      	pop	{r4, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20002068 	.word	0x20002068
 800c2c0:	200020d0 	.word	0x200020d0
 800c2c4:	20002138 	.word	0x20002138

0800c2c8 <global_stdio_init.part.0>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <global_stdio_init.part.0+0x30>)
 800c2cc:	4c0b      	ldr	r4, [pc, #44]	@ (800c2fc <global_stdio_init.part.0+0x34>)
 800c2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c300 <global_stdio_init.part.0+0x38>)
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2104      	movs	r1, #4
 800c2d8:	f7ff ff94 	bl	800c204 <std>
 800c2dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	2109      	movs	r1, #9
 800c2e4:	f7ff ff8e 	bl	800c204 <std>
 800c2e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f2:	2112      	movs	r1, #18
 800c2f4:	f7ff bf86 	b.w	800c204 <std>
 800c2f8:	200021a0 	.word	0x200021a0
 800c2fc:	20002068 	.word	0x20002068
 800c300:	0800c271 	.word	0x0800c271

0800c304 <__sfp_lock_acquire>:
 800c304:	4801      	ldr	r0, [pc, #4]	@ (800c30c <__sfp_lock_acquire+0x8>)
 800c306:	f000 b900 	b.w	800c50a <__retarget_lock_acquire_recursive>
 800c30a:	bf00      	nop
 800c30c:	200021a9 	.word	0x200021a9

0800c310 <__sfp_lock_release>:
 800c310:	4801      	ldr	r0, [pc, #4]	@ (800c318 <__sfp_lock_release+0x8>)
 800c312:	f000 b8fb 	b.w	800c50c <__retarget_lock_release_recursive>
 800c316:	bf00      	nop
 800c318:	200021a9 	.word	0x200021a9

0800c31c <__sinit>:
 800c31c:	b510      	push	{r4, lr}
 800c31e:	4604      	mov	r4, r0
 800c320:	f7ff fff0 	bl	800c304 <__sfp_lock_acquire>
 800c324:	6a23      	ldr	r3, [r4, #32]
 800c326:	b11b      	cbz	r3, 800c330 <__sinit+0x14>
 800c328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c32c:	f7ff bff0 	b.w	800c310 <__sfp_lock_release>
 800c330:	4b04      	ldr	r3, [pc, #16]	@ (800c344 <__sinit+0x28>)
 800c332:	6223      	str	r3, [r4, #32]
 800c334:	4b04      	ldr	r3, [pc, #16]	@ (800c348 <__sinit+0x2c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f5      	bne.n	800c328 <__sinit+0xc>
 800c33c:	f7ff ffc4 	bl	800c2c8 <global_stdio_init.part.0>
 800c340:	e7f2      	b.n	800c328 <__sinit+0xc>
 800c342:	bf00      	nop
 800c344:	0800c289 	.word	0x0800c289
 800c348:	200021a0 	.word	0x200021a0

0800c34c <_fwalk_sglue>:
 800c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c350:	4607      	mov	r7, r0
 800c352:	4688      	mov	r8, r1
 800c354:	4614      	mov	r4, r2
 800c356:	2600      	movs	r6, #0
 800c358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c35c:	f1b9 0901 	subs.w	r9, r9, #1
 800c360:	d505      	bpl.n	800c36e <_fwalk_sglue+0x22>
 800c362:	6824      	ldr	r4, [r4, #0]
 800c364:	2c00      	cmp	r4, #0
 800c366:	d1f7      	bne.n	800c358 <_fwalk_sglue+0xc>
 800c368:	4630      	mov	r0, r6
 800c36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36e:	89ab      	ldrh	r3, [r5, #12]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d907      	bls.n	800c384 <_fwalk_sglue+0x38>
 800c374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c378:	3301      	adds	r3, #1
 800c37a:	d003      	beq.n	800c384 <_fwalk_sglue+0x38>
 800c37c:	4629      	mov	r1, r5
 800c37e:	4638      	mov	r0, r7
 800c380:	47c0      	blx	r8
 800c382:	4306      	orrs	r6, r0
 800c384:	3568      	adds	r5, #104	@ 0x68
 800c386:	e7e9      	b.n	800c35c <_fwalk_sglue+0x10>

0800c388 <__sread>:
 800c388:	b510      	push	{r4, lr}
 800c38a:	460c      	mov	r4, r1
 800c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c390:	f000 f86c 	bl	800c46c <_read_r>
 800c394:	2800      	cmp	r0, #0
 800c396:	bfab      	itete	ge
 800c398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c39a:	89a3      	ldrhlt	r3, [r4, #12]
 800c39c:	181b      	addge	r3, r3, r0
 800c39e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3a2:	bfac      	ite	ge
 800c3a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3a6:	81a3      	strhlt	r3, [r4, #12]
 800c3a8:	bd10      	pop	{r4, pc}

0800c3aa <__swrite>:
 800c3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	461f      	mov	r7, r3
 800c3b0:	898b      	ldrh	r3, [r1, #12]
 800c3b2:	05db      	lsls	r3, r3, #23
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4616      	mov	r6, r2
 800c3ba:	d505      	bpl.n	800c3c8 <__swrite+0x1e>
 800c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f000 f840 	bl	800c448 <_lseek_r>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4628      	mov	r0, r5
 800c3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3de:	f000 b857 	b.w	800c490 <_write_r>

0800c3e2 <__sseek>:
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ea:	f000 f82d 	bl	800c448 <_lseek_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	bf15      	itete	ne
 800c3f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3fe:	81a3      	strheq	r3, [r4, #12]
 800c400:	bf18      	it	ne
 800c402:	81a3      	strhne	r3, [r4, #12]
 800c404:	bd10      	pop	{r4, pc}

0800c406 <__sclose>:
 800c406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40a:	f000 b80d 	b.w	800c428 <_close_r>

0800c40e <memset>:
 800c40e:	4402      	add	r2, r0
 800c410:	4603      	mov	r3, r0
 800c412:	4293      	cmp	r3, r2
 800c414:	d100      	bne.n	800c418 <memset+0xa>
 800c416:	4770      	bx	lr
 800c418:	f803 1b01 	strb.w	r1, [r3], #1
 800c41c:	e7f9      	b.n	800c412 <memset+0x4>
	...

0800c420 <_localeconv_r>:
 800c420:	4800      	ldr	r0, [pc, #0]	@ (800c424 <_localeconv_r+0x4>)
 800c422:	4770      	bx	lr
 800c424:	20000248 	.word	0x20000248

0800c428 <_close_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d06      	ldr	r5, [pc, #24]	@ (800c444 <_close_r+0x1c>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	4604      	mov	r4, r0
 800c430:	4608      	mov	r0, r1
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	f7f5 fcb4 	bl	8001da0 <_close>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	d102      	bne.n	800c442 <_close_r+0x1a>
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	b103      	cbz	r3, 800c442 <_close_r+0x1a>
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	bd38      	pop	{r3, r4, r5, pc}
 800c444:	200021a4 	.word	0x200021a4

0800c448 <_lseek_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d07      	ldr	r5, [pc, #28]	@ (800c468 <_lseek_r+0x20>)
 800c44c:	4604      	mov	r4, r0
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	2200      	movs	r2, #0
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f5 fcc9 	bl	8001dee <_lseek>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_lseek_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_lseek_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200021a4 	.word	0x200021a4

0800c46c <_read_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	@ (800c48c <_read_r+0x20>)
 800c470:	4604      	mov	r4, r0
 800c472:	4608      	mov	r0, r1
 800c474:	4611      	mov	r1, r2
 800c476:	2200      	movs	r2, #0
 800c478:	602a      	str	r2, [r5, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	f7f5 fc57 	bl	8001d2e <_read>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_read_r+0x1e>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_read_r+0x1e>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	200021a4 	.word	0x200021a4

0800c490 <_write_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	@ (800c4b0 <_write_r+0x20>)
 800c494:	4604      	mov	r4, r0
 800c496:	4608      	mov	r0, r1
 800c498:	4611      	mov	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	602a      	str	r2, [r5, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f7f5 fc62 	bl	8001d68 <_write>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_write_r+0x1e>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_write_r+0x1e>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	200021a4 	.word	0x200021a4

0800c4b4 <__errno>:
 800c4b4:	4b01      	ldr	r3, [pc, #4]	@ (800c4bc <__errno+0x8>)
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000108 	.word	0x20000108

0800c4c0 <__libc_init_array>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c4f8 <__libc_init_array+0x38>)
 800c4c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c4fc <__libc_init_array+0x3c>)
 800c4c6:	1b64      	subs	r4, r4, r5
 800c4c8:	10a4      	asrs	r4, r4, #2
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	42a6      	cmp	r6, r4
 800c4ce:	d109      	bne.n	800c4e4 <__libc_init_array+0x24>
 800c4d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c500 <__libc_init_array+0x40>)
 800c4d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c504 <__libc_init_array+0x44>)
 800c4d4:	f001 febe 	bl	800e254 <_init>
 800c4d8:	1b64      	subs	r4, r4, r5
 800c4da:	10a4      	asrs	r4, r4, #2
 800c4dc:	2600      	movs	r6, #0
 800c4de:	42a6      	cmp	r6, r4
 800c4e0:	d105      	bne.n	800c4ee <__libc_init_array+0x2e>
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e8:	4798      	blx	r3
 800c4ea:	3601      	adds	r6, #1
 800c4ec:	e7ee      	b.n	800c4cc <__libc_init_array+0xc>
 800c4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f2:	4798      	blx	r3
 800c4f4:	3601      	adds	r6, #1
 800c4f6:	e7f2      	b.n	800c4de <__libc_init_array+0x1e>
 800c4f8:	0800e660 	.word	0x0800e660
 800c4fc:	0800e660 	.word	0x0800e660
 800c500:	0800e660 	.word	0x0800e660
 800c504:	0800e664 	.word	0x0800e664

0800c508 <__retarget_lock_init_recursive>:
 800c508:	4770      	bx	lr

0800c50a <__retarget_lock_acquire_recursive>:
 800c50a:	4770      	bx	lr

0800c50c <__retarget_lock_release_recursive>:
 800c50c:	4770      	bx	lr

0800c50e <memcpy>:
 800c50e:	440a      	add	r2, r1
 800c510:	4291      	cmp	r1, r2
 800c512:	f100 33ff 	add.w	r3, r0, #4294967295
 800c516:	d100      	bne.n	800c51a <memcpy+0xc>
 800c518:	4770      	bx	lr
 800c51a:	b510      	push	{r4, lr}
 800c51c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c520:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c524:	4291      	cmp	r1, r2
 800c526:	d1f9      	bne.n	800c51c <memcpy+0xe>
 800c528:	bd10      	pop	{r4, pc}

0800c52a <quorem>:
 800c52a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52e:	6903      	ldr	r3, [r0, #16]
 800c530:	690c      	ldr	r4, [r1, #16]
 800c532:	42a3      	cmp	r3, r4
 800c534:	4607      	mov	r7, r0
 800c536:	db7e      	blt.n	800c636 <quorem+0x10c>
 800c538:	3c01      	subs	r4, #1
 800c53a:	f101 0814 	add.w	r8, r1, #20
 800c53e:	00a3      	lsls	r3, r4, #2
 800c540:	f100 0514 	add.w	r5, r0, #20
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c554:	3301      	adds	r3, #1
 800c556:	429a      	cmp	r2, r3
 800c558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c55c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c560:	d32e      	bcc.n	800c5c0 <quorem+0x96>
 800c562:	f04f 0a00 	mov.w	sl, #0
 800c566:	46c4      	mov	ip, r8
 800c568:	46ae      	mov	lr, r5
 800c56a:	46d3      	mov	fp, sl
 800c56c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c570:	b298      	uxth	r0, r3
 800c572:	fb06 a000 	mla	r0, r6, r0, sl
 800c576:	0c02      	lsrs	r2, r0, #16
 800c578:	0c1b      	lsrs	r3, r3, #16
 800c57a:	fb06 2303 	mla	r3, r6, r3, r2
 800c57e:	f8de 2000 	ldr.w	r2, [lr]
 800c582:	b280      	uxth	r0, r0
 800c584:	b292      	uxth	r2, r2
 800c586:	1a12      	subs	r2, r2, r0
 800c588:	445a      	add	r2, fp
 800c58a:	f8de 0000 	ldr.w	r0, [lr]
 800c58e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c592:	b29b      	uxth	r3, r3
 800c594:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c598:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c59c:	b292      	uxth	r2, r2
 800c59e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5a2:	45e1      	cmp	r9, ip
 800c5a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c5a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5ac:	d2de      	bcs.n	800c56c <quorem+0x42>
 800c5ae:	9b00      	ldr	r3, [sp, #0]
 800c5b0:	58eb      	ldr	r3, [r5, r3]
 800c5b2:	b92b      	cbnz	r3, 800c5c0 <quorem+0x96>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	3b04      	subs	r3, #4
 800c5b8:	429d      	cmp	r5, r3
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	d32f      	bcc.n	800c61e <quorem+0xf4>
 800c5be:	613c      	str	r4, [r7, #16]
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f001 f97b 	bl	800d8bc <__mcmp>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	db25      	blt.n	800c616 <quorem+0xec>
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5d2:	f8d1 c000 	ldr.w	ip, [r1]
 800c5d6:	fa1f fe82 	uxth.w	lr, r2
 800c5da:	fa1f f38c 	uxth.w	r3, ip
 800c5de:	eba3 030e 	sub.w	r3, r3, lr
 800c5e2:	4403      	add	r3, r0
 800c5e4:	0c12      	lsrs	r2, r2, #16
 800c5e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c5ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5f4:	45c1      	cmp	r9, r8
 800c5f6:	f841 3b04 	str.w	r3, [r1], #4
 800c5fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5fe:	d2e6      	bcs.n	800c5ce <quorem+0xa4>
 800c600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c608:	b922      	cbnz	r2, 800c614 <quorem+0xea>
 800c60a:	3b04      	subs	r3, #4
 800c60c:	429d      	cmp	r5, r3
 800c60e:	461a      	mov	r2, r3
 800c610:	d30b      	bcc.n	800c62a <quorem+0x100>
 800c612:	613c      	str	r4, [r7, #16]
 800c614:	3601      	adds	r6, #1
 800c616:	4630      	mov	r0, r6
 800c618:	b003      	add	sp, #12
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	6812      	ldr	r2, [r2, #0]
 800c620:	3b04      	subs	r3, #4
 800c622:	2a00      	cmp	r2, #0
 800c624:	d1cb      	bne.n	800c5be <quorem+0x94>
 800c626:	3c01      	subs	r4, #1
 800c628:	e7c6      	b.n	800c5b8 <quorem+0x8e>
 800c62a:	6812      	ldr	r2, [r2, #0]
 800c62c:	3b04      	subs	r3, #4
 800c62e:	2a00      	cmp	r2, #0
 800c630:	d1ef      	bne.n	800c612 <quorem+0xe8>
 800c632:	3c01      	subs	r4, #1
 800c634:	e7ea      	b.n	800c60c <quorem+0xe2>
 800c636:	2000      	movs	r0, #0
 800c638:	e7ee      	b.n	800c618 <quorem+0xee>
 800c63a:	0000      	movs	r0, r0
 800c63c:	0000      	movs	r0, r0
	...

0800c640 <_dtoa_r>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	69c7      	ldr	r7, [r0, #28]
 800c646:	b099      	sub	sp, #100	@ 0x64
 800c648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c64c:	ec55 4b10 	vmov	r4, r5, d0
 800c650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c652:	9109      	str	r1, [sp, #36]	@ 0x24
 800c654:	4683      	mov	fp, r0
 800c656:	920e      	str	r2, [sp, #56]	@ 0x38
 800c658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c65a:	b97f      	cbnz	r7, 800c67c <_dtoa_r+0x3c>
 800c65c:	2010      	movs	r0, #16
 800c65e:	f000 fdfd 	bl	800d25c <malloc>
 800c662:	4602      	mov	r2, r0
 800c664:	f8cb 001c 	str.w	r0, [fp, #28]
 800c668:	b920      	cbnz	r0, 800c674 <_dtoa_r+0x34>
 800c66a:	4ba7      	ldr	r3, [pc, #668]	@ (800c908 <_dtoa_r+0x2c8>)
 800c66c:	21ef      	movs	r1, #239	@ 0xef
 800c66e:	48a7      	ldr	r0, [pc, #668]	@ (800c90c <_dtoa_r+0x2cc>)
 800c670:	f001 fae8 	bl	800dc44 <__assert_func>
 800c674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c678:	6007      	str	r7, [r0, #0]
 800c67a:	60c7      	str	r7, [r0, #12]
 800c67c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c680:	6819      	ldr	r1, [r3, #0]
 800c682:	b159      	cbz	r1, 800c69c <_dtoa_r+0x5c>
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	604a      	str	r2, [r1, #4]
 800c688:	2301      	movs	r3, #1
 800c68a:	4093      	lsls	r3, r2
 800c68c:	608b      	str	r3, [r1, #8]
 800c68e:	4658      	mov	r0, fp
 800c690:	f000 feda 	bl	800d448 <_Bfree>
 800c694:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	1e2b      	subs	r3, r5, #0
 800c69e:	bfb9      	ittee	lt
 800c6a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6a4:	9303      	strlt	r3, [sp, #12]
 800c6a6:	2300      	movge	r3, #0
 800c6a8:	6033      	strge	r3, [r6, #0]
 800c6aa:	9f03      	ldr	r7, [sp, #12]
 800c6ac:	4b98      	ldr	r3, [pc, #608]	@ (800c910 <_dtoa_r+0x2d0>)
 800c6ae:	bfbc      	itt	lt
 800c6b0:	2201      	movlt	r2, #1
 800c6b2:	6032      	strlt	r2, [r6, #0]
 800c6b4:	43bb      	bics	r3, r7
 800c6b6:	d112      	bne.n	800c6de <_dtoa_r+0x9e>
 800c6b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c6ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6c4:	4323      	orrs	r3, r4
 800c6c6:	f000 854d 	beq.w	800d164 <_dtoa_r+0xb24>
 800c6ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c924 <_dtoa_r+0x2e4>
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 854f 	beq.w	800d174 <_dtoa_r+0xb34>
 800c6d6:	f10a 0303 	add.w	r3, sl, #3
 800c6da:	f000 bd49 	b.w	800d170 <_dtoa_r+0xb30>
 800c6de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	ec51 0b17 	vmov	r0, r1, d7
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c6ee:	f7f4 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6f2:	4680      	mov	r8, r0
 800c6f4:	b158      	cbz	r0, 800c70e <_dtoa_r+0xce>
 800c6f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6fe:	b113      	cbz	r3, 800c706 <_dtoa_r+0xc6>
 800c700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c702:	4b84      	ldr	r3, [pc, #528]	@ (800c914 <_dtoa_r+0x2d4>)
 800c704:	6013      	str	r3, [r2, #0]
 800c706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c928 <_dtoa_r+0x2e8>
 800c70a:	f000 bd33 	b.w	800d174 <_dtoa_r+0xb34>
 800c70e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c712:	aa16      	add	r2, sp, #88	@ 0x58
 800c714:	a917      	add	r1, sp, #92	@ 0x5c
 800c716:	4658      	mov	r0, fp
 800c718:	f001 f980 	bl	800da1c <__d2b>
 800c71c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c720:	4681      	mov	r9, r0
 800c722:	2e00      	cmp	r6, #0
 800c724:	d077      	beq.n	800c816 <_dtoa_r+0x1d6>
 800c726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c73c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c740:	4619      	mov	r1, r3
 800c742:	2200      	movs	r2, #0
 800c744:	4b74      	ldr	r3, [pc, #464]	@ (800c918 <_dtoa_r+0x2d8>)
 800c746:	f7f3 fda7 	bl	8000298 <__aeabi_dsub>
 800c74a:	a369      	add	r3, pc, #420	@ (adr r3, 800c8f0 <_dtoa_r+0x2b0>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f7f3 ff5a 	bl	8000608 <__aeabi_dmul>
 800c754:	a368      	add	r3, pc, #416	@ (adr r3, 800c8f8 <_dtoa_r+0x2b8>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f3 fd9f 	bl	800029c <__adddf3>
 800c75e:	4604      	mov	r4, r0
 800c760:	4630      	mov	r0, r6
 800c762:	460d      	mov	r5, r1
 800c764:	f7f3 fee6 	bl	8000534 <__aeabi_i2d>
 800c768:	a365      	add	r3, pc, #404	@ (adr r3, 800c900 <_dtoa_r+0x2c0>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 ff4b 	bl	8000608 <__aeabi_dmul>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 fd8f 	bl	800029c <__adddf3>
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	f7f4 f9f1 	bl	8000b68 <__aeabi_d2iz>
 800c786:	2200      	movs	r2, #0
 800c788:	4607      	mov	r7, r0
 800c78a:	2300      	movs	r3, #0
 800c78c:	4620      	mov	r0, r4
 800c78e:	4629      	mov	r1, r5
 800c790:	f7f4 f9ac 	bl	8000aec <__aeabi_dcmplt>
 800c794:	b140      	cbz	r0, 800c7a8 <_dtoa_r+0x168>
 800c796:	4638      	mov	r0, r7
 800c798:	f7f3 fecc 	bl	8000534 <__aeabi_i2d>
 800c79c:	4622      	mov	r2, r4
 800c79e:	462b      	mov	r3, r5
 800c7a0:	f7f4 f99a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7a4:	b900      	cbnz	r0, 800c7a8 <_dtoa_r+0x168>
 800c7a6:	3f01      	subs	r7, #1
 800c7a8:	2f16      	cmp	r7, #22
 800c7aa:	d851      	bhi.n	800c850 <_dtoa_r+0x210>
 800c7ac:	4b5b      	ldr	r3, [pc, #364]	@ (800c91c <_dtoa_r+0x2dc>)
 800c7ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7ba:	f7f4 f997 	bl	8000aec <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d048      	beq.n	800c854 <_dtoa_r+0x214>
 800c7c2:	3f01      	subs	r7, #1
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c7c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c7ca:	1b9b      	subs	r3, r3, r6
 800c7cc:	1e5a      	subs	r2, r3, #1
 800c7ce:	bf44      	itt	mi
 800c7d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c7d4:	2300      	movmi	r3, #0
 800c7d6:	9208      	str	r2, [sp, #32]
 800c7d8:	bf54      	ite	pl
 800c7da:	f04f 0800 	movpl.w	r8, #0
 800c7de:	9308      	strmi	r3, [sp, #32]
 800c7e0:	2f00      	cmp	r7, #0
 800c7e2:	db39      	blt.n	800c858 <_dtoa_r+0x218>
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c7e8:	443b      	add	r3, r7
 800c7ea:	9308      	str	r3, [sp, #32]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	2b09      	cmp	r3, #9
 800c7f4:	d864      	bhi.n	800c8c0 <_dtoa_r+0x280>
 800c7f6:	2b05      	cmp	r3, #5
 800c7f8:	bfc4      	itt	gt
 800c7fa:	3b04      	subgt	r3, #4
 800c7fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c800:	f1a3 0302 	sub.w	r3, r3, #2
 800c804:	bfcc      	ite	gt
 800c806:	2400      	movgt	r4, #0
 800c808:	2401      	movle	r4, #1
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d863      	bhi.n	800c8d6 <_dtoa_r+0x296>
 800c80e:	e8df f003 	tbb	[pc, r3]
 800c812:	372a      	.short	0x372a
 800c814:	5535      	.short	0x5535
 800c816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c81a:	441e      	add	r6, r3
 800c81c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c820:	2b20      	cmp	r3, #32
 800c822:	bfc1      	itttt	gt
 800c824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c828:	409f      	lslgt	r7, r3
 800c82a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c82e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c832:	bfd6      	itet	le
 800c834:	f1c3 0320 	rsble	r3, r3, #32
 800c838:	ea47 0003 	orrgt.w	r0, r7, r3
 800c83c:	fa04 f003 	lslle.w	r0, r4, r3
 800c840:	f7f3 fe68 	bl	8000514 <__aeabi_ui2d>
 800c844:	2201      	movs	r2, #1
 800c846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c84a:	3e01      	subs	r6, #1
 800c84c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c84e:	e777      	b.n	800c740 <_dtoa_r+0x100>
 800c850:	2301      	movs	r3, #1
 800c852:	e7b8      	b.n	800c7c6 <_dtoa_r+0x186>
 800c854:	9012      	str	r0, [sp, #72]	@ 0x48
 800c856:	e7b7      	b.n	800c7c8 <_dtoa_r+0x188>
 800c858:	427b      	negs	r3, r7
 800c85a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c85c:	2300      	movs	r3, #0
 800c85e:	eba8 0807 	sub.w	r8, r8, r7
 800c862:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c864:	e7c4      	b.n	800c7f0 <_dtoa_r+0x1b0>
 800c866:	2300      	movs	r3, #0
 800c868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c86a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	dc35      	bgt.n	800c8dc <_dtoa_r+0x29c>
 800c870:	2301      	movs	r3, #1
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	9307      	str	r3, [sp, #28]
 800c876:	461a      	mov	r2, r3
 800c878:	920e      	str	r2, [sp, #56]	@ 0x38
 800c87a:	e00b      	b.n	800c894 <_dtoa_r+0x254>
 800c87c:	2301      	movs	r3, #1
 800c87e:	e7f3      	b.n	800c868 <_dtoa_r+0x228>
 800c880:	2300      	movs	r3, #0
 800c882:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c886:	18fb      	adds	r3, r7, r3
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	bfb8      	it	lt
 800c892:	2301      	movlt	r3, #1
 800c894:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c898:	2100      	movs	r1, #0
 800c89a:	2204      	movs	r2, #4
 800c89c:	f102 0514 	add.w	r5, r2, #20
 800c8a0:	429d      	cmp	r5, r3
 800c8a2:	d91f      	bls.n	800c8e4 <_dtoa_r+0x2a4>
 800c8a4:	6041      	str	r1, [r0, #4]
 800c8a6:	4658      	mov	r0, fp
 800c8a8:	f000 fd8e 	bl	800d3c8 <_Balloc>
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d13c      	bne.n	800c92c <_dtoa_r+0x2ec>
 800c8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c920 <_dtoa_r+0x2e0>)
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c8ba:	e6d8      	b.n	800c66e <_dtoa_r+0x2e>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e7e0      	b.n	800c882 <_dtoa_r+0x242>
 800c8c0:	2401      	movs	r4, #1
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	9307      	str	r3, [sp, #28]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2312      	movs	r3, #18
 800c8d4:	e7d0      	b.n	800c878 <_dtoa_r+0x238>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8da:	e7f5      	b.n	800c8c8 <_dtoa_r+0x288>
 800c8dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	9307      	str	r3, [sp, #28]
 800c8e2:	e7d7      	b.n	800c894 <_dtoa_r+0x254>
 800c8e4:	3101      	adds	r1, #1
 800c8e6:	0052      	lsls	r2, r2, #1
 800c8e8:	e7d8      	b.n	800c89c <_dtoa_r+0x25c>
 800c8ea:	bf00      	nop
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	636f4361 	.word	0x636f4361
 800c8f4:	3fd287a7 	.word	0x3fd287a7
 800c8f8:	8b60c8b3 	.word	0x8b60c8b3
 800c8fc:	3fc68a28 	.word	0x3fc68a28
 800c900:	509f79fb 	.word	0x509f79fb
 800c904:	3fd34413 	.word	0x3fd34413
 800c908:	0800e329 	.word	0x0800e329
 800c90c:	0800e340 	.word	0x0800e340
 800c910:	7ff00000 	.word	0x7ff00000
 800c914:	0800e2f9 	.word	0x0800e2f9
 800c918:	3ff80000 	.word	0x3ff80000
 800c91c:	0800e438 	.word	0x0800e438
 800c920:	0800e398 	.word	0x0800e398
 800c924:	0800e325 	.word	0x0800e325
 800c928:	0800e2f8 	.word	0x0800e2f8
 800c92c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c930:	6018      	str	r0, [r3, #0]
 800c932:	9b07      	ldr	r3, [sp, #28]
 800c934:	2b0e      	cmp	r3, #14
 800c936:	f200 80a4 	bhi.w	800ca82 <_dtoa_r+0x442>
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	f000 80a1 	beq.w	800ca82 <_dtoa_r+0x442>
 800c940:	2f00      	cmp	r7, #0
 800c942:	dd33      	ble.n	800c9ac <_dtoa_r+0x36c>
 800c944:	4bad      	ldr	r3, [pc, #692]	@ (800cbfc <_dtoa_r+0x5bc>)
 800c946:	f007 020f 	and.w	r2, r7, #15
 800c94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c94e:	ed93 7b00 	vldr	d7, [r3]
 800c952:	05f8      	lsls	r0, r7, #23
 800c954:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c95c:	d516      	bpl.n	800c98c <_dtoa_r+0x34c>
 800c95e:	4ba8      	ldr	r3, [pc, #672]	@ (800cc00 <_dtoa_r+0x5c0>)
 800c960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c968:	f7f3 ff78 	bl	800085c <__aeabi_ddiv>
 800c96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c970:	f004 040f 	and.w	r4, r4, #15
 800c974:	2603      	movs	r6, #3
 800c976:	4da2      	ldr	r5, [pc, #648]	@ (800cc00 <_dtoa_r+0x5c0>)
 800c978:	b954      	cbnz	r4, 800c990 <_dtoa_r+0x350>
 800c97a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c982:	f7f3 ff6b 	bl	800085c <__aeabi_ddiv>
 800c986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c98a:	e028      	b.n	800c9de <_dtoa_r+0x39e>
 800c98c:	2602      	movs	r6, #2
 800c98e:	e7f2      	b.n	800c976 <_dtoa_r+0x336>
 800c990:	07e1      	lsls	r1, r4, #31
 800c992:	d508      	bpl.n	800c9a6 <_dtoa_r+0x366>
 800c994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c99c:	f7f3 fe34 	bl	8000608 <__aeabi_dmul>
 800c9a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	1064      	asrs	r4, r4, #1
 800c9a8:	3508      	adds	r5, #8
 800c9aa:	e7e5      	b.n	800c978 <_dtoa_r+0x338>
 800c9ac:	f000 80d2 	beq.w	800cb54 <_dtoa_r+0x514>
 800c9b0:	427c      	negs	r4, r7
 800c9b2:	4b92      	ldr	r3, [pc, #584]	@ (800cbfc <_dtoa_r+0x5bc>)
 800c9b4:	4d92      	ldr	r5, [pc, #584]	@ (800cc00 <_dtoa_r+0x5c0>)
 800c9b6:	f004 020f 	and.w	r2, r4, #15
 800c9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9c6:	f7f3 fe1f 	bl	8000608 <__aeabi_dmul>
 800c9ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9ce:	1124      	asrs	r4, r4, #4
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	2602      	movs	r6, #2
 800c9d4:	2c00      	cmp	r4, #0
 800c9d6:	f040 80b2 	bne.w	800cb3e <_dtoa_r+0x4fe>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1d3      	bne.n	800c986 <_dtoa_r+0x346>
 800c9de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 80b7 	beq.w	800cb58 <_dtoa_r+0x518>
 800c9ea:	4b86      	ldr	r3, [pc, #536]	@ (800cc04 <_dtoa_r+0x5c4>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7f4 f87b 	bl	8000aec <__aeabi_dcmplt>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f000 80ae 	beq.w	800cb58 <_dtoa_r+0x518>
 800c9fc:	9b07      	ldr	r3, [sp, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80aa 	beq.w	800cb58 <_dtoa_r+0x518>
 800ca04:	9b00      	ldr	r3, [sp, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dd37      	ble.n	800ca7a <_dtoa_r+0x43a>
 800ca0a:	1e7b      	subs	r3, r7, #1
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4b7d      	ldr	r3, [pc, #500]	@ (800cc08 <_dtoa_r+0x5c8>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	4629      	mov	r1, r5
 800ca16:	f7f3 fdf7 	bl	8000608 <__aeabi_dmul>
 800ca1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1e:	9c00      	ldr	r4, [sp, #0]
 800ca20:	3601      	adds	r6, #1
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7f3 fd86 	bl	8000534 <__aeabi_i2d>
 800ca28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca2c:	f7f3 fdec 	bl	8000608 <__aeabi_dmul>
 800ca30:	4b76      	ldr	r3, [pc, #472]	@ (800cc0c <_dtoa_r+0x5cc>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fc32 	bl	800029c <__adddf3>
 800ca38:	4605      	mov	r5, r0
 800ca3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	f040 808d 	bne.w	800cb5e <_dtoa_r+0x51e>
 800ca44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca48:	4b71      	ldr	r3, [pc, #452]	@ (800cc10 <_dtoa_r+0x5d0>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f7f3 fc24 	bl	8000298 <__aeabi_dsub>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4633      	mov	r3, r6
 800ca5c:	f7f4 f864 	bl	8000b28 <__aeabi_dcmpgt>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	f040 828b 	bne.w	800cf7c <_dtoa_r+0x93c>
 800ca66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6a:	462a      	mov	r2, r5
 800ca6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca70:	f7f4 f83c 	bl	8000aec <__aeabi_dcmplt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f040 8128 	bne.w	800ccca <_dtoa_r+0x68a>
 800ca7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ca7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ca82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f2c0 815a 	blt.w	800cd3e <_dtoa_r+0x6fe>
 800ca8a:	2f0e      	cmp	r7, #14
 800ca8c:	f300 8157 	bgt.w	800cd3e <_dtoa_r+0x6fe>
 800ca90:	4b5a      	ldr	r3, [pc, #360]	@ (800cbfc <_dtoa_r+0x5bc>)
 800ca92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca96:	ed93 7b00 	vldr	d7, [r3]
 800ca9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	ed8d 7b00 	vstr	d7, [sp]
 800caa2:	da03      	bge.n	800caac <_dtoa_r+0x46c>
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f340 8101 	ble.w	800ccae <_dtoa_r+0x66e>
 800caac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cab0:	4656      	mov	r6, sl
 800cab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f3 fecf 	bl	800085c <__aeabi_ddiv>
 800cabe:	f7f4 f853 	bl	8000b68 <__aeabi_d2iz>
 800cac2:	4680      	mov	r8, r0
 800cac4:	f7f3 fd36 	bl	8000534 <__aeabi_i2d>
 800cac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cacc:	f7f3 fd9c 	bl	8000608 <__aeabi_dmul>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cadc:	f7f3 fbdc 	bl	8000298 <__aeabi_dsub>
 800cae0:	f806 4b01 	strb.w	r4, [r6], #1
 800cae4:	9d07      	ldr	r5, [sp, #28]
 800cae6:	eba6 040a 	sub.w	r4, r6, sl
 800caea:	42a5      	cmp	r5, r4
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	f040 8117 	bne.w	800cd22 <_dtoa_r+0x6e2>
 800caf4:	f7f3 fbd2 	bl	800029c <__adddf3>
 800caf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cafc:	4604      	mov	r4, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	f7f4 f812 	bl	8000b28 <__aeabi_dcmpgt>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	f040 80f9 	bne.w	800ccfc <_dtoa_r+0x6bc>
 800cb0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb16:	b118      	cbz	r0, 800cb20 <_dtoa_r+0x4e0>
 800cb18:	f018 0f01 	tst.w	r8, #1
 800cb1c:	f040 80ee 	bne.w	800ccfc <_dtoa_r+0x6bc>
 800cb20:	4649      	mov	r1, r9
 800cb22:	4658      	mov	r0, fp
 800cb24:	f000 fc90 	bl	800d448 <_Bfree>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	7033      	strb	r3, [r6, #0]
 800cb2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb2e:	3701      	adds	r7, #1
 800cb30:	601f      	str	r7, [r3, #0]
 800cb32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 831d 	beq.w	800d174 <_dtoa_r+0xb34>
 800cb3a:	601e      	str	r6, [r3, #0]
 800cb3c:	e31a      	b.n	800d174 <_dtoa_r+0xb34>
 800cb3e:	07e2      	lsls	r2, r4, #31
 800cb40:	d505      	bpl.n	800cb4e <_dtoa_r+0x50e>
 800cb42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb46:	f7f3 fd5f 	bl	8000608 <__aeabi_dmul>
 800cb4a:	3601      	adds	r6, #1
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	1064      	asrs	r4, r4, #1
 800cb50:	3508      	adds	r5, #8
 800cb52:	e73f      	b.n	800c9d4 <_dtoa_r+0x394>
 800cb54:	2602      	movs	r6, #2
 800cb56:	e742      	b.n	800c9de <_dtoa_r+0x39e>
 800cb58:	9c07      	ldr	r4, [sp, #28]
 800cb5a:	9704      	str	r7, [sp, #16]
 800cb5c:	e761      	b.n	800ca22 <_dtoa_r+0x3e2>
 800cb5e:	4b27      	ldr	r3, [pc, #156]	@ (800cbfc <_dtoa_r+0x5bc>)
 800cb60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb6a:	4454      	add	r4, sl
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	d053      	beq.n	800cc18 <_dtoa_r+0x5d8>
 800cb70:	4928      	ldr	r1, [pc, #160]	@ (800cc14 <_dtoa_r+0x5d4>)
 800cb72:	2000      	movs	r0, #0
 800cb74:	f7f3 fe72 	bl	800085c <__aeabi_ddiv>
 800cb78:	4633      	mov	r3, r6
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	f7f3 fb8c 	bl	8000298 <__aeabi_dsub>
 800cb80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb84:	4656      	mov	r6, sl
 800cb86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb8a:	f7f3 ffed 	bl	8000b68 <__aeabi_d2iz>
 800cb8e:	4605      	mov	r5, r0
 800cb90:	f7f3 fcd0 	bl	8000534 <__aeabi_i2d>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb9c:	f7f3 fb7c 	bl	8000298 <__aeabi_dsub>
 800cba0:	3530      	adds	r5, #48	@ 0x30
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbaa:	f806 5b01 	strb.w	r5, [r6], #1
 800cbae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbb2:	f7f3 ff9b 	bl	8000aec <__aeabi_dcmplt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d171      	bne.n	800cc9e <_dtoa_r+0x65e>
 800cbba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbbe:	4911      	ldr	r1, [pc, #68]	@ (800cc04 <_dtoa_r+0x5c4>)
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7f3 fb69 	bl	8000298 <__aeabi_dsub>
 800cbc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbca:	f7f3 ff8f 	bl	8000aec <__aeabi_dcmplt>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	f040 8095 	bne.w	800ccfe <_dtoa_r+0x6be>
 800cbd4:	42a6      	cmp	r6, r4
 800cbd6:	f43f af50 	beq.w	800ca7a <_dtoa_r+0x43a>
 800cbda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbde:	4b0a      	ldr	r3, [pc, #40]	@ (800cc08 <_dtoa_r+0x5c8>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f7f3 fd11 	bl	8000608 <__aeabi_dmul>
 800cbe6:	4b08      	ldr	r3, [pc, #32]	@ (800cc08 <_dtoa_r+0x5c8>)
 800cbe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbec:	2200      	movs	r2, #0
 800cbee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf2:	f7f3 fd09 	bl	8000608 <__aeabi_dmul>
 800cbf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbfa:	e7c4      	b.n	800cb86 <_dtoa_r+0x546>
 800cbfc:	0800e438 	.word	0x0800e438
 800cc00:	0800e410 	.word	0x0800e410
 800cc04:	3ff00000 	.word	0x3ff00000
 800cc08:	40240000 	.word	0x40240000
 800cc0c:	401c0000 	.word	0x401c0000
 800cc10:	40140000 	.word	0x40140000
 800cc14:	3fe00000 	.word	0x3fe00000
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f7f3 fcf4 	bl	8000608 <__aeabi_dmul>
 800cc20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc24:	9415      	str	r4, [sp, #84]	@ 0x54
 800cc26:	4656      	mov	r6, sl
 800cc28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc2c:	f7f3 ff9c 	bl	8000b68 <__aeabi_d2iz>
 800cc30:	4605      	mov	r5, r0
 800cc32:	f7f3 fc7f 	bl	8000534 <__aeabi_i2d>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc3e:	f7f3 fb2b 	bl	8000298 <__aeabi_dsub>
 800cc42:	3530      	adds	r5, #48	@ 0x30
 800cc44:	f806 5b01 	strb.w	r5, [r6], #1
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	42a6      	cmp	r6, r4
 800cc4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc52:	f04f 0200 	mov.w	r2, #0
 800cc56:	d124      	bne.n	800cca2 <_dtoa_r+0x662>
 800cc58:	4bac      	ldr	r3, [pc, #688]	@ (800cf0c <_dtoa_r+0x8cc>)
 800cc5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc5e:	f7f3 fb1d 	bl	800029c <__adddf3>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc6a:	f7f3 ff5d 	bl	8000b28 <__aeabi_dcmpgt>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d145      	bne.n	800ccfe <_dtoa_r+0x6be>
 800cc72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc76:	49a5      	ldr	r1, [pc, #660]	@ (800cf0c <_dtoa_r+0x8cc>)
 800cc78:	2000      	movs	r0, #0
 800cc7a:	f7f3 fb0d 	bl	8000298 <__aeabi_dsub>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc86:	f7f3 ff31 	bl	8000aec <__aeabi_dcmplt>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f43f aef5 	beq.w	800ca7a <_dtoa_r+0x43a>
 800cc90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cc92:	1e73      	subs	r3, r6, #1
 800cc94:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc9a:	2b30      	cmp	r3, #48	@ 0x30
 800cc9c:	d0f8      	beq.n	800cc90 <_dtoa_r+0x650>
 800cc9e:	9f04      	ldr	r7, [sp, #16]
 800cca0:	e73e      	b.n	800cb20 <_dtoa_r+0x4e0>
 800cca2:	4b9b      	ldr	r3, [pc, #620]	@ (800cf10 <_dtoa_r+0x8d0>)
 800cca4:	f7f3 fcb0 	bl	8000608 <__aeabi_dmul>
 800cca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccac:	e7bc      	b.n	800cc28 <_dtoa_r+0x5e8>
 800ccae:	d10c      	bne.n	800ccca <_dtoa_r+0x68a>
 800ccb0:	4b98      	ldr	r3, [pc, #608]	@ (800cf14 <_dtoa_r+0x8d4>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb8:	f7f3 fca6 	bl	8000608 <__aeabi_dmul>
 800ccbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccc0:	f7f3 ff28 	bl	8000b14 <__aeabi_dcmpge>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	f000 8157 	beq.w	800cf78 <_dtoa_r+0x938>
 800ccca:	2400      	movs	r4, #0
 800cccc:	4625      	mov	r5, r4
 800ccce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	9304      	str	r3, [sp, #16]
 800ccd4:	4656      	mov	r6, sl
 800ccd6:	2700      	movs	r7, #0
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4658      	mov	r0, fp
 800ccdc:	f000 fbb4 	bl	800d448 <_Bfree>
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	d0dc      	beq.n	800cc9e <_dtoa_r+0x65e>
 800cce4:	b12f      	cbz	r7, 800ccf2 <_dtoa_r+0x6b2>
 800cce6:	42af      	cmp	r7, r5
 800cce8:	d003      	beq.n	800ccf2 <_dtoa_r+0x6b2>
 800ccea:	4639      	mov	r1, r7
 800ccec:	4658      	mov	r0, fp
 800ccee:	f000 fbab 	bl	800d448 <_Bfree>
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4658      	mov	r0, fp
 800ccf6:	f000 fba7 	bl	800d448 <_Bfree>
 800ccfa:	e7d0      	b.n	800cc9e <_dtoa_r+0x65e>
 800ccfc:	9704      	str	r7, [sp, #16]
 800ccfe:	4633      	mov	r3, r6
 800cd00:	461e      	mov	r6, r3
 800cd02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd06:	2a39      	cmp	r2, #57	@ 0x39
 800cd08:	d107      	bne.n	800cd1a <_dtoa_r+0x6da>
 800cd0a:	459a      	cmp	sl, r3
 800cd0c:	d1f8      	bne.n	800cd00 <_dtoa_r+0x6c0>
 800cd0e:	9a04      	ldr	r2, [sp, #16]
 800cd10:	3201      	adds	r2, #1
 800cd12:	9204      	str	r2, [sp, #16]
 800cd14:	2230      	movs	r2, #48	@ 0x30
 800cd16:	f88a 2000 	strb.w	r2, [sl]
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	e7bd      	b.n	800cc9e <_dtoa_r+0x65e>
 800cd22:	4b7b      	ldr	r3, [pc, #492]	@ (800cf10 <_dtoa_r+0x8d0>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	f7f3 fc6f 	bl	8000608 <__aeabi_dmul>
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	f7f3 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f43f aebb 	beq.w	800cab2 <_dtoa_r+0x472>
 800cd3c:	e6f0      	b.n	800cb20 <_dtoa_r+0x4e0>
 800cd3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd40:	2a00      	cmp	r2, #0
 800cd42:	f000 80db 	beq.w	800cefc <_dtoa_r+0x8bc>
 800cd46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd48:	2a01      	cmp	r2, #1
 800cd4a:	f300 80bf 	bgt.w	800cecc <_dtoa_r+0x88c>
 800cd4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cd50:	2a00      	cmp	r2, #0
 800cd52:	f000 80b7 	beq.w	800cec4 <_dtoa_r+0x884>
 800cd56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd5c:	4646      	mov	r6, r8
 800cd5e:	9a08      	ldr	r2, [sp, #32]
 800cd60:	2101      	movs	r1, #1
 800cd62:	441a      	add	r2, r3
 800cd64:	4658      	mov	r0, fp
 800cd66:	4498      	add	r8, r3
 800cd68:	9208      	str	r2, [sp, #32]
 800cd6a:	f000 fc21 	bl	800d5b0 <__i2b>
 800cd6e:	4605      	mov	r5, r0
 800cd70:	b15e      	cbz	r6, 800cd8a <_dtoa_r+0x74a>
 800cd72:	9b08      	ldr	r3, [sp, #32]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd08      	ble.n	800cd8a <_dtoa_r+0x74a>
 800cd78:	42b3      	cmp	r3, r6
 800cd7a:	9a08      	ldr	r2, [sp, #32]
 800cd7c:	bfa8      	it	ge
 800cd7e:	4633      	movge	r3, r6
 800cd80:	eba8 0803 	sub.w	r8, r8, r3
 800cd84:	1af6      	subs	r6, r6, r3
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	9308      	str	r3, [sp, #32]
 800cd8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd8c:	b1f3      	cbz	r3, 800cdcc <_dtoa_r+0x78c>
 800cd8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 80b7 	beq.w	800cf04 <_dtoa_r+0x8c4>
 800cd96:	b18c      	cbz	r4, 800cdbc <_dtoa_r+0x77c>
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4622      	mov	r2, r4
 800cd9c:	4658      	mov	r0, fp
 800cd9e:	f000 fcc7 	bl	800d730 <__pow5mult>
 800cda2:	464a      	mov	r2, r9
 800cda4:	4601      	mov	r1, r0
 800cda6:	4605      	mov	r5, r0
 800cda8:	4658      	mov	r0, fp
 800cdaa:	f000 fc17 	bl	800d5dc <__multiply>
 800cdae:	4649      	mov	r1, r9
 800cdb0:	9004      	str	r0, [sp, #16]
 800cdb2:	4658      	mov	r0, fp
 800cdb4:	f000 fb48 	bl	800d448 <_Bfree>
 800cdb8:	9b04      	ldr	r3, [sp, #16]
 800cdba:	4699      	mov	r9, r3
 800cdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdbe:	1b1a      	subs	r2, r3, r4
 800cdc0:	d004      	beq.n	800cdcc <_dtoa_r+0x78c>
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	4658      	mov	r0, fp
 800cdc6:	f000 fcb3 	bl	800d730 <__pow5mult>
 800cdca:	4681      	mov	r9, r0
 800cdcc:	2101      	movs	r1, #1
 800cdce:	4658      	mov	r0, fp
 800cdd0:	f000 fbee 	bl	800d5b0 <__i2b>
 800cdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 81cf 	beq.w	800d17c <_dtoa_r+0xb3c>
 800cdde:	461a      	mov	r2, r3
 800cde0:	4601      	mov	r1, r0
 800cde2:	4658      	mov	r0, fp
 800cde4:	f000 fca4 	bl	800d730 <__pow5mult>
 800cde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	4604      	mov	r4, r0
 800cdee:	f300 8095 	bgt.w	800cf1c <_dtoa_r+0x8dc>
 800cdf2:	9b02      	ldr	r3, [sp, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 8087 	bne.w	800cf08 <_dtoa_r+0x8c8>
 800cdfa:	9b03      	ldr	r3, [sp, #12]
 800cdfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f040 8089 	bne.w	800cf18 <_dtoa_r+0x8d8>
 800ce06:	9b03      	ldr	r3, [sp, #12]
 800ce08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce0c:	0d1b      	lsrs	r3, r3, #20
 800ce0e:	051b      	lsls	r3, r3, #20
 800ce10:	b12b      	cbz	r3, 800ce1e <_dtoa_r+0x7de>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	3301      	adds	r3, #1
 800ce16:	9308      	str	r3, [sp, #32]
 800ce18:	f108 0801 	add.w	r8, r8, #1
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 81b0 	beq.w	800d188 <_dtoa_r+0xb48>
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce2e:	6918      	ldr	r0, [r3, #16]
 800ce30:	f000 fb72 	bl	800d518 <__hi0bits>
 800ce34:	f1c0 0020 	rsb	r0, r0, #32
 800ce38:	9b08      	ldr	r3, [sp, #32]
 800ce3a:	4418      	add	r0, r3
 800ce3c:	f010 001f 	ands.w	r0, r0, #31
 800ce40:	d077      	beq.n	800cf32 <_dtoa_r+0x8f2>
 800ce42:	f1c0 0320 	rsb	r3, r0, #32
 800ce46:	2b04      	cmp	r3, #4
 800ce48:	dd6b      	ble.n	800cf22 <_dtoa_r+0x8e2>
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	f1c0 001c 	rsb	r0, r0, #28
 800ce50:	4403      	add	r3, r0
 800ce52:	4480      	add	r8, r0
 800ce54:	4406      	add	r6, r0
 800ce56:	9308      	str	r3, [sp, #32]
 800ce58:	f1b8 0f00 	cmp.w	r8, #0
 800ce5c:	dd05      	ble.n	800ce6a <_dtoa_r+0x82a>
 800ce5e:	4649      	mov	r1, r9
 800ce60:	4642      	mov	r2, r8
 800ce62:	4658      	mov	r0, fp
 800ce64:	f000 fcbe 	bl	800d7e4 <__lshift>
 800ce68:	4681      	mov	r9, r0
 800ce6a:	9b08      	ldr	r3, [sp, #32]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dd05      	ble.n	800ce7c <_dtoa_r+0x83c>
 800ce70:	4621      	mov	r1, r4
 800ce72:	461a      	mov	r2, r3
 800ce74:	4658      	mov	r0, fp
 800ce76:	f000 fcb5 	bl	800d7e4 <__lshift>
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d059      	beq.n	800cf36 <_dtoa_r+0x8f6>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4648      	mov	r0, r9
 800ce86:	f000 fd19 	bl	800d8bc <__mcmp>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	da53      	bge.n	800cf36 <_dtoa_r+0x8f6>
 800ce8e:	1e7b      	subs	r3, r7, #1
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	4649      	mov	r1, r9
 800ce94:	2300      	movs	r3, #0
 800ce96:	220a      	movs	r2, #10
 800ce98:	4658      	mov	r0, fp
 800ce9a:	f000 faf7 	bl	800d48c <__multadd>
 800ce9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cea0:	4681      	mov	r9, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 8172 	beq.w	800d18c <_dtoa_r+0xb4c>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4629      	mov	r1, r5
 800ceac:	220a      	movs	r2, #10
 800ceae:	4658      	mov	r0, fp
 800ceb0:	f000 faec 	bl	800d48c <__multadd>
 800ceb4:	9b00      	ldr	r3, [sp, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	4605      	mov	r5, r0
 800ceba:	dc67      	bgt.n	800cf8c <_dtoa_r+0x94c>
 800cebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	dc41      	bgt.n	800cf46 <_dtoa_r+0x906>
 800cec2:	e063      	b.n	800cf8c <_dtoa_r+0x94c>
 800cec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ceca:	e746      	b.n	800cd5a <_dtoa_r+0x71a>
 800cecc:	9b07      	ldr	r3, [sp, #28]
 800cece:	1e5c      	subs	r4, r3, #1
 800ced0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced2:	42a3      	cmp	r3, r4
 800ced4:	bfbf      	itttt	lt
 800ced6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ced8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ceda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cedc:	1ae3      	sublt	r3, r4, r3
 800cede:	bfb4      	ite	lt
 800cee0:	18d2      	addlt	r2, r2, r3
 800cee2:	1b1c      	subge	r4, r3, r4
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	bfbc      	itt	lt
 800cee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ceea:	2400      	movlt	r4, #0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfb5      	itete	lt
 800cef0:	eba8 0603 	sublt.w	r6, r8, r3
 800cef4:	9b07      	ldrge	r3, [sp, #28]
 800cef6:	2300      	movlt	r3, #0
 800cef8:	4646      	movge	r6, r8
 800cefa:	e730      	b.n	800cd5e <_dtoa_r+0x71e>
 800cefc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cefe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf00:	4646      	mov	r6, r8
 800cf02:	e735      	b.n	800cd70 <_dtoa_r+0x730>
 800cf04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf06:	e75c      	b.n	800cdc2 <_dtoa_r+0x782>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e788      	b.n	800ce1e <_dtoa_r+0x7de>
 800cf0c:	3fe00000 	.word	0x3fe00000
 800cf10:	40240000 	.word	0x40240000
 800cf14:	40140000 	.word	0x40140000
 800cf18:	9b02      	ldr	r3, [sp, #8]
 800cf1a:	e780      	b.n	800ce1e <_dtoa_r+0x7de>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf20:	e782      	b.n	800ce28 <_dtoa_r+0x7e8>
 800cf22:	d099      	beq.n	800ce58 <_dtoa_r+0x818>
 800cf24:	9a08      	ldr	r2, [sp, #32]
 800cf26:	331c      	adds	r3, #28
 800cf28:	441a      	add	r2, r3
 800cf2a:	4498      	add	r8, r3
 800cf2c:	441e      	add	r6, r3
 800cf2e:	9208      	str	r2, [sp, #32]
 800cf30:	e792      	b.n	800ce58 <_dtoa_r+0x818>
 800cf32:	4603      	mov	r3, r0
 800cf34:	e7f6      	b.n	800cf24 <_dtoa_r+0x8e4>
 800cf36:	9b07      	ldr	r3, [sp, #28]
 800cf38:	9704      	str	r7, [sp, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	dc20      	bgt.n	800cf80 <_dtoa_r+0x940>
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	dd1e      	ble.n	800cf84 <_dtoa_r+0x944>
 800cf46:	9b00      	ldr	r3, [sp, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f aec0 	bne.w	800ccce <_dtoa_r+0x68e>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	2205      	movs	r2, #5
 800cf52:	4658      	mov	r0, fp
 800cf54:	f000 fa9a 	bl	800d48c <__multadd>
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	f000 fcad 	bl	800d8bc <__mcmp>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f77f aeb3 	ble.w	800ccce <_dtoa_r+0x68e>
 800cf68:	4656      	mov	r6, sl
 800cf6a:	2331      	movs	r3, #49	@ 0x31
 800cf6c:	f806 3b01 	strb.w	r3, [r6], #1
 800cf70:	9b04      	ldr	r3, [sp, #16]
 800cf72:	3301      	adds	r3, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	e6ae      	b.n	800ccd6 <_dtoa_r+0x696>
 800cf78:	9c07      	ldr	r4, [sp, #28]
 800cf7a:	9704      	str	r7, [sp, #16]
 800cf7c:	4625      	mov	r5, r4
 800cf7e:	e7f3      	b.n	800cf68 <_dtoa_r+0x928>
 800cf80:	9b07      	ldr	r3, [sp, #28]
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 8104 	beq.w	800d194 <_dtoa_r+0xb54>
 800cf8c:	2e00      	cmp	r6, #0
 800cf8e:	dd05      	ble.n	800cf9c <_dtoa_r+0x95c>
 800cf90:	4629      	mov	r1, r5
 800cf92:	4632      	mov	r2, r6
 800cf94:	4658      	mov	r0, fp
 800cf96:	f000 fc25 	bl	800d7e4 <__lshift>
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d05a      	beq.n	800d058 <_dtoa_r+0xa18>
 800cfa2:	6869      	ldr	r1, [r5, #4]
 800cfa4:	4658      	mov	r0, fp
 800cfa6:	f000 fa0f 	bl	800d3c8 <_Balloc>
 800cfaa:	4606      	mov	r6, r0
 800cfac:	b928      	cbnz	r0, 800cfba <_dtoa_r+0x97a>
 800cfae:	4b84      	ldr	r3, [pc, #528]	@ (800d1c0 <_dtoa_r+0xb80>)
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cfb6:	f7ff bb5a 	b.w	800c66e <_dtoa_r+0x2e>
 800cfba:	692a      	ldr	r2, [r5, #16]
 800cfbc:	3202      	adds	r2, #2
 800cfbe:	0092      	lsls	r2, r2, #2
 800cfc0:	f105 010c 	add.w	r1, r5, #12
 800cfc4:	300c      	adds	r0, #12
 800cfc6:	f7ff faa2 	bl	800c50e <memcpy>
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4658      	mov	r0, fp
 800cfd0:	f000 fc08 	bl	800d7e4 <__lshift>
 800cfd4:	f10a 0301 	add.w	r3, sl, #1
 800cfd8:	9307      	str	r3, [sp, #28]
 800cfda:	9b00      	ldr	r3, [sp, #0]
 800cfdc:	4453      	add	r3, sl
 800cfde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfe0:	9b02      	ldr	r3, [sp, #8]
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	462f      	mov	r7, r5
 800cfe8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfea:	4605      	mov	r5, r0
 800cfec:	9b07      	ldr	r3, [sp, #28]
 800cfee:	4621      	mov	r1, r4
 800cff0:	3b01      	subs	r3, #1
 800cff2:	4648      	mov	r0, r9
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	f7ff fa98 	bl	800c52a <quorem>
 800cffa:	4639      	mov	r1, r7
 800cffc:	9002      	str	r0, [sp, #8]
 800cffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d002:	4648      	mov	r0, r9
 800d004:	f000 fc5a 	bl	800d8bc <__mcmp>
 800d008:	462a      	mov	r2, r5
 800d00a:	9008      	str	r0, [sp, #32]
 800d00c:	4621      	mov	r1, r4
 800d00e:	4658      	mov	r0, fp
 800d010:	f000 fc70 	bl	800d8f4 <__mdiff>
 800d014:	68c2      	ldr	r2, [r0, #12]
 800d016:	4606      	mov	r6, r0
 800d018:	bb02      	cbnz	r2, 800d05c <_dtoa_r+0xa1c>
 800d01a:	4601      	mov	r1, r0
 800d01c:	4648      	mov	r0, r9
 800d01e:	f000 fc4d 	bl	800d8bc <__mcmp>
 800d022:	4602      	mov	r2, r0
 800d024:	4631      	mov	r1, r6
 800d026:	4658      	mov	r0, fp
 800d028:	920e      	str	r2, [sp, #56]	@ 0x38
 800d02a:	f000 fa0d 	bl	800d448 <_Bfree>
 800d02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d032:	9e07      	ldr	r6, [sp, #28]
 800d034:	ea43 0102 	orr.w	r1, r3, r2
 800d038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d03a:	4319      	orrs	r1, r3
 800d03c:	d110      	bne.n	800d060 <_dtoa_r+0xa20>
 800d03e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d042:	d029      	beq.n	800d098 <_dtoa_r+0xa58>
 800d044:	9b08      	ldr	r3, [sp, #32]
 800d046:	2b00      	cmp	r3, #0
 800d048:	dd02      	ble.n	800d050 <_dtoa_r+0xa10>
 800d04a:	9b02      	ldr	r3, [sp, #8]
 800d04c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d050:	9b00      	ldr	r3, [sp, #0]
 800d052:	f883 8000 	strb.w	r8, [r3]
 800d056:	e63f      	b.n	800ccd8 <_dtoa_r+0x698>
 800d058:	4628      	mov	r0, r5
 800d05a:	e7bb      	b.n	800cfd4 <_dtoa_r+0x994>
 800d05c:	2201      	movs	r2, #1
 800d05e:	e7e1      	b.n	800d024 <_dtoa_r+0x9e4>
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	2b00      	cmp	r3, #0
 800d064:	db04      	blt.n	800d070 <_dtoa_r+0xa30>
 800d066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d068:	430b      	orrs	r3, r1
 800d06a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d06c:	430b      	orrs	r3, r1
 800d06e:	d120      	bne.n	800d0b2 <_dtoa_r+0xa72>
 800d070:	2a00      	cmp	r2, #0
 800d072:	dded      	ble.n	800d050 <_dtoa_r+0xa10>
 800d074:	4649      	mov	r1, r9
 800d076:	2201      	movs	r2, #1
 800d078:	4658      	mov	r0, fp
 800d07a:	f000 fbb3 	bl	800d7e4 <__lshift>
 800d07e:	4621      	mov	r1, r4
 800d080:	4681      	mov	r9, r0
 800d082:	f000 fc1b 	bl	800d8bc <__mcmp>
 800d086:	2800      	cmp	r0, #0
 800d088:	dc03      	bgt.n	800d092 <_dtoa_r+0xa52>
 800d08a:	d1e1      	bne.n	800d050 <_dtoa_r+0xa10>
 800d08c:	f018 0f01 	tst.w	r8, #1
 800d090:	d0de      	beq.n	800d050 <_dtoa_r+0xa10>
 800d092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d096:	d1d8      	bne.n	800d04a <_dtoa_r+0xa0a>
 800d098:	9a00      	ldr	r2, [sp, #0]
 800d09a:	2339      	movs	r3, #57	@ 0x39
 800d09c:	7013      	strb	r3, [r2, #0]
 800d09e:	4633      	mov	r3, r6
 800d0a0:	461e      	mov	r6, r3
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0a8:	2a39      	cmp	r2, #57	@ 0x39
 800d0aa:	d052      	beq.n	800d152 <_dtoa_r+0xb12>
 800d0ac:	3201      	adds	r2, #1
 800d0ae:	701a      	strb	r2, [r3, #0]
 800d0b0:	e612      	b.n	800ccd8 <_dtoa_r+0x698>
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	dd07      	ble.n	800d0c6 <_dtoa_r+0xa86>
 800d0b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0ba:	d0ed      	beq.n	800d098 <_dtoa_r+0xa58>
 800d0bc:	9a00      	ldr	r2, [sp, #0]
 800d0be:	f108 0301 	add.w	r3, r8, #1
 800d0c2:	7013      	strb	r3, [r2, #0]
 800d0c4:	e608      	b.n	800ccd8 <_dtoa_r+0x698>
 800d0c6:	9b07      	ldr	r3, [sp, #28]
 800d0c8:	9a07      	ldr	r2, [sp, #28]
 800d0ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d028      	beq.n	800d126 <_dtoa_r+0xae6>
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	220a      	movs	r2, #10
 800d0da:	4658      	mov	r0, fp
 800d0dc:	f000 f9d6 	bl	800d48c <__multadd>
 800d0e0:	42af      	cmp	r7, r5
 800d0e2:	4681      	mov	r9, r0
 800d0e4:	f04f 0300 	mov.w	r3, #0
 800d0e8:	f04f 020a 	mov.w	r2, #10
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4658      	mov	r0, fp
 800d0f0:	d107      	bne.n	800d102 <_dtoa_r+0xac2>
 800d0f2:	f000 f9cb 	bl	800d48c <__multadd>
 800d0f6:	4607      	mov	r7, r0
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	9b07      	ldr	r3, [sp, #28]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	9307      	str	r3, [sp, #28]
 800d100:	e774      	b.n	800cfec <_dtoa_r+0x9ac>
 800d102:	f000 f9c3 	bl	800d48c <__multadd>
 800d106:	4629      	mov	r1, r5
 800d108:	4607      	mov	r7, r0
 800d10a:	2300      	movs	r3, #0
 800d10c:	220a      	movs	r2, #10
 800d10e:	4658      	mov	r0, fp
 800d110:	f000 f9bc 	bl	800d48c <__multadd>
 800d114:	4605      	mov	r5, r0
 800d116:	e7f0      	b.n	800d0fa <_dtoa_r+0xaba>
 800d118:	9b00      	ldr	r3, [sp, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bfcc      	ite	gt
 800d11e:	461e      	movgt	r6, r3
 800d120:	2601      	movle	r6, #1
 800d122:	4456      	add	r6, sl
 800d124:	2700      	movs	r7, #0
 800d126:	4649      	mov	r1, r9
 800d128:	2201      	movs	r2, #1
 800d12a:	4658      	mov	r0, fp
 800d12c:	f000 fb5a 	bl	800d7e4 <__lshift>
 800d130:	4621      	mov	r1, r4
 800d132:	4681      	mov	r9, r0
 800d134:	f000 fbc2 	bl	800d8bc <__mcmp>
 800d138:	2800      	cmp	r0, #0
 800d13a:	dcb0      	bgt.n	800d09e <_dtoa_r+0xa5e>
 800d13c:	d102      	bne.n	800d144 <_dtoa_r+0xb04>
 800d13e:	f018 0f01 	tst.w	r8, #1
 800d142:	d1ac      	bne.n	800d09e <_dtoa_r+0xa5e>
 800d144:	4633      	mov	r3, r6
 800d146:	461e      	mov	r6, r3
 800d148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d14c:	2a30      	cmp	r2, #48	@ 0x30
 800d14e:	d0fa      	beq.n	800d146 <_dtoa_r+0xb06>
 800d150:	e5c2      	b.n	800ccd8 <_dtoa_r+0x698>
 800d152:	459a      	cmp	sl, r3
 800d154:	d1a4      	bne.n	800d0a0 <_dtoa_r+0xa60>
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	3301      	adds	r3, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	2331      	movs	r3, #49	@ 0x31
 800d15e:	f88a 3000 	strb.w	r3, [sl]
 800d162:	e5b9      	b.n	800ccd8 <_dtoa_r+0x698>
 800d164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d1c4 <_dtoa_r+0xb84>
 800d16a:	b11b      	cbz	r3, 800d174 <_dtoa_r+0xb34>
 800d16c:	f10a 0308 	add.w	r3, sl, #8
 800d170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	4650      	mov	r0, sl
 800d176:	b019      	add	sp, #100	@ 0x64
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d17e:	2b01      	cmp	r3, #1
 800d180:	f77f ae37 	ble.w	800cdf2 <_dtoa_r+0x7b2>
 800d184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d186:	930a      	str	r3, [sp, #40]	@ 0x28
 800d188:	2001      	movs	r0, #1
 800d18a:	e655      	b.n	800ce38 <_dtoa_r+0x7f8>
 800d18c:	9b00      	ldr	r3, [sp, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f77f aed6 	ble.w	800cf40 <_dtoa_r+0x900>
 800d194:	4656      	mov	r6, sl
 800d196:	4621      	mov	r1, r4
 800d198:	4648      	mov	r0, r9
 800d19a:	f7ff f9c6 	bl	800c52a <quorem>
 800d19e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d1a2:	f806 8b01 	strb.w	r8, [r6], #1
 800d1a6:	9b00      	ldr	r3, [sp, #0]
 800d1a8:	eba6 020a 	sub.w	r2, r6, sl
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	ddb3      	ble.n	800d118 <_dtoa_r+0xad8>
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	220a      	movs	r2, #10
 800d1b6:	4658      	mov	r0, fp
 800d1b8:	f000 f968 	bl	800d48c <__multadd>
 800d1bc:	4681      	mov	r9, r0
 800d1be:	e7ea      	b.n	800d196 <_dtoa_r+0xb56>
 800d1c0:	0800e398 	.word	0x0800e398
 800d1c4:	0800e31c 	.word	0x0800e31c

0800d1c8 <_free_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	2900      	cmp	r1, #0
 800d1ce:	d041      	beq.n	800d254 <_free_r+0x8c>
 800d1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d4:	1f0c      	subs	r4, r1, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bfb8      	it	lt
 800d1da:	18e4      	addlt	r4, r4, r3
 800d1dc:	f000 f8e8 	bl	800d3b0 <__malloc_lock>
 800d1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d258 <_free_r+0x90>)
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	b933      	cbnz	r3, 800d1f4 <_free_r+0x2c>
 800d1e6:	6063      	str	r3, [r4, #4]
 800d1e8:	6014      	str	r4, [r2, #0]
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f0:	f000 b8e4 	b.w	800d3bc <__malloc_unlock>
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d908      	bls.n	800d20a <_free_r+0x42>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	1821      	adds	r1, r4, r0
 800d1fc:	428b      	cmp	r3, r1
 800d1fe:	bf01      	itttt	eq
 800d200:	6819      	ldreq	r1, [r3, #0]
 800d202:	685b      	ldreq	r3, [r3, #4]
 800d204:	1809      	addeq	r1, r1, r0
 800d206:	6021      	streq	r1, [r4, #0]
 800d208:	e7ed      	b.n	800d1e6 <_free_r+0x1e>
 800d20a:	461a      	mov	r2, r3
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	b10b      	cbz	r3, 800d214 <_free_r+0x4c>
 800d210:	42a3      	cmp	r3, r4
 800d212:	d9fa      	bls.n	800d20a <_free_r+0x42>
 800d214:	6811      	ldr	r1, [r2, #0]
 800d216:	1850      	adds	r0, r2, r1
 800d218:	42a0      	cmp	r0, r4
 800d21a:	d10b      	bne.n	800d234 <_free_r+0x6c>
 800d21c:	6820      	ldr	r0, [r4, #0]
 800d21e:	4401      	add	r1, r0
 800d220:	1850      	adds	r0, r2, r1
 800d222:	4283      	cmp	r3, r0
 800d224:	6011      	str	r1, [r2, #0]
 800d226:	d1e0      	bne.n	800d1ea <_free_r+0x22>
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	6053      	str	r3, [r2, #4]
 800d22e:	4408      	add	r0, r1
 800d230:	6010      	str	r0, [r2, #0]
 800d232:	e7da      	b.n	800d1ea <_free_r+0x22>
 800d234:	d902      	bls.n	800d23c <_free_r+0x74>
 800d236:	230c      	movs	r3, #12
 800d238:	602b      	str	r3, [r5, #0]
 800d23a:	e7d6      	b.n	800d1ea <_free_r+0x22>
 800d23c:	6820      	ldr	r0, [r4, #0]
 800d23e:	1821      	adds	r1, r4, r0
 800d240:	428b      	cmp	r3, r1
 800d242:	bf04      	itt	eq
 800d244:	6819      	ldreq	r1, [r3, #0]
 800d246:	685b      	ldreq	r3, [r3, #4]
 800d248:	6063      	str	r3, [r4, #4]
 800d24a:	bf04      	itt	eq
 800d24c:	1809      	addeq	r1, r1, r0
 800d24e:	6021      	streq	r1, [r4, #0]
 800d250:	6054      	str	r4, [r2, #4]
 800d252:	e7ca      	b.n	800d1ea <_free_r+0x22>
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	200021b0 	.word	0x200021b0

0800d25c <malloc>:
 800d25c:	4b02      	ldr	r3, [pc, #8]	@ (800d268 <malloc+0xc>)
 800d25e:	4601      	mov	r1, r0
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	f000 b825 	b.w	800d2b0 <_malloc_r>
 800d266:	bf00      	nop
 800d268:	20000108 	.word	0x20000108

0800d26c <sbrk_aligned>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4e0f      	ldr	r6, [pc, #60]	@ (800d2ac <sbrk_aligned+0x40>)
 800d270:	460c      	mov	r4, r1
 800d272:	6831      	ldr	r1, [r6, #0]
 800d274:	4605      	mov	r5, r0
 800d276:	b911      	cbnz	r1, 800d27e <sbrk_aligned+0x12>
 800d278:	f000 fcd4 	bl	800dc24 <_sbrk_r>
 800d27c:	6030      	str	r0, [r6, #0]
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 fccf 	bl	800dc24 <_sbrk_r>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d103      	bne.n	800d292 <sbrk_aligned+0x26>
 800d28a:	f04f 34ff 	mov.w	r4, #4294967295
 800d28e:	4620      	mov	r0, r4
 800d290:	bd70      	pop	{r4, r5, r6, pc}
 800d292:	1cc4      	adds	r4, r0, #3
 800d294:	f024 0403 	bic.w	r4, r4, #3
 800d298:	42a0      	cmp	r0, r4
 800d29a:	d0f8      	beq.n	800d28e <sbrk_aligned+0x22>
 800d29c:	1a21      	subs	r1, r4, r0
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f000 fcc0 	bl	800dc24 <_sbrk_r>
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d1f2      	bne.n	800d28e <sbrk_aligned+0x22>
 800d2a8:	e7ef      	b.n	800d28a <sbrk_aligned+0x1e>
 800d2aa:	bf00      	nop
 800d2ac:	200021ac 	.word	0x200021ac

0800d2b0 <_malloc_r>:
 800d2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	1ccd      	adds	r5, r1, #3
 800d2b6:	f025 0503 	bic.w	r5, r5, #3
 800d2ba:	3508      	adds	r5, #8
 800d2bc:	2d0c      	cmp	r5, #12
 800d2be:	bf38      	it	cc
 800d2c0:	250c      	movcc	r5, #12
 800d2c2:	2d00      	cmp	r5, #0
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	db01      	blt.n	800d2cc <_malloc_r+0x1c>
 800d2c8:	42a9      	cmp	r1, r5
 800d2ca:	d904      	bls.n	800d2d6 <_malloc_r+0x26>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	6033      	str	r3, [r6, #0]
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3ac <_malloc_r+0xfc>
 800d2da:	f000 f869 	bl	800d3b0 <__malloc_lock>
 800d2de:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	bb44      	cbnz	r4, 800d338 <_malloc_r+0x88>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f7ff ffbf 	bl	800d26c <sbrk_aligned>
 800d2ee:	1c43      	adds	r3, r0, #1
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	d158      	bne.n	800d3a6 <_malloc_r+0xf6>
 800d2f4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2f8:	4627      	mov	r7, r4
 800d2fa:	2f00      	cmp	r7, #0
 800d2fc:	d143      	bne.n	800d386 <_malloc_r+0xd6>
 800d2fe:	2c00      	cmp	r4, #0
 800d300:	d04b      	beq.n	800d39a <_malloc_r+0xea>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	4639      	mov	r1, r7
 800d306:	4630      	mov	r0, r6
 800d308:	eb04 0903 	add.w	r9, r4, r3
 800d30c:	f000 fc8a 	bl	800dc24 <_sbrk_r>
 800d310:	4581      	cmp	r9, r0
 800d312:	d142      	bne.n	800d39a <_malloc_r+0xea>
 800d314:	6821      	ldr	r1, [r4, #0]
 800d316:	1a6d      	subs	r5, r5, r1
 800d318:	4629      	mov	r1, r5
 800d31a:	4630      	mov	r0, r6
 800d31c:	f7ff ffa6 	bl	800d26c <sbrk_aligned>
 800d320:	3001      	adds	r0, #1
 800d322:	d03a      	beq.n	800d39a <_malloc_r+0xea>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	442b      	add	r3, r5
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	f8d8 3000 	ldr.w	r3, [r8]
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	bb62      	cbnz	r2, 800d38c <_malloc_r+0xdc>
 800d332:	f8c8 7000 	str.w	r7, [r8]
 800d336:	e00f      	b.n	800d358 <_malloc_r+0xa8>
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	1b52      	subs	r2, r2, r5
 800d33c:	d420      	bmi.n	800d380 <_malloc_r+0xd0>
 800d33e:	2a0b      	cmp	r2, #11
 800d340:	d917      	bls.n	800d372 <_malloc_r+0xc2>
 800d342:	1961      	adds	r1, r4, r5
 800d344:	42a3      	cmp	r3, r4
 800d346:	6025      	str	r5, [r4, #0]
 800d348:	bf18      	it	ne
 800d34a:	6059      	strne	r1, [r3, #4]
 800d34c:	6863      	ldr	r3, [r4, #4]
 800d34e:	bf08      	it	eq
 800d350:	f8c8 1000 	streq.w	r1, [r8]
 800d354:	5162      	str	r2, [r4, r5]
 800d356:	604b      	str	r3, [r1, #4]
 800d358:	4630      	mov	r0, r6
 800d35a:	f000 f82f 	bl	800d3bc <__malloc_unlock>
 800d35e:	f104 000b 	add.w	r0, r4, #11
 800d362:	1d23      	adds	r3, r4, #4
 800d364:	f020 0007 	bic.w	r0, r0, #7
 800d368:	1ac2      	subs	r2, r0, r3
 800d36a:	bf1c      	itt	ne
 800d36c:	1a1b      	subne	r3, r3, r0
 800d36e:	50a3      	strne	r3, [r4, r2]
 800d370:	e7af      	b.n	800d2d2 <_malloc_r+0x22>
 800d372:	6862      	ldr	r2, [r4, #4]
 800d374:	42a3      	cmp	r3, r4
 800d376:	bf0c      	ite	eq
 800d378:	f8c8 2000 	streq.w	r2, [r8]
 800d37c:	605a      	strne	r2, [r3, #4]
 800d37e:	e7eb      	b.n	800d358 <_malloc_r+0xa8>
 800d380:	4623      	mov	r3, r4
 800d382:	6864      	ldr	r4, [r4, #4]
 800d384:	e7ae      	b.n	800d2e4 <_malloc_r+0x34>
 800d386:	463c      	mov	r4, r7
 800d388:	687f      	ldr	r7, [r7, #4]
 800d38a:	e7b6      	b.n	800d2fa <_malloc_r+0x4a>
 800d38c:	461a      	mov	r2, r3
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	42a3      	cmp	r3, r4
 800d392:	d1fb      	bne.n	800d38c <_malloc_r+0xdc>
 800d394:	2300      	movs	r3, #0
 800d396:	6053      	str	r3, [r2, #4]
 800d398:	e7de      	b.n	800d358 <_malloc_r+0xa8>
 800d39a:	230c      	movs	r3, #12
 800d39c:	6033      	str	r3, [r6, #0]
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f000 f80c 	bl	800d3bc <__malloc_unlock>
 800d3a4:	e794      	b.n	800d2d0 <_malloc_r+0x20>
 800d3a6:	6005      	str	r5, [r0, #0]
 800d3a8:	e7d6      	b.n	800d358 <_malloc_r+0xa8>
 800d3aa:	bf00      	nop
 800d3ac:	200021b0 	.word	0x200021b0

0800d3b0 <__malloc_lock>:
 800d3b0:	4801      	ldr	r0, [pc, #4]	@ (800d3b8 <__malloc_lock+0x8>)
 800d3b2:	f7ff b8aa 	b.w	800c50a <__retarget_lock_acquire_recursive>
 800d3b6:	bf00      	nop
 800d3b8:	200021a8 	.word	0x200021a8

0800d3bc <__malloc_unlock>:
 800d3bc:	4801      	ldr	r0, [pc, #4]	@ (800d3c4 <__malloc_unlock+0x8>)
 800d3be:	f7ff b8a5 	b.w	800c50c <__retarget_lock_release_recursive>
 800d3c2:	bf00      	nop
 800d3c4:	200021a8 	.word	0x200021a8

0800d3c8 <_Balloc>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	69c6      	ldr	r6, [r0, #28]
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460d      	mov	r5, r1
 800d3d0:	b976      	cbnz	r6, 800d3f0 <_Balloc+0x28>
 800d3d2:	2010      	movs	r0, #16
 800d3d4:	f7ff ff42 	bl	800d25c <malloc>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	61e0      	str	r0, [r4, #28]
 800d3dc:	b920      	cbnz	r0, 800d3e8 <_Balloc+0x20>
 800d3de:	4b18      	ldr	r3, [pc, #96]	@ (800d440 <_Balloc+0x78>)
 800d3e0:	4818      	ldr	r0, [pc, #96]	@ (800d444 <_Balloc+0x7c>)
 800d3e2:	216b      	movs	r1, #107	@ 0x6b
 800d3e4:	f000 fc2e 	bl	800dc44 <__assert_func>
 800d3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3ec:	6006      	str	r6, [r0, #0]
 800d3ee:	60c6      	str	r6, [r0, #12]
 800d3f0:	69e6      	ldr	r6, [r4, #28]
 800d3f2:	68f3      	ldr	r3, [r6, #12]
 800d3f4:	b183      	cbz	r3, 800d418 <_Balloc+0x50>
 800d3f6:	69e3      	ldr	r3, [r4, #28]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3fe:	b9b8      	cbnz	r0, 800d430 <_Balloc+0x68>
 800d400:	2101      	movs	r1, #1
 800d402:	fa01 f605 	lsl.w	r6, r1, r5
 800d406:	1d72      	adds	r2, r6, #5
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 fc38 	bl	800dc80 <_calloc_r>
 800d410:	b160      	cbz	r0, 800d42c <_Balloc+0x64>
 800d412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d416:	e00e      	b.n	800d436 <_Balloc+0x6e>
 800d418:	2221      	movs	r2, #33	@ 0x21
 800d41a:	2104      	movs	r1, #4
 800d41c:	4620      	mov	r0, r4
 800d41e:	f000 fc2f 	bl	800dc80 <_calloc_r>
 800d422:	69e3      	ldr	r3, [r4, #28]
 800d424:	60f0      	str	r0, [r6, #12]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e4      	bne.n	800d3f6 <_Balloc+0x2e>
 800d42c:	2000      	movs	r0, #0
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	6802      	ldr	r2, [r0, #0]
 800d432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d436:	2300      	movs	r3, #0
 800d438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d43c:	e7f7      	b.n	800d42e <_Balloc+0x66>
 800d43e:	bf00      	nop
 800d440:	0800e329 	.word	0x0800e329
 800d444:	0800e3a9 	.word	0x0800e3a9

0800d448 <_Bfree>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	69c6      	ldr	r6, [r0, #28]
 800d44c:	4605      	mov	r5, r0
 800d44e:	460c      	mov	r4, r1
 800d450:	b976      	cbnz	r6, 800d470 <_Bfree+0x28>
 800d452:	2010      	movs	r0, #16
 800d454:	f7ff ff02 	bl	800d25c <malloc>
 800d458:	4602      	mov	r2, r0
 800d45a:	61e8      	str	r0, [r5, #28]
 800d45c:	b920      	cbnz	r0, 800d468 <_Bfree+0x20>
 800d45e:	4b09      	ldr	r3, [pc, #36]	@ (800d484 <_Bfree+0x3c>)
 800d460:	4809      	ldr	r0, [pc, #36]	@ (800d488 <_Bfree+0x40>)
 800d462:	218f      	movs	r1, #143	@ 0x8f
 800d464:	f000 fbee 	bl	800dc44 <__assert_func>
 800d468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d46c:	6006      	str	r6, [r0, #0]
 800d46e:	60c6      	str	r6, [r0, #12]
 800d470:	b13c      	cbz	r4, 800d482 <_Bfree+0x3a>
 800d472:	69eb      	ldr	r3, [r5, #28]
 800d474:	6862      	ldr	r2, [r4, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d47c:	6021      	str	r1, [r4, #0]
 800d47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	0800e329 	.word	0x0800e329
 800d488:	0800e3a9 	.word	0x0800e3a9

0800d48c <__multadd>:
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	690d      	ldr	r5, [r1, #16]
 800d492:	4607      	mov	r7, r0
 800d494:	460c      	mov	r4, r1
 800d496:	461e      	mov	r6, r3
 800d498:	f101 0c14 	add.w	ip, r1, #20
 800d49c:	2000      	movs	r0, #0
 800d49e:	f8dc 3000 	ldr.w	r3, [ip]
 800d4a2:	b299      	uxth	r1, r3
 800d4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d4a8:	0c1e      	lsrs	r6, r3, #16
 800d4aa:	0c0b      	lsrs	r3, r1, #16
 800d4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d4b0:	b289      	uxth	r1, r1
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4b8:	4285      	cmp	r5, r0
 800d4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4c2:	dcec      	bgt.n	800d49e <__multadd+0x12>
 800d4c4:	b30e      	cbz	r6, 800d50a <__multadd+0x7e>
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dc19      	bgt.n	800d500 <__multadd+0x74>
 800d4cc:	6861      	ldr	r1, [r4, #4]
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	3101      	adds	r1, #1
 800d4d2:	f7ff ff79 	bl	800d3c8 <_Balloc>
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	b928      	cbnz	r0, 800d4e6 <__multadd+0x5a>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d510 <__multadd+0x84>)
 800d4de:	480d      	ldr	r0, [pc, #52]	@ (800d514 <__multadd+0x88>)
 800d4e0:	21ba      	movs	r1, #186	@ 0xba
 800d4e2:	f000 fbaf 	bl	800dc44 <__assert_func>
 800d4e6:	6922      	ldr	r2, [r4, #16]
 800d4e8:	3202      	adds	r2, #2
 800d4ea:	f104 010c 	add.w	r1, r4, #12
 800d4ee:	0092      	lsls	r2, r2, #2
 800d4f0:	300c      	adds	r0, #12
 800d4f2:	f7ff f80c 	bl	800c50e <memcpy>
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ffa5 	bl	800d448 <_Bfree>
 800d4fe:	4644      	mov	r4, r8
 800d500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d504:	3501      	adds	r5, #1
 800d506:	615e      	str	r6, [r3, #20]
 800d508:	6125      	str	r5, [r4, #16]
 800d50a:	4620      	mov	r0, r4
 800d50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d510:	0800e398 	.word	0x0800e398
 800d514:	0800e3a9 	.word	0x0800e3a9

0800d518 <__hi0bits>:
 800d518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d51c:	4603      	mov	r3, r0
 800d51e:	bf36      	itet	cc
 800d520:	0403      	lslcc	r3, r0, #16
 800d522:	2000      	movcs	r0, #0
 800d524:	2010      	movcc	r0, #16
 800d526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d52a:	bf3c      	itt	cc
 800d52c:	021b      	lslcc	r3, r3, #8
 800d52e:	3008      	addcc	r0, #8
 800d530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d534:	bf3c      	itt	cc
 800d536:	011b      	lslcc	r3, r3, #4
 800d538:	3004      	addcc	r0, #4
 800d53a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d53e:	bf3c      	itt	cc
 800d540:	009b      	lslcc	r3, r3, #2
 800d542:	3002      	addcc	r0, #2
 800d544:	2b00      	cmp	r3, #0
 800d546:	db05      	blt.n	800d554 <__hi0bits+0x3c>
 800d548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d54c:	f100 0001 	add.w	r0, r0, #1
 800d550:	bf08      	it	eq
 800d552:	2020      	moveq	r0, #32
 800d554:	4770      	bx	lr

0800d556 <__lo0bits>:
 800d556:	6803      	ldr	r3, [r0, #0]
 800d558:	4602      	mov	r2, r0
 800d55a:	f013 0007 	ands.w	r0, r3, #7
 800d55e:	d00b      	beq.n	800d578 <__lo0bits+0x22>
 800d560:	07d9      	lsls	r1, r3, #31
 800d562:	d421      	bmi.n	800d5a8 <__lo0bits+0x52>
 800d564:	0798      	lsls	r0, r3, #30
 800d566:	bf49      	itett	mi
 800d568:	085b      	lsrmi	r3, r3, #1
 800d56a:	089b      	lsrpl	r3, r3, #2
 800d56c:	2001      	movmi	r0, #1
 800d56e:	6013      	strmi	r3, [r2, #0]
 800d570:	bf5c      	itt	pl
 800d572:	6013      	strpl	r3, [r2, #0]
 800d574:	2002      	movpl	r0, #2
 800d576:	4770      	bx	lr
 800d578:	b299      	uxth	r1, r3
 800d57a:	b909      	cbnz	r1, 800d580 <__lo0bits+0x2a>
 800d57c:	0c1b      	lsrs	r3, r3, #16
 800d57e:	2010      	movs	r0, #16
 800d580:	b2d9      	uxtb	r1, r3
 800d582:	b909      	cbnz	r1, 800d588 <__lo0bits+0x32>
 800d584:	3008      	adds	r0, #8
 800d586:	0a1b      	lsrs	r3, r3, #8
 800d588:	0719      	lsls	r1, r3, #28
 800d58a:	bf04      	itt	eq
 800d58c:	091b      	lsreq	r3, r3, #4
 800d58e:	3004      	addeq	r0, #4
 800d590:	0799      	lsls	r1, r3, #30
 800d592:	bf04      	itt	eq
 800d594:	089b      	lsreq	r3, r3, #2
 800d596:	3002      	addeq	r0, #2
 800d598:	07d9      	lsls	r1, r3, #31
 800d59a:	d403      	bmi.n	800d5a4 <__lo0bits+0x4e>
 800d59c:	085b      	lsrs	r3, r3, #1
 800d59e:	f100 0001 	add.w	r0, r0, #1
 800d5a2:	d003      	beq.n	800d5ac <__lo0bits+0x56>
 800d5a4:	6013      	str	r3, [r2, #0]
 800d5a6:	4770      	bx	lr
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	4770      	bx	lr
 800d5ac:	2020      	movs	r0, #32
 800d5ae:	4770      	bx	lr

0800d5b0 <__i2b>:
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	f7ff ff07 	bl	800d3c8 <_Balloc>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	b928      	cbnz	r0, 800d5ca <__i2b+0x1a>
 800d5be:	4b05      	ldr	r3, [pc, #20]	@ (800d5d4 <__i2b+0x24>)
 800d5c0:	4805      	ldr	r0, [pc, #20]	@ (800d5d8 <__i2b+0x28>)
 800d5c2:	f240 1145 	movw	r1, #325	@ 0x145
 800d5c6:	f000 fb3d 	bl	800dc44 <__assert_func>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	6144      	str	r4, [r0, #20]
 800d5ce:	6103      	str	r3, [r0, #16]
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	bf00      	nop
 800d5d4:	0800e398 	.word	0x0800e398
 800d5d8:	0800e3a9 	.word	0x0800e3a9

0800d5dc <__multiply>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	4614      	mov	r4, r2
 800d5e2:	690a      	ldr	r2, [r1, #16]
 800d5e4:	6923      	ldr	r3, [r4, #16]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	bfa8      	it	ge
 800d5ea:	4623      	movge	r3, r4
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	bfa4      	itt	ge
 800d5f0:	460c      	movge	r4, r1
 800d5f2:	461f      	movge	r7, r3
 800d5f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d5f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d5fc:	68a3      	ldr	r3, [r4, #8]
 800d5fe:	6861      	ldr	r1, [r4, #4]
 800d600:	eb0a 0609 	add.w	r6, sl, r9
 800d604:	42b3      	cmp	r3, r6
 800d606:	b085      	sub	sp, #20
 800d608:	bfb8      	it	lt
 800d60a:	3101      	addlt	r1, #1
 800d60c:	f7ff fedc 	bl	800d3c8 <_Balloc>
 800d610:	b930      	cbnz	r0, 800d620 <__multiply+0x44>
 800d612:	4602      	mov	r2, r0
 800d614:	4b44      	ldr	r3, [pc, #272]	@ (800d728 <__multiply+0x14c>)
 800d616:	4845      	ldr	r0, [pc, #276]	@ (800d72c <__multiply+0x150>)
 800d618:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d61c:	f000 fb12 	bl	800dc44 <__assert_func>
 800d620:	f100 0514 	add.w	r5, r0, #20
 800d624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d628:	462b      	mov	r3, r5
 800d62a:	2200      	movs	r2, #0
 800d62c:	4543      	cmp	r3, r8
 800d62e:	d321      	bcc.n	800d674 <__multiply+0x98>
 800d630:	f107 0114 	add.w	r1, r7, #20
 800d634:	f104 0214 	add.w	r2, r4, #20
 800d638:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d63c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d640:	9302      	str	r3, [sp, #8]
 800d642:	1b13      	subs	r3, r2, r4
 800d644:	3b15      	subs	r3, #21
 800d646:	f023 0303 	bic.w	r3, r3, #3
 800d64a:	3304      	adds	r3, #4
 800d64c:	f104 0715 	add.w	r7, r4, #21
 800d650:	42ba      	cmp	r2, r7
 800d652:	bf38      	it	cc
 800d654:	2304      	movcc	r3, #4
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	9b02      	ldr	r3, [sp, #8]
 800d65a:	9103      	str	r1, [sp, #12]
 800d65c:	428b      	cmp	r3, r1
 800d65e:	d80c      	bhi.n	800d67a <__multiply+0x9e>
 800d660:	2e00      	cmp	r6, #0
 800d662:	dd03      	ble.n	800d66c <__multiply+0x90>
 800d664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d05b      	beq.n	800d724 <__multiply+0x148>
 800d66c:	6106      	str	r6, [r0, #16]
 800d66e:	b005      	add	sp, #20
 800d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d674:	f843 2b04 	str.w	r2, [r3], #4
 800d678:	e7d8      	b.n	800d62c <__multiply+0x50>
 800d67a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d67e:	f1ba 0f00 	cmp.w	sl, #0
 800d682:	d024      	beq.n	800d6ce <__multiply+0xf2>
 800d684:	f104 0e14 	add.w	lr, r4, #20
 800d688:	46a9      	mov	r9, r5
 800d68a:	f04f 0c00 	mov.w	ip, #0
 800d68e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d692:	f8d9 3000 	ldr.w	r3, [r9]
 800d696:	fa1f fb87 	uxth.w	fp, r7
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6a4:	f8d9 7000 	ldr.w	r7, [r9]
 800d6a8:	4463      	add	r3, ip
 800d6aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800d6b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6bc:	4572      	cmp	r2, lr
 800d6be:	f849 3b04 	str.w	r3, [r9], #4
 800d6c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6c6:	d8e2      	bhi.n	800d68e <__multiply+0xb2>
 800d6c8:	9b01      	ldr	r3, [sp, #4]
 800d6ca:	f845 c003 	str.w	ip, [r5, r3]
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d6d4:	3104      	adds	r1, #4
 800d6d6:	f1b9 0f00 	cmp.w	r9, #0
 800d6da:	d021      	beq.n	800d720 <__multiply+0x144>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	f104 0c14 	add.w	ip, r4, #20
 800d6e2:	46ae      	mov	lr, r5
 800d6e4:	f04f 0a00 	mov.w	sl, #0
 800d6e8:	f8bc b000 	ldrh.w	fp, [ip]
 800d6ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d6f0:	fb09 770b 	mla	r7, r9, fp, r7
 800d6f4:	4457      	add	r7, sl
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6fc:	f84e 3b04 	str.w	r3, [lr], #4
 800d700:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d708:	f8be 3000 	ldrh.w	r3, [lr]
 800d70c:	fb09 330a 	mla	r3, r9, sl, r3
 800d710:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d714:	4562      	cmp	r2, ip
 800d716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d71a:	d8e5      	bhi.n	800d6e8 <__multiply+0x10c>
 800d71c:	9f01      	ldr	r7, [sp, #4]
 800d71e:	51eb      	str	r3, [r5, r7]
 800d720:	3504      	adds	r5, #4
 800d722:	e799      	b.n	800d658 <__multiply+0x7c>
 800d724:	3e01      	subs	r6, #1
 800d726:	e79b      	b.n	800d660 <__multiply+0x84>
 800d728:	0800e398 	.word	0x0800e398
 800d72c:	0800e3a9 	.word	0x0800e3a9

0800d730 <__pow5mult>:
 800d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d734:	4615      	mov	r5, r2
 800d736:	f012 0203 	ands.w	r2, r2, #3
 800d73a:	4607      	mov	r7, r0
 800d73c:	460e      	mov	r6, r1
 800d73e:	d007      	beq.n	800d750 <__pow5mult+0x20>
 800d740:	4c25      	ldr	r4, [pc, #148]	@ (800d7d8 <__pow5mult+0xa8>)
 800d742:	3a01      	subs	r2, #1
 800d744:	2300      	movs	r3, #0
 800d746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d74a:	f7ff fe9f 	bl	800d48c <__multadd>
 800d74e:	4606      	mov	r6, r0
 800d750:	10ad      	asrs	r5, r5, #2
 800d752:	d03d      	beq.n	800d7d0 <__pow5mult+0xa0>
 800d754:	69fc      	ldr	r4, [r7, #28]
 800d756:	b97c      	cbnz	r4, 800d778 <__pow5mult+0x48>
 800d758:	2010      	movs	r0, #16
 800d75a:	f7ff fd7f 	bl	800d25c <malloc>
 800d75e:	4602      	mov	r2, r0
 800d760:	61f8      	str	r0, [r7, #28]
 800d762:	b928      	cbnz	r0, 800d770 <__pow5mult+0x40>
 800d764:	4b1d      	ldr	r3, [pc, #116]	@ (800d7dc <__pow5mult+0xac>)
 800d766:	481e      	ldr	r0, [pc, #120]	@ (800d7e0 <__pow5mult+0xb0>)
 800d768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d76c:	f000 fa6a 	bl	800dc44 <__assert_func>
 800d770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d774:	6004      	str	r4, [r0, #0]
 800d776:	60c4      	str	r4, [r0, #12]
 800d778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d77c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d780:	b94c      	cbnz	r4, 800d796 <__pow5mult+0x66>
 800d782:	f240 2171 	movw	r1, #625	@ 0x271
 800d786:	4638      	mov	r0, r7
 800d788:	f7ff ff12 	bl	800d5b0 <__i2b>
 800d78c:	2300      	movs	r3, #0
 800d78e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d792:	4604      	mov	r4, r0
 800d794:	6003      	str	r3, [r0, #0]
 800d796:	f04f 0900 	mov.w	r9, #0
 800d79a:	07eb      	lsls	r3, r5, #31
 800d79c:	d50a      	bpl.n	800d7b4 <__pow5mult+0x84>
 800d79e:	4631      	mov	r1, r6
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ff1a 	bl	800d5dc <__multiply>
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4680      	mov	r8, r0
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	f7ff fe4b 	bl	800d448 <_Bfree>
 800d7b2:	4646      	mov	r6, r8
 800d7b4:	106d      	asrs	r5, r5, #1
 800d7b6:	d00b      	beq.n	800d7d0 <__pow5mult+0xa0>
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	b938      	cbnz	r0, 800d7cc <__pow5mult+0x9c>
 800d7bc:	4622      	mov	r2, r4
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ff0b 	bl	800d5dc <__multiply>
 800d7c6:	6020      	str	r0, [r4, #0]
 800d7c8:	f8c0 9000 	str.w	r9, [r0]
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	e7e4      	b.n	800d79a <__pow5mult+0x6a>
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d6:	bf00      	nop
 800d7d8:	0800e404 	.word	0x0800e404
 800d7dc:	0800e329 	.word	0x0800e329
 800d7e0:	0800e3a9 	.word	0x0800e3a9

0800d7e4 <__lshift>:
 800d7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	6849      	ldr	r1, [r1, #4]
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7f2:	68a3      	ldr	r3, [r4, #8]
 800d7f4:	4607      	mov	r7, r0
 800d7f6:	4691      	mov	r9, r2
 800d7f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7fc:	f108 0601 	add.w	r6, r8, #1
 800d800:	42b3      	cmp	r3, r6
 800d802:	db0b      	blt.n	800d81c <__lshift+0x38>
 800d804:	4638      	mov	r0, r7
 800d806:	f7ff fddf 	bl	800d3c8 <_Balloc>
 800d80a:	4605      	mov	r5, r0
 800d80c:	b948      	cbnz	r0, 800d822 <__lshift+0x3e>
 800d80e:	4602      	mov	r2, r0
 800d810:	4b28      	ldr	r3, [pc, #160]	@ (800d8b4 <__lshift+0xd0>)
 800d812:	4829      	ldr	r0, [pc, #164]	@ (800d8b8 <__lshift+0xd4>)
 800d814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d818:	f000 fa14 	bl	800dc44 <__assert_func>
 800d81c:	3101      	adds	r1, #1
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	e7ee      	b.n	800d800 <__lshift+0x1c>
 800d822:	2300      	movs	r3, #0
 800d824:	f100 0114 	add.w	r1, r0, #20
 800d828:	f100 0210 	add.w	r2, r0, #16
 800d82c:	4618      	mov	r0, r3
 800d82e:	4553      	cmp	r3, sl
 800d830:	db33      	blt.n	800d89a <__lshift+0xb6>
 800d832:	6920      	ldr	r0, [r4, #16]
 800d834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d838:	f104 0314 	add.w	r3, r4, #20
 800d83c:	f019 091f 	ands.w	r9, r9, #31
 800d840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d848:	d02b      	beq.n	800d8a2 <__lshift+0xbe>
 800d84a:	f1c9 0e20 	rsb	lr, r9, #32
 800d84e:	468a      	mov	sl, r1
 800d850:	2200      	movs	r2, #0
 800d852:	6818      	ldr	r0, [r3, #0]
 800d854:	fa00 f009 	lsl.w	r0, r0, r9
 800d858:	4310      	orrs	r0, r2
 800d85a:	f84a 0b04 	str.w	r0, [sl], #4
 800d85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d862:	459c      	cmp	ip, r3
 800d864:	fa22 f20e 	lsr.w	r2, r2, lr
 800d868:	d8f3      	bhi.n	800d852 <__lshift+0x6e>
 800d86a:	ebac 0304 	sub.w	r3, ip, r4
 800d86e:	3b15      	subs	r3, #21
 800d870:	f023 0303 	bic.w	r3, r3, #3
 800d874:	3304      	adds	r3, #4
 800d876:	f104 0015 	add.w	r0, r4, #21
 800d87a:	4584      	cmp	ip, r0
 800d87c:	bf38      	it	cc
 800d87e:	2304      	movcc	r3, #4
 800d880:	50ca      	str	r2, [r1, r3]
 800d882:	b10a      	cbz	r2, 800d888 <__lshift+0xa4>
 800d884:	f108 0602 	add.w	r6, r8, #2
 800d888:	3e01      	subs	r6, #1
 800d88a:	4638      	mov	r0, r7
 800d88c:	612e      	str	r6, [r5, #16]
 800d88e:	4621      	mov	r1, r4
 800d890:	f7ff fdda 	bl	800d448 <_Bfree>
 800d894:	4628      	mov	r0, r5
 800d896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d89a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d89e:	3301      	adds	r3, #1
 800d8a0:	e7c5      	b.n	800d82e <__lshift+0x4a>
 800d8a2:	3904      	subs	r1, #4
 800d8a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8ac:	459c      	cmp	ip, r3
 800d8ae:	d8f9      	bhi.n	800d8a4 <__lshift+0xc0>
 800d8b0:	e7ea      	b.n	800d888 <__lshift+0xa4>
 800d8b2:	bf00      	nop
 800d8b4:	0800e398 	.word	0x0800e398
 800d8b8:	0800e3a9 	.word	0x0800e3a9

0800d8bc <__mcmp>:
 800d8bc:	690a      	ldr	r2, [r1, #16]
 800d8be:	4603      	mov	r3, r0
 800d8c0:	6900      	ldr	r0, [r0, #16]
 800d8c2:	1a80      	subs	r0, r0, r2
 800d8c4:	b530      	push	{r4, r5, lr}
 800d8c6:	d10e      	bne.n	800d8e6 <__mcmp+0x2a>
 800d8c8:	3314      	adds	r3, #20
 800d8ca:	3114      	adds	r1, #20
 800d8cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8dc:	4295      	cmp	r5, r2
 800d8de:	d003      	beq.n	800d8e8 <__mcmp+0x2c>
 800d8e0:	d205      	bcs.n	800d8ee <__mcmp+0x32>
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e6:	bd30      	pop	{r4, r5, pc}
 800d8e8:	42a3      	cmp	r3, r4
 800d8ea:	d3f3      	bcc.n	800d8d4 <__mcmp+0x18>
 800d8ec:	e7fb      	b.n	800d8e6 <__mcmp+0x2a>
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	e7f9      	b.n	800d8e6 <__mcmp+0x2a>
	...

0800d8f4 <__mdiff>:
 800d8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	4689      	mov	r9, r1
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4648      	mov	r0, r9
 800d900:	4614      	mov	r4, r2
 800d902:	f7ff ffdb 	bl	800d8bc <__mcmp>
 800d906:	1e05      	subs	r5, r0, #0
 800d908:	d112      	bne.n	800d930 <__mdiff+0x3c>
 800d90a:	4629      	mov	r1, r5
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff fd5b 	bl	800d3c8 <_Balloc>
 800d912:	4602      	mov	r2, r0
 800d914:	b928      	cbnz	r0, 800d922 <__mdiff+0x2e>
 800d916:	4b3f      	ldr	r3, [pc, #252]	@ (800da14 <__mdiff+0x120>)
 800d918:	f240 2137 	movw	r1, #567	@ 0x237
 800d91c:	483e      	ldr	r0, [pc, #248]	@ (800da18 <__mdiff+0x124>)
 800d91e:	f000 f991 	bl	800dc44 <__assert_func>
 800d922:	2301      	movs	r3, #1
 800d924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d928:	4610      	mov	r0, r2
 800d92a:	b003      	add	sp, #12
 800d92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d930:	bfbc      	itt	lt
 800d932:	464b      	movlt	r3, r9
 800d934:	46a1      	movlt	r9, r4
 800d936:	4630      	mov	r0, r6
 800d938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d93c:	bfba      	itte	lt
 800d93e:	461c      	movlt	r4, r3
 800d940:	2501      	movlt	r5, #1
 800d942:	2500      	movge	r5, #0
 800d944:	f7ff fd40 	bl	800d3c8 <_Balloc>
 800d948:	4602      	mov	r2, r0
 800d94a:	b918      	cbnz	r0, 800d954 <__mdiff+0x60>
 800d94c:	4b31      	ldr	r3, [pc, #196]	@ (800da14 <__mdiff+0x120>)
 800d94e:	f240 2145 	movw	r1, #581	@ 0x245
 800d952:	e7e3      	b.n	800d91c <__mdiff+0x28>
 800d954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d958:	6926      	ldr	r6, [r4, #16]
 800d95a:	60c5      	str	r5, [r0, #12]
 800d95c:	f109 0310 	add.w	r3, r9, #16
 800d960:	f109 0514 	add.w	r5, r9, #20
 800d964:	f104 0e14 	add.w	lr, r4, #20
 800d968:	f100 0b14 	add.w	fp, r0, #20
 800d96c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	46d9      	mov	r9, fp
 800d978:	f04f 0c00 	mov.w	ip, #0
 800d97c:	9b01      	ldr	r3, [sp, #4]
 800d97e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d982:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	fa1f f38a 	uxth.w	r3, sl
 800d98c:	4619      	mov	r1, r3
 800d98e:	b283      	uxth	r3, r0
 800d990:	1acb      	subs	r3, r1, r3
 800d992:	0c00      	lsrs	r0, r0, #16
 800d994:	4463      	add	r3, ip
 800d996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d99a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9a4:	4576      	cmp	r6, lr
 800d9a6:	f849 3b04 	str.w	r3, [r9], #4
 800d9aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9ae:	d8e5      	bhi.n	800d97c <__mdiff+0x88>
 800d9b0:	1b33      	subs	r3, r6, r4
 800d9b2:	3b15      	subs	r3, #21
 800d9b4:	f023 0303 	bic.w	r3, r3, #3
 800d9b8:	3415      	adds	r4, #21
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	42a6      	cmp	r6, r4
 800d9be:	bf38      	it	cc
 800d9c0:	2304      	movcc	r3, #4
 800d9c2:	441d      	add	r5, r3
 800d9c4:	445b      	add	r3, fp
 800d9c6:	461e      	mov	r6, r3
 800d9c8:	462c      	mov	r4, r5
 800d9ca:	4544      	cmp	r4, r8
 800d9cc:	d30e      	bcc.n	800d9ec <__mdiff+0xf8>
 800d9ce:	f108 0103 	add.w	r1, r8, #3
 800d9d2:	1b49      	subs	r1, r1, r5
 800d9d4:	f021 0103 	bic.w	r1, r1, #3
 800d9d8:	3d03      	subs	r5, #3
 800d9da:	45a8      	cmp	r8, r5
 800d9dc:	bf38      	it	cc
 800d9de:	2100      	movcc	r1, #0
 800d9e0:	440b      	add	r3, r1
 800d9e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9e6:	b191      	cbz	r1, 800da0e <__mdiff+0x11a>
 800d9e8:	6117      	str	r7, [r2, #16]
 800d9ea:	e79d      	b.n	800d928 <__mdiff+0x34>
 800d9ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800d9f0:	46e6      	mov	lr, ip
 800d9f2:	0c08      	lsrs	r0, r1, #16
 800d9f4:	fa1c fc81 	uxtah	ip, ip, r1
 800d9f8:	4471      	add	r1, lr
 800d9fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d9fe:	b289      	uxth	r1, r1
 800da00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da04:	f846 1b04 	str.w	r1, [r6], #4
 800da08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da0c:	e7dd      	b.n	800d9ca <__mdiff+0xd6>
 800da0e:	3f01      	subs	r7, #1
 800da10:	e7e7      	b.n	800d9e2 <__mdiff+0xee>
 800da12:	bf00      	nop
 800da14:	0800e398 	.word	0x0800e398
 800da18:	0800e3a9 	.word	0x0800e3a9

0800da1c <__d2b>:
 800da1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da20:	460f      	mov	r7, r1
 800da22:	2101      	movs	r1, #1
 800da24:	ec59 8b10 	vmov	r8, r9, d0
 800da28:	4616      	mov	r6, r2
 800da2a:	f7ff fccd 	bl	800d3c8 <_Balloc>
 800da2e:	4604      	mov	r4, r0
 800da30:	b930      	cbnz	r0, 800da40 <__d2b+0x24>
 800da32:	4602      	mov	r2, r0
 800da34:	4b23      	ldr	r3, [pc, #140]	@ (800dac4 <__d2b+0xa8>)
 800da36:	4824      	ldr	r0, [pc, #144]	@ (800dac8 <__d2b+0xac>)
 800da38:	f240 310f 	movw	r1, #783	@ 0x30f
 800da3c:	f000 f902 	bl	800dc44 <__assert_func>
 800da40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da48:	b10d      	cbz	r5, 800da4e <__d2b+0x32>
 800da4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	f1b8 0300 	subs.w	r3, r8, #0
 800da54:	d023      	beq.n	800da9e <__d2b+0x82>
 800da56:	4668      	mov	r0, sp
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	f7ff fd7c 	bl	800d556 <__lo0bits>
 800da5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da62:	b1d0      	cbz	r0, 800da9a <__d2b+0x7e>
 800da64:	f1c0 0320 	rsb	r3, r0, #32
 800da68:	fa02 f303 	lsl.w	r3, r2, r3
 800da6c:	430b      	orrs	r3, r1
 800da6e:	40c2      	lsrs	r2, r0
 800da70:	6163      	str	r3, [r4, #20]
 800da72:	9201      	str	r2, [sp, #4]
 800da74:	9b01      	ldr	r3, [sp, #4]
 800da76:	61a3      	str	r3, [r4, #24]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	bf0c      	ite	eq
 800da7c:	2201      	moveq	r2, #1
 800da7e:	2202      	movne	r2, #2
 800da80:	6122      	str	r2, [r4, #16]
 800da82:	b1a5      	cbz	r5, 800daae <__d2b+0x92>
 800da84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da88:	4405      	add	r5, r0
 800da8a:	603d      	str	r5, [r7, #0]
 800da8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da90:	6030      	str	r0, [r6, #0]
 800da92:	4620      	mov	r0, r4
 800da94:	b003      	add	sp, #12
 800da96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da9a:	6161      	str	r1, [r4, #20]
 800da9c:	e7ea      	b.n	800da74 <__d2b+0x58>
 800da9e:	a801      	add	r0, sp, #4
 800daa0:	f7ff fd59 	bl	800d556 <__lo0bits>
 800daa4:	9b01      	ldr	r3, [sp, #4]
 800daa6:	6163      	str	r3, [r4, #20]
 800daa8:	3020      	adds	r0, #32
 800daaa:	2201      	movs	r2, #1
 800daac:	e7e8      	b.n	800da80 <__d2b+0x64>
 800daae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dab2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dab6:	6038      	str	r0, [r7, #0]
 800dab8:	6918      	ldr	r0, [r3, #16]
 800daba:	f7ff fd2d 	bl	800d518 <__hi0bits>
 800dabe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dac2:	e7e5      	b.n	800da90 <__d2b+0x74>
 800dac4:	0800e398 	.word	0x0800e398
 800dac8:	0800e3a9 	.word	0x0800e3a9

0800dacc <__sflush_r>:
 800dacc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad4:	0716      	lsls	r6, r2, #28
 800dad6:	4605      	mov	r5, r0
 800dad8:	460c      	mov	r4, r1
 800dada:	d454      	bmi.n	800db86 <__sflush_r+0xba>
 800dadc:	684b      	ldr	r3, [r1, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	dc02      	bgt.n	800dae8 <__sflush_r+0x1c>
 800dae2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	dd48      	ble.n	800db7a <__sflush_r+0xae>
 800dae8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daea:	2e00      	cmp	r6, #0
 800daec:	d045      	beq.n	800db7a <__sflush_r+0xae>
 800daee:	2300      	movs	r3, #0
 800daf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800daf4:	682f      	ldr	r7, [r5, #0]
 800daf6:	6a21      	ldr	r1, [r4, #32]
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	d030      	beq.n	800db5e <__sflush_r+0x92>
 800dafc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	0759      	lsls	r1, r3, #29
 800db02:	d505      	bpl.n	800db10 <__sflush_r+0x44>
 800db04:	6863      	ldr	r3, [r4, #4]
 800db06:	1ad2      	subs	r2, r2, r3
 800db08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db0a:	b10b      	cbz	r3, 800db10 <__sflush_r+0x44>
 800db0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db0e:	1ad2      	subs	r2, r2, r3
 800db10:	2300      	movs	r3, #0
 800db12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db14:	6a21      	ldr	r1, [r4, #32]
 800db16:	4628      	mov	r0, r5
 800db18:	47b0      	blx	r6
 800db1a:	1c43      	adds	r3, r0, #1
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	d106      	bne.n	800db2e <__sflush_r+0x62>
 800db20:	6829      	ldr	r1, [r5, #0]
 800db22:	291d      	cmp	r1, #29
 800db24:	d82b      	bhi.n	800db7e <__sflush_r+0xb2>
 800db26:	4a2a      	ldr	r2, [pc, #168]	@ (800dbd0 <__sflush_r+0x104>)
 800db28:	410a      	asrs	r2, r1
 800db2a:	07d6      	lsls	r6, r2, #31
 800db2c:	d427      	bmi.n	800db7e <__sflush_r+0xb2>
 800db2e:	2200      	movs	r2, #0
 800db30:	6062      	str	r2, [r4, #4]
 800db32:	04d9      	lsls	r1, r3, #19
 800db34:	6922      	ldr	r2, [r4, #16]
 800db36:	6022      	str	r2, [r4, #0]
 800db38:	d504      	bpl.n	800db44 <__sflush_r+0x78>
 800db3a:	1c42      	adds	r2, r0, #1
 800db3c:	d101      	bne.n	800db42 <__sflush_r+0x76>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	b903      	cbnz	r3, 800db44 <__sflush_r+0x78>
 800db42:	6560      	str	r0, [r4, #84]	@ 0x54
 800db44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db46:	602f      	str	r7, [r5, #0]
 800db48:	b1b9      	cbz	r1, 800db7a <__sflush_r+0xae>
 800db4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db4e:	4299      	cmp	r1, r3
 800db50:	d002      	beq.n	800db58 <__sflush_r+0x8c>
 800db52:	4628      	mov	r0, r5
 800db54:	f7ff fb38 	bl	800d1c8 <_free_r>
 800db58:	2300      	movs	r3, #0
 800db5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800db5c:	e00d      	b.n	800db7a <__sflush_r+0xae>
 800db5e:	2301      	movs	r3, #1
 800db60:	4628      	mov	r0, r5
 800db62:	47b0      	blx	r6
 800db64:	4602      	mov	r2, r0
 800db66:	1c50      	adds	r0, r2, #1
 800db68:	d1c9      	bne.n	800dafe <__sflush_r+0x32>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d0c6      	beq.n	800dafe <__sflush_r+0x32>
 800db70:	2b1d      	cmp	r3, #29
 800db72:	d001      	beq.n	800db78 <__sflush_r+0xac>
 800db74:	2b16      	cmp	r3, #22
 800db76:	d11e      	bne.n	800dbb6 <__sflush_r+0xea>
 800db78:	602f      	str	r7, [r5, #0]
 800db7a:	2000      	movs	r0, #0
 800db7c:	e022      	b.n	800dbc4 <__sflush_r+0xf8>
 800db7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db82:	b21b      	sxth	r3, r3
 800db84:	e01b      	b.n	800dbbe <__sflush_r+0xf2>
 800db86:	690f      	ldr	r7, [r1, #16]
 800db88:	2f00      	cmp	r7, #0
 800db8a:	d0f6      	beq.n	800db7a <__sflush_r+0xae>
 800db8c:	0793      	lsls	r3, r2, #30
 800db8e:	680e      	ldr	r6, [r1, #0]
 800db90:	bf08      	it	eq
 800db92:	694b      	ldreq	r3, [r1, #20]
 800db94:	600f      	str	r7, [r1, #0]
 800db96:	bf18      	it	ne
 800db98:	2300      	movne	r3, #0
 800db9a:	eba6 0807 	sub.w	r8, r6, r7
 800db9e:	608b      	str	r3, [r1, #8]
 800dba0:	f1b8 0f00 	cmp.w	r8, #0
 800dba4:	dde9      	ble.n	800db7a <__sflush_r+0xae>
 800dba6:	6a21      	ldr	r1, [r4, #32]
 800dba8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbaa:	4643      	mov	r3, r8
 800dbac:	463a      	mov	r2, r7
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b0      	blx	r6
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	dc08      	bgt.n	800dbc8 <__sflush_r+0xfc>
 800dbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbbe:	81a3      	strh	r3, [r4, #12]
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	4407      	add	r7, r0
 800dbca:	eba8 0800 	sub.w	r8, r8, r0
 800dbce:	e7e7      	b.n	800dba0 <__sflush_r+0xd4>
 800dbd0:	dfbffffe 	.word	0xdfbffffe

0800dbd4 <_fflush_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	690b      	ldr	r3, [r1, #16]
 800dbd8:	4605      	mov	r5, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	b913      	cbnz	r3, 800dbe4 <_fflush_r+0x10>
 800dbde:	2500      	movs	r5, #0
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}
 800dbe4:	b118      	cbz	r0, 800dbee <_fflush_r+0x1a>
 800dbe6:	6a03      	ldr	r3, [r0, #32]
 800dbe8:	b90b      	cbnz	r3, 800dbee <_fflush_r+0x1a>
 800dbea:	f7fe fb97 	bl	800c31c <__sinit>
 800dbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0f3      	beq.n	800dbde <_fflush_r+0xa>
 800dbf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbf8:	07d0      	lsls	r0, r2, #31
 800dbfa:	d404      	bmi.n	800dc06 <_fflush_r+0x32>
 800dbfc:	0599      	lsls	r1, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_fflush_r+0x32>
 800dc00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc02:	f7fe fc82 	bl	800c50a <__retarget_lock_acquire_recursive>
 800dc06:	4628      	mov	r0, r5
 800dc08:	4621      	mov	r1, r4
 800dc0a:	f7ff ff5f 	bl	800dacc <__sflush_r>
 800dc0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc10:	07da      	lsls	r2, r3, #31
 800dc12:	4605      	mov	r5, r0
 800dc14:	d4e4      	bmi.n	800dbe0 <_fflush_r+0xc>
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	059b      	lsls	r3, r3, #22
 800dc1a:	d4e1      	bmi.n	800dbe0 <_fflush_r+0xc>
 800dc1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc1e:	f7fe fc75 	bl	800c50c <__retarget_lock_release_recursive>
 800dc22:	e7dd      	b.n	800dbe0 <_fflush_r+0xc>

0800dc24 <_sbrk_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d06      	ldr	r5, [pc, #24]	@ (800dc40 <_sbrk_r+0x1c>)
 800dc28:	2300      	movs	r3, #0
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	4608      	mov	r0, r1
 800dc2e:	602b      	str	r3, [r5, #0]
 800dc30:	f7f4 f8ea 	bl	8001e08 <_sbrk>
 800dc34:	1c43      	adds	r3, r0, #1
 800dc36:	d102      	bne.n	800dc3e <_sbrk_r+0x1a>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	b103      	cbz	r3, 800dc3e <_sbrk_r+0x1a>
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	bd38      	pop	{r3, r4, r5, pc}
 800dc40:	200021a4 	.word	0x200021a4

0800dc44 <__assert_func>:
 800dc44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc46:	4614      	mov	r4, r2
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4b09      	ldr	r3, [pc, #36]	@ (800dc70 <__assert_func+0x2c>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4605      	mov	r5, r0
 800dc50:	68d8      	ldr	r0, [r3, #12]
 800dc52:	b954      	cbnz	r4, 800dc6a <__assert_func+0x26>
 800dc54:	4b07      	ldr	r3, [pc, #28]	@ (800dc74 <__assert_func+0x30>)
 800dc56:	461c      	mov	r4, r3
 800dc58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc5c:	9100      	str	r1, [sp, #0]
 800dc5e:	462b      	mov	r3, r5
 800dc60:	4905      	ldr	r1, [pc, #20]	@ (800dc78 <__assert_func+0x34>)
 800dc62:	f000 f841 	bl	800dce8 <fiprintf>
 800dc66:	f000 f851 	bl	800dd0c <abort>
 800dc6a:	4b04      	ldr	r3, [pc, #16]	@ (800dc7c <__assert_func+0x38>)
 800dc6c:	e7f4      	b.n	800dc58 <__assert_func+0x14>
 800dc6e:	bf00      	nop
 800dc70:	20000108 	.word	0x20000108
 800dc74:	0800e545 	.word	0x0800e545
 800dc78:	0800e517 	.word	0x0800e517
 800dc7c:	0800e50a 	.word	0x0800e50a

0800dc80 <_calloc_r>:
 800dc80:	b570      	push	{r4, r5, r6, lr}
 800dc82:	fba1 5402 	umull	r5, r4, r1, r2
 800dc86:	b93c      	cbnz	r4, 800dc98 <_calloc_r+0x18>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7ff fb11 	bl	800d2b0 <_malloc_r>
 800dc8e:	4606      	mov	r6, r0
 800dc90:	b928      	cbnz	r0, 800dc9e <_calloc_r+0x1e>
 800dc92:	2600      	movs	r6, #0
 800dc94:	4630      	mov	r0, r6
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	220c      	movs	r2, #12
 800dc9a:	6002      	str	r2, [r0, #0]
 800dc9c:	e7f9      	b.n	800dc92 <_calloc_r+0x12>
 800dc9e:	462a      	mov	r2, r5
 800dca0:	4621      	mov	r1, r4
 800dca2:	f7fe fbb4 	bl	800c40e <memset>
 800dca6:	e7f5      	b.n	800dc94 <_calloc_r+0x14>

0800dca8 <__ascii_mbtowc>:
 800dca8:	b082      	sub	sp, #8
 800dcaa:	b901      	cbnz	r1, 800dcae <__ascii_mbtowc+0x6>
 800dcac:	a901      	add	r1, sp, #4
 800dcae:	b142      	cbz	r2, 800dcc2 <__ascii_mbtowc+0x1a>
 800dcb0:	b14b      	cbz	r3, 800dcc6 <__ascii_mbtowc+0x1e>
 800dcb2:	7813      	ldrb	r3, [r2, #0]
 800dcb4:	600b      	str	r3, [r1, #0]
 800dcb6:	7812      	ldrb	r2, [r2, #0]
 800dcb8:	1e10      	subs	r0, r2, #0
 800dcba:	bf18      	it	ne
 800dcbc:	2001      	movne	r0, #1
 800dcbe:	b002      	add	sp, #8
 800dcc0:	4770      	bx	lr
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	e7fb      	b.n	800dcbe <__ascii_mbtowc+0x16>
 800dcc6:	f06f 0001 	mvn.w	r0, #1
 800dcca:	e7f8      	b.n	800dcbe <__ascii_mbtowc+0x16>

0800dccc <__ascii_wctomb>:
 800dccc:	4603      	mov	r3, r0
 800dcce:	4608      	mov	r0, r1
 800dcd0:	b141      	cbz	r1, 800dce4 <__ascii_wctomb+0x18>
 800dcd2:	2aff      	cmp	r2, #255	@ 0xff
 800dcd4:	d904      	bls.n	800dce0 <__ascii_wctomb+0x14>
 800dcd6:	228a      	movs	r2, #138	@ 0x8a
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295
 800dcde:	4770      	bx	lr
 800dce0:	700a      	strb	r2, [r1, #0]
 800dce2:	2001      	movs	r0, #1
 800dce4:	4770      	bx	lr
	...

0800dce8 <fiprintf>:
 800dce8:	b40e      	push	{r1, r2, r3}
 800dcea:	b503      	push	{r0, r1, lr}
 800dcec:	4601      	mov	r1, r0
 800dcee:	ab03      	add	r3, sp, #12
 800dcf0:	4805      	ldr	r0, [pc, #20]	@ (800dd08 <fiprintf+0x20>)
 800dcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf6:	6800      	ldr	r0, [r0, #0]
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	f000 f837 	bl	800dd6c <_vfiprintf_r>
 800dcfe:	b002      	add	sp, #8
 800dd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd04:	b003      	add	sp, #12
 800dd06:	4770      	bx	lr
 800dd08:	20000108 	.word	0x20000108

0800dd0c <abort>:
 800dd0c:	b508      	push	{r3, lr}
 800dd0e:	2006      	movs	r0, #6
 800dd10:	f000 fa00 	bl	800e114 <raise>
 800dd14:	2001      	movs	r0, #1
 800dd16:	f7f3 ffff 	bl	8001d18 <_exit>

0800dd1a <__sfputc_r>:
 800dd1a:	6893      	ldr	r3, [r2, #8]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	b410      	push	{r4}
 800dd22:	6093      	str	r3, [r2, #8]
 800dd24:	da08      	bge.n	800dd38 <__sfputc_r+0x1e>
 800dd26:	6994      	ldr	r4, [r2, #24]
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	db01      	blt.n	800dd30 <__sfputc_r+0x16>
 800dd2c:	290a      	cmp	r1, #10
 800dd2e:	d103      	bne.n	800dd38 <__sfputc_r+0x1e>
 800dd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd34:	f000 b932 	b.w	800df9c <__swbuf_r>
 800dd38:	6813      	ldr	r3, [r2, #0]
 800dd3a:	1c58      	adds	r0, r3, #1
 800dd3c:	6010      	str	r0, [r2, #0]
 800dd3e:	7019      	strb	r1, [r3, #0]
 800dd40:	4608      	mov	r0, r1
 800dd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <__sfputs_r>:
 800dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460f      	mov	r7, r1
 800dd4e:	4614      	mov	r4, r2
 800dd50:	18d5      	adds	r5, r2, r3
 800dd52:	42ac      	cmp	r4, r5
 800dd54:	d101      	bne.n	800dd5a <__sfputs_r+0x12>
 800dd56:	2000      	movs	r0, #0
 800dd58:	e007      	b.n	800dd6a <__sfputs_r+0x22>
 800dd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5e:	463a      	mov	r2, r7
 800dd60:	4630      	mov	r0, r6
 800dd62:	f7ff ffda 	bl	800dd1a <__sfputc_r>
 800dd66:	1c43      	adds	r3, r0, #1
 800dd68:	d1f3      	bne.n	800dd52 <__sfputs_r+0xa>
 800dd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd6c <_vfiprintf_r>:
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	460d      	mov	r5, r1
 800dd72:	b09d      	sub	sp, #116	@ 0x74
 800dd74:	4614      	mov	r4, r2
 800dd76:	4698      	mov	r8, r3
 800dd78:	4606      	mov	r6, r0
 800dd7a:	b118      	cbz	r0, 800dd84 <_vfiprintf_r+0x18>
 800dd7c:	6a03      	ldr	r3, [r0, #32]
 800dd7e:	b90b      	cbnz	r3, 800dd84 <_vfiprintf_r+0x18>
 800dd80:	f7fe facc 	bl	800c31c <__sinit>
 800dd84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd86:	07d9      	lsls	r1, r3, #31
 800dd88:	d405      	bmi.n	800dd96 <_vfiprintf_r+0x2a>
 800dd8a:	89ab      	ldrh	r3, [r5, #12]
 800dd8c:	059a      	lsls	r2, r3, #22
 800dd8e:	d402      	bmi.n	800dd96 <_vfiprintf_r+0x2a>
 800dd90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd92:	f7fe fbba 	bl	800c50a <__retarget_lock_acquire_recursive>
 800dd96:	89ab      	ldrh	r3, [r5, #12]
 800dd98:	071b      	lsls	r3, r3, #28
 800dd9a:	d501      	bpl.n	800dda0 <_vfiprintf_r+0x34>
 800dd9c:	692b      	ldr	r3, [r5, #16]
 800dd9e:	b99b      	cbnz	r3, 800ddc8 <_vfiprintf_r+0x5c>
 800dda0:	4629      	mov	r1, r5
 800dda2:	4630      	mov	r0, r6
 800dda4:	f000 f938 	bl	800e018 <__swsetup_r>
 800dda8:	b170      	cbz	r0, 800ddc8 <_vfiprintf_r+0x5c>
 800ddaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddac:	07dc      	lsls	r4, r3, #31
 800ddae:	d504      	bpl.n	800ddba <_vfiprintf_r+0x4e>
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	b01d      	add	sp, #116	@ 0x74
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	0598      	lsls	r0, r3, #22
 800ddbe:	d4f7      	bmi.n	800ddb0 <_vfiprintf_r+0x44>
 800ddc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddc2:	f7fe fba3 	bl	800c50c <__retarget_lock_release_recursive>
 800ddc6:	e7f3      	b.n	800ddb0 <_vfiprintf_r+0x44>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddcc:	2320      	movs	r3, #32
 800ddce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddd6:	2330      	movs	r3, #48	@ 0x30
 800ddd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df88 <_vfiprintf_r+0x21c>
 800dddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dde0:	f04f 0901 	mov.w	r9, #1
 800dde4:	4623      	mov	r3, r4
 800dde6:	469a      	mov	sl, r3
 800dde8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddec:	b10a      	cbz	r2, 800ddf2 <_vfiprintf_r+0x86>
 800ddee:	2a25      	cmp	r2, #37	@ 0x25
 800ddf0:	d1f9      	bne.n	800dde6 <_vfiprintf_r+0x7a>
 800ddf2:	ebba 0b04 	subs.w	fp, sl, r4
 800ddf6:	d00b      	beq.n	800de10 <_vfiprintf_r+0xa4>
 800ddf8:	465b      	mov	r3, fp
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7ff ffa2 	bl	800dd48 <__sfputs_r>
 800de04:	3001      	adds	r0, #1
 800de06:	f000 80a7 	beq.w	800df58 <_vfiprintf_r+0x1ec>
 800de0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de0c:	445a      	add	r2, fp
 800de0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800de10:	f89a 3000 	ldrb.w	r3, [sl]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 809f 	beq.w	800df58 <_vfiprintf_r+0x1ec>
 800de1a:	2300      	movs	r3, #0
 800de1c:	f04f 32ff 	mov.w	r2, #4294967295
 800de20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de24:	f10a 0a01 	add.w	sl, sl, #1
 800de28:	9304      	str	r3, [sp, #16]
 800de2a:	9307      	str	r3, [sp, #28]
 800de2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de30:	931a      	str	r3, [sp, #104]	@ 0x68
 800de32:	4654      	mov	r4, sl
 800de34:	2205      	movs	r2, #5
 800de36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de3a:	4853      	ldr	r0, [pc, #332]	@ (800df88 <_vfiprintf_r+0x21c>)
 800de3c:	f7f2 f9d0 	bl	80001e0 <memchr>
 800de40:	9a04      	ldr	r2, [sp, #16]
 800de42:	b9d8      	cbnz	r0, 800de7c <_vfiprintf_r+0x110>
 800de44:	06d1      	lsls	r1, r2, #27
 800de46:	bf44      	itt	mi
 800de48:	2320      	movmi	r3, #32
 800de4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de4e:	0713      	lsls	r3, r2, #28
 800de50:	bf44      	itt	mi
 800de52:	232b      	movmi	r3, #43	@ 0x2b
 800de54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de58:	f89a 3000 	ldrb.w	r3, [sl]
 800de5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800de5e:	d015      	beq.n	800de8c <_vfiprintf_r+0x120>
 800de60:	9a07      	ldr	r2, [sp, #28]
 800de62:	4654      	mov	r4, sl
 800de64:	2000      	movs	r0, #0
 800de66:	f04f 0c0a 	mov.w	ip, #10
 800de6a:	4621      	mov	r1, r4
 800de6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de70:	3b30      	subs	r3, #48	@ 0x30
 800de72:	2b09      	cmp	r3, #9
 800de74:	d94b      	bls.n	800df0e <_vfiprintf_r+0x1a2>
 800de76:	b1b0      	cbz	r0, 800dea6 <_vfiprintf_r+0x13a>
 800de78:	9207      	str	r2, [sp, #28]
 800de7a:	e014      	b.n	800dea6 <_vfiprintf_r+0x13a>
 800de7c:	eba0 0308 	sub.w	r3, r0, r8
 800de80:	fa09 f303 	lsl.w	r3, r9, r3
 800de84:	4313      	orrs	r3, r2
 800de86:	9304      	str	r3, [sp, #16]
 800de88:	46a2      	mov	sl, r4
 800de8a:	e7d2      	b.n	800de32 <_vfiprintf_r+0xc6>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	1d19      	adds	r1, r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	9103      	str	r1, [sp, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	bfbb      	ittet	lt
 800de98:	425b      	neglt	r3, r3
 800de9a:	f042 0202 	orrlt.w	r2, r2, #2
 800de9e:	9307      	strge	r3, [sp, #28]
 800dea0:	9307      	strlt	r3, [sp, #28]
 800dea2:	bfb8      	it	lt
 800dea4:	9204      	strlt	r2, [sp, #16]
 800dea6:	7823      	ldrb	r3, [r4, #0]
 800dea8:	2b2e      	cmp	r3, #46	@ 0x2e
 800deaa:	d10a      	bne.n	800dec2 <_vfiprintf_r+0x156>
 800deac:	7863      	ldrb	r3, [r4, #1]
 800deae:	2b2a      	cmp	r3, #42	@ 0x2a
 800deb0:	d132      	bne.n	800df18 <_vfiprintf_r+0x1ac>
 800deb2:	9b03      	ldr	r3, [sp, #12]
 800deb4:	1d1a      	adds	r2, r3, #4
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	9203      	str	r2, [sp, #12]
 800deba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800debe:	3402      	adds	r4, #2
 800dec0:	9305      	str	r3, [sp, #20]
 800dec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df98 <_vfiprintf_r+0x22c>
 800dec6:	7821      	ldrb	r1, [r4, #0]
 800dec8:	2203      	movs	r2, #3
 800deca:	4650      	mov	r0, sl
 800decc:	f7f2 f988 	bl	80001e0 <memchr>
 800ded0:	b138      	cbz	r0, 800dee2 <_vfiprintf_r+0x176>
 800ded2:	9b04      	ldr	r3, [sp, #16]
 800ded4:	eba0 000a 	sub.w	r0, r0, sl
 800ded8:	2240      	movs	r2, #64	@ 0x40
 800deda:	4082      	lsls	r2, r0
 800dedc:	4313      	orrs	r3, r2
 800dede:	3401      	adds	r4, #1
 800dee0:	9304      	str	r3, [sp, #16]
 800dee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee6:	4829      	ldr	r0, [pc, #164]	@ (800df8c <_vfiprintf_r+0x220>)
 800dee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800deec:	2206      	movs	r2, #6
 800deee:	f7f2 f977 	bl	80001e0 <memchr>
 800def2:	2800      	cmp	r0, #0
 800def4:	d03f      	beq.n	800df76 <_vfiprintf_r+0x20a>
 800def6:	4b26      	ldr	r3, [pc, #152]	@ (800df90 <_vfiprintf_r+0x224>)
 800def8:	bb1b      	cbnz	r3, 800df42 <_vfiprintf_r+0x1d6>
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	3307      	adds	r3, #7
 800defe:	f023 0307 	bic.w	r3, r3, #7
 800df02:	3308      	adds	r3, #8
 800df04:	9303      	str	r3, [sp, #12]
 800df06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df08:	443b      	add	r3, r7
 800df0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df0c:	e76a      	b.n	800dde4 <_vfiprintf_r+0x78>
 800df0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df12:	460c      	mov	r4, r1
 800df14:	2001      	movs	r0, #1
 800df16:	e7a8      	b.n	800de6a <_vfiprintf_r+0xfe>
 800df18:	2300      	movs	r3, #0
 800df1a:	3401      	adds	r4, #1
 800df1c:	9305      	str	r3, [sp, #20]
 800df1e:	4619      	mov	r1, r3
 800df20:	f04f 0c0a 	mov.w	ip, #10
 800df24:	4620      	mov	r0, r4
 800df26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df2a:	3a30      	subs	r2, #48	@ 0x30
 800df2c:	2a09      	cmp	r2, #9
 800df2e:	d903      	bls.n	800df38 <_vfiprintf_r+0x1cc>
 800df30:	2b00      	cmp	r3, #0
 800df32:	d0c6      	beq.n	800dec2 <_vfiprintf_r+0x156>
 800df34:	9105      	str	r1, [sp, #20]
 800df36:	e7c4      	b.n	800dec2 <_vfiprintf_r+0x156>
 800df38:	fb0c 2101 	mla	r1, ip, r1, r2
 800df3c:	4604      	mov	r4, r0
 800df3e:	2301      	movs	r3, #1
 800df40:	e7f0      	b.n	800df24 <_vfiprintf_r+0x1b8>
 800df42:	ab03      	add	r3, sp, #12
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	462a      	mov	r2, r5
 800df48:	4b12      	ldr	r3, [pc, #72]	@ (800df94 <_vfiprintf_r+0x228>)
 800df4a:	a904      	add	r1, sp, #16
 800df4c:	4630      	mov	r0, r6
 800df4e:	f7fd fda1 	bl	800ba94 <_printf_float>
 800df52:	4607      	mov	r7, r0
 800df54:	1c78      	adds	r0, r7, #1
 800df56:	d1d6      	bne.n	800df06 <_vfiprintf_r+0x19a>
 800df58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df5a:	07d9      	lsls	r1, r3, #31
 800df5c:	d405      	bmi.n	800df6a <_vfiprintf_r+0x1fe>
 800df5e:	89ab      	ldrh	r3, [r5, #12]
 800df60:	059a      	lsls	r2, r3, #22
 800df62:	d402      	bmi.n	800df6a <_vfiprintf_r+0x1fe>
 800df64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df66:	f7fe fad1 	bl	800c50c <__retarget_lock_release_recursive>
 800df6a:	89ab      	ldrh	r3, [r5, #12]
 800df6c:	065b      	lsls	r3, r3, #25
 800df6e:	f53f af1f 	bmi.w	800ddb0 <_vfiprintf_r+0x44>
 800df72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df74:	e71e      	b.n	800ddb4 <_vfiprintf_r+0x48>
 800df76:	ab03      	add	r3, sp, #12
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	462a      	mov	r2, r5
 800df7c:	4b05      	ldr	r3, [pc, #20]	@ (800df94 <_vfiprintf_r+0x228>)
 800df7e:	a904      	add	r1, sp, #16
 800df80:	4630      	mov	r0, r6
 800df82:	f7fe f81f 	bl	800bfc4 <_printf_i>
 800df86:	e7e4      	b.n	800df52 <_vfiprintf_r+0x1e6>
 800df88:	0800e647 	.word	0x0800e647
 800df8c:	0800e651 	.word	0x0800e651
 800df90:	0800ba95 	.word	0x0800ba95
 800df94:	0800dd49 	.word	0x0800dd49
 800df98:	0800e64d 	.word	0x0800e64d

0800df9c <__swbuf_r>:
 800df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9e:	460e      	mov	r6, r1
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	b118      	cbz	r0, 800dfae <__swbuf_r+0x12>
 800dfa6:	6a03      	ldr	r3, [r0, #32]
 800dfa8:	b90b      	cbnz	r3, 800dfae <__swbuf_r+0x12>
 800dfaa:	f7fe f9b7 	bl	800c31c <__sinit>
 800dfae:	69a3      	ldr	r3, [r4, #24]
 800dfb0:	60a3      	str	r3, [r4, #8]
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	071a      	lsls	r2, r3, #28
 800dfb6:	d501      	bpl.n	800dfbc <__swbuf_r+0x20>
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	b943      	cbnz	r3, 800dfce <__swbuf_r+0x32>
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f000 f82a 	bl	800e018 <__swsetup_r>
 800dfc4:	b118      	cbz	r0, 800dfce <__swbuf_r+0x32>
 800dfc6:	f04f 37ff 	mov.w	r7, #4294967295
 800dfca:	4638      	mov	r0, r7
 800dfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	6922      	ldr	r2, [r4, #16]
 800dfd2:	1a98      	subs	r0, r3, r2
 800dfd4:	6963      	ldr	r3, [r4, #20]
 800dfd6:	b2f6      	uxtb	r6, r6
 800dfd8:	4283      	cmp	r3, r0
 800dfda:	4637      	mov	r7, r6
 800dfdc:	dc05      	bgt.n	800dfea <__swbuf_r+0x4e>
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	f7ff fdf7 	bl	800dbd4 <_fflush_r>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d1ed      	bne.n	800dfc6 <__swbuf_r+0x2a>
 800dfea:	68a3      	ldr	r3, [r4, #8]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	60a3      	str	r3, [r4, #8]
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	6022      	str	r2, [r4, #0]
 800dff6:	701e      	strb	r6, [r3, #0]
 800dff8:	6962      	ldr	r2, [r4, #20]
 800dffa:	1c43      	adds	r3, r0, #1
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d004      	beq.n	800e00a <__swbuf_r+0x6e>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	07db      	lsls	r3, r3, #31
 800e004:	d5e1      	bpl.n	800dfca <__swbuf_r+0x2e>
 800e006:	2e0a      	cmp	r6, #10
 800e008:	d1df      	bne.n	800dfca <__swbuf_r+0x2e>
 800e00a:	4621      	mov	r1, r4
 800e00c:	4628      	mov	r0, r5
 800e00e:	f7ff fde1 	bl	800dbd4 <_fflush_r>
 800e012:	2800      	cmp	r0, #0
 800e014:	d0d9      	beq.n	800dfca <__swbuf_r+0x2e>
 800e016:	e7d6      	b.n	800dfc6 <__swbuf_r+0x2a>

0800e018 <__swsetup_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4b29      	ldr	r3, [pc, #164]	@ (800e0c0 <__swsetup_r+0xa8>)
 800e01c:	4605      	mov	r5, r0
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	460c      	mov	r4, r1
 800e022:	b118      	cbz	r0, 800e02c <__swsetup_r+0x14>
 800e024:	6a03      	ldr	r3, [r0, #32]
 800e026:	b90b      	cbnz	r3, 800e02c <__swsetup_r+0x14>
 800e028:	f7fe f978 	bl	800c31c <__sinit>
 800e02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e030:	0719      	lsls	r1, r3, #28
 800e032:	d422      	bmi.n	800e07a <__swsetup_r+0x62>
 800e034:	06da      	lsls	r2, r3, #27
 800e036:	d407      	bmi.n	800e048 <__swsetup_r+0x30>
 800e038:	2209      	movs	r2, #9
 800e03a:	602a      	str	r2, [r5, #0]
 800e03c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e040:	81a3      	strh	r3, [r4, #12]
 800e042:	f04f 30ff 	mov.w	r0, #4294967295
 800e046:	e033      	b.n	800e0b0 <__swsetup_r+0x98>
 800e048:	0758      	lsls	r0, r3, #29
 800e04a:	d512      	bpl.n	800e072 <__swsetup_r+0x5a>
 800e04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e04e:	b141      	cbz	r1, 800e062 <__swsetup_r+0x4a>
 800e050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e054:	4299      	cmp	r1, r3
 800e056:	d002      	beq.n	800e05e <__swsetup_r+0x46>
 800e058:	4628      	mov	r0, r5
 800e05a:	f7ff f8b5 	bl	800d1c8 <_free_r>
 800e05e:	2300      	movs	r3, #0
 800e060:	6363      	str	r3, [r4, #52]	@ 0x34
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	2300      	movs	r3, #0
 800e06c:	6063      	str	r3, [r4, #4]
 800e06e:	6923      	ldr	r3, [r4, #16]
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	f043 0308 	orr.w	r3, r3, #8
 800e078:	81a3      	strh	r3, [r4, #12]
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	b94b      	cbnz	r3, 800e092 <__swsetup_r+0x7a>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e088:	d003      	beq.n	800e092 <__swsetup_r+0x7a>
 800e08a:	4621      	mov	r1, r4
 800e08c:	4628      	mov	r0, r5
 800e08e:	f000 f883 	bl	800e198 <__smakebuf_r>
 800e092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e096:	f013 0201 	ands.w	r2, r3, #1
 800e09a:	d00a      	beq.n	800e0b2 <__swsetup_r+0x9a>
 800e09c:	2200      	movs	r2, #0
 800e09e:	60a2      	str	r2, [r4, #8]
 800e0a0:	6962      	ldr	r2, [r4, #20]
 800e0a2:	4252      	negs	r2, r2
 800e0a4:	61a2      	str	r2, [r4, #24]
 800e0a6:	6922      	ldr	r2, [r4, #16]
 800e0a8:	b942      	cbnz	r2, 800e0bc <__swsetup_r+0xa4>
 800e0aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0ae:	d1c5      	bne.n	800e03c <__swsetup_r+0x24>
 800e0b0:	bd38      	pop	{r3, r4, r5, pc}
 800e0b2:	0799      	lsls	r1, r3, #30
 800e0b4:	bf58      	it	pl
 800e0b6:	6962      	ldrpl	r2, [r4, #20]
 800e0b8:	60a2      	str	r2, [r4, #8]
 800e0ba:	e7f4      	b.n	800e0a6 <__swsetup_r+0x8e>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	e7f7      	b.n	800e0b0 <__swsetup_r+0x98>
 800e0c0:	20000108 	.word	0x20000108

0800e0c4 <_raise_r>:
 800e0c4:	291f      	cmp	r1, #31
 800e0c6:	b538      	push	{r3, r4, r5, lr}
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	d904      	bls.n	800e0d8 <_raise_r+0x14>
 800e0ce:	2316      	movs	r3, #22
 800e0d0:	6003      	str	r3, [r0, #0]
 800e0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e0da:	b112      	cbz	r2, 800e0e2 <_raise_r+0x1e>
 800e0dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0e0:	b94b      	cbnz	r3, 800e0f6 <_raise_r+0x32>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 f830 	bl	800e148 <_getpid_r>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0f2:	f000 b817 	b.w	800e124 <_kill_r>
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d00a      	beq.n	800e110 <_raise_r+0x4c>
 800e0fa:	1c59      	adds	r1, r3, #1
 800e0fc:	d103      	bne.n	800e106 <_raise_r+0x42>
 800e0fe:	2316      	movs	r3, #22
 800e100:	6003      	str	r3, [r0, #0]
 800e102:	2001      	movs	r0, #1
 800e104:	e7e7      	b.n	800e0d6 <_raise_r+0x12>
 800e106:	2100      	movs	r1, #0
 800e108:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e10c:	4620      	mov	r0, r4
 800e10e:	4798      	blx	r3
 800e110:	2000      	movs	r0, #0
 800e112:	e7e0      	b.n	800e0d6 <_raise_r+0x12>

0800e114 <raise>:
 800e114:	4b02      	ldr	r3, [pc, #8]	@ (800e120 <raise+0xc>)
 800e116:	4601      	mov	r1, r0
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	f7ff bfd3 	b.w	800e0c4 <_raise_r>
 800e11e:	bf00      	nop
 800e120:	20000108 	.word	0x20000108

0800e124 <_kill_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d07      	ldr	r5, [pc, #28]	@ (800e144 <_kill_r+0x20>)
 800e128:	2300      	movs	r3, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	4611      	mov	r1, r2
 800e130:	602b      	str	r3, [r5, #0]
 800e132:	f7f3 fde1 	bl	8001cf8 <_kill>
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	d102      	bne.n	800e140 <_kill_r+0x1c>
 800e13a:	682b      	ldr	r3, [r5, #0]
 800e13c:	b103      	cbz	r3, 800e140 <_kill_r+0x1c>
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	bd38      	pop	{r3, r4, r5, pc}
 800e142:	bf00      	nop
 800e144:	200021a4 	.word	0x200021a4

0800e148 <_getpid_r>:
 800e148:	f7f3 bdce 	b.w	8001ce8 <_getpid>

0800e14c <__swhatbuf_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	460c      	mov	r4, r1
 800e150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e154:	2900      	cmp	r1, #0
 800e156:	b096      	sub	sp, #88	@ 0x58
 800e158:	4615      	mov	r5, r2
 800e15a:	461e      	mov	r6, r3
 800e15c:	da0d      	bge.n	800e17a <__swhatbuf_r+0x2e>
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e164:	f04f 0100 	mov.w	r1, #0
 800e168:	bf14      	ite	ne
 800e16a:	2340      	movne	r3, #64	@ 0x40
 800e16c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e170:	2000      	movs	r0, #0
 800e172:	6031      	str	r1, [r6, #0]
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	b016      	add	sp, #88	@ 0x58
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	466a      	mov	r2, sp
 800e17c:	f000 f848 	bl	800e210 <_fstat_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	dbec      	blt.n	800e15e <__swhatbuf_r+0x12>
 800e184:	9901      	ldr	r1, [sp, #4]
 800e186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e18a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e18e:	4259      	negs	r1, r3
 800e190:	4159      	adcs	r1, r3
 800e192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e196:	e7eb      	b.n	800e170 <__swhatbuf_r+0x24>

0800e198 <__smakebuf_r>:
 800e198:	898b      	ldrh	r3, [r1, #12]
 800e19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e19c:	079d      	lsls	r5, r3, #30
 800e19e:	4606      	mov	r6, r0
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	d507      	bpl.n	800e1b4 <__smakebuf_r+0x1c>
 800e1a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	6163      	str	r3, [r4, #20]
 800e1b0:	b003      	add	sp, #12
 800e1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b4:	ab01      	add	r3, sp, #4
 800e1b6:	466a      	mov	r2, sp
 800e1b8:	f7ff ffc8 	bl	800e14c <__swhatbuf_r>
 800e1bc:	9f00      	ldr	r7, [sp, #0]
 800e1be:	4605      	mov	r5, r0
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f7ff f874 	bl	800d2b0 <_malloc_r>
 800e1c8:	b948      	cbnz	r0, 800e1de <__smakebuf_r+0x46>
 800e1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ce:	059a      	lsls	r2, r3, #22
 800e1d0:	d4ee      	bmi.n	800e1b0 <__smakebuf_r+0x18>
 800e1d2:	f023 0303 	bic.w	r3, r3, #3
 800e1d6:	f043 0302 	orr.w	r3, r3, #2
 800e1da:	81a3      	strh	r3, [r4, #12]
 800e1dc:	e7e2      	b.n	800e1a4 <__smakebuf_r+0xc>
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	6020      	str	r0, [r4, #0]
 800e1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1e6:	81a3      	strh	r3, [r4, #12]
 800e1e8:	9b01      	ldr	r3, [sp, #4]
 800e1ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e1ee:	b15b      	cbz	r3, 800e208 <__smakebuf_r+0x70>
 800e1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	f000 f81d 	bl	800e234 <_isatty_r>
 800e1fa:	b128      	cbz	r0, 800e208 <__smakebuf_r+0x70>
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	f023 0303 	bic.w	r3, r3, #3
 800e202:	f043 0301 	orr.w	r3, r3, #1
 800e206:	81a3      	strh	r3, [r4, #12]
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	431d      	orrs	r5, r3
 800e20c:	81a5      	strh	r5, [r4, #12]
 800e20e:	e7cf      	b.n	800e1b0 <__smakebuf_r+0x18>

0800e210 <_fstat_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	4d07      	ldr	r5, [pc, #28]	@ (800e230 <_fstat_r+0x20>)
 800e214:	2300      	movs	r3, #0
 800e216:	4604      	mov	r4, r0
 800e218:	4608      	mov	r0, r1
 800e21a:	4611      	mov	r1, r2
 800e21c:	602b      	str	r3, [r5, #0]
 800e21e:	f7f3 fdcb 	bl	8001db8 <_fstat>
 800e222:	1c43      	adds	r3, r0, #1
 800e224:	d102      	bne.n	800e22c <_fstat_r+0x1c>
 800e226:	682b      	ldr	r3, [r5, #0]
 800e228:	b103      	cbz	r3, 800e22c <_fstat_r+0x1c>
 800e22a:	6023      	str	r3, [r4, #0]
 800e22c:	bd38      	pop	{r3, r4, r5, pc}
 800e22e:	bf00      	nop
 800e230:	200021a4 	.word	0x200021a4

0800e234 <_isatty_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4d06      	ldr	r5, [pc, #24]	@ (800e250 <_isatty_r+0x1c>)
 800e238:	2300      	movs	r3, #0
 800e23a:	4604      	mov	r4, r0
 800e23c:	4608      	mov	r0, r1
 800e23e:	602b      	str	r3, [r5, #0]
 800e240:	f7f3 fdca 	bl	8001dd8 <_isatty>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_isatty_r+0x1a>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_isatty_r+0x1a>
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	200021a4 	.word	0x200021a4

0800e254 <_init>:
 800e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e256:	bf00      	nop
 800e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e25a:	bc08      	pop	{r3}
 800e25c:	469e      	mov	lr, r3
 800e25e:	4770      	bx	lr

0800e260 <_fini>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	bf00      	nop
 800e264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e266:	bc08      	pop	{r3}
 800e268:	469e      	mov	lr, r3
 800e26a:	4770      	bx	lr
